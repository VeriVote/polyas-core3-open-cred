\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 21:32:45 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 21:32:45 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols(java.util.ArrayList,java.util.ArrayList,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols(java.util.ArrayList,java.util.ArrayList,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "20360")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "vals_1,cols_0,record_3,self_45,exc_59,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "eqSymm" (formula "18") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,0"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "6"))
(rule "elementOfSingleton" (formula "18") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0"))
(rule "castedGetAny" (formula "8") (term "1,1,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
(rule "assignment" (formula "18") (term "1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "10") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1,0"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1,0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "eqSymm" (formula "10"))
(rule "castedGetAny" (formula "12") (term "0,0,1,0"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "10"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
(rule "true_left" (formula "13"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
(rule "true_left" (formula "13"))
(rule "commute_and" (formula "8") (term "0,0"))
(rule "commute_and" (formula "9") (term "0,0"))
(rule "commute_and" (formula "12") (term "1,0,0"))
(rule "commute_and" (formula "11") (term "0,0,0"))
(rule "commute_and" (formula "11") (term "1,0,0"))
(rule "commute_and" (formula "8") (term "0,0,1,0"))
(rule "commute_and" (formula "12") (term "0,0,0"))
(rule "commute_and_2" (formula "8") (term "0,1,0"))
(rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_addInputCols,savedHeapBefore_addInputCols,_cols_0Before_addInputCols,_record_3Before_addInputCols,_vals_1Before_addInputCols"))
 (builtin "One Step Simplification" (formula "18"))
(rule "variableDeclarationAssign" (formula "18") (term "1"))
(rule "variableDeclaration" (formula "18") (term "1") (newnames "it"))
(rule "shift_paren_and" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "11") (term "0,0,0"))
(rule "shift_paren_and" (formula "12") (term "0,0"))
(rule "commute_and_2" (formula "12") (term "0,0,0"))
 (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_iterator,result_49,exc_60,heapAfter_iterator,anon_heap_iterator") (contract "java.util.ArrayList[java.util.Collection::iterator()].JML normal_behavior operation contract.0"))
(branch "Post (iterator)"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "19"))
   (rule "notLeft" (formula "22"))
   (rule "notLeft" (formula "19"))
   (rule "replace_known_right" (formula "16") (term "0,1") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "22")))
   (rule "assignment" (formula "28") (term "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=java_util_Iterator_index_0"))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "17"))
   (rule "hideAuxiliaryEq" (formula "17"))
   (rule "pullOutSelect" (formula "18") (term "1") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
   (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
   (rule "applyEqReverse" (formula "19") (term "1") (ifseqformula "18"))
   (rule "hideAuxiliaryEq" (formula "18"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "20"))
   (rule "true_left" (formula "20"))
    (builtin "Loop Invariant" (formula "27") (newnames "variant,b_0,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "27"))
      (branch
         (rule "andRight" (formula "27"))
         (branch
            (rule "andRight" (formula "27"))
            (branch
               (rule "andRight" (formula "27"))
               (branch
                  (rule "andRight" (formula "27"))
                  (branch
                     (rule "andRight" (formula "27"))
                     (branch
                        (rule "andRight" (formula "27"))
                        (branch
                           (rule "andRight" (formula "27"))
                           (branch
                              (rule "andRight" (formula "27"))
                              (branch
                                 (rule "andRight" (formula "27"))
                                 (branch
                                    (rule "andRight" (formula "27"))
                                    (branch
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "0,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "0,0,1,1,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,0,1,1,0,1,0"))
                                       (rule "allRight" (formula "27") (inst "sk=j_0"))
                                       (rule "impRight" (formula "27"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "castedGetAny" (formula "29") (term "0,1,0"))
                                       (rule "castedGetAny" (formula "29") (term "1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "2"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "2") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "29") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "pullOutSelect" (formula "29") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                       (rule "applyEq" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                       (rule "applyEqReverse" (formula "30") (term "0,0,1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "30") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                       (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                       (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "nnf_ex2all" (formula "29"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                       (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or_2" (formula "1") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or" (formula "1") (term "0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or" (formula "14") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_and_2" (formula "11") (term "0,1,0"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
                                       (rule "andLeft" (formula "21"))
                                       (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
                                       (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "lenNonNegative" (formula "13") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "13"))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                                       (rule "lenNonNegative" (formula "14") (term "1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14"))
                                       (rule "ex_pull_out3" (formula "11") (term "0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                       (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                       (rule "lenNonNegative" (formula "3") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "3"))
                                       (rule "commute_and" (formula "12") (term "0,0,0"))
                                       (rule "commute_and_2" (formula "12") (term "0,0"))
                                       (rule "allLeft" (formula "13") (inst "t=j_0"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "13") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                       (rule "leq_literals" (formula "13") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "notLeft" (formula "13"))
                                       (rule "allLeft" (formula "12") (inst "t=j_0"))
                                       (rule "exLeft" (formula "12") (inst "sk=i_0"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "eqSymm" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "13") (term "0,0"))
                                       (rule "polySimp_addComm1" (formula "13") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0"))
                                       (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "13") (term "1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "13") (term "0,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "12") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
                                       (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "13") (term "0,0,1"))
                                       (rule "leq_literals" (formula "13") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                       (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "14") (term "0,0,1"))
                                       (rule "leq_literals" (formula "14") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "13") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "4"))
                                       (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                       (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                       (rule "leq_literals" (formula "12") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "allLeft" (formula "1") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "15"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "13"))
                                       (rule "qeq_literals" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "inEqSimp_homoInEq1" (formula "14"))
                                       (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
                                       (rule "add_literals" (formula "14") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0"))
                                       (rule "add_literals" (formula "14") (term "0"))
                                       (rule "leq_literals" (formula "14"))
                                       (rule "closeFalse" (formula "14"))
                                    )
                                    (branch
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "0,1,1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,1,1,0,0"))
                                       (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "0,0,0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,0,0,0,1,0"))
                                       (rule "allRight" (formula "27") (inst "sk=i_0"))
                                       (rule "impRight" (formula "27"))
                                       (rule "notRight" (formula "28"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "castedGetAny" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                       (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                       (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "11") (term "0"))
                                       (rule "nnf_imp2or" (formula "15") (term "0"))
                                       (rule "nnf_imp2or" (formula "14") (term "0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                       (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                       (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                       (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                       (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "15") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                       (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                       (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                       (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                       (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or" (formula "11") (term "0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0,0"))
                                       (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0"))
                                       (rule "commute_or" (formula "14") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0,0"))
                                       (rule "commute_or_2" (formula "14") (term "0"))
                                       (rule "commute_and_2" (formula "11") (term "0,1,0"))
                                       (rule "lenNonNegative" (formula "13") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "13"))
                                       (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
                                       (rule "lenNonNegative" (formula "14") (term "1"))
                                       (rule "inEqSimp_commuteLeq" (formula "14"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                       (rule "andLeft" (formula "22"))
                                       (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                       (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                                        (builtin "One Step Simplification" (formula "22"))
                                       (rule "true_left" (formula "22"))
                                       (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                       (rule "castedGetAny" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "ex_pull_out3" (formula "11") (term "0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                       (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "12") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "12") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "3"))
                                       (rule "andLeft" (formula "12"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                       (rule "add_literals" (formula "12") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "12") (term "1,0"))
                                       (rule "add_zero_right" (formula "12") (term "0"))
                                       (rule "leq_literals" (formula "12"))
                                       (rule "closeFalse" (formula "12"))
                                    )
                                 )
                                 (branch
                                     (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "26")))
                                    (rule "closeTrue" (formula "27"))
                                 )
                              )
                              (branch
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                                 (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                                 (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "nnf_imp2or" (formula "9") (term "0"))
                                 (rule "nnf_imp2or" (formula "8") (term "0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                                 (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "8") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                                 (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "27") (inst "i=i") (inst "i_0=i_0"))
                                 (rule "expand_inInt" (formula "27") (term "1,0,0,1,0"))
                                 (rule "expand_inInt" (formula "27") (term "1,0,0,1"))
                                 (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0,1,0"))
                                 (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "27") (term "1,0,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "27") (term "0,1,1,0,0,1"))
                                 (rule "eqSymm" (formula "27") (term "0,0"))
                                 (rule "castedGetAny" (formula "27") (term "0,0,1,0,1"))
                                 (rule "castedGetAny" (formula "27") (term "0,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "27") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "27") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,1,0,0,0,1,0"))
                                 (rule "pullOutSelect" (formula "27") (term "0,1,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                 (rule "applyEq" (formula "28") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "27") (term "0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                                 (rule "applyEq" (formula "28") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "28") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "7")))
                                 (rule "applyEqReverse" (formula "28") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "28") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "applyEq" (formula "27") (term "1,1,1,0,0,0,1") (ifseqformula "10"))
                                 (rule "nnf_imp2or" (formula "27") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "27") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0,1"))
                                 (rule "nnf_notAnd" (formula "27") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "27") (term "0,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "0,0,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,0,0,0,1"))
                                 (rule "add_zero_right" (formula "27") (term "0,0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "27") (term "1,0,0,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "0,1,0,0,1,0,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "27") (term "0,0,1,0,0,0,1"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,0,1"))
                                 (rule "add_zero_left" (formula "27") (term "0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1"))
                                 (rule "nnf_notAnd" (formula "27") (term "1,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "27") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "27") (term "0,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,0,1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "27") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,0,0,1,1,0,0,1"))
                                 (rule "add_literals" (formula "27") (term "0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "27") (term "1,1,1,0,0,1"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "commute_or" (formula "8") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_and" (formula "8") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "9") (term "0,0"))
                                 (rule "commute_or_2" (formula "9") (term "0"))
                                 (rule "commute_or_2" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0"))
                                 (rule "commute_or" (formula "12") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "andRight" (formula "27"))
                                 (branch
                                    (rule "allRight" (formula "27") (inst "sk=i_0_0"))
                                    (rule "orRight" (formula "27"))
                                    (rule "notRight" (formula "28"))
                                    (rule "orRight" (formula "28"))
                                    (rule "orRight" (formula "29"))
                                    (rule "orRight" (formula "28"))
                                    (rule "inEqSimp_leqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "30"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "commute_and_2" (formula "12") (term "0,1,0"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "22") (inst "iv=iv"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
                                    (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0") (ifseqformula "24"))
                                    (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "23"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "true_left" (formula "22"))
                                    (rule "lenNonNegative" (formula "14") (term "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14"))
                                    (rule "lenNonNegative" (formula "15") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                    (rule "ex_pull_out3" (formula "12") (term "0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                    (rule "allLeft" (formula "16") (inst "t=i_0_0"))
                                    (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "16") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "16") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                    (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "16") (term "0,0,1"))
                                    (rule "leq_literals" (formula "16") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "16"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch
                                    (rule "allRight" (formula "27") (inst "sk=i_0"))
                                    (rule "orRight" (formula "27"))
                                    (rule "notRight" (formula "28"))
                                    (rule "orRight" (formula "28"))
                                    (rule "orRight" (formula "29"))
                                    (rule "orRight" (formula "28"))
                                    (rule "inEqSimp_leqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_leqRight" (formula "30"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "mul_literals" (formula "4") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                    (rule "mul_literals" (formula "3") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                                    (rule "leq_literals" (formula "4") (term "0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "true_left" (formula "4"))
                                    (rule "commute_and_2" (formula "12") (term "0,1,0"))
                                    (rule "lenNonNegative" (formula "14") (term "1"))
                                    (rule "inEqSimp_commuteLeq" (formula "14"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "23") (inst "iv=iv"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
                                    (rule "applyEq" (formula "24") (term "0,0,1,0,0,1,0,0") (ifseqformula "25"))
                                    (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "25"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "applyEq" (formula "23") (term "0,0,1,0") (ifseqformula "24"))
                                     (builtin "One Step Simplification" (formula "23"))
                                    (rule "true_left" (formula "23"))
                                    (rule "lenNonNegative" (formula "15") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "0") (ifseqformula "16"))
                                    (rule "ex_pull_out3" (formula "12") (term "0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                    (rule "allLeft" (formula "17") (inst "t=i_0"))
                                    (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "17") (term "1,0") (ifseqformula "3"))
                                    (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                    (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                    (rule "leq_literals" (formula "17") (term "0,1"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "17"))
                                    (rule "qeq_literals" (formula "2") (term "0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "closeFalse" (formula "2"))
                                 )
                              )
                           )
                           (branch
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                              (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                              (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "nnf_imp2or" (formula "9") (term "0"))
                              (rule "nnf_imp2or" (formula "8") (term "0"))
                              (rule "nnf_imp2or" (formula "12") (term "0"))
                              (rule "nnf_imp2or" (formula "11") (term "0"))
                              (rule "nnf_notAnd" (formula "9") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                              (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                              (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "8") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                              (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                              (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                              (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                              (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "27"))
                              (rule "closeTrue" (formula "27"))
                           )
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                           (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "8") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "8") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                           (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                           (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "27"))
                           (rule "closeTrue" (formula "27"))
                        )
                     )
                     (branch
                        (rule "andRight" (formula "27"))
                        (branch
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "27") (term "1"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "18"))
                           (rule "times_zero_2" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "qeq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "27") (term "0"))
                           (rule "replaceKnownSelect_taclet0_3" (formula "27") (term "0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,1"))
                           (rule "inEqSimp_leqRight" (formula "27"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                           (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "18"))
                           (rule "add_zero_right" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                           (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                           (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "nnf_imp2or" (formula "9") (term "0"))
                           (rule "nnf_imp2or" (formula "10") (term "0"))
                           (rule "nnf_imp2or" (formula "13") (term "0"))
                           (rule "nnf_imp2or" (formula "12") (term "0"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                           (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                           (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                           (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                           (rule "commute_or_2" (formula "10") (term "0"))
                           (rule "commute_or" (formula "9") (term "0,0"))
                           (rule "commute_or_2" (formula "13") (term "0"))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "commute_or" (formula "10") (term "0,0"))
                           (rule "commute_or_2" (formula "10") (term "0"))
                           (rule "commute_or_2" (formula "13") (term "0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0"))
                           (rule "commute_and" (formula "9") (term "0,0,1,0"))
                           (rule "commute_or" (formula "13") (term "0,0,0"))
                           (rule "commute_or_2" (formula "13") (term "0,0"))
                           (rule "commute_or_2" (formula "13") (term "0"))
                           (rule "commute_or" (formula "12") (term "0,0,0"))
                           (rule "commute_or_2" (formula "12") (term "0,0"))
                           (rule "commute_or_2" (formula "12") (term "0"))
                           (rule "commute_and_2" (formula "9") (term "0,1,0"))
                           (rule "lenNonNegative" (formula "11") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "11"))
                           (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
                           (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0,0,1,0,0") (ifseqformula "22"))
                           (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "lenNonNegative" (formula "12") (term "1"))
                           (rule "inEqSimp_commuteLeq" (formula "12"))
                           (rule "ex_pull_out3" (formula "9") (term "0"))
                           (rule "cnf_rightDist" (formula "9") (term "0,0"))
                           (rule "shift_paren_or" (formula "9") (term "1,0,0"))
                           (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                           (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
                           (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
                           (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
                           (rule "lenNonNegative" (formula "1") (term "0"))
                           (rule "inEqSimp_commuteLeq" (formula "1"))
                           (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "2") (term "0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
                  (branch
                     (rule "andRight" (formula "27"))
                     (branch
                        (rule "andRight" (formula "27"))
                        (branch
                            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "21")))
                           (rule "closeTrue" (formula "27"))
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "22")))
                           (rule "closeTrue" (formula "27"))
                        )
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "24")))
                        (rule "closeTrue" (formula "27"))
                     )
                  )
               )
               (branch
                  (rule "andRight" (formula "27"))
                  (branch
                      (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "21")))
                     (rule "closeTrue" (formula "27"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "closeTrue" (formula "27"))
                  )
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "27"))
               (rule "replaceKnownSelect_taclet0_2" (formula "27") (term "1"))
               (rule "replaceKnownSelect_taclet0_3" (formula "27") (term "0"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "closeTrue" (formula "27"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "8") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "8") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "27"))
            (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "1,0"))
            (rule "replaceKnownSelect_taclet0_0" (formula "27") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "27") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "27") (term "0,1"))
            (rule "replaceKnownSelect_taclet0_3" (formula "27") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "27") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "1"))
            (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "17"))
            (rule "qeq_literals" (formula "27") (term "0"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_or" (formula "9") (term "0,0"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "commute_and" (formula "9") (term "0,0,1,0"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_or_2" (formula "13") (term "0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0"))
            (rule "commute_or" (formula "13") (term "0,0,0"))
            (rule "commute_or_2" (formula "13") (term "0,0"))
            (rule "commute_or_2" (formula "13") (term "0"))
            (rule "commute_or" (formula "12") (term "0,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "commute_and_2" (formula "9") (term "0,1,0"))
            (rule "lenNonNegative" (formula "11") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "11"))
            (rule "lenNonNegative" (formula "12") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
            (rule "andLeft" (formula "20"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "ex_pull_out3" (formula "9") (term "0"))
            (rule "cnf_rightDist" (formula "9") (term "0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0"))
            (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
            (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "1,0,0,0"))
            (rule "commute_or" (formula "9") (term "0,0,0,0,0"))
            (rule "commute_and" (formula "9") (term "0,0,0"))
            (rule "commute_and_2" (formula "9") (term "0,0"))
            (rule "lenNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "27"))
         (rule "wellFormedAnonEQ" (formula "27") (ifseqformula "14"))
         (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "27"))
      )
   )
   (branch "Body Preserves Invariant"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "26")) (ifInst ""  (formula "23")))
      (rule "impRight" (formula "29"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "eqSymm" (formula "38") (term "1,0,0,1,0,1,1,0,1"))
      (rule "eqSymm" (formula "38") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "eqSymm" (formula "22") (term "1,0,1,0"))
      (rule "polySimp_elimSub" (formula "38") (term "0,1,1,1,0"))
      (rule "polySimp_elimSub" (formula "38") (term "0,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "38") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "38") (term "0,1,1,1,0,1"))
      (rule "castedGetAny" (formula "38") (term "0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "23") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "38") (term "0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "38") (term "1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "castedGetAny" (formula "22") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "22") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "38") (term "0,1,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "38") (term "1,1,0,0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "27"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
      (rule "pullOutSelect" (formula "38") (term "0,0,0,1,1,1,0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "applyEq" (formula "29") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
      (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
      (rule "pullOutSelect" (formula "39") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Iterator_seq_0"))
      (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
      (rule "replaceKnownSelect_taclet0_3" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
      (rule "eqSymm" (formula "31"))
      (rule "applyEq" (formula "25") (term "0,0,0,1,0") (ifseqformula "31"))
      (rule "applyEq" (formula "24") (term "0,1,1,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "25") (term "0,1,1,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "24") (term "0,0,1,0,1,0") (ifseqformula "31"))
      (rule "simplifySelectOfAnon" (formula "31"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")))
      (rule "replaceKnownSelect_taclet0_2" (formula "31") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "31") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "31") (term "0,1,0,0") (ifseqformula "17"))
      (rule "replace_known_left" (formula "1") (term "1,0,1,0,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
      (rule "replace_known_left" (formula "31") (term "0,0,1,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "variableDeclarationAssign" (formula "3") (term "1"))
      (rule "variableDeclarationAssign" (formula "40") (term "1"))
      (rule "variableDeclaration" (formula "3") (term "1") (newnames "b_0_1"))
      (rule "variableDeclaration" (formula "40") (term "1") (newnames "exc_61"))
      (rule "assignment" (formula "40") (term "1"))
       (builtin "One Step Simplification" (formula "40"))
      (rule "variableDeclaration" (formula "40") (term "1") (newnames "thrownExc"))
      (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "20"))
      (rule "blockThrow" (formula "40") (term "1,0,0,1"))
      (rule "elementOfUnion" (formula "2") (term "0,0"))
      (rule "elementOfSingleton" (formula "2") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "applyEqReverse" (formula "40") (term "0,0,0,1,1,1,0,0") (ifseqformula "2"))
      (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "2"))
      (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "2"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "39") (term "0,1,0,1,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,0,1,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "30") (term "1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "elementOfUnion" (formula "38") (term "0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "38") (term "1,0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "38") (term "0,0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfUnion" (formula "29") (term "0,0"))
      (rule "elementOfSingleton" (formula "29") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "elementOfSingleton" (formula "29") (term "0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "eqSymm" (formula "29") (term "0,0"))
      (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "true_left" (formula "29"))
      (rule "pullOutSelect" (formula "22") (term "0,1,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "23") (term "0,1,1,0,1,0") (ifseqformula "22"))
      (rule "simplifySelectOfAnon" (formula "22"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "33")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "15"))
      (rule "replace_known_left" (formula "22") (term "0,0,1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "elementOfUnion" (formula "22") (term "0,0"))
      (rule "elementOfSingleton" (formula "22") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "elementOfSingleton" (formula "22") (term "0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "33")) (ifInst ""  (formula "7")))
      (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0,1,0") (ifseqformula "22"))
      (rule "applyEqReverse" (formula "23") (term "0,1,1,0,1,0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "boxToDiamond" (formula "1") (term "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "28"))
      (rule "replaceKnownSelect_taclet10_5" (formula "28") (term "0,1"))
      (rule "replaceKnownSelect_taclet10_5" (formula "28") (term "1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "28") (term "0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "28") (term "1,0"))
      (rule "replaceKnownSelect_taclet10_6" (formula "28") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "28") (term "0,1,1"))
      (rule "andLeft" (formula "28"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "25"))
      (rule "true_left" (formula "25"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "23") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet10_10" (formula "23") (term "0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "23") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet10_10" (formula "23") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet10_10" (formula "23") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "23") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "23") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "eqSymm" (formula "23"))
      (rule "castedGetAny" (formula "25") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "26") (term "0,0,0,1,0") (ifseqformula "25"))
      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "25"))
      (rule "simplifySelectOfAnon" (formula "25"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "23"))
      (rule "replace_known_left" (formula "25") (term "0,0,1,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "applyEq" (formula "21") (term "1,1,0,0,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "8") (term "1,0,0,0,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "10") (term "1") (ifseqformula "23"))
      (rule "elementOfUnion" (formula "25") (term "0,0"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "elementOfSingleton" (formula "25") (term "0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "26") (term "0,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "26") (term "0,1,1,0,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "8") (term "0,1,0,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "10") (term "0,1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "applyEqReverse" (formula "10") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "20") (term "0,1,1,0,0,1,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "23") (term "0,1,1,0,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "22") (term "0,1") (ifseqformula "24"))
      (rule "hideAuxiliaryEq" (formula "24"))
      (rule "eqSymm" (formula "22"))
      (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "8") (term "1,0,0,0,1,0") (ifseqformula "22"))
      (rule "applyEq" (formula "20") (term "1,1,0,0,1,0") (ifseqformula "22"))
      (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "22"))
      (rule "commute_and" (formula "20") (term "0,0"))
      (rule "commute_and" (formula "21") (term "0,0"))
      (rule "commute_and" (formula "23") (term "1,0,0"))
      (rule "commute_and" (formula "22") (term "1,0,0"))
      (rule "lenNonNegative" (formula "8") (term "1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "commute_and" (formula "24") (term "0,0,0"))
      (rule "commute_and" (formula "23") (term "0,0,0"))
      (rule "commute_and" (formula "21") (term "0,0,1,0"))
      (rule "commute_and_2" (formula "21") (term "0,1,0"))
      (rule "shift_paren_and" (formula "23") (term "0,0"))
      (rule "commute_and_2" (formula "23") (term "0,0,0"))
      (rule "shift_paren_and" (formula "22") (term "0,0"))
      (rule "commute_and_2" (formula "22") (term "0,0,0"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
      (rule "andLeft" (formula "18"))
      (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
      (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "ifUnfold" (formula "32") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "32") (term "1") (newnames "x"))
       (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_hasNext,result_50,exc_62") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "24"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "replaceKnownSelect_taclet10_5" (formula "24") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "24") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_6" (formula "24") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "24") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "assignment" (formula "27") (term "1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "26"))
         (rule "replaceKnownSelect_taclet10_5" (formula "26") (term "0,1"))
         (rule "replaceKnownSelect_taclet10_5" (formula "26") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "26") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "26") (term "1,0"))
         (rule "replaceKnownSelect_taclet10_6" (formula "26") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "26") (term "0,1,1"))
         (rule "andLeft" (formula "26"))
         (rule "inEqSimp_commuteLeq" (formula "27"))
         (rule "inEqSimp_commuteLeq" (formula "26"))
         (rule "methodCallEmpty" (formula "26") (term "1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "emptyModality" (formula "26") (term "1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "notRight" (formula "26"))
         (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "26"))
          (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_hasNext_0,result_51,exc_63") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "27"))
            (rule "replaceKnownSelect_taclet10_5" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_6" (formula "27") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "27") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "assignment" (formula "37") (term "1"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "28"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "29"))
            (rule "replaceKnownSelect_taclet10_5" (formula "29") (term "0,1"))
            (rule "replaceKnownSelect_taclet10_5" (formula "29") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "29") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "29") (term "1,0"))
            (rule "replaceKnownSelect_taclet10_6" (formula "29") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "29") (term "0,1,1"))
            (rule "andLeft" (formula "29"))
            (rule "inEqSimp_commuteLeq" (formula "30"))
            (rule "inEqSimp_commuteLeq" (formula "29"))
            (rule "lenNonNegative" (formula "22") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "22"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
            (rule "lenNonNegative" (formula "23") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "23"))
            (rule "ifSplit" (formula "37"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "38"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "methodCallUnfoldArguments" (formula "37") (term "1"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "var"))
               (rule "assignment" (formula "37") (term "1"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "var_1"))
               (rule "compound_reference_cast_expression" (formula "37") (term "1") (inst "#v=o"))
               (rule "variableDeclarationAssign" (formula "37") (term "1"))
               (rule "variableDeclaration" (formula "37") (term "1") (newnames "o"))
                (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_next,result_52,exc_64,heapAfter_next,anon_heap_next") (contract "java.util.Iterator[java.util.Iterator::next()].JML normal_behavior operation contract.0"))
               (branch "Post (next)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "31"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,1,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,1,0") (ifseqformula "15"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "34"))
                  (rule "andLeft" (formula "34"))
                  (rule "andLeft" (formula "35"))
                  (rule "andLeft" (formula "36"))
                  (rule "andLeft" (formula "37"))
                  (rule "andLeft" (formula "38"))
                  (rule "eqSymm" (formula "34") (term "1"))
                  (rule "eqSymm" (formula "37") (term "0"))
                  (rule "eqSymm" (formula "38") (term "0"))
                  (rule "polySimp_addComm0" (formula "36") (term "1,1"))
                  (rule "castedGetAny" (formula "34") (term "0,1"))
                  (rule "assignment" (formula "47") (term "1"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "pullOutSelect" (formula "34") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_1"))
                  (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "34"))
                  (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "34"))
                  (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "42")))
                  (rule "replaceKnownSelect_taclet10_6" (formula "34") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "34") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "0,0,1,0,0") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "34") (term "1,0,0,1,0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "41")))
                  (rule "elementOfSingleton" (formula "34") (term "0,0"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "applyEqReverse" (formula "39") (term "0,0,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "37") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "35") (term "0,0,1") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "35") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "36") (term "0,1,0") (ifseqformula "34"))
                  (rule "applyEqReverse" (formula "38") (term "0,0,0") (ifseqformula "34"))
                  (rule "hideAuxiliaryEq" (formula "34"))
                  (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "notLeft" (formula "36"))
                  (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "true_left" (formula "36"))
                  (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")))
                  (rule "replaceKnownSelect_taclet10_5" (formula "35") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "35") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,1,0,0") (ifseqformula "15"))
                  (rule "replace_known_right" (formula "35") (term "0,0,0,1,0,0") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "17")))
                  (rule "elementOfSingleton" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "35"))
                  (rule "hideAuxiliaryEq" (formula "35"))
                  (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "36"))
                  (rule "replaceKnownSelect_taclet000010_18" (formula "36") (term "1,0"))
                  (rule "replaceKnownSelect_taclet000010_18" (formula "36") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "36") (term "1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "36") (term "0,1"))
                  (rule "replaceKnownSelect_taclet000010_16" (formula "36") (term "0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet000010_17" (formula "36") (term "0,1,1"))
                  (rule "andLeft" (formula "36"))
                  (rule "inEqSimp_commuteLeq" (formula "36"))
                  (rule "inEqSimp_commuteLeq" (formula "37"))
                  (rule "applyEq" (formula "36") (term "0") (ifseqformula "35"))
                  (rule "applyEq" (formula "37") (term "1") (ifseqformula "35"))
                  (rule "commute_or_2" (formula "33") (term "0"))
                  (rule "reference_type_cast" (formula "47") (term "1"))
                  (branch "Normal Execution (o instanceof String)"
                      (builtin "One Step Simplification" (formula "48"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                     (rule "variableDeclarationAssign" (formula "48") (term "1"))
                     (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_2"))
                     (rule "assignment" (formula "48") (term "1"))
                      (builtin "One Step Simplification" (formula "48"))
                      (builtin "Use Operation Contract" (formula "48") (newnames "heapBefore_addInputCol,exc_65,heapAfter_addInputCol,anon_heap_addInputCol") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::addInputCol(java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0"))
                     (branch "Post (addInputCol)"
                         (builtin "One Step Simplification" (formula "40"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "andLeft" (formula "40"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "42") (inst "i=i") (inst "i_0=i_0"))
                        (rule "expand_inInt" (formula "42") (term "1,0,0,1"))
                        (rule "expand_inInt" (formula "42") (term "1,0,0,1,0"))
                        (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1"))
                        (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1"))
                        (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1,0"))
                        (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1,0"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "42"))
                        (rule "eqSymm" (formula "42"))
                        (rule "castedGetAny" (formula "44") (term "0,0,1,0"))
                        (rule "castedGetAny" (formula "43") (term "0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
                        (rule "pullOutSelect" (formula "44") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
                        (rule "applyEq" (formula "45") (term "0,0,0,1,0") (ifseqformula "44"))
                        (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "44"))
                        (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "51")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,0,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "42"))
                        (rule "replace_known_left" (formula "44") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "elementOfSingleton" (formula "44") (term "0,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "simplifySelectOfAnonEQ" (formula "44") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "51")))
                        (rule "replaceKnownSelect_taclet10_13" (formula "44") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10_15" (formula "44") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "44") (term "0,0,0,1,0,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "elementOfSingleton" (formula "44") (term "0,0"))
                         (builtin "One Step Simplification" (formula "44"))
                        (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0") (ifseqformula "44"))
                        (rule "applyEqReverse" (formula "45") (term "0,1,1,0,0,0") (ifseqformula "44"))
                        (rule "applyEqReverse" (formula "42") (term "0,1") (ifseqformula "44"))
                        (rule "hideAuxiliaryEq" (formula "44"))
                        (rule "applyEq" (formula "44") (term "1,1,0,0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "42") (term "1") (ifseqformula "24"))
                        (rule "pullOutSelect" (formula "43") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                        (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "43"))
                        (rule "applyEq" (formula "44") (term "0,0,0,1,0") (ifseqformula "43"))
                        (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "40"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "51")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,1,0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,0,1,0,0") (ifseqformula "16"))
                        (rule "eqSymm" (formula "42"))
                        (rule "replace_known_left" (formula "43") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "elementOfSingleton" (formula "43") (term "0,0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "simplifySelectOfAnonEQ" (formula "43") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "51")))
                        (rule "replaceKnownSelect_taclet10_10" (formula "43") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "43") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,0,0") (ifseqformula "16"))
                        (rule "replace_known_left" (formula "43") (term "0,0,0,1,0,0") (ifseqformula "8"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "elementOfSingleton" (formula "43") (term "0,0"))
                         (builtin "One Step Simplification" (formula "43"))
                        (rule "applyEqReverse" (formula "44") (term "0,0,0,1,0") (ifseqformula "43"))
                        (rule "applyEqReverse" (formula "42") (term "0,1") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "true_left" (formula "42"))
                        (rule "applyEqReverse" (formula "43") (term "0,1,1,0,0,0") (ifseqformula "42"))
                        (rule "hideAuxiliaryEq" (formula "42"))
                        (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
                        (rule "true_left" (formula "44"))
                        (rule "commute_and" (formula "43") (term "1,0,0"))
                        (rule "commute_and" (formula "42") (term "1,0,0"))
                        (rule "commute_and" (formula "43") (term "0,0,0"))
                        (rule "tryEmpty" (formula "53") (term "1"))
                        (rule "commute_and" (formula "42") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "43") (term "0,0"))
                        (rule "commute_and_2" (formula "43") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "42") (term "0,0"))
                        (rule "commute_and_2" (formula "42") (term "0,0,0"))
                        (rule "methodCallEmpty" (formula "51") (term "1"))
                        (rule "emptyModality" (formula "51") (term "1"))
                         (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")) (ifInst ""  (formula "45")) (ifInst ""  (formula "46")) (ifInst ""  (formula "48")) (ifInst ""  (formula "45")))
                        (rule "andRight" (formula "51"))
                        (branch
                           (rule "andRight" (formula "51"))
                           (branch
                              (rule "andRight" (formula "51"))
                              (branch
                                 (rule "andRight" (formula "51"))
                                 (branch
                                    (rule "andRight" (formula "51"))
                                    (branch
                                       (rule "andRight" (formula "51"))
                                       (branch
                                          (rule "andRight" (formula "51"))
                                          (branch
                                             (rule "andRight" (formula "51"))
                                             (branch
                                                (rule "andRight" (formula "51"))
                                                (branch
                                                   (rule "replaceKnownSelect_taclet00000010_23" (formula "51") (term "0,1,1,0,1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000010_25" (formula "51") (term "0,1,1,0,1,0"))
                                                   (rule "replaceKnownSelect_taclet00000010_23" (formula "51") (term "0,1,1,0,0,1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000010_25" (formula "51") (term "0,1,1,0,0,1,0"))
                                                   (rule "allRight" (formula "51") (inst "sk=j_0"))
                                                   (rule "impRight" (formula "51"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "eqSymm" (formula "53") (term "1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "30"))
                                                   (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "30") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "2"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "39"))
                                                   (rule "mul_literals" (formula "39") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "30"))
                                                   (rule "polySimp_mulLiterals" (formula "30") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "30") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "inEqSimp_contradEq7" (formula "43") (ifseqformula "39"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                                   (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                                   (rule "add_literals" (formula "43") (term "0,0"))
                                                   (rule "leq_literals" (formula "43") (term "0"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "false_right" (formula "43"))
                                                   (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "39"))
                                                   (rule "inEqSimp_homoInEq0" (formula "28") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0"))
                                                   (rule "add_literals" (formula "28") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "28") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "28") (term "0,0"))
                                                   (rule "qeq_literals" (formula "28") (term "0"))
                                                    (builtin "One Step Simplification" (formula "28"))
                                                   (rule "true_left" (formula "28"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "27"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "pullOutSelect" (formula "49") (term "0,1,1,0") (inst "selectSK=java_util_Collection_seq_1"))
                                                   (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "10"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "1") (term "0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                                                   (rule "replaceKnownSelect_taclet10_7" (formula "1") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "1") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "19"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "10"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "50") (term "0,1,1,0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "15"))
                                                   (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "16"))
                                                   (rule "nnf_imp2or" (formula "13") (term "0"))
                                                   (rule "nnf_ex2all" (formula "49"))
                                                   (rule "nnf_imp2or" (formula "15") (term "0"))
                                                   (rule "nnf_imp2or" (formula "16") (term "0"))
                                                   (rule "nnf_imp2or" (formula "17") (term "0"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0"))
                                                   (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or_2" (formula "1") (term "0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "commute_or_2" (formula "17") (term "0"))
                                                   (rule "commute_and" (formula "14") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or" (formula "1") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0,0"))
                                                   (rule "commute_or" (formula "16") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "commute_or" (formula "17") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0"))
                                                   (rule "commute_and_2" (formula "14") (term "0,1,0"))
                                                   (rule "cut_direct" (formula "35") (term "0,0,0"))
                                                   (branch "CUT: result_52.<created> = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                      (rule "castedGetAny" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "ex_pull_out3" (formula "14") (term "0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "commute_and" (formula "14") (term "0,0,0"))
                                                      (rule "commute_and_2" (formula "14") (term "0,0"))
                                                      (rule "allLeft" (formula "15") (inst "t=j_0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "allLeft" (formula "14") (inst "t=j_0"))
                                                      (rule "exLeft" (formula "14") (inst "sk=i_0"))
                                                      (rule "andLeft" (formula "14"))
                                                      (rule "andLeft" (formula "14"))
                                                      (rule "eqSymm" (formula "16") (term "0,0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "14") (term "1,0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "14") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                      (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "14") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "16") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "allLeft" (formula "1") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "16"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "1") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "1") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "15"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "CUT: result_52.<created> = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                      (rule "castedGetAny" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "ex_pull_out3" (formula "14") (term "0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "commute_and" (formula "14") (term "0,0,0"))
                                                      (rule "commute_and_2" (formula "14") (term "0,0"))
                                                      (rule "allLeft" (formula "15") (inst "t=j_0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "notLeft" (formula "15"))
                                                      (rule "allLeft" (formula "14") (inst "t=j_0"))
                                                      (rule "exLeft" (formula "14") (inst "sk=i_0"))
                                                      (rule "andLeft" (formula "14"))
                                                      (rule "andLeft" (formula "14"))
                                                      (rule "eqSymm" (formula "16") (term "0,0"))
                                                      (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_homoInEq0" (formula "15") (term "0,0"))
                                                      (rule "polySimp_addComm1" (formula "15") (term "0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                                      (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0"))
                                                      (rule "mul_literals" (formula "15") (term "0,1,0,0"))
                                                      (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "16") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "16") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                                                      (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "14") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "14") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "16") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "14") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "14"))
                                                      (rule "allLeft" (formula "1") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "16"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "1") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "15") (term "0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                )
                                                (branch
                                                   (rule "allRight" (formula "51") (inst "sk=i_0"))
                                                   (rule "impRight" (formula "51"))
                                                   (rule "notRight" (formula "52"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "31") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "3"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                                   (rule "mul_literals" (formula "40") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                                                   (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "31") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                   (rule "inEqSimp_contradEq7" (formula "44") (ifseqformula "40"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "44") (term "0,0"))
                                                   (rule "add_literals" (formula "44") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "44") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0"))
                                                   (rule "leq_literals" (formula "44") (term "0"))
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "false_right" (formula "44"))
                                                   (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "40"))
                                                   (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                                   (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                                   (rule "add_literals" (formula "29") (term "0,0"))
                                                   (rule "qeq_literals" (formula "29") (term "0"))
                                                    (builtin "One Step Simplification" (formula "29"))
                                                   (rule "true_left" (formula "29"))
                                                   (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "28"))
                                                   (rule "leq_literals" (formula "38") (term "0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Collection_seq_1"))
                                                   (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "11"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "eqSymm" (formula "1") (term "0,0"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                                                   (rule "replaceKnownSelect_taclet10_7" (formula "1") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "1") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "20"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "11"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "17"))
                                                   (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                                                   (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "16"))
                                                   (rule "nnf_imp2or" (formula "14") (term "0"))
                                                   (rule "nnf_imp2or" (formula "15") (term "0"))
                                                   (rule "nnf_imp2or" (formula "17") (term "0"))
                                                   (rule "nnf_imp2or" (formula "16") (term "0"))
                                                   (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "14") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                                   (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                   (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0"))
                                                   (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                                                   (rule "times_zero_1" (formula "16") (term "1,0,0,1,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or" (formula "14") (term "0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or_2" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0,0"))
                                                   (rule "commute_and" (formula "14") (term "0,0,1,0"))
                                                   (rule "commute_or" (formula "17") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0,0"))
                                                   (rule "commute_or_2" (formula "17") (term "0"))
                                                   (rule "commute_or" (formula "16") (term "0,0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0,0"))
                                                   (rule "commute_or_2" (formula "16") (term "0"))
                                                   (rule "commute_and_2" (formula "14") (term "0,1,0"))
                                                   (rule "seqGetAlphaCast" (formula "36") (term "0"))
                                                   (rule "castedGetAny" (formula "36") (term "0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "true_left" (formula "36"))
                                                   (rule "cut_direct" (formula "35") (term "0,0,0"))
                                                   (branch "CUT: result_52.<created> = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "ex_pull_out3" (formula "14") (term "0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "15") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                   (branch "CUT: result_52.<created> = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "ex_pull_out3" (formula "14") (term "0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "14") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "14") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "14") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "14") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "15") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                                                      (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "15") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "15") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "inEqSimp_contradInEq1" (formula "15") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "15") (term "0"))
                                                       (builtin "One Step Simplification" (formula "15"))
                                                      (rule "closeFalse" (formula "15"))
                                                   )
                                                )
                                             )
                                             (branch
                                                (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "28"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "28") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                (rule "mul_literals" (formula "37") (term "1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                                (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                                (rule "polySimp_elimOne" (formula "28") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                                (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "41") (term "0,0"))
                                                (rule "leq_literals" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "false_right" (formula "41"))
                                                (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                                (rule "leq_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                                (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                                (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "26") (term "0,0"))
                                                (rule "qeq_literals" (formula "26") (term "0"))
                                                 (builtin "One Step Simplification" (formula "26"))
                                                (rule "true_left" (formula "26"))
                                                (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                                (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                                (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "13") (term "0"))
                                                (rule "nnf_imp2or" (formula "14") (term "0"))
                                                (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                                (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                                (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "47") (inst "i=i") (inst "i_0=i_0"))
                                                (rule "replaceKnownSelect_taclet00000010_23" (formula "47") (term "0,0,0,0"))
                                                (rule "replaceKnownSelect_taclet00000010_20" (formula "47") (term "0,1,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_25" (formula "47") (term "0,0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "47") (term "0,1,0,0"))
                                                (rule "replaceKnownSelect_taclet00000010_20" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "replaceKnownSelect_taclet00000010_20" (formula "47") (term "0,0,0,0,1,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "47") (term "0,0,0,0,1,0,1"))
                                                (rule "replaceKnownSelect_taclet00000010_23" (formula "47") (term "0,0,0,0,1,0,1,0"))
                                                (rule "replaceKnownSelect_taclet00000010_23" (formula "47") (term "0,1,1,0,0,0,1,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_25" (formula "47") (term "0,0,0,0,1,0,1,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000010_25" (formula "47") (term "0,1,1,0,0,0,1,0"))
                                                (rule "expand_inInt" (formula "47") (term "1,0,0,1,0"))
                                                (rule "expand_inInt" (formula "47") (term "1,0,0,1"))
                                                (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0,1,0"))
                                                (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0,1,0"))
                                                (rule "replace_int_MAX" (formula "47") (term "1,0,1,0,0,1"))
                                                (rule "replace_int_MIN" (formula "47") (term "0,1,1,0,0,1"))
                                                (rule "eqSymm" (formula "47") (term "0,0"))
                                                (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "24"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "castedGetAny" (formula "47") (term "0,0,1,0,0"))
                                                (rule "castedGetAny" (formula "47") (term "0,0,1,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,0,0"))
                                                (rule "applyEq" (formula "47") (term "0,1,0,0,1,0,0,0,1") (ifseqformula "24"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,1"))
                                                (rule "nnf_imp2or" (formula "47") (term "0,0"))
                                                (rule "nnf_imp2or" (formula "47") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,1,1,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,1,1,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "0,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,1,0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,0"))
                                                (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,0"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,0"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,0"))
                                                (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,0"))
                                                (rule "nnf_notAnd" (formula "47") (term "1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,1,1,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,1,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,1,1,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "0,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "0,1,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,1,0,0,1"))
                                                (rule "nnf_notAnd" (formula "47") (term "0,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,0,1"))
                                                (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "1,0,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,0,1"))
                                                (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,0,1"))
                                                (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,0,1"))
                                                (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0,1"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or" (formula "11") (term "0,0"))
                                                (rule "commute_or_2" (formula "13") (term "0"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                                (rule "commute_or" (formula "12") (term "0,0"))
                                                (rule "commute_or_2" (formula "12") (term "0"))
                                                (rule "commute_or_2" (formula "13") (term "0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0,0"))
                                                (rule "commute_or" (formula "13") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "13") (term "0,0"))
                                                (rule "commute_or_2" (formula "13") (term "0"))
                                                (rule "commute_or" (formula "14") (term "0,0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "andRight" (formula "47"))
                                                (branch
                                                   (rule "allRight" (formula "47") (inst "sk=i_0_0"))
                                                   (rule "orRight" (formula "47"))
                                                   (rule "notRight" (formula "48"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "inEqSimp_geqRight" (formula "49"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "49"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_geqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                                   (rule "leq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                                   (rule "castedGetAny" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "cut_direct" (formula "36") (term "0,0,0"))
                                                   (branch "CUT: result_52.<created> = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                                      (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "17") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "17") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "17"))
                                                      (rule "leq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "true_left" (formula "2"))
                                                      (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "16") (term "0"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "closeFalse" (formula "16"))
                                                   )
                                                   (branch "CUT: result_52.<created> = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                                      (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "17") (term "1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "17") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "17"))
                                                      (rule "inEqSimp_homoInEq1" (formula "17"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                                      (rule "add_literals" (formula "17") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "17") (term "1,0"))
                                                      (rule "add_zero_right" (formula "17") (term "0"))
                                                      (rule "leq_literals" (formula "17"))
                                                      (rule "closeFalse" (formula "17"))
                                                   )
                                                )
                                                (branch
                                                   (rule "allRight" (formula "47") (inst "sk=i_0"))
                                                   (rule "orRight" (formula "47"))
                                                   (rule "notRight" (formula "48"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "orRight" (formula "48"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "inEqSimp_geqRight" (formula "49"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "49"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_geqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                                   (rule "mul_literals" (formula "2") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "mul_literals" (formula "1") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                                                   (rule "leq_literals" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "cut_direct" (formula "36") (term "0,0,0"))
                                                   (branch "CUT: result_52.<created> = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                                      (rule "castedGetAny" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "ex_pull_out3" (formula "15") (term "0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "18") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                                      (rule "inEqSimp_contradInEq0" (formula "18") (term "1,0") (ifseqformula "1"))
                                                      (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "18") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "3"))
                                                      (rule "andLeft" (formula "18"))
                                                      (rule "inEqSimp_homoInEq1" (formula "18"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                                      (rule "add_literals" (formula "18") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0"))
                                                      (rule "add_zero_right" (formula "18") (term "0"))
                                                      (rule "leq_literals" (formula "18"))
                                                      (rule "closeFalse" (formula "18"))
                                                   )
                                                   (branch "CUT: result_52.<created> = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                                      (rule "castedGetAny" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                                      (rule "ex_pull_out3" (formula "15") (term "0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                                      (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                                      (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                                      (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                                      (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                                      (rule "allLeft" (formula "18") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                                      (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "18") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "18"))
                                                      (rule "qeq_literals" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "28"))
                                             (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "28") (term "0"))
                                             (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                             (rule "mul_literals" (formula "37") (term "1"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                             (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                             (rule "polySimp_elimOne" (formula "28") (term "0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                             (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                             (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "41") (term "0,0"))
                                             (rule "leq_literals" (formula "41") (term "0"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "false_right" (formula "41"))
                                             (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                             (rule "leq_literals" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "true_left" (formula "36"))
                                             (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                             (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                             (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "26") (term "0,0"))
                                             (rule "qeq_literals" (formula "26") (term "0"))
                                              (builtin "One Step Simplification" (formula "26"))
                                             (rule "true_left" (formula "26"))
                                             (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                             (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                             (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "nnf_imp2or" (formula "12") (term "0"))
                                             (rule "nnf_imp2or" (formula "11") (term "0"))
                                             (rule "nnf_imp2or" (formula "13") (term "0"))
                                             (rule "nnf_imp2or" (formula "14") (term "0"))
                                             (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                             (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                             (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                             (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                             (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                             (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                             (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                             (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                             (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                             (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                             (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                             (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                             (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                             (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                             (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "47"))
                                             (rule "closeTrue" (formula "47"))
                                          )
                                       )
                                       (branch
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "28") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                          (rule "mul_literals" (formula "37") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                          (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "41") (term "0,0"))
                                          (rule "leq_literals" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "false_right" (formula "41"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                          (rule "leq_literals" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                          (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                          (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "26") (term "0,0"))
                                          (rule "qeq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                          (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                          (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "nnf_imp2or" (formula "12") (term "0"))
                                          (rule "nnf_imp2or" (formula "11") (term "0"))
                                          (rule "nnf_imp2or" (formula "13") (term "0"))
                                          (rule "nnf_imp2or" (formula "14") (term "0"))
                                          (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                          (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                          (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                          (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "47"))
                                          (rule "closeTrue" (formula "47"))
                                       )
                                    )
                                    (branch
                                       (rule "andRight" (formula "51"))
                                       (branch
                                          (rule "inEqSimp_geqRight" (formula "51"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "29") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                          (rule "add_literals" (formula "42") (term "0,0"))
                                          (rule "leq_literals" (formula "42") (term "0"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "false_right" (formula "42"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "26"))
                                          (rule "leq_literals" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_util_Iterator_index_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "replaceKnownSelect_taclet000010_18" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "18"))
                                          (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "35"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "26") (term "0"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "closeFalse" (formula "26"))
                                       )
                                       (branch
                                          (rule "inEqSimp_geqRight" (formula "51"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "29") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                          (rule "mul_literals" (formula "38") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                          (rule "mul_literals" (formula "1") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "38"))
                                          (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                          (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "42") (term "0,0"))
                                          (rule "leq_literals" (formula "42") (term "0"))
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "false_right" (formula "42"))
                                          (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "38"))
                                          (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                          (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                          (rule "add_literals" (formula "27") (term "0,0"))
                                          (rule "qeq_literals" (formula "27") (term "0"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "26"))
                                          (rule "leq_literals" (formula "36") (term "0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "replaceKnownSelect_taclet000010_16" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000010_17" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "1") (term "1,1") (inst "selectSK=java_util_Iterator_index_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
                                          (rule "replaceKnownSelect_taclet000010_18" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "18"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "1,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "1") (term "1,1") (ifseqformula "35"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "1"))
                                          (rule "add_literals" (formula "1") (term "0,1"))
                                          (rule "add_zero_left" (formula "1") (term "1"))
                                          (rule "inEqSimp_contradInEq0" (formula "36") (ifseqformula "1"))
                                          (rule "andLeft" (formula "36"))
                                          (rule "inEqSimp_homoInEq1" (formula "36"))
                                          (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                          (rule "add_literals" (formula "36") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0"))
                                          (rule "add_literals" (formula "36") (term "0"))
                                          (rule "leq_literals" (formula "36"))
                                          (rule "closeFalse" (formula "36"))
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                    (rule "mul_literals" (formula "37") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0"))
                                    (rule "leq_literals" (formula "41") (term "0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "false_right" (formula "41"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                    (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                    (rule "leq_literals" (formula "35") (term "0"))
                                     (builtin "One Step Simplification" (formula "35"))
                                    (rule "true_left" (formula "35"))
                                    (rule "equalityToSeqGetAndSeqLenRight" (formula "47") (inst "iv=iv"))
                                    (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1"))
                                    (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1"))
                                    (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1"))
                                    (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1"))
                                    (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1"))
                                    (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1"))
                                    (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1"))
                                    (rule "pullOutSelect" (formula "47") (term "0,1,0") (inst "selectSK=java_util_Collection_seq_1"))
                                    (rule "applyEq" (formula "48") (term "0,1,1,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "eqSymm" (formula "1") (term "0,0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                    (rule "replaceKnownSelect_taclet10_7" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "8"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0,1,1,0,1") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0,1,0") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "pullOutSelect" (formula "47") (term "0,0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                    (rule "applyEq" (formula "48") (term "0,0,1,0,1") (ifseqformula "1"))
                                    (rule "applyEq" (formula "48") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                    (rule "replaceKnownSelect_taclet000010_16" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000010_17" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                                    (rule "eqSymm" (formula "48") (term "0"))
                                    (rule "eqSymm" (formula "48") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "48") (term "0,1,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "allRight" (formula "48") (inst "sk=iv_0"))
                                    (rule "impRight" (formula "48"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "applyEqReverse" (formula "50") (term "0,1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "50"))
                                    (rule "closeTrue" (formula "50"))
                                 )
                              )
                              (branch
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                 (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "41") (term "0,0"))
                                 (rule "leq_literals" (formula "41") (term "0"))
                                  (builtin "One Step Simplification" (formula "41"))
                                 (rule "false_right" (formula "41"))
                                 (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                 (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                 (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "47"))
                                 (rule "inEqSimp_commuteLeq" (formula "47") (term "1"))
                                 (rule "inEqSimp_commuteLeq" (formula "47") (term "0"))
                                 (rule "pullOutSelect" (formula "47") (term "0,0,1") (inst "selectSK=java_util_Iterator_seq_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "replaceKnownSelect_taclet000010_16" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000010_17" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,0,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "pullOutSelect" (formula "47") (term "1,1") (inst "selectSK=java_util_Iterator_index_3"))
                                 (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                                 (rule "replaceKnownSelect_taclet000010_18" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "0,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "48") (term "1,1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "34"))
                                 (rule "applyEq" (formula "47") (term "1,1") (ifseqformula "34"))
                                 (rule "replace_known_left" (formula "47") (term "1") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "47"))
                                 (rule "inEqSimp_geqRight" (formula "47"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "26"))
                                 (rule "qeq_literals" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,1,0,0,0") (ifseqformula "16"))
                              (rule "allRight" (formula "51") (inst "sk=f_0"))
                              (rule "allRight" (formula "51") (inst "sk=o_0"))
                              (rule "orRight" (formula "51"))
                              (rule "orRight" (formula "51"))
                              (rule "orRight" (formula "51"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "28") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                              (rule "mul_literals" (formula "37") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                              (rule "polySimp_elimOne" (formula "28") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                              (rule "add_literals" (formula "41") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "41") (term "1,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0"))
                              (rule "leq_literals" (formula "41") (term "0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "false_right" (formula "41"))
                              (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                              (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                              (rule "add_literals" (formula "26") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "26") (term "1,0,0"))
                              (rule "add_literals" (formula "26") (term "0,0"))
                              (rule "qeq_literals" (formula "26") (term "0"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "true_left" (formula "26"))
                              (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                              (rule "leq_literals" (formula "35") (term "0"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "true_left" (formula "35"))
                              (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=f_0_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "eqSymm" (formula "51"))
                              (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=f_0_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "18"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "19"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "51"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet1000000010_26" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "20"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "51"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "52"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "inEqSimp_and_subsumption3" (formula "16") (term "0,0,0"))
                              (rule "leq_literals" (formula "16") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_and_subsumption3" (formula "17") (term "0,0,0"))
                              (rule "leq_literals" (formula "17") (term "0,1,0,0,0,0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "nnf_imp2or" (formula "15") (term "0"))
                              (rule "nnf_imp2or" (formula "14") (term "0"))
                              (rule "nnf_imp2or" (formula "16") (term "0"))
                              (rule "nnf_imp2or" (formula "17") (term "0"))
                              (rule "nnf_notAnd" (formula "15") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                              (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "14") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                              (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "16") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "16") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "16") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "16") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "16") (term "1,1,0,0,0"))
                              (rule "nnf_notAnd" (formula "17") (term "0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0,0"))
                              (rule "add_zero_right" (formula "17") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "add_literals" (formula "17") (term "0,0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "17") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0,0"))
                              (rule "commute_and" (formula "51"))
                              (rule "commute_and" (formula "50"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_or_2" (formula "1") (term "0,1,0,0"))
                              (rule "commute_or_2" (formula "2") (term "0,0,1,0,0"))
                              (rule "commute_or" (formula "14") (term "0,0"))
                              (rule "commute_or_2" (formula "16") (term "0"))
                              (rule "commute_or_2" (formula "17") (term "0"))
                              (rule "commute_or" (formula "15") (term "0,0"))
                              (rule "commute_or_2" (formula "15") (term "0"))
                              (rule "commute_and" (formula "14") (term "0,0,1,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0"))
                              (rule "commute_or" (formula "16") (term "0,0,0"))
                              (rule "commute_or_2" (formula "16") (term "0,0"))
                              (rule "commute_or_2" (formula "16") (term "0"))
                              (rule "commute_or" (formula "17") (term "0,0,0"))
                              (rule "commute_or_2" (formula "17") (term "0,0"))
                              (rule "commute_or_2" (formula "17") (term "0"))
                              (rule "commute_and_2" (formula "14") (term "0,1,0"))
                              (rule "cut_direct" (formula "35") (term "0,0,0"))
                              (branch "CUT: result_52.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "cut_direct" (formula "52") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "false_right" (formula "53"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "eqSymm" (formula "51"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "51")))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "notRight" (formula "53"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "4") (term "0"))
                                    (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                    (rule "castedGetAny" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "ex_pull_out3" (formula "15") (term "0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                       (rule "hideAuxiliaryEq" (formula "2"))
                                       (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "54"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch "CUT: result_52.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "cut_direct" (formula "53") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "false_right" (formula "54"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "53"))
                                    (rule "closeTrue" (formula "53"))
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "54"))
                                    (rule "notRight" (formula "54"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "54"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "4") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "seqGetAlphaCast" (formula "37") (term "0"))
                                    (rule "castedGetAny" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "ex_pull_out3" (formula "15") (term "0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                    (rule "ifthenelse_split" (formula "4") (term "0"))
                                    (branch "o_0.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                       (rule "applyEqReverse" (formula "56") (term "1") (ifseqformula "5"))
                                       (rule "hideAuxiliaryEq" (formula "5"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "o_0.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "56") (term "1") (ifseqformula "4"))
                                       (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "eqSymm" (formula "55"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "54")))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "precOfInt" (formula "51"))
                           (rule "inEqSimp_ltToLeq" (formula "28"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "28") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "51") (term "1"))
                           (rule "polySimp_rightDist" (formula "51") (term "1,0,0,1"))
                           (rule "polySimp_mulAssoc" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "51") (term "0,0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "51") (term "0,1,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,0,1"))
                           (rule "polySimp_addAssoc" (formula "51") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "51") (term "0,0,1"))
                           (rule "inEqSimp_homoInEq0" (formula "51") (term "0"))
                           (rule "mul_literals" (formula "51") (term "1,0,0"))
                           (rule "add_zero_right" (formula "51") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                           (rule "mul_literals" (formula "37") (term "1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,0,1,1"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,0,1,1"))
                           (rule "polySimp_rightDist" (formula "50") (term "0,0,1,1"))
                           (rule "mul_literals" (formula "50") (term "0,0,0,1,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "0"))
                           (rule "polySimp_mulLiterals" (formula "50") (term "1,0"))
                           (rule "polySimp_elimOne" (formula "50") (term "1,0"))
                           (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "37"))
                           (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                           (rule "add_literals" (formula "41") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "41") (term "1,0,0"))
                           (rule "add_literals" (formula "41") (term "0,0"))
                           (rule "leq_literals" (formula "41") (term "0"))
                            (builtin "One Step Simplification" (formula "41"))
                           (rule "false_right" (formula "41"))
                           (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                           (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0"))
                           (rule "add_literals" (formula "26") (term "0,0"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                           (rule "leq_literals" (formula "35") (term "0"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "true_left" (formula "35"))
                           (rule "pullOutSelect" (formula "47") (term "0,0,1") (inst "selectSK=java_util_Iterator_seq_2"))
                           (rule "applyEq" (formula "48") (term "0,0,0") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                           (rule "replaceKnownSelect_taclet000010_16" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000010_17" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                           (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "inEqSimp_homoInEq0" (formula "47") (term "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "47") (term "0,1"))
                           (rule "add_literals" (formula "47") (term "1,1,0,1"))
                           (rule "times_zero_1" (formula "47") (term "1,0,1"))
                           (rule "add_zero_right" (formula "47") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1"))
                           (rule "polySimp_mulComm0" (formula "47") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "47") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1"))
                           (rule "mul_literals" (formula "47") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "47") (term "1,1,1"))
                           (rule "pullOutSelect" (formula "47") (term "1,0") (inst "selectSK=java_util_Iterator_index_3"))
                           (rule "applyEq" (formula "48") (term "0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                           (rule "replaceKnownSelect_taclet000010_18" (formula "1") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000010_19" (formula "1") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "17"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "48") (term "0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "48") (term "1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "34"))
                           (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "inEqSimp_geqRight" (formula "47"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "35"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_literals" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Exceptional Post (addInputCol)"
                         (builtin "One Step Simplification" (formula "50"))
                         (builtin "One Step Simplification" (formula "40"))
                        (rule "andLeft" (formula "40"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "1,0") (ifseqformula "40"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,1,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "41") (term "0,0,0,1,0") (ifseqformula "16"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "42"))
                        (rule "andLeft" (formula "41"))
                        (rule "andLeft" (formula "43"))
                        (rule "notLeft" (formula "41"))
                        (rule "close" (formula "45") (ifseqformula "44"))
                     )
                     (branch "Pre (addInputCol)"
                         (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "45")) (ifInst ""  (formula "43")) (ifInst ""  (formula "45")) (ifInst ""  (formula "43")))
                        (rule "andRight" (formula "48"))
                        (branch "Case 1"
                           (rule "andRight" (formula "48"))
                           (branch "Case 1"
                              (rule "applyEqReverse" (formula "48") (term "0,1,1,0") (ifseqformula "35") (userinteraction))
                              (rule "allLeft" (formula "11") (inst "t=int::select(anon_heap_LOOP,
            result_49,
            java.util.Iterator::$index)") (userinteraction))
                              (rule "impLeft" (formula "11") (userinteraction))
                              (branch "Case 1"
                                 (rule "replace_known_left" (formula "39") (term "1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "28")))
                                 (rule "closeTrue" (formula "39"))
                              )
                              (branch "Case 2"
                                 (rule "exLeft" (formula "11") (inst "sk=i_0") (userinteraction))
                                 (rule "exRight" (formula "49") (inst "t=i_0") (userinteraction))
                                 (rule "seqCastRemoveBeta" (formula "49") (term "1,1") (userinteraction))
                                 (rule "andRight" (formula "49"))
                                 (branch
                                    (rule "andRight" (formula "49"))
                                    (branch
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "eqSymm" (formula "12"))
                                       (rule "castedGetAny" (formula "52") (term "0,1,0"))
                                       (rule "inEqSimp_leqRight" (formula "51"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "32") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                       (rule "applyEq" (formula "52") (term "0,1,1,0") (ifseqformula "39"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                       (rule "mul_literals" (formula "41") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "51") (term "1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "51") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "51") (term "0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "51") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "41"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0"))
                                       (rule "leq_literals" (formula "42") (term "0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "14") (term "0"))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "closeFalse" (formula "14"))
                                    )
                                    (branch
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "eqSymm" (formula "12"))
                                       (rule "castedGetAny" (formula "52") (term "0,1,0"))
                                       (rule "inEqSimp_ltRight" (formula "51"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "32"))
                                       (rule "polySimp_mulComm0" (formula "32") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "32") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "12") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                       (rule "applyEq" (formula "52") (term "0,1,1,0") (ifseqformula "39"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "41"))
                                       (rule "mul_literals" (formula "41") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                       (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                       (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                                       (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                       (rule "polySimp_elimOne" (formula "32") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "42") (ifseqformula "41"))
                                       (rule "polySimp_mulComm0" (formula "42") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                       (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                       (rule "add_literals" (formula "42") (term "0,0"))
                                       (rule "leq_literals" (formula "42") (term "0"))
                                        (builtin "One Step Simplification" (formula "42"))
                                       (rule "false_right" (formula "42"))
                                       (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "41"))
                                       (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                       (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                       (rule "add_literals" (formula "30") (term "0,0"))
                                       (rule "qeq_literals" (formula "30") (term "0"))
                                        (builtin "One Step Simplification" (formula "30"))
                                       (rule "true_left" (formula "30"))
                                       (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "29"))
                                       (rule "leq_literals" (formula "39") (term "0"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "true_left" (formula "39"))
                                       (rule "pullOutSelect" (formula "13") (term "1,1") (inst "selectSK=java_util_Iterator_index_3"))
                                       (rule "applyEq" (formula "30") (term "0") (ifseqformula "13"))
                                       (rule "applyEq" (formula "40") (term "1,1") (ifseqformula "13"))
                                       (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "13"))
                                       (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "13"))
                                       (rule "pullOutSelect" (formula "49") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                                       (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
                                       (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "22"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "10"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "50") (term "0,0,1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "eqSymm" (formula "12"))
                                    (rule "castedGetAny" (formula "52") (term "0,1,0"))
                                    (rule "castedGetAny" (formula "51") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "52") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "31"))
                                    (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "31") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "11") (term "0"))
                                    (rule "inEqSimp_commuteLeq" (formula "52") (term "0,0,0"))
                                    (rule "applyEq" (formula "52") (term "0,1,1,0") (ifseqformula "38"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "40"))
                                    (rule "mul_literals" (formula "40") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "52") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "31"))
                                    (rule "polySimp_mulLiterals" (formula "31") (term "0"))
                                    (rule "polySimp_elimOne" (formula "31") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "41") (ifseqformula "40"))
                                    (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "41") (term "0,0"))
                                    (rule "add_literals" (formula "41") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "41") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "41") (term "0,0"))
                                    (rule "leq_literals" (formula "41") (term "0"))
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "false_right" (formula "41"))
                                    (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "40"))
                                    (rule "inEqSimp_homoInEq0" (formula "29") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0"))
                                    (rule "add_literals" (formula "29") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "29") (term "1,0,0"))
                                    (rule "add_literals" (formula "29") (term "0,0"))
                                    (rule "qeq_literals" (formula "29") (term "0"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "true_left" (formula "29"))
                                    (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "28"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "pullOutSelect" (formula "12") (term "1,1") (inst "selectSK=java_util_Iterator_index_3"))
                                    (rule "applyEq" (formula "29") (term "0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "12"))
                                    (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "12"))
                                    (rule "applyEq" (formula "38") (term "1,1") (ifseqformula "12"))
                                    (rule "applyEq" (formula "48") (term "1,1") (ifseqformula "12"))
                                    (rule "pullOutSelect" (formula "49") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                                    (rule "applyEq" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "1"))
                                    (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
                                    (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "2,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "1") (term "2,0"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "21"))
                                    (rule "eqSymm" (formula "49"))
                                    (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "applyEqReverse" (formula "50") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "50") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                    (rule "applyEqReverse" (formula "49") (term "0,1") (ifseqformula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "eqSymm" (formula "48"))
                                    (rule "close" (formula "48") (ifseqformula "13"))
                                 )
                              )
                           )
                           (branch
                              (rule "andRight" (formula "48"))
                              (branch
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "38") (term "0,0"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "36") (term "0"))
                                  (builtin "One Step Simplification" (formula "36"))
                                 (rule "true_left" (formula "36"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                 (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                 (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "44") (inst "i=i") (inst "i_0=i_0"))
                                 (rule "expand_inInt" (formula "44") (term "1,0,0,1"))
                                 (rule "expand_inInt" (formula "44") (term "1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1"))
                                 (rule "replace_int_MIN" (formula "44") (term "0,1,1,0,0,1,0"))
                                 (rule "replace_int_MAX" (formula "44") (term "1,0,1,0,0,1,0"))
                                 (rule "eqSymm" (formula "44") (term "0,0"))
                                 (rule "castedGetAny" (formula "44") (term "0,0,1,0,1"))
                                 (rule "castedGetAny" (formula "44") (term "0,0,1,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "44") (term "0,1,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,1,0,0,0,1,0"))
                                 (rule "pullOutSelect" (formula "44") (term "0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
                                 (rule "applyEq" (formula "45") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEq" (formula "45") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                                 (rule "replaceKnownSelect_taclet10_13" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10_15" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                                 (rule "eqSymm" (formula "45") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0,1") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,0,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "applyEq" (formula "44") (term "1,1,1,0,0,0,1") (ifseqformula "24"))
                                 (rule "applyEq" (formula "44") (term "1,0,0") (ifseqformula "24"))
                                 (rule "pullOutSelect" (formula "44") (term "0,0,0,1,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                                 (rule "applyEq" (formula "45") (term "0,0,0,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "45") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                                 (rule "replaceKnownSelect_taclet10_10" (formula "1") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet10_12" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "17"))
                                 (rule "eqSymm" (formula "45") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
                                 (rule "applyEqReverse" (formula "45") (term "0,1,0,0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "45"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "nnf_imp2or" (formula "44") (term "0,0"))
                                 (rule "nnf_imp2or" (formula "44") (term "0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,1,1,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,0"))
                                 (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,0"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,0"))
                                 (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,0"))
                                 (rule "nnf_notAnd" (formula "44") (term "1,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,1,1,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,1,1,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,1,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,1,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,1,0,0,1"))
                                 (rule "nnf_notAnd" (formula "44") (term "0,0,0,1"))
                                 (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "1,0,0,0,0,1"))
                                 (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,1"))
                                 (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,1"))
                                 (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,1"))
                                 (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,1"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0"))
                                 (rule "commute_or" (formula "13") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "commute_or" (formula "14") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "cut_direct" (formula "32") (term "0,0,0"))
                                 (branch "CUT: result_52.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "andRight" (formula "44"))
                                    (branch
                                       (rule "allRight" (formula "44") (inst "sk=i_0_0"))
                                       (rule "orRight" (formula "44"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "46"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "45"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                       (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "17") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "17") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "17"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_literals" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "44") (inst "sk=i_0"))
                                       (rule "orRight" (formula "44"))
                                       (rule "orRight" (formula "44"))
                                       (rule "notRight" (formula "46"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "45"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "48"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "48"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "ex_pull_out3" (formula "15") (term "0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "18") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "18") (term "1,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "18") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                                       (rule "andLeft" (formula "18"))
                                       (rule "inEqSimp_homoInEq1" (formula "18"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                                       (rule "add_literals" (formula "18") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "18") (term "1,0"))
                                       (rule "add_zero_right" (formula "18") (term "0"))
                                       (rule "leq_literals" (formula "18"))
                                       (rule "closeFalse" (formula "18"))
                                    )
                                 )
                                 (branch "CUT: result_52.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "andRight" (formula "45"))
                                    (branch
                                       (rule "allRight" (formula "45") (inst "sk=i_0_0"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "46"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "47"))
                                       (rule "orRight" (formula "46"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "allLeft" (formula "17") (inst "t=i_0_0"))
                                       (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                       (rule "inEqSimp_contradInEq0" (formula "17") (term "1,0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "17") (term "0,1,0"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                       (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                       (rule "leq_literals" (formula "17") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "17"))
                                       (rule "leq_literals" (formula "3") (term "0"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "16"))
                                       (rule "qeq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "45") (inst "sk=i_0"))
                                       (rule "orRight" (formula "45"))
                                       (rule "notRight" (formula "46"))
                                       (rule "orRight" (formula "46"))
                                       (rule "orRight" (formula "47"))
                                       (rule "orRight" (formula "46"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_geqRight" (formula "49"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "49"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                       (rule "mul_literals" (formula "4") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "mul_literals" (formula "3") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
                                       (rule "leq_literals" (formula "4") (term "0"))
                                        (builtin "One Step Simplification" (formula "4"))
                                       (rule "true_left" (formula "4"))
                                       (rule "commute_and_2" (formula "15") (term "0,1,0"))
                                       (rule "ex_pull_out3" (formula "15") (term "0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "15") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "15") (term "0,0,0,0,0"))
                                       (rule "allLeft" (formula "18") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "4"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "18") (term "0,0,0"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                                       (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                       (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                       (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                       (rule "leq_literals" (formula "18") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "18"))
                                       (rule "leq_literals" (formula "1") (term "0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "17"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "andRight" (formula "48"))
                                 (branch
                                    (rule "inEqSimp_ltToLeq" (formula "28"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "28") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                    (rule "mul_literals" (formula "37") (term "1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                    (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "38") (term "0,0"))
                                    (rule "leq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "false_right" (formula "38"))
                                    (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "25"))
                                    (rule "leq_literals" (formula "36") (term "0"))
                                     (builtin "One Step Simplification" (formula "36"))
                                    (rule "true_left" (formula "36"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "36"))
                                    (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                    (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                    (rule "add_zero_right" (formula "26") (term "0,0"))
                                    (rule "qeq_literals" (formula "26") (term "0"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "true_left" (formula "26"))
                                    (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                    (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                    (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                    (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
                                    (rule "closeTrue" (formula "44"))
                                 )
                                 (branch
                                    (rule "notRight" (formula "48"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "29"))
                                    (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "29") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "38"))
                                    (rule "mul_literals" (formula "38") (term "1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                    (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                    (rule "polySimp_elimOne" (formula "29") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "39") (ifseqformula "38"))
                                    (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0"))
                                    (rule "add_literals" (formula "39") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "39") (term "1,0,0"))
                                    (rule "add_literals" (formula "39") (term "0,0"))
                                    (rule "leq_literals" (formula "39") (term "0"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "false_right" (formula "39"))
                                    (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "26"))
                                    (rule "leq_literals" (formula "37") (term "0"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "true_left" (formula "37"))
                                    (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "37"))
                                    (rule "inEqSimp_homoInEq0" (formula "27") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0"))
                                    (rule "add_literals" (formula "27") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "27") (term "1,0,0"))
                                    (rule "add_literals" (formula "27") (term "0,0"))
                                    (rule "qeq_literals" (formula "27") (term "0"))
                                     (builtin "One Step Simplification" (formula "27"))
                                    (rule "true_left" (formula "27"))
                                    (rule "inEqSimp_and_subsumption3" (formula "15") (term "0,0,0"))
                                    (rule "leq_literals" (formula "15") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                    (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "nnf_imp2or" (formula "12") (term "0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                    (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                                    (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                                    (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "15") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "15") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "15") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or" (formula "12") (term "0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_or" (formula "13") (term "0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0"))
                                    (rule "commute_and" (formula "12") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "15") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0,0"))
                                    (rule "commute_or_2" (formula "15") (term "0"))
                                    (rule "commute_or" (formula "14") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0"))
                                    (rule "commute_and_2" (formula "12") (term "0,1,0"))
                                    (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                    (rule "castedGetAny" (formula "34") (term "0"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "true_left" (formula "34"))
                                    (rule "cut_direct" (formula "33") (term "0,0,0"))
                                    (branch "CUT: result_52.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "true_left" (formula "34"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_and" (formula "12") (term "0,0,0"))
                                       (rule "commute_and_2" (formula "12") (term "0,0"))
                                       (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                       (rule "close" (formula "37") (ifseqformula "2"))
                                    )
                                    (branch "CUT: result_52.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "ex_pull_out3" (formula "12") (term "0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                                       (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                       (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                                       (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                                       (rule "commute_and" (formula "12") (term "0,0,0"))
                                       (rule "commute_and_2" (formula "12") (term "0,0"))
                                       (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "true_left" (formula "3"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "close" (formula "38") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch
                           (rule "andRight" (formula "48"))
                           (branch
                              (rule "andRight" (formula "48"))
                              (branch
                                 (rule "andRight" (formula "48"))
                                 (branch
                                    (rule "wellFormedAnonEQ" (formula "48") (ifseqformula "32"))
                                    (rule "wellFormedAnon" (formula "48") (term "0"))
                                    (rule "wellFormedAnonEQ" (formula "48") (term "0,0") (ifseqformula "16"))
                                    (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "22")))
                                    (rule "closeTrue" (formula "48"))
                                 )
                                 (branch
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0") (ifseqformula "16"))
                                    (rule "orRight" (formula "48"))
                                    (rule "orRight" (formula "48"))
                                    (rule "orRight" (formula "48"))
                                    (rule "close" (formula "48") (ifseqformula "6"))
                                 )
                              )
                              (branch
                                 (rule "orRight" (formula "48"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "49"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0") (ifseqformula "16"))
                                 (rule "orRight" (formula "49"))
                                 (rule "orRight" (formula "49"))
                                 (rule "orRight" (formula "49"))
                                 (rule "inEqSimp_ltToLeq" (formula "28"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "28") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                 (rule "mul_literals" (formula "37") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                 (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                 (rule "polySimp_elimOne" (formula "28") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                 (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                 (rule "add_literals" (formula "38") (term "0,0"))
                                 (rule "leq_literals" (formula "38") (term "0"))
                                  (builtin "One Step Simplification" (formula "38"))
                                 (rule "false_right" (formula "38"))
                                 (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                                 (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                                 (rule "add_literals" (formula "26") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "26") (term "1,0,0"))
                                 (rule "add_literals" (formula "26") (term "0,0"))
                                 (rule "qeq_literals" (formula "26") (term "0"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "true_left" (formula "26"))
                                 (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                                 (rule "leq_literals" (formula "35") (term "0"))
                                  (builtin "One Step Simplification" (formula "35"))
                                 (rule "true_left" (formula "35"))
                                 (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                                 (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                                 (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "nnf_imp2or" (formula "12") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                 (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "14") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                                 (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "commute_or" (formula "12") (term "0,0"))
                                 (rule "commute_or_2" (formula "12") (term "0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0"))
                                 (rule "commute_and" (formula "11") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "14") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0"))
                                 (rule "commute_or" (formula "13") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0,0"))
                                 (rule "commute_or_2" (formula "13") (term "0"))
                                 (rule "commute_and_2" (formula "11") (term "0,1,0"))
                                 (rule "cut_direct" (formula "32") (term "0,0,0"))
                                 (branch "CUT: result_52.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ex_pull_out3" (formula "11") (term "0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "11") (term "0,0"))
                                    (rule "ineffectiveCast" (formula "44") (term "0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "44") (ifseqformula "32"))
                                 )
                                 (branch "CUT: result_52.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                    (rule "castedGetAny" (formula "33") (term "0"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "true_left" (formula "33"))
                                    (rule "ex_pull_out3" (formula "11") (term "0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                                    (rule "commute_and" (formula "11") (term "0,0,0"))
                                    (rule "commute_and_2" (formula "11") (term "0,0"))
                                    (rule "ineffectiveCast" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "45") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "32") (term "1,0") (ifseqformula "46"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "47") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "47") (ifseqformula "32"))
                                 )
                              )
                           )
                           (branch
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "48"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "48") (term "0,0") (ifseqformula "16"))
                              (rule "orRight" (formula "48"))
                              (rule "orRight" (formula "48"))
                              (rule "orRight" (formula "48"))
                              (rule "close" (formula "48") (ifseqformula "8"))
                           )
                        )
                     )
                  )
                  (branch "ClassCastException (!(o instanceof String))"
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "39")))
                     (rule "applyEqReverse" (formula "47") (term "0,0") (ifseqformula "34") (userinteraction))
                     (rule "seqCastInstance" (formula "47") (userinteraction))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "notRight" (formula "47"))
                     (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "28"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "28") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                     (rule "mul_literals" (formula "37") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                     (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                     (rule "polySimp_elimOne" (formula "28") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "47") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_contradEq7" (formula "38") (ifseqformula "37"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                     (rule "add_literals" (formula "38") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "38") (term "1,0,0"))
                     (rule "add_literals" (formula "38") (term "0,0"))
                     (rule "leq_literals" (formula "38") (term "0"))
                      (builtin "One Step Simplification" (formula "38"))
                     (rule "false_right" (formula "38"))
                     (rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "37"))
                     (rule "inEqSimp_homoInEq0" (formula "26") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0"))
                     (rule "add_literals" (formula "26") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "26") (term "1,0,0"))
                     (rule "add_literals" (formula "26") (term "0,0"))
                     (rule "qeq_literals" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "25"))
                     (rule "leq_literals" (formula "35") (term "0"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "true_left" (formula "35"))
                     (rule "inEqSimp_and_subsumption3" (formula "14") (term "0,0,0"))
                     (rule "leq_literals" (formula "14") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                     (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "nnf_imp2or" (formula "12") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_imp2or" (formula "14") (term "0"))
                     (rule "nnf_imp2or" (formula "13") (term "0"))
                     (rule "nnf_notAnd" (formula "12") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                     (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "14") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "14") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "14") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "44") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "nnf_imp2or" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "nnf_notAnd" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "times_zero_1" (formula "44") (term "1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "44") (term "1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "nnf_notAnd" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_rightDist" (formula "44") (term "1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "44") (term "0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_addAssoc" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_literals" (formula "44") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_zero_left" (formula "44") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_notGeq" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "add_zero_right" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "mul_literals" (formula "44") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                     (rule "commute_or" (formula "11") (term "0,0"))
                     (rule "commute_or_2" (formula "14") (term "0"))
                     (rule "commute_or_2" (formula "13") (term "0"))
                     (rule "commute_and" (formula "11") (term "0,0,1,0"))
                     (rule "commute_or" (formula "12") (term "0,0"))
                     (rule "commute_or_2" (formula "12") (term "0"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0"))
                     (rule "commute_or" (formula "14") (term "0,0,0"))
                     (rule "commute_or_2" (formula "14") (term "0,0"))
                     (rule "commute_or_2" (formula "14") (term "0"))
                     (rule "commute_or" (formula "13") (term "0,0,0"))
                     (rule "commute_or_2" (formula "13") (term "0,0"))
                     (rule "commute_or_2" (formula "13") (term "0"))
                     (rule "commute_and_2" (formula "11") (term "0,1,0"))
                     (rule "seqGetAlphaCast" (formula "33") (term "0"))
                     (rule "castedGetAny" (formula "33") (term "0"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "true_left" (formula "33"))
                     (rule "seqGetAlphaCast" (formula "1") (term "0"))
                     (rule "castedGetAny" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ex_pull_out3" (formula "11") (term "0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0"))
                     (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "11") (term "1,0,0,0"))
                     (rule "commute_or" (formula "11") (term "0,0,0,0,0"))
                     (rule "methodCallThrow" (formula "44") (term "1,0,0,1"))
                     (rule "commute_and" (formula "11") (term "0,0,0"))
                     (rule "commute_and_2" (formula "11") (term "0,0"))
                     (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_49,
            java.util.Iterator::$index)"))
                     (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "26"))
                     (rule "qeq_literals" (formula "12") (term "0,0"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "36"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_zero_right" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "Exceptional Post (next)"
                   (builtin "One Step Simplification" (formula "31"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "31") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "31"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "1,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,0") (ifseqformula "15"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "32"))
                  (rule "andLeft" (formula "34"))
                  (rule "notLeft" (formula "32"))
                  (rule "close" (formula "35") (ifseqformula "34"))
               )
               (branch "Pre (next)"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "wellFormedAnon" (formula "37") (term "1"))
                  (rule "wellFormedAnonEQ" (formula "37") (term "0,1") (ifseqformula "15"))
                  (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "2")) (ifInst ""  (formula "14")))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "27"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "0"))
                  (rule "polySimp_elimOne" (formula "27") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                  (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "27"))
                  (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0"))
                  (rule "add_zero_right" (formula "25") (term "0,0"))
                  (rule "qeq_literals" (formula "25") (term "0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
                  (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
                  (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_imp2or" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_imp2or" (formula "13") (term "0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "36"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "36") (term "1,0"))
                  (rule "replaceKnownSelect_taclet10_5" (formula "36") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "36") (term "1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "36") (term "0,1"))
                  (rule "replaceKnownSelect_taclet10_6" (formula "36") (term "0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "36") (term "0,1,1"))
                  (rule "inEqSimp_commuteLeq" (formula "36") (term "0"))
                  (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "inEqSimp_leqRight" (formula "36"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "1"))
                  (rule "andLeft" (formula "27"))
                  (rule "inEqSimp_homoInEq1" (formula "27"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0"))
                  (rule "polySimp_addComm1" (formula "27") (term "0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                  (rule "add_literals" (formula "27") (term "1,1,0"))
                  (rule "times_zero_1" (formula "27") (term "1,0"))
                  (rule "add_zero_right" (formula "27") (term "0"))
                  (rule "leq_literals" (formula "27"))
                  (rule "closeFalse" (formula "27"))
               )
               (branch "Null reference (it = null)"
                   (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "31")))
                  (rule "closeTrue" (formula "37"))
               )
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "38"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "27"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "15"))
            (rule "replaceKnownSelect_taclet10_5" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_6" (formula "27") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "27") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "29"))
            (rule "notLeft" (formula "27"))
            (rule "close" (formula "31") (ifseqformula "30"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "34"))
            (rule "wellFormedAnon" (formula "34") (term "1"))
            (rule "wellFormedAnonEQ" (formula "34") (term "0,1") (ifseqformula "15"))
            (rule "replace_known_left" (formula "34") (term "1,1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "2")) (ifInst ""  (formula "14")))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "26"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0"))
            (rule "polySimp_elimOne" (formula "26") (term "0"))
            (rule "inEqSimp_subsumption1" (formula "24") (ifseqformula "26"))
            (rule "inEqSimp_homoInEq0" (formula "24") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0"))
            (rule "add_literals" (formula "24") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0"))
            (rule "qeq_literals" (formula "24") (term "0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "inEqSimp_and_subsumption3" (formula "13") (term "0,0,0"))
            (rule "leq_literals" (formula "13") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "13") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "33"))
            (rule "replaceKnownSelect_taclet10_5" (formula "33") (term "1,0"))
            (rule "replaceKnownSelect_taclet10_5" (formula "33") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "33") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "33") (term "0,1"))
            (rule "replaceKnownSelect_taclet10_6" (formula "33") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "33") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "33") (term "0"))
            (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "inEqSimp_leqRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "26"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "28")))
            (rule "closeTrue" (formula "34"))
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "24"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0") (ifseqformula "14"))
         (rule "replaceKnownSelect_taclet10_5" (formula "24") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "24") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_6" (formula "24") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "24") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "24"))
         (rule "close" (formula "28") (ifseqformula "27"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "24"))
         (rule "wellFormedAnon" (formula "24") (term "1"))
         (rule "wellFormedAnonEQ" (formula "24") (term "0,1") (ifseqformula "14"))
         (rule "replace_known_left" (formula "24") (term "0,0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "13")) (ifInst ""  (formula "20")))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "24"))
         (rule "replaceKnownSelect_taclet10_5" (formula "24") (term "0,1"))
         (rule "replaceKnownSelect_taclet10_5" (formula "24") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "24") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_8" (formula "24") (term "1,0"))
         (rule "replaceKnownSelect_taclet10_6" (formula "24") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "24") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0"))
         (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "inEqSimp_commuteLeq" (formula "24"))
         (rule "close" (formula "24") (ifseqformula "23"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "26")))
         (rule "closeTrue" (formula "24"))
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "28")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "26")) (ifInst ""  (formula "23")))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "eqSymm" (formula "21") (term "1,0,1,0"))
      (rule "castedGetAny" (formula "22") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "21") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "21") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "27"))
      (rule "inEqSimp_commuteLeq" (formula "26"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "variableDeclarationAssign" (formula "37") (term "1"))
      (rule "variableDeclaration" (formula "37") (term "1") (newnames "b_0_1"))
      (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=java_util_Iterator_seq_0"))
      (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
      (rule "simplifySelectOfAnon" (formula "28"))
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")))
      (rule "replaceKnownSelect_taclet0_3" (formula "28") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "28") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,1,0,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "29"))
      (rule "applyEq" (formula "21") (term "0,1,1,0,0") (ifseqformula "29"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1,0") (ifseqformula "29"))
      (rule "applyEq" (formula "22") (term "0,0,0,1,0") (ifseqformula "29"))
      (rule "applyEq" (formula "22") (term "0,1,1,0,0") (ifseqformula "29"))
      (rule "simplifySelectOfAnon" (formula "29"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "34")))
      (rule "replaceKnownSelect_taclet0_2" (formula "29") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_4" (formula "29") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "28") (term "1,0,1,0,0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")))
      (rule "replace_known_left" (formula "29") (term "0,0,1,0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "inEqSimp_commuteGeq" (formula "27"))
      (rule "elementOfUnion" (formula "28") (term "0,0"))
      (rule "elementOfSingleton" (formula "28") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "elementOfSingleton" (formula "28") (term "0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "applyEqReverse" (formula "22") (term "0,0,0,1,0") (ifseqformula "28"))
      (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "applyEqReverse" (formula "21") (term "0,0,1,0,1,0") (ifseqformula "28"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,0,0") (ifseqformula "28"))
      (rule "applyEqReverse" (formula "27") (term "0,1") (ifseqformula "28"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1,0,0") (ifseqformula "28"))
      (rule "hideAuxiliaryEq" (formula "28"))
      (rule "elementOfUnion" (formula "28") (term "0,0"))
      (rule "elementOfSingleton" (formula "28") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "eqSymm" (formula "28") (term "0,0,0"))
      (rule "replace_known_right" (formula "28") (term "0,0,0") (ifseqformula "36"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "elementOfSingleton" (formula "28") (term "0,0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "true_left" (formula "28"))
      (rule "pullOutSelect" (formula "21") (term "0,1,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "22") (term "0,1,1,0,1,0") (ifseqformula "21"))
      (rule "simplifySelectOfAnon" (formula "21"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "32")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replace_known_left" (formula "21") (term "0,0,1,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "elementOfUnion" (formula "21") (term "0,0"))
      (rule "elementOfSingleton" (formula "21") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "elementOfSingleton" (formula "21") (term "0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,0,1,0") (ifseqformula "21"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,0,0,1,0") (ifseqformula "21"))
      (rule "hideAuxiliaryEq" (formula "21"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "26"))
      (rule "simplifySelectOfAnon" (formula "26"))
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "31")))
      (rule "replaceKnownSelect_taclet0_0" (formula "26") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "26") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replace_known_right" (formula "26") (term "0,0,1,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "16")))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "applyEq" (formula "26") (term "2,0") (ifseqformula "17"))
      (rule "elementOfUnion" (formula "26") (term "0,0"))
      (rule "elementOfSingleton" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "elementOfSingleton" (formula "26") (term "0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "28"))
      (rule "replaceKnownSelect_taclet20_11" (formula "28") (term "0,1"))
      (rule "replaceKnownSelect_taclet20_11" (formula "28") (term "1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "28") (term "0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "28") (term "1,0"))
      (rule "replaceKnownSelect_taclet20_5" (formula "28") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "28") (term "0,1,1"))
      (rule "andLeft" (formula "28"))
      (rule "inEqSimp_commuteLeq" (formula "29"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "25"))
      (rule "true_left" (formula "25"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "23") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "23") (term "0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "23") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "23") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "23") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "23") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "23") (term "0,0,0,0,1,0,1,0"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "eqSymm" (formula "23"))
      (rule "castedGetAny" (formula "25") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "25") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "1,1,0,0"))
      (rule "pullOutSelect" (formula "25") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "26") (term "0,0,0,1,0") (ifseqformula "25"))
      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "25"))
      (rule "simplifySelectOfAnon" (formula "25"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "31")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "23"))
      (rule "replace_known_left" (formula "25") (term "0,0,1,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "8") (term "1,0,0,0,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "12") (term "1,0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "21") (term "1,1,0,0,1,0") (ifseqformula "23"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "23"))
      (rule "applyEq" (formula "10") (term "1") (ifseqformula "23"))
      (rule "elementOfUnion" (formula "25") (term "0,0"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "elementOfSingleton" (formula "25") (term "0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")))
      (rule "applyEqReverse" (formula "24") (term "0,1,1,0,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "21") (term "0,1,1,0,0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "10") (term "0,1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "applyEqReverse" (formula "10") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "25") (term "0,0,0,1,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "8") (term "0,1,0,0,0,1,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "25") (term "0,1,1,0,0,0") (ifseqformula "24"))
      (rule "applyEqReverse" (formula "22") (term "0,1") (ifseqformula "24"))
      (rule "hideAuxiliaryEq" (formula "24"))
      (rule "eqSymm" (formula "22"))
      (rule "applyEq" (formula "23") (term "1,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "8") (term "1,0,0,0,1,0") (ifseqformula "22"))
      (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "10") (term "1,0,0,0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "20") (term "1,1,0,0,1,0") (ifseqformula "22"))
      (rule "commute_and" (formula "21") (term "0,0"))
      (rule "commute_and" (formula "20") (term "0,0"))
      (rule "commute_and" (formula "23") (term "1,0,0"))
      (rule "commute_and" (formula "22") (term "1,0,0"))
       (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_hasNext,result_50,exc_61") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "26"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "replaceKnownSelect_taclet20_11" (formula "26") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "26") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_5" (formula "26") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "26") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "27"))
         (rule "assignment" (formula "36") (term "1"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "28"))
         (rule "replaceKnownSelect_taclet20_11" (formula "28") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_11" (formula "28") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "28") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "28") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_5" (formula "28") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "28") (term "0,1,1"))
         (rule "andLeft" (formula "28"))
         (rule "inEqSimp_commuteLeq" (formula "28"))
         (rule "inEqSimp_commuteLeq" (formula "28"))
         (rule "commute_and" (formula "22") (term "0,0,0"))
         (rule "commute_and" (formula "23") (term "0,0,0"))
         (rule "commute_and" (formula "20") (term "0,0,1,0"))
         (rule "lenNonNegative" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
         (rule "commute_and_2" (formula "21") (term "0,1,0"))
         (rule "shift_paren_and" (formula "22") (term "0,0"))
         (rule "commute_and_2" (formula "22") (term "0,0,0"))
         (rule "shift_paren_and" (formula "22") (term "0,0"))
         (rule "commute_and_2" (formula "22") (term "0,0,0"))
         (rule "methodCallEmpty" (formula "33") (term "1"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
         (rule "andLeft" (formula "18"))
         (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
         (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "18"))
         (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "true_left" (formula "18"))
         (rule "emptyModality" (formula "33") (term "1"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "impRight" (formula "33"))
         (rule "notLeft" (formula "1"))
         (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "methodCallEmpty" (formula "34") (term "1"))
         (rule "tryEmpty" (formula "34") (term "1"))
         (rule "emptyModality" (formula "34") (term "1"))
         (rule "andRight" (formula "34"))
         (branch
            (rule "andRight" (formula "34"))
            (branch
               (rule "andRight" (formula "34"))
               (branch
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "inEqSimp_ltRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "1"))
                  (rule "applyEq" (formula "9") (term "0") (ifseqformula "24"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "23"))
                  (rule "inEqSimp_homoInEq0" (formula "1"))
                  (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,0"))
                  (rule "times_zero_1" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                  (rule "inEqSimp_homoInEq1" (formula "23"))
                  (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                  (rule "add_literals" (formula "23") (term "1,0"))
                  (rule "times_zero_1" (formula "23") (term "0"))
                  (rule "leq_literals" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "22"))
                  (rule "applyEq" (formula "8") (term "1,1,0,0,0") (ifseqformula "22"))
                  (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                  (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                  (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "nnf_imp2or" (formula "9") (term "0"))
                  (rule "nnf_imp2or" (formula "8") (term "0"))
                  (rule "nnf_imp2or" (formula "10") (term "0"))
                  (rule "nnf_imp2or" (formula "11") (term "0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                  (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                  (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "32") (inst "i=i") (inst "i_0=i_0"))
                  (rule "replaceKnownSelect_taclet20_13" (formula "32") (term "0,1,0,0"))
                  (rule "replaceKnownSelect_taclet20_8" (formula "32") (term "0,0,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "32") (term "0,1,0,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "32") (term "0,0,0,0"))
                  (rule "replaceKnownSelect_taclet20_13" (formula "32") (term "0,1,1,0,0,0,1"))
                  (rule "replaceKnownSelect_taclet20_13" (formula "32") (term "0,0,0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "32") (term "0,1,1,0,0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_15" (formula "32") (term "0,0,0,0,1,0,1"))
                  (rule "replaceKnownSelect_taclet20_8" (formula "32") (term "0,1,1,0,0,0,1,0"))
                  (rule "replaceKnownSelect_taclet20_8" (formula "32") (term "0,0,0,0,1,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "32") (term "0,1,1,0,0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "32") (term "0,0,0,0,1,0,1,0"))
                  (rule "expand_inInt" (formula "32") (term "1,0,0,1"))
                  (rule "expand_inInt" (formula "32") (term "1,0,0,1,0"))
                  (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1"))
                  (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1"))
                  (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1,0"))
                  (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1,0"))
                  (rule "eqSymm" (formula "32") (term "0,0"))
                  (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "castedGetAny" (formula "32") (term "0,0,1,0,1"))
                  (rule "castedGetAny" (formula "32") (term "0,0,1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0,0"))
                  (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,0,1") (ifseqformula "20"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "32") (term "0,0"))
                  (rule "nnf_imp2or" (formula "32") (term "0,1"))
                  (rule "nnf_notAnd" (formula "32") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "32") (term "0,0,1"))
                  (rule "nnf_notAnd" (formula "32") (term "0,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0"))
                  (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0"))
                  (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0"))
                  (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0"))
                  (rule "nnf_notAnd" (formula "32") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "32") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0,0"))
                  (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,1,0,0,0"))
                  (rule "inEqSimp_notGeq" (formula "32") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0"))
                  (rule "add_literals" (formula "32") (term "0,0,1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "32") (term "1,1,1,0,0,0"))
                  (rule "nnf_notAnd" (formula "32") (term "1,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "32") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0,1"))
                  (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,1,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "32") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,1"))
                  (rule "add_literals" (formula "32") (term "0,0,1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,1,1,0,0,1"))
                  (rule "nnf_notAnd" (formula "32") (term "0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,0,1"))
                  (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1"))
                  (rule "commute_or_2" (formula "9") (term "0"))
                  (rule "commute_or" (formula "8") (term "0,0"))
                  (rule "commute_or_2" (formula "10") (term "0"))
                  (rule "commute_or_2" (formula "11") (term "0"))
                  (rule "commute_and" (formula "8") (term "0,0,1,0"))
                  (rule "commute_or" (formula "9") (term "0,0"))
                  (rule "commute_or_2" (formula "9") (term "0"))
                  (rule "commute_or_2" (formula "10") (term "0,0"))
                  (rule "commute_or_2" (formula "11") (term "0,0"))
                  (rule "commute_or" (formula "10") (term "0,0,0"))
                  (rule "commute_or_2" (formula "10") (term "0,0"))
                  (rule "commute_or_2" (formula "10") (term "0"))
                  (rule "commute_or" (formula "11") (term "0,0,0"))
                  (rule "commute_or_2" (formula "11") (term "0,0"))
                  (rule "commute_or_2" (formula "11") (term "0"))
                  (rule "andRight" (formula "32"))
                  (branch
                     (rule "allRight" (formula "32") (inst "sk=i_0_0"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "notRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                     (rule "leq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "lenNonNegative" (formula "24") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "24"))
                     (rule "lenNonNegative" (formula "25") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "25"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "commute_and_2" (formula "12") (term "0,1,0"))
                     (rule "ex_pull_out3" (formula "12") (term "0"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0"))
                     (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                     (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                     (rule "allLeft" (formula "14") (inst "t=i_0_0"))
                     (rule "replace_known_left" (formula "14") (term "0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "14") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "14") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_contradInEq1" (formula "14") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
                     (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "14") (term "0,0,1"))
                     (rule "leq_literals" (formula "14") (term "0,1"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "14"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "13"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch
                     (rule "allRight" (formula "32") (inst "sk=i_0"))
                     (rule "orRight" (formula "32"))
                     (rule "orRight" (formula "32"))
                     (rule "notRight" (formula "34"))
                     (rule "orRight" (formula "34"))
                     (rule "orRight" (formula "33"))
                     (rule "inEqSimp_leqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_leqRight" (formula "35"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "inEqSimp_geqRight" (formula "36"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                     (rule "mul_literals" (formula "4") (term "1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "mul_literals" (formula "3") (term "1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "2"))
                     (rule "leq_literals" (formula "4") (term "0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "lenNonNegative" (formula "24") (term "1"))
                     (rule "inEqSimp_commuteLeq" (formula "24"))
                     (rule "lenNonNegative" (formula "25") (term "0"))
                     (rule "inEqSimp_commuteLeq" (formula "25"))
                     (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                     (rule "commute_and_2" (formula "12") (term "0,1,0"))
                     (rule "ex_pull_out3" (formula "12") (term "0"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0"))
                     (rule "shift_paren_or" (formula "12") (term "1,0,0"))
                     (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "12") (term "1,0,0,0"))
                     (rule "commute_or" (formula "12") (term "0,0,0,0,0"))
                     (rule "allLeft" (formula "15") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "15") (term "0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "15") (term "1,0") (ifseqformula "3"))
                     (rule "qeq_literals" (formula "15") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_contradInEq1" (formula "15") (term "1") (ifseqformula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                     (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "15") (term "0,0,1"))
                     (rule "leq_literals" (formula "15") (term "0,1"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "15"))
                     (rule "leq_literals" (formula "3") (term "0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "14"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch
                  (rule "andRight" (formula "34"))
                  (branch
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_ltRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "10") (term "1,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "23"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "23"))
                     (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,0"))
                     (rule "times_zero_1" (formula "23") (term "0"))
                     (rule "leq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "9") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
                  (branch
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "inEqSimp_ltRight" (formula "25"))
                     (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_antiSymm" (formula "24") (ifseqformula "1"))
                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "24"))
                     (rule "inEqSimp_homoInEq0" (formula "1"))
                     (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,0"))
                     (rule "times_zero_1" (formula "1") (term "0"))
                     (rule "qeq_literals" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "applyEq" (formula "9") (term "1,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "10") (term "1,1,0,0,0") (ifseqformula "23"))
                     (rule "applyEq" (formula "8") (term "0") (ifseqformula "23"))
                     (rule "applyEq" (formula "23") (term "0") (ifseqformula "22"))
                     (rule "inEqSimp_homoInEq1" (formula "23"))
                     (rule "polySimp_pullOutFactor1" (formula "23") (term "0"))
                     (rule "add_literals" (formula "23") (term "1,0"))
                     (rule "times_zero_1" (formula "23") (term "0"))
                     (rule "leq_literals" (formula "23"))
                     (rule "true_left" (formula "23"))
                     (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
                     (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
                     (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "nnf_imp2or" (formula "8") (term "0"))
                     (rule "nnf_imp2or" (formula "9") (term "0"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "11") (term "0"))
                     (rule "nnf_notAnd" (formula "8") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
                     (rule "mul_literals" (formula "8") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
                     (rule "mul_literals" (formula "9") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
                     (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
                     (rule "closeTrue" (formula "32"))
                  )
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "34"))
               (rule "closeTrue" (formula "34"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "34"))
            (rule "allRight" (formula "34") (inst "sk=f_0"))
            (rule "allRight" (formula "34") (inst "sk=o_0"))
            (rule "orRight" (formula "34"))
            (rule "orRight" (formula "34"))
            (rule "eqSymm" (formula "36"))
            (rule "inEqSimp_ltRight" (formula "25"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,1,0"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
            (rule "eqSymm" (formula "37"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "2"))
            (rule "applyEq" (formula "26") (term "0") (ifseqformula "25"))
            (rule "inEqSimp_homoInEq1" (formula "26"))
            (rule "polySimp_pullOutFactor1" (formula "26") (term "0"))
            (rule "add_literals" (formula "26") (term "1,0"))
            (rule "times_zero_1" (formula "26") (term "0"))
            (rule "leq_literals" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "10") (term "0") (ifseqformula "25"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "24"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
            (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
            (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
            (rule "commute_and" (formula "33"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_or" (formula "9") (term "0,0"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "commute_or" (formula "10") (term "0,0"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_and" (formula "9") (term "0,0,1,0"))
            (rule "commute_or_2" (formula "11") (term "0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0"))
            (rule "commute_or" (formula "11") (term "0,0,0"))
            (rule "commute_or_2" (formula "11") (term "0,0"))
            (rule "commute_or_2" (formula "11") (term "0"))
            (rule "commute_or" (formula "12") (term "0,0,0"))
            (rule "commute_or_2" (formula "12") (term "0,0"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "applyEq_and_gen3" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and_2" (formula "9") (term "0,1,0"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "lenNonNegative" (formula "21") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "21"))
            (rule "cut_direct" (formula "35") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
                (builtin "One Step Simplification" (formula "36"))
               (rule "false_right" (formula "36"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqRigid" (formula "35") (term "0,1") (ifseqformula "1"))
               (rule "eqSymm" (formula "35") (term "1"))
               (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "false_right" (formula "35"))
               (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
               (rule "applyEqRigid" (formula "35") (term "1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
               (rule "eqSymm" (formula "2") (term "1,0,0"))
               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: o_0 = null FALSE"
                (builtin "One Step Simplification" (formula "36"))
               (rule "notRight" (formula "36"))
               (rule "replace_known_left" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "36")))
               (rule "lenNonNegative" (formula "23") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "23"))
               (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
               (rule "ex_pull_out3" (formula "10") (term "0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0"))
               (rule "shift_paren_or" (formula "10") (term "1,0,0"))
               (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
               (rule "commute_or_2" (formula "10") (term "0,0,0,0"))
               (rule "shift_paren_or" (formula "10") (term "1,0,0,0"))
               (rule "commute_or" (formula "10") (term "0,0,0,0,0"))
               (rule "commute_and" (formula "10") (term "0,0,0"))
               (rule "commute_and_2" (formula "10") (term "0,0"))
               (rule "ifthenelse_split" (formula "2") (term "0"))
               (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_49 TRUE"
                  (rule "andLeft" (formula "2"))
                  (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "eqSymm" (formula "38"))
                  (rule "applyEqRigid" (formula "38") (term "2,1") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "38") (term "1") (ifseqformula "4"))
                  (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "37") (term "0") (ifseqformula "3"))
                  (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "2"))
                  (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "22"))
                  (rule "eqSymm" (formula "37"))
                  (rule "applyEqRigid" (formula "36") (term "0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "36"))
                  (rule "false_right" (formula "36"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                  (rule "close" (formula "29") (ifseqformula "1"))
               )
               (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_49 FALSE"
                  (rule "close" (formula "38") (ifseqformula "2"))
               )
            )
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "34"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0") (ifseqformula "13"))
         (rule "replaceKnownSelect_taclet20_11" (formula "26") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "26") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_5" (formula "26") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "26") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "28"))
         (rule "notLeft" (formula "26"))
         (rule "close" (formula "30") (ifseqformula "29"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "33"))
         (rule "wellFormedAnon" (formula "33") (term "1"))
         (rule "wellFormedAnonEQ" (formula "33") (term "0,1") (ifseqformula "13"))
         (rule "replace_known_left" (formula "33") (term "1,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")) (ifInst ""  (formula "19")))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "20") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
         (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
         (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "nnf_imp2or" (formula "8") (term "0"))
         (rule "nnf_imp2or" (formula "23") (term "0"))
         (rule "nnf_imp2or" (formula "9") (term "0"))
         (rule "nnf_imp2or" (formula "22") (term "0"))
         (rule "nnf_imp2or" (formula "20") (term "0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_notAnd" (formula "8") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
         (rule "mul_literals" (formula "8") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0"))
         (rule "nnf_notAnd" (formula "9") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
         (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
         (rule "mul_literals" (formula "9") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0"))
         (rule "nnf_notAnd" (formula "20") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0"))
         (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "20") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0"))
         (rule "mul_literals" (formula "20") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "20") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "20") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,1,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,1,0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "1,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,1,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,1,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,1,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "33"))
         (rule "replaceKnownSelect_taclet20_11" (formula "33") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_11" (formula "33") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "33") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_12" (formula "33") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_5" (formula "33") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_7" (formula "33") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0"))
         (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "inEqSimp_leqRight" (formula "33"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "1"))
         (rule "andLeft" (formula "26"))
         (rule "inEqSimp_homoInEq1" (formula "26"))
         (rule "polySimp_mulComm0" (formula "26") (term "1,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0"))
         (rule "polySimp_addComm0" (formula "26") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
         (rule "add_literals" (formula "26") (term "1,1,0"))
         (rule "times_zero_1" (formula "26") (term "1,0"))
         (rule "add_zero_right" (formula "26") (term "0"))
         (rule "leq_literals" (formula "26"))
         (rule "closeFalse" (formula "26"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "27")))
         (rule "closeTrue" (formula "33"))
      )
   )
)
(branch "Exceptional Post (iterator)"
    (builtin "One Step Simplification" (formula "20"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "19") (ifseqformula "18"))
)
(branch "Pre (iterator)"
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
   (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
   (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "18"))
   (rule "closeTrue" (formula "18"))
)
(branch "Null reference (_cols_0 = null)"
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "14")))
   (rule "closeTrue" (formula "18"))
)
)
}
