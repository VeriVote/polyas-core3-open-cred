\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 18 16:08:51 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";



\sorts{
Formula;
any;
Heap;
java.lang.Object;
java.util.ArrayList\extends java.util.List;
Field;
Seq;
java.util.Iterator\extends java.lang.Object;
java.util.CollectionIterator\extends java.util.Iterator;
int;
de.polyas.core3.open.cred.CredTool\extends java.lang.Object;
boolean;
org.apache.commons.csv.CSVRecord\extends java.lang.Iterable, java.io.Serializable, java.lang.Object;
numbers;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
Update;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
LocSet;
}

\predicates{
RELATED_BY_iterator_1422982459(java.util.Collection,Heap,java.util.ArrayList,java.util.CollectionIterator,java.lang.Throwable,Heap);
RELATED_BY_LOOP_at_line_327_in_addInputCols_1102371444(de.polyas.core3.open.cred.CredTool,org.apache.commons.csv.CSVRecord,java.util.ArrayList,java.util.Iterator,boolean,Heap,de.polyas.core3.open.cred.CredTool,boolean,Heap);
RELATED_BY_hasNext_608742876(java.util.Iterator,Heap,java.util.Iterator,boolean,java.lang.Throwable,Heap);
RELATED_BY_addInputCol_888604927(de.polyas.core3.open.cred.CredTool,java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord,Heap,de.polyas.core3.open.cred.CredTool,java.lang.Throwable,Heap);
RELATED_BY_next_1806066688(java.util.Iterator,Heap,java.util.Iterator,java.lang.Object,java.lang.Throwable,Heap);
RELATED_BY_hasNext_608742876(java.util.Iterator,Heap,java.util.Iterator,boolean,java.lang.Throwable,Heap);
}

\functions{
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
Field java.util.Collection::$seq;
Seq Seq::select(Heap,java.lang.Object,Field);
Field java.util.Iterator::$seq;
Field java.util.Iterator::$index;
int int::select(Heap,java.lang.Object,Field);
Heap heap_Before_LOOP_A;
Formula wellFormed(Heap);
Null null;
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
boolean de.polyas.core3.open.cred.CredTool::exactInstance(any);
numbers #;
numbers 0(numbers);
int Z(numbers);
Formula leq(int,int);
int seqLen(Seq);
Formula lt(int,int);
Field org.apache.commons.csv.CSVRecord::$key_seq;
any any::seqGet(Seq,int);
java.lang.String java.lang.String::cast(any);
boolean java.util.CollectionIterator::instance(any);
Heap heap_After_LOOP_A;
boolean FALSE;
Heap heap_Before_LOOP_B;
Heap heap_After_LOOP_B;
Field org.apache.commons.csv.CSVRecord::$value_seq;
Seq strContent(java.lang.String);
Seq seqDef(int,int,any);
Formula geq(int,int);
java.lang.String java.lang.String::seqGet(Seq,int);
numbers 2(numbers);
numbers 1(numbers);
numbers 4(numbers);
numbers 7(numbers);
numbers 8(numbers);
numbers 3(numbers);
numbers 6(numbers);
numbers neglit(numbers);
Heap heapAfter_addInputCol_1;
boolean java.lang.String::instance(any);
Heap anon_heap_next;
LocSet singleton(java.lang.Object,Field);
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_next_1;
java.lang.Object java.lang.Object::seqGet(Seq,int);
int add(int,int);
Heap anon_heap_addInputCol;
int i_0_1;
Heap heapAfter_addInputCol_0;
Heap heapAfter_next_0;
int i_0_0;
Heap heapAtPre;
Heap heapAtPost;
}

\programVariables{
Heap heap;
de.polyas.core3.open.cred.CredTool self_50_A_0;
org.apache.commons.csv.CSVRecord _record_7_A_0;
java.util.ArrayList _vals_3_A_0;
java.util.Iterator it_A;
java.util.ArrayList _cols_2;
boolean b_0;
boolean b_0_Before_A;
de.polyas.core3.open.cred.CredTool self_50_After_LOOP_A;
boolean b_0_After_A;
org.apache.commons.csv.CSVRecord _record_7;
java.util.ArrayList _vals_3;
java.util.Iterator it;
de.polyas.core3.open.cred.CredTool self_50_B_0;
org.apache.commons.csv.CSVRecord _record_7_B_0;
java.util.ArrayList _vals_3_B_0;
java.util.Iterator it_B;
boolean b_0_Before_B;
de.polyas.core3.open.cred.CredTool self_50_After_LOOP_B;
boolean b_0_After_B;
java.util.ArrayList _cols_2_0;
java.lang.Throwable exc_65_0;
java.lang.Throwable exc_66_0;
boolean result_50_0;
boolean b_0_0;
boolean result_49_0;
java.util.ArrayList _cols_2_1;
java.lang.Throwable exc_65_1;
java.lang.Throwable exc_66_2;
boolean result_50_2;
boolean b_0_1;
boolean result_49_1;
java.lang.Object result_50_3;
java.lang.Throwable exc_66_3;
java.lang.Throwable exc_67_1;
java.lang.Throwable exc_68_1;
boolean result_51_1;
java.lang.Object result_50_1;
java.lang.Throwable exc_66_1;
java.lang.Throwable exc_67_0;
java.lang.Throwable exc_68_0;
boolean result_51_0;
de.polyas.core3.open.cred.CredTool self_50;
java.util.ArrayList vals_3;
java.util.ArrayList cols_2;
org.apache.commons.csv.CSVRecord record_7;
de.polyas.core3.open.cred.CredTool selfAtPost_50;
java.lang.Throwable excAtPost_64;
java.lang.Throwable exc_64;
}

\rules{

Use_information_flow_contract_for_iterator_1422982459 {
  \schemaVar \term Heap find_heap#17;
  \schemaVar \term java.util.ArrayList find__cols_2#14;
  \schemaVar \term java.util.CollectionIterator find_result_49#15;
  \schemaVar \term java.lang.Throwable find_exc_65#16;
  \schemaVar \term Heap find_heapAfter_iterator#18;
  \schemaVar \term Heap assumes_heap#22;
  \schemaVar \term java.util.ArrayList assumes__cols_2#19;
  \schemaVar \term java.util.CollectionIterator assumes_result_49#20;
  \schemaVar \term java.lang.Throwable assumes_exc_65#21;
  \schemaVar \term Heap assumes_heapAfter_iterator#23;
  
  \assumes ( RELATED_BY_iterator_1422982459(assumes__cols_2#19,
                                            assumes_heap#22,
                                            assumes__cols_2#19,
                                            assumes_result_49#20,
                                            assumes_exc_65#21,
                                            assumes_heapAfter_iterator#23)
            ==>
             
  )
  \find (
    RELATED_BY_iterator_1422982459(find__cols_2#14,
                                   find_heap#17,
                                   find__cols_2#14,
                                   find_result_49#15,
                                   find_exc_65#16,
                                   find_heapAfter_iterator#18)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_iterator_1422982459(find__cols_2#14,
                                   find_heap#17,
                                   find__cols_2#14,
                                   find_result_49#15,
                                   find_exc_65#16,
                                   find_heapAfter_iterator#18)
  )
  \add (      java.lang.Object::<inv>(find_heap#17, find__cols_2#14)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#22, assumes__cols_2#19)<<impl>>
         ->   (     Seq::select(find_heap#17,
                                find__cols_2#14,
                                java.util.Collection::$seq)
                  = Seq::select(assumes_heap#22,
                                assumes__cols_2#19,
                                java.util.Collection::$seq)
               -> (  Seq::select(find_heapAfter_iterator#18,
                                 find_result_49#15,
                                 java.util.Iterator::$seq)
                   = Seq::select(assumes_heapAfter_iterator#23,
                                 assumes_result_49#20,
                                 java.util.Iterator::$seq))<<postCondition>>)
            & (  int::select(find_heapAfter_iterator#18,
                             find_result_49#15,
                             java.util.Iterator::$index)
               = int::select(assumes_heapAfter_iterator#23,
                             assumes_result_49#20,
                             java.util.Iterator::$index))<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_Loop_Invariant_327_addInputCols_1102371444 {
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_50#30;
  \schemaVar \term org.apache.commons.csv.CSVRecord find__record_7#31;
  \schemaVar \term java.util.ArrayList find__vals_3#32;
  \schemaVar \term java.util.Iterator find_it#33;
  \schemaVar \term boolean find_b_0_Before#34;
  \schemaVar \term Heap find_heap_Before_LOOP#35;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_50_After_LOOP#36;
  \schemaVar \term boolean find_b_0_After#37;
  \schemaVar \term Heap find_heap_After_LOOP#38;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_50#39;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes__record_7#40;
  \schemaVar \term java.util.ArrayList assumes__vals_3#41;
  \schemaVar \term java.util.Iterator assumes_it#42;
  \schemaVar \term boolean assumes_b_0_Before#43;
  \schemaVar \term Heap assumes_heap_Before_LOOP#44;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_50_After_LOOP#45;
  \schemaVar \term boolean assumes_b_0_After#46;
  \schemaVar \term Heap assumes_heap_After_LOOP#47;
  \schemaVar \variables int j#51;
  \schemaVar \variables int i#52;
  \schemaVar \variables int i#53;
  \schemaVar \variables int i#57;
  
  \assumes ( RELATED_BY_LOOP_at_line_327_in_addInputCols_1102371444(assumes_self_50#39,
                                                                    assumes__record_7#40,
                                                                    assumes__vals_3#41,
                                                                    assumes_it#42,
                                                                    assumes_b_0_Before#43,
                                                                    assumes_heap_Before_LOOP#44,
                                                                    assumes_self_50_After_LOOP#45,
                                                                    assumes_b_0_After#46,
                                                                    assumes_heap_After_LOOP#47)
            ==>
             
  )
  \find (
    RELATED_BY_LOOP_at_line_327_in_addInputCols_1102371444(find_self_50#30,
                                                           find__record_7#31,
                                                           find__vals_3#32,
                                                           find_it#33,
                                                           find_b_0_Before#34,
                                                           find_heap_Before_LOOP#35,
                                                           find_self_50_After_LOOP#36,
                                                           find_b_0_After#37,
                                                           find_heap_After_LOOP#38)
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#57, find_heap_After_LOOP#38),
     \notFreeIn( i#53, find_heap_After_LOOP#38),
     \notFreeIn( i#52, find_heap_After_LOOP#38),
     \notFreeIn( j#51, find_heap_After_LOOP#38),
     \notFreeIn( i#57, find_b_0_After#37),
     \notFreeIn( i#53, find_b_0_After#37),
     \notFreeIn( i#52, find_b_0_After#37),
     \notFreeIn( j#51, find_b_0_After#37),
     \notFreeIn( i#57, find_self_50_After_LOOP#36),
     \notFreeIn( i#53, find_self_50_After_LOOP#36),
     \notFreeIn( i#52, find_self_50_After_LOOP#36),
     \notFreeIn( j#51, find_self_50_After_LOOP#36),
     \notFreeIn( i#57, find_heap_Before_LOOP#35),
     \notFreeIn( i#53, find_heap_Before_LOOP#35),
     \notFreeIn( i#52, find_heap_Before_LOOP#35),
     \notFreeIn( j#51, find_heap_Before_LOOP#35),
     \notFreeIn( i#57, find_b_0_Before#34),
     \notFreeIn( i#53, find_b_0_Before#34),
     \notFreeIn( i#52, find_b_0_Before#34),
     \notFreeIn( j#51, find_b_0_Before#34),
     \notFreeIn( i#57, find_it#33),
     \notFreeIn( i#53, find_it#33),
     \notFreeIn( i#52, find_it#33),
     \notFreeIn( j#51, find_it#33),
     \notFreeIn( i#57, find__vals_3#32),
     \notFreeIn( i#53, find__vals_3#32),
     \notFreeIn( i#52, find__vals_3#32),
     \notFreeIn( j#51, find__vals_3#32),
     \notFreeIn( i#57, find__record_7#31),
     \notFreeIn( i#53, find__record_7#31),
     \notFreeIn( i#52, find__record_7#31),
     \notFreeIn( j#51, find__record_7#31),
     \notFreeIn( i#57, find_self_50#30),
     \notFreeIn( i#53, find_self_50#30),
     \notFreeIn( i#52, find_self_50#30),
     \notFreeIn( j#51, find_self_50#30),
     \notFreeIn( i#57, assumes_heap_After_LOOP#47),
     \notFreeIn( i#53, assumes_heap_After_LOOP#47),
     \notFreeIn( i#52, assumes_heap_After_LOOP#47),
     \notFreeIn( j#51, assumes_heap_After_LOOP#47),
     \notFreeIn( i#57, assumes_b_0_After#46),
     \notFreeIn( i#53, assumes_b_0_After#46),
     \notFreeIn( i#52, assumes_b_0_After#46),
     \notFreeIn( j#51, assumes_b_0_After#46),
     \notFreeIn( i#57, assumes_self_50_After_LOOP#45),
     \notFreeIn( i#53, assumes_self_50_After_LOOP#45),
     \notFreeIn( i#52, assumes_self_50_After_LOOP#45),
     \notFreeIn( j#51, assumes_self_50_After_LOOP#45),
     \notFreeIn( i#57, assumes_heap_Before_LOOP#44),
     \notFreeIn( i#53, assumes_heap_Before_LOOP#44),
     \notFreeIn( i#52, assumes_heap_Before_LOOP#44),
     \notFreeIn( j#51, assumes_heap_Before_LOOP#44),
     \notFreeIn( i#57, assumes_b_0_Before#43),
     \notFreeIn( i#53, assumes_b_0_Before#43),
     \notFreeIn( i#52, assumes_b_0_Before#43),
     \notFreeIn( j#51, assumes_b_0_Before#43),
     \notFreeIn( i#57, assumes_it#42),
     \notFreeIn( i#53, assumes_it#42),
     \notFreeIn( i#52, assumes_it#42),
     \notFreeIn( j#51, assumes_it#42),
     \notFreeIn( i#57, assumes__vals_3#41),
     \notFreeIn( i#53, assumes__vals_3#41),
     \notFreeIn( i#52, assumes__vals_3#41),
     \notFreeIn( j#51, assumes__vals_3#41),
     \notFreeIn( i#57, assumes__record_7#40),
     \notFreeIn( i#53, assumes__record_7#40),
     \notFreeIn( i#52, assumes__record_7#40),
     \notFreeIn( j#51, assumes__record_7#40),
     \notFreeIn( i#57, assumes_self_50#39),
     \notFreeIn( i#53, assumes_self_50#39),
     \notFreeIn( i#52, assumes_self_50#39),
     \notFreeIn( j#51, assumes_self_50#39)
  )
  \replacewith (
    RELATED_BY_LOOP_at_line_327_in_addInputCols_1102371444(find_self_50#30,
                                                           find__record_7#31,
                                                           find__vals_3#32,
                                                           find_it#33,
                                                           find_b_0_Before#34,
                                                           find_heap_Before_LOOP#35,
                                                           find_self_50_After_LOOP#36,
                                                           find_b_0_After#37,
                                                           find_heap_After_LOOP#38)
  )
  \add (      ((((((((((\forall j#51;
                          ((   (  leq(Z(0(#)), j#51)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                & lt(j#51,
                                     seqLen(Seq::select(find_heap_Before_LOOP#35,
                                                        _cols_2,
                                                        java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                         origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                            -> (\exists i#52;
                                  ((  (leq(Z(0(#)), i#52)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                    & lt(i#52,
                                         seqLen(Seq::select(find_heap_Before_LOOP#35,
                                                            find__record_7#31,
                                                            org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                                             origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                    & (  (java.lang.String)(any::seqGet(Seq::select(find_heap_Before_LOOP#35,
                                                                                    find__record_7#31,
                                                                                    org.apache.commons.csv.CSVRecord::$key_seq),
                                                                        i#52))
                                       = (java.lang.String)(any::seqGet(Seq::select(find_heap_Before_LOOP#35,
                                                                                    _cols_2,
                                                                                    java.util.Collection::$seq),
                                                                        j#51)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                   origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
            & (\forall i#53;
                 ((   (  leq(Z(0(#)), i#53)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
                       & lt(i#53,
                            seqLen(Seq::select(find_heap_Before_LOOP#35,
                                               _cols_2,
                                               java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC,
                                                                                                                                                origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
                   -> (!(  (java.lang.String)(any::seqGet(Seq::select(find_heap_Before_LOOP#35,
                                                                      _cols_2,
                                                                      java.util.Collection::$seq),
                                                          i#53))
                         = null)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC>>
            & (!(find__vals_3#32 = _cols_2)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<SC>>
            & java.lang.Object::<inv>(find_heap_Before_LOOP#35,
                                      find__record_7#31))<<SC>>
            & java.lang.Object::<inv>(find_heap_Before_LOOP#35, find__vals_3#32))<<SC>>
            & java.lang.Object::<inv>(find_heap_Before_LOOP#35, _cols_2))<<SC>>
            & java.lang.Object::<inv>(find_heap_Before_LOOP#35, find_it#33))<<SC>>
            & ((  (((!(find_it#33 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                & (!(find__record_7#31 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                                    origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                & (!(find__vals_3#32 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                                  origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                & (!(_cols_2 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                          origin("loop_invariant @ file CredTool.java @ line 320","[]")>>))<<SC>>
            & ((  (!(find_it#33 = null)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>
                & (java.util.CollectionIterator::instance(find_it#33) = TRUE)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>))<<SC>>
            & (  Seq::select(find_heap_Before_LOOP#35,
                             find_it#33,
                             java.util.Iterator::$seq)
               = Seq::select(find_heap_Before_LOOP#35,
                             _cols_2,
                             java.util.Collection::$seq))<<origin("loop_invariant @ file CredTool.java @ line 322","[]")>>)<<SC>>
            & ((  (((((((((\forall j#51;
                             ((   (  leq(Z(0(#)), j#51)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                   & lt(j#51,
                                        seqLen(Seq::select(assumes_heap_Before_LOOP#44,
                                                           _cols_2,
                                                           java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                            origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                               -> (\exists i#52;
                                     ((  (leq(Z(0(#)), i#52)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                       & lt(i#52,
                                            seqLen(Seq::select(assumes_heap_Before_LOOP#44,
                                                               assumes__record_7#40,
                                                               org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                                                origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                                       & (  (java.lang.String)(any::seqGet(Seq::select(assumes_heap_Before_LOOP#44,
                                                                                       assumes__record_7#40,
                                                                                       org.apache.commons.csv.CSVRecord::$key_seq),
                                                                           i#52))
                                          = (java.lang.String)(any::seqGet(Seq::select(assumes_heap_Before_LOOP#44,
                                                                                       _cols_2,
                                                                                       java.util.Collection::$seq),
                                                                           j#51)))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<SC,
                                                                                                                                                      origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 312","[]")>>
                & (\forall i#53;
                     ((   (  leq(Z(0(#)), i#53)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
                           & lt(i#53,
                                seqLen(Seq::select(assumes_heap_Before_LOOP#44,
                                                   _cols_2,
                                                   java.util.Collection::$seq)))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC,
                                                                                                                                                    origin("loop_invariant @ file CredTool.java @ line 314","[]")>>
                       -> (!(  (java.lang.String)(any::seqGet(Seq::select(assumes_heap_Before_LOOP#44,
                                                                          _cols_2,
                                                                          java.util.Collection::$seq),
                                                              i#53))
                             = null)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>))<<origin("loop_invariant @ file CredTool.java @ line 314","[]")>>)<<SC>>
                & (!(assumes__vals_3#41 = _cols_2)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 315","[]")>>)<<SC>>
                & java.lang.Object::<inv>(assumes_heap_Before_LOOP#44,
                                          assumes__record_7#40))<<SC>>
                & java.lang.Object::<inv>(assumes_heap_Before_LOOP#44,
                                          assumes__vals_3#41))<<SC>>
                & java.lang.Object::<inv>(assumes_heap_Before_LOOP#44, _cols_2))<<SC>>
                & java.lang.Object::<inv>(assumes_heap_Before_LOOP#44,
                                          assumes_it#42))<<SC>>
                & ((  (((!(assumes_it#42 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                    & (!(assumes__record_7#40 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                                           origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                    & (!(assumes__vals_3#41 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                                         origin("loop_invariant @ file CredTool.java @ line 320","[]")>>
                    & (!(_cols_2 = null)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 320","[]")>>)<<SC,
                                                                                                                                                                              origin("loop_invariant @ file CredTool.java @ line 320","[]")>>))<<SC>>
                & ((  (!(assumes_it#42 = null)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>
                    & (  java.util.CollectionIterator::instance(assumes_it#42)
                       = TRUE)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>)<<origin("loop_invariant @ file CredTool.java @ line 321","[]")>>))<<SC>>
                & (  Seq::select(assumes_heap_Before_LOOP#44,
                                 assumes_it#42,
                                 java.util.Iterator::$seq)
                   = Seq::select(assumes_heap_Before_LOOP#44,
                                 _cols_2,
                                 java.util.Collection::$seq))<<origin("loop_invariant @ file CredTool.java @ line 322","[]")>>)<<SC>>)
         ->     Seq::select(find_heap_Before_LOOP#35,
                            find__vals_3#32,
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap_Before_LOOP#44,
                            assumes__vals_3#41,
                            java.util.Collection::$seq)
            &   Seq::select(find_heap_Before_LOOP#35,
                            find_it#33,
                            java.util.Iterator::$seq)
              = Seq::select(assumes_heap_Before_LOOP#44,
                            assumes_it#42,
                            java.util.Iterator::$seq)
            &   int::select(find_heap_Before_LOOP#35,
                            find_it#33,
                            java.util.Iterator::$index)
              = int::select(assumes_heap_Before_LOOP#44,
                            assumes_it#42,
                            java.util.Iterator::$index)
            &   Seq::select(find_heap_Before_LOOP#35,
                            find__record_7#31,
                            org.apache.commons.csv.CSVRecord::$key_seq)
              = Seq::select(assumes_heap_Before_LOOP#44,
                            assumes__record_7#40,
                            org.apache.commons.csv.CSVRecord::$key_seq)
            &   Seq::select(find_heap_Before_LOOP#35,
                            find__record_7#31,
                            org.apache.commons.csv.CSVRecord::$value_seq)
              = Seq::select(assumes_heap_Before_LOOP#44,
                            assumes__record_7#40,
                            org.apache.commons.csv.CSVRecord::$value_seq)
            &   seqDef{i#57;}(Z(0(#)),
                              seqLen(Seq::select(find_heap_Before_LOOP#35,
                                                 find_it#33,
                                                 java.util.Iterator::$seq)),
                              strContent((java.lang.String)(any::seqGet(Seq::select(find_heap_Before_LOOP#35,
                                                                                    find_it#33,
                                                                                    java.util.Iterator::$seq),
                                                                        i#57))))
              = seqDef{i#57;}(Z(0(#)),
                              seqLen(Seq::select(assumes_heap_Before_LOOP#44,
                                                 assumes_it#42,
                                                 java.util.Iterator::$seq)),
                              strContent((java.lang.String)(any::seqGet(Seq::select(assumes_heap_Before_LOOP#44,
                                                                                    assumes_it#42,
                                                                                    java.util.Iterator::$seq),
                                                                        i#57))))
            & find_b_0_Before#34 = assumes_b_0_Before#43
         -> (    Seq::select(find_heap_After_LOOP#38,
                             find__vals_3#32,
                             java.util.Collection::$seq)
               = Seq::select(assumes_heap_After_LOOP#47,
                             assumes__vals_3#41,
                             java.util.Collection::$seq)
             &   Seq::select(find_heap_After_LOOP#38,
                             find_it#33,
                             java.util.Iterator::$seq)
               = Seq::select(assumes_heap_After_LOOP#47,
                             assumes_it#42,
                             java.util.Iterator::$seq)
             &   int::select(find_heap_After_LOOP#38,
                             find_it#33,
                             java.util.Iterator::$index)
               = int::select(assumes_heap_After_LOOP#47,
                             assumes_it#42,
                             java.util.Iterator::$index)
             &   Seq::select(find_heap_After_LOOP#38,
                             find__record_7#31,
                             org.apache.commons.csv.CSVRecord::$key_seq)
               = Seq::select(assumes_heap_After_LOOP#47,
                             assumes__record_7#40,
                             org.apache.commons.csv.CSVRecord::$key_seq)
             &   Seq::select(find_heap_After_LOOP#38,
                             find__record_7#31,
                             org.apache.commons.csv.CSVRecord::$value_seq)
               = Seq::select(assumes_heap_After_LOOP#47,
                             assumes__record_7#40,
                             org.apache.commons.csv.CSVRecord::$value_seq)
             &   seqDef{i#57;}(Z(0(#)),
                               seqLen(Seq::select(find_heap_After_LOOP#38,
                                                  find_it#33,
                                                  java.util.Iterator::$seq)),
                               strContent((java.lang.String)(any::seqGet(Seq::select(find_heap_After_LOOP#38,
                                                                                     find_it#33,
                                                                                     java.util.Iterator::$seq),
                                                                         i#57))))
               = seqDef{i#57;}(Z(0(#)),
                               seqLen(Seq::select(assumes_heap_After_LOOP#47,
                                                  assumes_it#42,
                                                  java.util.Iterator::$seq)),
                               strContent((java.lang.String)(any::seqGet(Seq::select(assumes_heap_After_LOOP#47,
                                                                                     assumes_it#42,
                                                                                     java.util.Iterator::$seq),
                                                                         i#57))))
             & find_b_0_After#37 = assumes_b_0_After#46)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876 {
  \schemaVar \term java.util.Iterator find_it#58;
  \schemaVar \term boolean find_result_50#59;
  \schemaVar \term java.lang.Throwable find_exc_66#60;
  \schemaVar \term Heap find_heap#61;
  \schemaVar \term java.util.Iterator assumes_it#62;
  \schemaVar \term boolean assumes_result_50#63;
  \schemaVar \term java.lang.Throwable assumes_exc_66#64;
  \schemaVar \term Heap assumes_heap#65;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#62,
                                          assumes_heap#65,
                                          assumes_it#62,
                                          assumes_result_50#63,
                                          assumes_exc_66#64,
                                          assumes_heap#65)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#58,
                                 find_heap#61,
                                 find_it#58,
                                 find_result_50#59,
                                 find_exc_66#60,
                                 find_heap#61)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#58,
                                 find_heap#61,
                                 find_it#58,
                                 find_result_50#59,
                                 find_exc_66#60,
                                 find_heap#61)
  )
  \add (      java.lang.Object::<inv>(find_heap#61, find_it#58)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#65, assumes_it#62)<<impl>>
         ->     seqLen(Seq::select(find_heap#61,
                                   find_it#58,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#65,
                                   assumes_it#62,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#61,
                            find_it#58,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#65,
                            assumes_it#62,
                            java.util.Iterator::$index)
         -> (find_result_50#59 = assumes_result_50#63)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_0 {
  \schemaVar \term java.util.Iterator find_it#66;
  \schemaVar \term boolean find_result_51#67;
  \schemaVar \term java.lang.Throwable find_exc_67#68;
  \schemaVar \term Heap find_heap#69;
  \schemaVar \term java.util.Iterator assumes_it#70;
  \schemaVar \term boolean assumes_result_51#71;
  \schemaVar \term java.lang.Throwable assumes_exc_67#72;
  \schemaVar \term Heap assumes_heap#73;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#70,
                                          assumes_heap#73,
                                          assumes_it#70,
                                          assumes_result_51#71,
                                          assumes_exc_67#72,
                                          assumes_heap#73)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#66,
                                 find_heap#69,
                                 find_it#66,
                                 find_result_51#67,
                                 find_exc_67#68,
                                 find_heap#69)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#66,
                                 find_heap#69,
                                 find_it#66,
                                 find_result_51#67,
                                 find_exc_67#68,
                                 find_heap#69)
  )
  \add (      java.lang.Object::<inv>(find_heap#69, find_it#66)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#73, assumes_it#70)<<impl>>
         ->     seqLen(Seq::select(find_heap#69,
                                   find_it#66,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#73,
                                   assumes_it#70,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#69,
                            find_it#66,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#73,
                            assumes_it#70,
                            java.util.Iterator::$index)
         -> (find_result_51#67 = assumes_result_51#71)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_1 {
  \schemaVar \term java.util.Iterator find_it#74;
  \schemaVar \term boolean find_result_52#75;
  \schemaVar \term java.lang.Throwable find_exc_68#76;
  \schemaVar \term Heap find_heap#77;
  \schemaVar \term java.util.Iterator assumes_it#78;
  \schemaVar \term boolean assumes_result_52#79;
  \schemaVar \term java.lang.Throwable assumes_exc_68#80;
  \schemaVar \term Heap assumes_heap#81;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#78,
                                          assumes_heap#81,
                                          assumes_it#78,
                                          assumes_result_52#79,
                                          assumes_exc_68#80,
                                          assumes_heap#81)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#74,
                                 find_heap#77,
                                 find_it#74,
                                 find_result_52#75,
                                 find_exc_68#76,
                                 find_heap#77)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#74,
                                 find_heap#77,
                                 find_it#74,
                                 find_result_52#75,
                                 find_exc_68#76,
                                 find_heap#77)
  )
  \add (      java.lang.Object::<inv>(find_heap#77, find_it#74)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#81, assumes_it#78)<<impl>>
         ->     seqLen(Seq::select(find_heap#77,
                                   find_it#74,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#81,
                                   assumes_it#78,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#77,
                            find_it#74,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#81,
                            assumes_it#78,
                            java.util.Iterator::$index)
         -> (find_result_52#75 = assumes_result_52#79)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_2 {
  \schemaVar \term java.util.Iterator find_it#82;
  \schemaVar \term boolean find_result_52#83;
  \schemaVar \term java.lang.Throwable find_exc_68#84;
  \schemaVar \term Heap find_heap#85;
  \schemaVar \term java.util.Iterator assumes_it#86;
  \schemaVar \term boolean assumes_result_52#87;
  \schemaVar \term java.lang.Throwable assumes_exc_68#88;
  \schemaVar \term Heap assumes_heap#89;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#86,
                                          assumes_heap#89,
                                          assumes_it#86,
                                          assumes_result_52#87,
                                          assumes_exc_68#88,
                                          assumes_heap#89)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#82,
                                 find_heap#85,
                                 find_it#82,
                                 find_result_52#83,
                                 find_exc_68#84,
                                 find_heap#85)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#82,
                                 find_heap#85,
                                 find_it#82,
                                 find_result_52#83,
                                 find_exc_68#84,
                                 find_heap#85)
  )
  \add (      java.lang.Object::<inv>(find_heap#85, find_it#82)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#89, assumes_it#86)<<impl>>
         ->     seqLen(Seq::select(find_heap#85,
                                   find_it#82,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#89,
                                   assumes_it#86,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#85,
                            find_it#82,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#89,
                            assumes_it#86,
                            java.util.Iterator::$index)
         -> (find_result_52#83 = assumes_result_52#87)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_3 {
  \schemaVar \term java.util.Iterator find_it#90;
  \schemaVar \term boolean find_result_50#91;
  \schemaVar \term java.lang.Throwable find_exc_66#92;
  \schemaVar \term Heap find_heap#93;
  \schemaVar \term java.util.Iterator assumes_it#94;
  \schemaVar \term boolean assumes_result_50#95;
  \schemaVar \term java.lang.Throwable assumes_exc_66#96;
  \schemaVar \term Heap assumes_heap#97;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#94,
                                          assumes_heap#97,
                                          assumes_it#94,
                                          assumes_result_50#95,
                                          assumes_exc_66#96,
                                          assumes_heap#97)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#90,
                                 find_heap#93,
                                 find_it#90,
                                 find_result_50#91,
                                 find_exc_66#92,
                                 find_heap#93)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#90,
                                 find_heap#93,
                                 find_it#90,
                                 find_result_50#91,
                                 find_exc_66#92,
                                 find_heap#93)
  )
  \add (      java.lang.Object::<inv>(find_heap#93, find_it#90)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#97, assumes_it#94)<<impl>>
         ->     seqLen(Seq::select(find_heap#93,
                                   find_it#90,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#97,
                                   assumes_it#94,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#93,
                            find_it#90,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#97,
                            assumes_it#94,
                            java.util.Iterator::$index)
         -> (find_result_50#91 = assumes_result_50#95)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_4 {
  \schemaVar \term java.util.Iterator find_it#98;
  \schemaVar \term boolean find_result_51#99;
  \schemaVar \term java.lang.Throwable find_exc_67#100;
  \schemaVar \term Heap find_heap#101;
  \schemaVar \term java.util.Iterator assumes_it#102;
  \schemaVar \term boolean assumes_result_51#103;
  \schemaVar \term java.lang.Throwable assumes_exc_67#104;
  \schemaVar \term Heap assumes_heap#105;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#102,
                                          assumes_heap#105,
                                          assumes_it#102,
                                          assumes_result_51#103,
                                          assumes_exc_67#104,
                                          assumes_heap#105)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#98,
                                 find_heap#101,
                                 find_it#98,
                                 find_result_51#99,
                                 find_exc_67#100,
                                 find_heap#101)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#98,
                                 find_heap#101,
                                 find_it#98,
                                 find_result_51#99,
                                 find_exc_67#100,
                                 find_heap#101)
  )
  \add (      java.lang.Object::<inv>(find_heap#101, find_it#98)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#105, assumes_it#102)<<impl>>
         ->     seqLen(Seq::select(find_heap#101,
                                   find_it#98,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#105,
                                   assumes_it#102,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#101,
                            find_it#98,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#105,
                            assumes_it#102,
                            java.util.Iterator::$index)
         -> (find_result_51#99 = assumes_result_51#103)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_5 {
  \schemaVar \term java.util.Iterator find_it#106;
  \schemaVar \term boolean find_result_52#107;
  \schemaVar \term java.lang.Throwable find_exc_68#108;
  \schemaVar \term Heap find_heap#109;
  \schemaVar \term java.util.Iterator assumes_it#110;
  \schemaVar \term boolean assumes_result_52#111;
  \schemaVar \term java.lang.Throwable assumes_exc_68#112;
  \schemaVar \term Heap assumes_heap#113;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#110,
                                          assumes_heap#113,
                                          assumes_it#110,
                                          assumes_result_52#111,
                                          assumes_exc_68#112,
                                          assumes_heap#113)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#106,
                                 find_heap#109,
                                 find_it#106,
                                 find_result_52#107,
                                 find_exc_68#108,
                                 find_heap#109)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#106,
                                 find_heap#109,
                                 find_it#106,
                                 find_result_52#107,
                                 find_exc_68#108,
                                 find_heap#109)
  )
  \add (      java.lang.Object::<inv>(find_heap#109, find_it#106)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#113, assumes_it#110)<<impl>>
         ->     seqLen(Seq::select(find_heap#109,
                                   find_it#106,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#113,
                                   assumes_it#110,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#109,
                            find_it#106,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#113,
                            assumes_it#110,
                            java.util.Iterator::$index)
         -> (find_result_52#107 = assumes_result_52#111)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_6 {
  \schemaVar \term java.util.Iterator find_it#114;
  \schemaVar \term boolean find_result_53#115;
  \schemaVar \term java.lang.Throwable find_exc_69#116;
  \schemaVar \term Heap find_heap#117;
  \schemaVar \term java.util.Iterator assumes_it#118;
  \schemaVar \term boolean assumes_result_53#119;
  \schemaVar \term java.lang.Throwable assumes_exc_69#120;
  \schemaVar \term Heap assumes_heap#121;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#118,
                                          assumes_heap#121,
                                          assumes_it#118,
                                          assumes_result_53#119,
                                          assumes_exc_69#120,
                                          assumes_heap#121)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#114,
                                 find_heap#117,
                                 find_it#114,
                                 find_result_53#115,
                                 find_exc_69#116,
                                 find_heap#117)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#114,
                                 find_heap#117,
                                 find_it#114,
                                 find_result_53#115,
                                 find_exc_69#116,
                                 find_heap#117)
  )
  \add (      java.lang.Object::<inv>(find_heap#117, find_it#114)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#121, assumes_it#118)<<impl>>
         ->     seqLen(Seq::select(find_heap#117,
                                   find_it#114,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#121,
                                   assumes_it#118,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#117,
                            find_it#114,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#121,
                            assumes_it#118,
                            java.util.Iterator::$index)
         -> (find_result_53#115 = assumes_result_53#119)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_7 {
  \schemaVar \term java.util.Iterator find_it#122;
  \schemaVar \term boolean find_result_50#123;
  \schemaVar \term java.lang.Throwable find_exc_66#124;
  \schemaVar \term Heap find_heap#125;
  \schemaVar \term java.util.Iterator assumes_it#126;
  \schemaVar \term boolean assumes_result_50#127;
  \schemaVar \term java.lang.Throwable assumes_exc_66#128;
  \schemaVar \term Heap assumes_heap#129;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#126,
                                          assumes_heap#129,
                                          assumes_it#126,
                                          assumes_result_50#127,
                                          assumes_exc_66#128,
                                          assumes_heap#129)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#122,
                                 find_heap#125,
                                 find_it#122,
                                 find_result_50#123,
                                 find_exc_66#124,
                                 find_heap#125)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#122,
                                 find_heap#125,
                                 find_it#122,
                                 find_result_50#123,
                                 find_exc_66#124,
                                 find_heap#125)
  )
  \add (      java.lang.Object::<inv>(find_heap#125, find_it#122)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#129, assumes_it#126)<<impl>>
         ->     seqLen(Seq::select(find_heap#125,
                                   find_it#122,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#129,
                                   assumes_it#126,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#125,
                            find_it#122,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#129,
                            assumes_it#126,
                            java.util.Iterator::$index)
         -> (find_result_50#123 = assumes_result_50#127)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_8 {
  \schemaVar \term java.util.Iterator find_it#130;
  \schemaVar \term boolean find_result_51#131;
  \schemaVar \term java.lang.Throwable find_exc_67#132;
  \schemaVar \term Heap find_heap#133;
  \schemaVar \term java.util.Iterator assumes_it#134;
  \schemaVar \term boolean assumes_result_51#135;
  \schemaVar \term java.lang.Throwable assumes_exc_67#136;
  \schemaVar \term Heap assumes_heap#137;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#134,
                                          assumes_heap#137,
                                          assumes_it#134,
                                          assumes_result_51#135,
                                          assumes_exc_67#136,
                                          assumes_heap#137)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#130,
                                 find_heap#133,
                                 find_it#130,
                                 find_result_51#131,
                                 find_exc_67#132,
                                 find_heap#133)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#130,
                                 find_heap#133,
                                 find_it#130,
                                 find_result_51#131,
                                 find_exc_67#132,
                                 find_heap#133)
  )
  \add (      java.lang.Object::<inv>(find_heap#133, find_it#130)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#137, assumes_it#134)<<impl>>
         ->     seqLen(Seq::select(find_heap#133,
                                   find_it#130,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#137,
                                   assumes_it#134,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#133,
                            find_it#130,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#137,
                            assumes_it#134,
                            java.util.Iterator::$index)
         -> (find_result_51#131 = assumes_result_51#135)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

unfold_computed_formula_0_of_Loop_Invariant_327_addInputCols_1102371444 {
  \schemaVar \variables int i#190;
  \schemaVar \variables int j#189;
  \schemaVar \variables int i#191;
  \schemaVar \term Heap sv_heap_Before_LOOP_A#143;
  \schemaVar \term boolean sv_b_0_Before_A#142;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_50_After_LOOP_A#144;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_50_A_0#138;
  \schemaVar \term boolean sv_b_0_After_A#145;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv__record_7_A_0#139;
  \schemaVar \term java.util.ArrayList sv__vals_3_A_0#140;
  \schemaVar \term java.util.Iterator sv_it_A#141;
  \schemaVar \term Heap sv_heap_After_LOOP_A#146;
  \schemaVar \variables int i#160;
  \schemaVar \variables int j#159;
  \schemaVar \variables int i#161;
  \schemaVar \term Heap sv_heap_Before_LOOP_B#152;
  \schemaVar \term boolean sv_b_0_Before_B#151;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_50_After_LOOP_B#153;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_50_B_0#147;
  \schemaVar \term boolean sv_b_0_After_B#154;
  \schemaVar \term org.apache.commons.csv.CSVRecord sv__record_7_B_0#148;
  \schemaVar \term java.util.ArrayList sv__vals_3_B_0#149;
  \schemaVar \term java.util.Iterator sv_it_B#150;
  \schemaVar \term Heap sv_heap_After_LOOP_B#155;
  \schemaVar \variables int i_0#192;
  \schemaVar \variables int i#193;
  \schemaVar \variables int iv#194;
  
  \find (
      {heap:=sv_heap_Before_LOOP_A#143}
        (  wellFormed(sv_heap_Before_LOOP_A#143)
         & heap = sv_heap_Before_LOOP_A#143
         & !sv_self_50_A_0#138 = null
         &   boolean::select(heap,
                             sv_self_50_A_0#138,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_A_0#138)
           = TRUE
         & (  ((  sv__record_7_A_0#139 = null
                |   boolean::select(sv_heap_Before_LOOP_A#143,
                                    sv__record_7_A_0#139,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv__vals_3_A_0#140 = null
                |   boolean::select(sv_heap_Before_LOOP_A#143,
                                    sv__vals_3_A_0#140,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_it_A#141 = null
                |   boolean::select(sv_heap_Before_LOOP_A#143,
                                    sv_it_A#141,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  ((((((((\forall j#189;
                         (   (  leq(Z(0(#)), j#189)
                              & lt(j#189,
                                   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                                      _cols_2,
                                                      java.util.Collection::$seq))))<<SC>>
                          -> \exists i#190;
                               ((  (leq(Z(0(#)), i#190)
                                 & lt(i#190,
                                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         sv__record_7_A_0#139,
                                                         org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                 &   (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                                                sv__record_7_A_0#139,
                                                                                org.apache.commons.csv.CSVRecord::$key_seq),
                                                                    i#190))
                                   = (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                                                _cols_2,
                                                                                java.util.Collection::$seq),
                                                                    j#189)))<<SC>>))
             & \forall i#191;
                 (   (  leq(Z(0(#)), i#191)
                      & lt(i#191,
                           seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                              _cols_2,
                                              java.util.Collection::$seq))))<<SC>>
                  -> !  (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                                   _cols_2,
                                                                   java.util.Collection::$seq),
                                                       i#191))
                      = null))<<SC>>
             & !sv__vals_3_A_0#140 = _cols_2)<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143,
                                       sv__record_7_A_0#139))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143,
                                       sv__vals_3_A_0#140))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143, _cols_2))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143, sv_it_A#141))<<SC>>
             & ((  ((!sv_it_A#141 = null
                 & !sv__record_7_A_0#139 = null)<<SC>>
                 & !sv__vals_3_A_0#140 = null)<<SC>>
                 & !_cols_2 = null)<<SC>>))<<SC>>
             & (  !sv_it_A#141 = null
                & java.util.CollectionIterator::instance(sv_it_A#141) = TRUE))<<SC>>
             &   Seq::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.util.Iterator::$seq)
               = Seq::select(sv_heap_Before_LOOP_A#143,
                             _cols_2,
                             java.util.Collection::$seq))<<SC>>)
         & {self_50:=sv_self_50_A_0#138
            || (_record_7:=sv__record_7_A_0#139
            || _vals_3:=sv__vals_3_A_0#140
            || it:=sv_it_A#141)}
             (  \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                      b_0=it.hasNext();
                    }
                  }\] (  b_0 = sv_b_0_Before_A#142
                       & (   sv_b_0_Before_A#142 = TRUE
                          -> \<{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                                   addInputCol(_vals_3,(String)it.next(),_record_7);
                                 }
                               }\> (    sv_self_50_After_LOOP_A#144
                                      = sv_self_50_A_0#138
                                    & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                                            b_0=it.hasNext();
                                          }
                                        }\] sv_b_0_After_A#145 = b_0
                                    & sv__record_7_A_0#139 = _record_7
                                    & sv__vals_3_A_0#140 = _vals_3
                                    & sv_it_A#141 = it
                                    & sv_heap_After_LOOP_A#146 = heap)))
              & (   sv_b_0_Before_A#142 = FALSE
                 ->   sv_self_50_After_LOOP_A#144 = sv_self_50_A_0#138
                    & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                            b_0=it.hasNext();
                          }
                        }\] sv_b_0_After_A#145 = b_0
                    & sv__record_7_A_0#139 = _record_7
                    & sv__vals_3_A_0#140 = _vals_3
                    & sv_it_A#141 = it
                    & sv_heap_After_LOOP_A#146 = heap)))
    & {heap:=sv_heap_Before_LOOP_B#152}
        (  wellFormed(sv_heap_Before_LOOP_B#152)
         & heap = sv_heap_Before_LOOP_B#152
         & !sv_self_50_B_0#147 = null
         &   boolean::select(heap,
                             sv_self_50_B_0#147,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_B_0#147)
           = TRUE
         & (  ((  sv__record_7_B_0#148 = null
                |   boolean::select(sv_heap_Before_LOOP_B#152,
                                    sv__record_7_B_0#148,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv__vals_3_B_0#149 = null
                |   boolean::select(sv_heap_Before_LOOP_B#152,
                                    sv__vals_3_B_0#149,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_it_B#150 = null
                |   boolean::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  ((((((((\forall j#159;
                         (   (  leq(Z(0(#)), j#159)
                              & lt(j#159,
                                   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                                      _cols_2,
                                                      java.util.Collection::$seq))))<<SC>>
                          -> \exists i#160;
                               ((  (leq(Z(0(#)), i#160)
                                 & lt(i#160,
                                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         sv__record_7_B_0#148,
                                                         org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>>
                                 &   (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                                                sv__record_7_B_0#148,
                                                                                org.apache.commons.csv.CSVRecord::$key_seq),
                                                                    i#160))
                                   = (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                                                _cols_2,
                                                                                java.util.Collection::$seq),
                                                                    j#159)))<<SC>>))
             & \forall i#161;
                 (   (  leq(Z(0(#)), i#161)
                      & lt(i#161,
                           seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                              _cols_2,
                                              java.util.Collection::$seq))))<<SC>>
                  -> !  (java.lang.String)(any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                                   _cols_2,
                                                                   java.util.Collection::$seq),
                                                       i#161))
                      = null))<<SC>>
             & !sv__vals_3_B_0#149 = _cols_2)<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152,
                                       sv__record_7_B_0#148))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152,
                                       sv__vals_3_B_0#149))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152, _cols_2))<<SC>>
             & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152, sv_it_B#150))<<SC>>
             & ((  ((!sv_it_B#150 = null
                 & !sv__record_7_B_0#148 = null)<<SC>>
                 & !sv__vals_3_B_0#149 = null)<<SC>>
                 & !_cols_2 = null)<<SC>>))<<SC>>
             & (  !sv_it_B#150 = null
                & java.util.CollectionIterator::instance(sv_it_B#150) = TRUE))<<SC>>
             &   Seq::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$seq)
               = Seq::select(sv_heap_Before_LOOP_B#152,
                             _cols_2,
                             java.util.Collection::$seq))<<SC>>)
         & {self_50:=sv_self_50_B_0#147
            || (_record_7:=sv__record_7_B_0#148
            || _vals_3:=sv__vals_3_B_0#149
            || it:=sv_it_B#150)}
             (  \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                      b_0=it.hasNext();
                    }
                  }\] (  b_0 = sv_b_0_Before_B#151
                       & (   sv_b_0_Before_B#151 = TRUE
                          -> \<{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                                   addInputCol(_vals_3,(String)it.next(),_record_7);
                                 }
                               }\> (    sv_self_50_After_LOOP_B#153
                                      = sv_self_50_B_0#147
                                    & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                                            b_0=it.hasNext();
                                          }
                                        }\] sv_b_0_After_B#154 = b_0
                                    & sv__record_7_B_0#148 = _record_7
                                    & sv__vals_3_B_0#149 = _vals_3
                                    & sv_it_B#150 = it
                                    & sv_heap_After_LOOP_B#155 = heap)))
              & (   sv_b_0_Before_B#151 = FALSE
                 ->   sv_self_50_After_LOOP_B#153 = sv_self_50_B_0#147
                    & \[{method-frame(source=addInputCols(java.util.ArrayList, java.util.ArrayList, org.apache.commons.csv.CSVRecord)@de.polyas.core3.open.cred.CredTool,this=self_50): {
                            b_0=it.hasNext();
                          }
                        }\] sv_b_0_After_B#154 = b_0
                    & sv__record_7_B_0#148 = _record_7
                    & sv__vals_3_B_0#149 = _vals_3
                    & sv_it_B#150 = it
                    & sv_heap_After_LOOP_B#155 = heap)))
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( iv#194, sv_heap_After_LOOP_B#155),
     \notFreeIn( i#193, sv_heap_After_LOOP_B#155),
     \notFreeIn( i_0#192, sv_heap_After_LOOP_B#155),
     \notFreeIn( i#161, sv_heap_After_LOOP_B#155),
     \notFreeIn( i#160, sv_heap_After_LOOP_B#155),
     \notFreeIn( j#159, sv_heap_After_LOOP_B#155),
     \notFreeIn( i#191, sv_heap_After_LOOP_B#155),
     \notFreeIn( i#190, sv_heap_After_LOOP_B#155),
     \notFreeIn( j#189, sv_heap_After_LOOP_B#155),
     \notFreeIn( iv#194, sv_b_0_After_B#154),
     \notFreeIn( i#193, sv_b_0_After_B#154),
     \notFreeIn( i_0#192, sv_b_0_After_B#154),
     \notFreeIn( i#161, sv_b_0_After_B#154),
     \notFreeIn( i#160, sv_b_0_After_B#154),
     \notFreeIn( j#159, sv_b_0_After_B#154),
     \notFreeIn( i#191, sv_b_0_After_B#154),
     \notFreeIn( i#190, sv_b_0_After_B#154),
     \notFreeIn( j#189, sv_b_0_After_B#154),
     \notFreeIn( iv#194, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i#193, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i_0#192, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i#161, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i#160, sv_self_50_After_LOOP_B#153),
     \notFreeIn( j#159, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i#191, sv_self_50_After_LOOP_B#153),
     \notFreeIn( i#190, sv_self_50_After_LOOP_B#153),
     \notFreeIn( j#189, sv_self_50_After_LOOP_B#153),
     \notFreeIn( iv#194, sv_b_0_Before_B#151),
     \notFreeIn( i#193, sv_b_0_Before_B#151),
     \notFreeIn( i_0#192, sv_b_0_Before_B#151),
     \notFreeIn( i#161, sv_b_0_Before_B#151),
     \notFreeIn( i#160, sv_b_0_Before_B#151),
     \notFreeIn( j#159, sv_b_0_Before_B#151),
     \notFreeIn( i#191, sv_b_0_Before_B#151),
     \notFreeIn( i#190, sv_b_0_Before_B#151),
     \notFreeIn( j#189, sv_b_0_Before_B#151),
     \notFreeIn( iv#194, sv_it_B#150),
     \notFreeIn( i#193, sv_it_B#150),
     \notFreeIn( i_0#192, sv_it_B#150),
     \notFreeIn( i#161, sv_it_B#150),
     \notFreeIn( i#160, sv_it_B#150),
     \notFreeIn( j#159, sv_it_B#150),
     \notFreeIn( i#191, sv_it_B#150),
     \notFreeIn( i#190, sv_it_B#150),
     \notFreeIn( j#189, sv_it_B#150),
     \notFreeIn( iv#194, sv__vals_3_B_0#149),
     \notFreeIn( i#193, sv__vals_3_B_0#149),
     \notFreeIn( i_0#192, sv__vals_3_B_0#149),
     \notFreeIn( i#161, sv__vals_3_B_0#149),
     \notFreeIn( i#160, sv__vals_3_B_0#149),
     \notFreeIn( j#159, sv__vals_3_B_0#149),
     \notFreeIn( i#191, sv__vals_3_B_0#149),
     \notFreeIn( i#190, sv__vals_3_B_0#149),
     \notFreeIn( j#189, sv__vals_3_B_0#149),
     \notFreeIn( iv#194, sv__record_7_B_0#148),
     \notFreeIn( i#193, sv__record_7_B_0#148),
     \notFreeIn( i_0#192, sv__record_7_B_0#148),
     \notFreeIn( i#161, sv__record_7_B_0#148),
     \notFreeIn( i#160, sv__record_7_B_0#148),
     \notFreeIn( j#159, sv__record_7_B_0#148),
     \notFreeIn( i#191, sv__record_7_B_0#148),
     \notFreeIn( i#190, sv__record_7_B_0#148),
     \notFreeIn( j#189, sv__record_7_B_0#148),
     \notFreeIn( iv#194, sv_self_50_B_0#147),
     \notFreeIn( i#193, sv_self_50_B_0#147),
     \notFreeIn( i_0#192, sv_self_50_B_0#147),
     \notFreeIn( i#161, sv_self_50_B_0#147),
     \notFreeIn( i#160, sv_self_50_B_0#147),
     \notFreeIn( j#159, sv_self_50_B_0#147),
     \notFreeIn( i#191, sv_self_50_B_0#147),
     \notFreeIn( i#190, sv_self_50_B_0#147),
     \notFreeIn( j#189, sv_self_50_B_0#147),
     \notFreeIn( iv#194, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i#193, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i_0#192, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i#161, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i#160, sv_heap_Before_LOOP_B#152),
     \notFreeIn( j#159, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i#191, sv_heap_Before_LOOP_B#152),
     \notFreeIn( i#190, sv_heap_Before_LOOP_B#152),
     \notFreeIn( j#189, sv_heap_Before_LOOP_B#152),
     \notFreeIn( iv#194, sv_heap_After_LOOP_A#146),
     \notFreeIn( i#193, sv_heap_After_LOOP_A#146),
     \notFreeIn( i_0#192, sv_heap_After_LOOP_A#146),
     \notFreeIn( i#161, sv_heap_After_LOOP_A#146),
     \notFreeIn( i#160, sv_heap_After_LOOP_A#146),
     \notFreeIn( j#159, sv_heap_After_LOOP_A#146),
     \notFreeIn( i#191, sv_heap_After_LOOP_A#146),
     \notFreeIn( i#190, sv_heap_After_LOOP_A#146),
     \notFreeIn( j#189, sv_heap_After_LOOP_A#146),
     \notFreeIn( iv#194, sv_b_0_After_A#145),
     \notFreeIn( i#193, sv_b_0_After_A#145),
     \notFreeIn( i_0#192, sv_b_0_After_A#145),
     \notFreeIn( i#161, sv_b_0_After_A#145),
     \notFreeIn( i#160, sv_b_0_After_A#145),
     \notFreeIn( j#159, sv_b_0_After_A#145),
     \notFreeIn( i#191, sv_b_0_After_A#145),
     \notFreeIn( i#190, sv_b_0_After_A#145),
     \notFreeIn( j#189, sv_b_0_After_A#145),
     \notFreeIn( iv#194, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i#193, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i_0#192, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i#161, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i#160, sv_self_50_After_LOOP_A#144),
     \notFreeIn( j#159, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i#191, sv_self_50_After_LOOP_A#144),
     \notFreeIn( i#190, sv_self_50_After_LOOP_A#144),
     \notFreeIn( j#189, sv_self_50_After_LOOP_A#144),
     \notFreeIn( iv#194, sv_b_0_Before_A#142),
     \notFreeIn( i#193, sv_b_0_Before_A#142),
     \notFreeIn( i_0#192, sv_b_0_Before_A#142),
     \notFreeIn( i#161, sv_b_0_Before_A#142),
     \notFreeIn( i#160, sv_b_0_Before_A#142),
     \notFreeIn( j#159, sv_b_0_Before_A#142),
     \notFreeIn( i#191, sv_b_0_Before_A#142),
     \notFreeIn( i#190, sv_b_0_Before_A#142),
     \notFreeIn( j#189, sv_b_0_Before_A#142),
     \notFreeIn( iv#194, sv_it_A#141),
     \notFreeIn( i#193, sv_it_A#141),
     \notFreeIn( i_0#192, sv_it_A#141),
     \notFreeIn( i#161, sv_it_A#141),
     \notFreeIn( i#160, sv_it_A#141),
     \notFreeIn( j#159, sv_it_A#141),
     \notFreeIn( i#191, sv_it_A#141),
     \notFreeIn( i#190, sv_it_A#141),
     \notFreeIn( j#189, sv_it_A#141),
     \notFreeIn( iv#194, sv__vals_3_A_0#140),
     \notFreeIn( i#193, sv__vals_3_A_0#140),
     \notFreeIn( i_0#192, sv__vals_3_A_0#140),
     \notFreeIn( i#161, sv__vals_3_A_0#140),
     \notFreeIn( i#160, sv__vals_3_A_0#140),
     \notFreeIn( j#159, sv__vals_3_A_0#140),
     \notFreeIn( i#191, sv__vals_3_A_0#140),
     \notFreeIn( i#190, sv__vals_3_A_0#140),
     \notFreeIn( j#189, sv__vals_3_A_0#140),
     \notFreeIn( iv#194, sv__record_7_A_0#139),
     \notFreeIn( i#193, sv__record_7_A_0#139),
     \notFreeIn( i_0#192, sv__record_7_A_0#139),
     \notFreeIn( i#161, sv__record_7_A_0#139),
     \notFreeIn( i#160, sv__record_7_A_0#139),
     \notFreeIn( j#159, sv__record_7_A_0#139),
     \notFreeIn( i#191, sv__record_7_A_0#139),
     \notFreeIn( i#190, sv__record_7_A_0#139),
     \notFreeIn( j#189, sv__record_7_A_0#139),
     \notFreeIn( iv#194, sv_self_50_A_0#138),
     \notFreeIn( i#193, sv_self_50_A_0#138),
     \notFreeIn( i_0#192, sv_self_50_A_0#138),
     \notFreeIn( i#161, sv_self_50_A_0#138),
     \notFreeIn( i#160, sv_self_50_A_0#138),
     \notFreeIn( j#159, sv_self_50_A_0#138),
     \notFreeIn( i#191, sv_self_50_A_0#138),
     \notFreeIn( i#190, sv_self_50_A_0#138),
     \notFreeIn( j#189, sv_self_50_A_0#138),
     \notFreeIn( iv#194, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i#193, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i_0#192, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i#161, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i#160, sv_heap_Before_LOOP_A#143),
     \notFreeIn( j#159, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i#191, sv_heap_Before_LOOP_A#143),
     \notFreeIn( i#190, sv_heap_Before_LOOP_A#143),
     \notFreeIn( j#189, sv_heap_Before_LOOP_A#143)
  )
  \replacewith (
        {heap:=sv_heap_Before_LOOP_A#143}
          (  wellFormed(sv_heap_Before_LOOP_A#143)
           &   boolean::select(sv_heap_Before_LOOP_A#143,
                               sv_self_50_A_0#138,
                               java.lang.Object::<created>)
             = TRUE
           &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_A_0#138)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_A#143,
                               sv__record_7_A_0#139,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_A#143,
                               sv__vals_3_A_0#140,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_A#143,
                               sv_it_A#141,
                               java.lang.Object::<created>)
             = TRUE
           & \forall j#189;
               (     lt(j#189,
                        seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                           _cols_2_0,
                                           java.util.Collection::$seq)))
                   & geq(j#189, Z(0(#)))
                -> \exists i#190;
                     (  lt(i#190,
                           seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                              sv__record_7_A_0#139,
                                              org.apache.commons.csv.CSVRecord::$key_seq)))
                      &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                               _cols_2_0,
                                                               java.util.Collection::$seq),
                                                   j#189)
                        = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                               sv__record_7_A_0#139,
                                                               org.apache.commons.csv.CSVRecord::$key_seq),
                                                   i#190)
                      & geq(i#190, Z(0(#)))))
           & \forall i#191;
               (     lt(i#191,
                        seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                           _cols_2_0,
                                           java.util.Collection::$seq)))
                   & geq(i#191, Z(0(#)))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                           _cols_2_0,
                                                           java.util.Collection::$seq),
                                               i#191)
                    = null)
           &   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv__record_7_A_0#139,
                                  org.apache.commons.csv.CSVRecord::$value_seq))
             = seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv__record_7_A_0#139,
                                  org.apache.commons.csv.CSVRecord::$key_seq))
           & \forall i_0#192;
               (     lt(i_0#192,
                        seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                           sv__record_7_A_0#139,
                                           org.apache.commons.csv.CSVRecord::$key_seq)))
                   & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                   & geq(i_0#192, Z(0(#)))
                   & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                           sv__record_7_A_0#139,
                                                           org.apache.commons.csv.CSVRecord::$key_seq),
                                               i_0#192)
                    = null)
           & \forall i#193;
               (     lt(i#193,
                        seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                           sv__record_7_A_0#139,
                                           org.apache.commons.csv.CSVRecord::$value_seq)))
                   & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                   & geq(i#193, Z(0(#)))
                   & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                           sv__record_7_A_0#139,
                                                           org.apache.commons.csv.CSVRecord::$value_seq),
                                               i#193)
                    = null)
           & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143, sv_it_A#141)
           & java.util.CollectionIterator::instance(sv_it_A#141) = TRUE
           &   Seq::select(sv_heap_Before_LOOP_A#143,
                           sv_it_A#141,
                           java.util.Iterator::$seq)
             = Seq::select(sv_heap_Before_LOOP_A#143,
                           _cols_2_0,
                           java.util.Collection::$seq)
           & sv_self_50_After_LOOP_A#144 = sv_self_50_A_0#138
           & sv_heap_After_LOOP_A#146 = sv_heap_Before_LOOP_A#143
           & wellFormed(heap)
           & exc_65_0 = null
           & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                          sv_heap_Before_LOOP_A#143,
                                          sv_it_A#141,
                                          FALSE,
                                          exc_65_0,
                                          sv_heap_Before_LOOP_A#143)
           & exc_66_0 = null
           & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                          sv_heap_Before_LOOP_A#143,
                                          sv_it_A#141,
                                          FALSE,
                                          exc_66_0,
                                          sv_heap_Before_LOOP_A#143)
           & !result_50_0 = TRUE
           & !{b_0_0:=FALSE}!sv_b_0_After_A#145 = b_0_0
           & !lt(int::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.util.Iterator::$index),
                 seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                    sv_it_A#141,
                                    java.util.Iterator::$seq)))
           & !result_49_0 = TRUE
           & !sv_b_0_Before_A#142 = TRUE
           & !sv__vals_3_A_0#140 = _cols_2_0
           & !sv__record_7_A_0#139 = null
           & !sv__vals_3_A_0#140 = null
           & !sv_self_50_A_0#138 = null
           & !_cols_2_0 = null
           & !sv_it_A#141 = null)
      & {heap:=sv_heap_Before_LOOP_B#152}
          (  wellFormed(sv_heap_Before_LOOP_B#152)
           &   boolean::select(sv_heap_Before_LOOP_B#152,
                               sv_self_50_B_0#147,
                               java.lang.Object::<created>)
             = TRUE
           &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_B_0#147)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_B#152,
                               sv__record_7_B_0#148,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_B#152,
                               sv__vals_3_B_0#149,
                               java.lang.Object::<created>)
             = TRUE
           &   boolean::select(sv_heap_Before_LOOP_B#152,
                               sv_it_B#150,
                               java.lang.Object::<created>)
             = TRUE
           & \forall j#189;
               (     lt(j#189,
                        seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                           _cols_2_1,
                                           java.util.Collection::$seq)))
                   & geq(j#189, Z(0(#)))
                -> \exists i#190;
                     (  lt(i#190,
                           seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                              sv__record_7_B_0#148,
                                              org.apache.commons.csv.CSVRecord::$key_seq)))
                      &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                               _cols_2_1,
                                                               java.util.Collection::$seq),
                                                   j#189)
                        = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                               sv__record_7_B_0#148,
                                                               org.apache.commons.csv.CSVRecord::$key_seq),
                                                   i#190)
                      & geq(i#190, Z(0(#)))))
           & \forall i#191;
               (     lt(i#191,
                        seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                           _cols_2_1,
                                           java.util.Collection::$seq)))
                   & geq(i#191, Z(0(#)))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                           _cols_2_1,
                                                           java.util.Collection::$seq),
                                               i#191)
                    = null)
           &   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$value_seq))
             = seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$key_seq))
           & \forall i_0#192;
               (     lt(i_0#192,
                        seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                           sv__record_7_B_0#148,
                                           org.apache.commons.csv.CSVRecord::$key_seq)))
                   & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                   & geq(i_0#192, Z(0(#)))
                   & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                           sv__record_7_B_0#148,
                                                           org.apache.commons.csv.CSVRecord::$key_seq),
                                               i_0#192)
                    = null)
           & \forall i#193;
               (     lt(i#193,
                        seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                           sv__record_7_B_0#148,
                                           org.apache.commons.csv.CSVRecord::$value_seq)))
                   & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                   & geq(i#193, Z(0(#)))
                   & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
                -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                           sv__record_7_B_0#148,
                                                           org.apache.commons.csv.CSVRecord::$value_seq),
                                               i#193)
                    = null)
           & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152, sv_it_B#150)
           & java.util.CollectionIterator::instance(sv_it_B#150) = TRUE
           &   Seq::select(sv_heap_Before_LOOP_B#152,
                           sv_it_B#150,
                           java.util.Iterator::$seq)
             = Seq::select(sv_heap_Before_LOOP_B#152,
                           _cols_2_1,
                           java.util.Collection::$seq)
           & sv_self_50_After_LOOP_B#153 = sv_self_50_B_0#147
           & sv_heap_After_LOOP_B#155 = sv_heap_Before_LOOP_B#152
           & wellFormed(heap)
           & exc_65_1 = null
           & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                          sv_heap_Before_LOOP_B#152,
                                          sv_it_B#150,
                                          FALSE,
                                          exc_65_1,
                                          sv_heap_Before_LOOP_B#152)
           & exc_66_2 = null
           & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                          sv_heap_Before_LOOP_B#152,
                                          sv_it_B#150,
                                          FALSE,
                                          exc_66_2,
                                          sv_heap_Before_LOOP_B#152)
           & !result_50_2 = TRUE
           & !{b_0_1:=FALSE}!sv_b_0_After_B#154 = b_0_1
           & !lt(int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index),
                 seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.util.Iterator::$seq)))
           & !result_49_1 = TRUE
           & !sv_b_0_Before_B#151 = TRUE
           & !sv__vals_3_B_0#149 = _cols_2_1
           & !sv__record_7_B_0#148 = null
           & !sv__vals_3_B_0#149 = null
           & !sv_self_50_B_0#147 = null
           & !_cols_2_1 = null
           & !sv_it_B#150 = null)
    | {heap:=sv_heap_Before_LOOP_A#143}
        (  wellFormed(sv_heap_Before_LOOP_A#143)
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv_self_50_A_0#138,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_A_0#138)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv__record_7_A_0#139,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv__vals_3_A_0#140,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.lang.Object::<created>)
           = TRUE
         & \forall j#189;
             (     lt(j#189,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         _cols_2_0,
                                         java.util.Collection::$seq)))
                 & geq(j#189, Z(0(#)))
              -> \exists i#190;
                   (  lt(i#190,
                         seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                            sv__record_7_A_0#139,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))
                    &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                             _cols_2_0,
                                                             java.util.Collection::$seq),
                                                 j#189)
                      = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                             sv__record_7_A_0#139,
                                                             org.apache.commons.csv.CSVRecord::$key_seq),
                                                 i#190)
                    & geq(i#190, Z(0(#)))))
         & \forall i#191;
             (     lt(i#191,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         _cols_2_0,
                                         java.util.Collection::$seq)))
                 & geq(i#191, Z(0(#)))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         _cols_2_0,
                                                         java.util.Collection::$seq),
                                             i#191)
                  = null)
         &   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                sv__record_7_A_0#139,
                                org.apache.commons.csv.CSVRecord::$value_seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                sv__record_7_A_0#139,
                                org.apache.commons.csv.CSVRecord::$key_seq))
         & \forall i_0#192;
             (     lt(i_0#192,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         sv__record_7_A_0#139,
                                         org.apache.commons.csv.CSVRecord::$key_seq)))
                 & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i_0#192, Z(0(#)))
                 & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         sv__record_7_A_0#139,
                                                         org.apache.commons.csv.CSVRecord::$key_seq),
                                             i_0#192)
                  = null)
         & \forall i#193;
             (     lt(i#193,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         sv__record_7_A_0#139,
                                         org.apache.commons.csv.CSVRecord::$value_seq)))
                 & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i#193, Z(0(#)))
                 & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         sv__record_7_A_0#139,
                                                         org.apache.commons.csv.CSVRecord::$value_seq),
                                             i#193)
                  = null)
         & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143, sv_it_A#141)
         & java.util.CollectionIterator::instance(sv_it_A#141) = TRUE
         &   Seq::select(sv_heap_Before_LOOP_A#143,
                         sv_it_A#141,
                         java.util.Iterator::$seq)
           = Seq::select(sv_heap_Before_LOOP_A#143,
                         _cols_2_0,
                         java.util.Collection::$seq)
         & sv_self_50_After_LOOP_A#144 = sv_self_50_A_0#138
         & sv_heap_After_LOOP_A#146 = sv_heap_Before_LOOP_A#143
         & wellFormed(heap)
         & exc_65_0 = null
         & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                        sv_heap_Before_LOOP_A#143,
                                        sv_it_A#141,
                                        FALSE,
                                        exc_65_0,
                                        sv_heap_Before_LOOP_A#143)
         & exc_66_0 = null
         & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                        sv_heap_Before_LOOP_A#143,
                                        sv_it_A#141,
                                        FALSE,
                                        exc_66_0,
                                        sv_heap_Before_LOOP_A#143)
         & !result_50_0 = TRUE
         & !{b_0_0:=FALSE}!sv_b_0_After_A#145 = b_0_0
         & !lt(int::select(sv_heap_Before_LOOP_A#143,
                           sv_it_A#141,
                           java.util.Iterator::$index),
               seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv_it_A#141,
                                  java.util.Iterator::$seq)))
         & !result_49_0 = TRUE
         & !sv_b_0_Before_A#142 = TRUE
         & !sv__vals_3_A_0#140 = _cols_2_0
         & !sv__record_7_A_0#139 = null
         & !sv__vals_3_A_0#140 = null
         & !sv_self_50_A_0#138 = null
         & !_cols_2_0 = null
         & !sv_it_A#141 = null)
    & {heap:=sv_heap_Before_LOOP_B#152}
        (  sv_self_50_After_LOOP_B#153 = sv_self_50_B_0#147
         & sv_heap_After_LOOP_B#155 = heapAfter_addInputCol_1
         & (result_50_3 = null | java.lang.String::instance(result_50_3) = TRUE)
         & result_49_1 = sv_b_0_Before_B#151
         & wellFormed(sv_heap_Before_LOOP_B#152)
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv_self_50_B_0#147,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_B_0#147)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv__record_7_B_0#148,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv__vals_3_B_0#149,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.lang.Object::<created>)
           = TRUE
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  _cols_2_1,
                                  java.util.Collection::$seq)),
               Z(0(#)))
         & \forall j#189;
             (     lt(j#189,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         _cols_2_1,
                                         java.util.Collection::$seq)))
                 & geq(j#189, Z(0(#)))
              -> \exists i#190;
                   (  lt(i#190,
                         seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                            sv__record_7_B_0#148,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))
                    &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                             _cols_2_1,
                                                             java.util.Collection::$seq),
                                                 j#189)
                      = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                             sv__record_7_B_0#148,
                                                             org.apache.commons.csv.CSVRecord::$key_seq),
                                                 i#190)
                    & geq(i#190, Z(0(#)))))
         & \forall i#191;
             (     lt(i#191,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         _cols_2_1,
                                         java.util.Collection::$seq)))
                 & geq(i#191, Z(0(#)))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         _cols_2_1,
                                                         java.util.Collection::$seq),
                                             i#191)
                  = null)
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$value_seq)),
               Z(0(#)))
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$key_seq)),
               Z(0(#)))
         &   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv__record_7_B_0#148,
                                org.apache.commons.csv.CSVRecord::$value_seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv__record_7_B_0#148,
                                org.apache.commons.csv.CSVRecord::$key_seq))
         & \forall i_0#192;
             (     lt(i_0#192,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv__record_7_B_0#148,
                                         org.apache.commons.csv.CSVRecord::$key_seq)))
                 & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i_0#192, Z(0(#)))
                 & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         sv__record_7_B_0#148,
                                                         org.apache.commons.csv.CSVRecord::$key_seq),
                                             i_0#192)
                  = null)
         & \forall i#193;
             (     lt(i#193,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv__record_7_B_0#148,
                                         org.apache.commons.csv.CSVRecord::$value_seq)))
                 & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i#193, Z(0(#)))
                 & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         sv__record_7_B_0#148,
                                                         org.apache.commons.csv.CSVRecord::$value_seq),
                                             i#193)
                  = null)
         & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152, sv_it_B#150)
         & java.util.CollectionIterator::instance(sv_it_B#150) = TRUE
         &   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv_it_B#150,
                                java.util.Iterator::$seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                _cols_2_1,
                                java.util.Collection::$seq))
         & \forall iv#194;
             (     lt(iv#194,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv_it_B#150,
                                         java.util.Iterator::$seq)))
                 & geq(iv#194, Z(0(#)))
              ->   any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                           sv_it_B#150,
                                           java.util.Iterator::$seq),
                               iv#194)
                 = any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                           _cols_2_1,
                                           java.util.Collection::$seq),
                               iv#194))
         &   Seq::select(sv_heap_Before_LOOP_B#152,
                         sv_it_B#150,
                         java.util.Iterator::$seq)
           = Seq::select(sv_heap_Before_LOOP_B#152,
                         _cols_2_1,
                         java.util.Collection::$seq)
         & sv_b_0_Before_B#151 = TRUE
         & wellFormed(heap)
         & exc_65_1 = null
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv_it_B#150,
                                  java.util.Iterator::$seq)),
               Z(0(#)))
         & (    result_49_1 = TRUE
            <-> lt(int::select(sv_heap_Before_LOOP_B#152,
                               sv_it_B#150,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                        sv_heap_Before_LOOP_B#152,
                                        sv_it_B#150,
                                        result_49_1,
                                        exc_65_1,
                                        sv_heap_Before_LOOP_B#152)
         & wellFormed(anon_heap_next<<anonHeapFunction>>)
         &   anon(sv_heap_Before_LOOP_B#152,
                  singleton(sv_it_B#150, java.util.Iterator::$index),
                  anon_heap_next<<anonHeapFunction>>)
           = heapAfter_next_1
         & (  result_50_3 = null
            |   boolean::select(anon_heap_next<<anonHeapFunction>>,
                                result_50_3,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_B#152,
                                result_50_3,
                                java.lang.Object::<created>)
              = TRUE)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            ->   java.lang.Object::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                      sv_it_B#150,
                                                      java.util.Iterator::$seq),
                                          int::select(sv_heap_Before_LOOP_B#152,
                                                      sv_it_B#150,
                                                      java.util.Iterator::$index))
               = result_50_3)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            -> !result_50_3 = null)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            ->   int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_B#150,
                             java.util.Iterator::$index)
               = add(Z(1(#)),
                     int::select(sv_heap_Before_LOOP_B#152,
                                 sv_it_B#150,
                                 java.util.Iterator::$index)))
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
            -> result_50_3 = null)
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
            ->   int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
               = int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_B#150,
                             java.util.Iterator::$index))
         & java.lang.Object::<inv>(heapAfter_next_1, sv_it_B#150)
         & (exc_66_3 = null)<<impl>>
         & RELATED_BY_next_1806066688(sv_it_B#150,
                                      sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      result_50_3,
                                      exc_66_3,
                                      heapAfter_next_1)
         & wellFormed(anon_heap_addInputCol<<anonHeapFunction>>)
         &   anon(heapAfter_next_1,
                  singleton(sv__vals_3_B_0#149, java.util.Collection::$seq),
                  anon_heap_addInputCol<<anonHeapFunction>>)
           = heapAfter_addInputCol_1
         & exc_67_1 = null
         & RELATED_BY_addInputCol_888604927(sv_self_50_B_0#147,
                                            sv__vals_3_B_0#149,
                                            (java.lang.String)result_50_3,
                                            sv__record_7_B_0#148,
                                            heapAfter_next_1,
                                            sv_self_50_B_0#147,
                                            exc_67_1,
                                            heapAfter_addInputCol_1)
         & geq(i_0_1, Z(0(#)))
         & lt(i_0_1,
              seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                 sv__record_7_B_0#148,
                                 org.apache.commons.csv.CSVRecord::$key_seq)))
         &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                  sv__record_7_B_0#148,
                                                  org.apache.commons.csv.CSVRecord::$key_seq),
                                      i_0_1)
           = (java.lang.String)result_50_3
         & wellFormed(heapAfter_next_1)
         & (    boolean::select(anon_heap_next<<anonHeapFunction>>,
                                (java.lang.String)result_50_3,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_B#152,
                                (java.lang.String)result_50_3,
                                java.lang.Object::<created>)
              = TRUE)
         & exc_68_1 = null
         & (    result_51_1 = TRUE
            <-> lt(int::select(anon_heap_next<<anonHeapFunction>>,
                               sv_it_B#150,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                        heapAfter_addInputCol_1,
                                        sv_it_B#150,
                                        result_51_1,
                                        exc_68_1,
                                        heapAfter_addInputCol_1)
         & java.lang.Object::<inv>(heapAfter_addInputCol_1, sv_it_B#150)
         & wellFormed(heapAfter_addInputCol_1)
         & !{b_0_1:=result_51_1}!sv_b_0_After_B#154 = b_0_1
         & !(java.lang.String)result_50_3 = null
         & !sv__vals_3_B_0#149 = _cols_2_1
         & !sv__record_7_B_0#148 = null
         & !sv__vals_3_B_0#149 = null
         & !sv_self_50_B_0#147 = null
         & !_cols_2_1 = null
         & !sv_it_B#150 = null)
    | {heap:=sv_heap_Before_LOOP_A#143}
        (  sv_self_50_After_LOOP_A#144 = sv_self_50_A_0#138
         & sv_heap_After_LOOP_A#146 = heapAfter_addInputCol_0
         & (result_50_1 = null | java.lang.String::instance(result_50_1) = TRUE)
         & result_49_0 = sv_b_0_Before_A#142
         & wellFormed(sv_heap_Before_LOOP_A#143)
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv_self_50_A_0#138,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_A_0#138)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv__record_7_A_0#139,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv__vals_3_A_0#140,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.lang.Object::<created>)
           = TRUE
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  _cols_2_0,
                                  java.util.Collection::$seq)),
               Z(0(#)))
         & \forall j#189;
             (     lt(j#189,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         _cols_2_0,
                                         java.util.Collection::$seq)))
                 & geq(j#189, Z(0(#)))
              -> \exists i#190;
                   (  lt(i#190,
                         seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                            sv__record_7_A_0#139,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))
                    &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                             _cols_2_0,
                                                             java.util.Collection::$seq),
                                                 j#189)
                      = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                             sv__record_7_A_0#139,
                                                             org.apache.commons.csv.CSVRecord::$key_seq),
                                                 i#190)
                    & geq(i#190, Z(0(#)))))
         & \forall i#191;
             (     lt(i#191,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         _cols_2_0,
                                         java.util.Collection::$seq)))
                 & geq(i#191, Z(0(#)))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         _cols_2_0,
                                                         java.util.Collection::$seq),
                                             i#191)
                  = null)
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv__record_7_A_0#139,
                                  org.apache.commons.csv.CSVRecord::$value_seq)),
               Z(0(#)))
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv__record_7_A_0#139,
                                  org.apache.commons.csv.CSVRecord::$key_seq)),
               Z(0(#)))
         &   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                sv__record_7_A_0#139,
                                org.apache.commons.csv.CSVRecord::$value_seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                sv__record_7_A_0#139,
                                org.apache.commons.csv.CSVRecord::$key_seq))
         & \forall i_0#192;
             (     lt(i_0#192,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         sv__record_7_A_0#139,
                                         org.apache.commons.csv.CSVRecord::$key_seq)))
                 & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i_0#192, Z(0(#)))
                 & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         sv__record_7_A_0#139,
                                                         org.apache.commons.csv.CSVRecord::$key_seq),
                                             i_0#192)
                  = null)
         & \forall i#193;
             (     lt(i#193,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         sv__record_7_A_0#139,
                                         org.apache.commons.csv.CSVRecord::$value_seq)))
                 & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i#193, Z(0(#)))
                 & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                         sv__record_7_A_0#139,
                                                         org.apache.commons.csv.CSVRecord::$value_seq),
                                             i#193)
                  = null)
         & java.lang.Object::<inv>(sv_heap_Before_LOOP_A#143, sv_it_A#141)
         & java.util.CollectionIterator::instance(sv_it_A#141) = TRUE
         &   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                sv_it_A#141,
                                java.util.Iterator::$seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                _cols_2_0,
                                java.util.Collection::$seq))
         & \forall iv#194;
             (     lt(iv#194,
                      seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                         sv_it_A#141,
                                         java.util.Iterator::$seq)))
                 & geq(iv#194, Z(0(#)))
              ->   any::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                           sv_it_A#141,
                                           java.util.Iterator::$seq),
                               iv#194)
                 = any::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                           _cols_2_0,
                                           java.util.Collection::$seq),
                               iv#194))
         &   Seq::select(sv_heap_Before_LOOP_A#143,
                         sv_it_A#141,
                         java.util.Iterator::$seq)
           = Seq::select(sv_heap_Before_LOOP_A#143,
                         _cols_2_0,
                         java.util.Collection::$seq)
         & sv_b_0_Before_A#142 = TRUE
         & wellFormed(heap)
         & exc_65_0 = null
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                  sv_it_A#141,
                                  java.util.Iterator::$seq)),
               Z(0(#)))
         & (    result_49_0 = TRUE
            <-> lt(int::select(sv_heap_Before_LOOP_A#143,
                               sv_it_A#141,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                      sv_it_A#141,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                        sv_heap_Before_LOOP_A#143,
                                        sv_it_A#141,
                                        result_49_0,
                                        exc_65_0,
                                        sv_heap_Before_LOOP_A#143)
         & wellFormed(anon_heap_next<<anonHeapFunction>>)
         &   anon(sv_heap_Before_LOOP_A#143,
                  singleton(sv_it_A#141, java.util.Iterator::$index),
                  anon_heap_next<<anonHeapFunction>>)
           = heapAfter_next_0
         & (  result_50_1 = null
            |   boolean::select(anon_heap_next<<anonHeapFunction>>,
                                result_50_1,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_A#143,
                                result_50_1,
                                java.lang.Object::<created>)
              = TRUE)
         & (   lt(int::select(sv_heap_Before_LOOP_A#143,
                              sv_it_A#141,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                     sv_it_A#141,
                                     java.util.Iterator::$seq)))
            ->   java.lang.Object::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                      sv_it_A#141,
                                                      java.util.Iterator::$seq),
                                          int::select(sv_heap_Before_LOOP_A#143,
                                                      sv_it_A#141,
                                                      java.util.Iterator::$index))
               = result_50_1)
         & (   lt(int::select(sv_heap_Before_LOOP_A#143,
                              sv_it_A#141,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                     sv_it_A#141,
                                     java.util.Iterator::$seq)))
            -> !result_50_1 = null)
         & (   lt(int::select(sv_heap_Before_LOOP_A#143,
                              sv_it_A#141,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                     sv_it_A#141,
                                     java.util.Iterator::$seq)))
            ->   int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_A#141,
                             java.util.Iterator::$index)
               = add(Z(1(#)),
                     int::select(sv_heap_Before_LOOP_A#143,
                                 sv_it_A#141,
                                 java.util.Iterator::$index)))
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                    sv_it_A#141,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.util.Iterator::$index)
            -> result_50_1 = null)
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                    sv_it_A#141,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.util.Iterator::$index)
            ->   int::select(sv_heap_Before_LOOP_A#143,
                             sv_it_A#141,
                             java.util.Iterator::$index)
               = int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_A#141,
                             java.util.Iterator::$index))
         & java.lang.Object::<inv>(heapAfter_next_0, sv_it_A#141)
         & (exc_66_1 = null)<<impl>>
         & RELATED_BY_next_1806066688(sv_it_A#141,
                                      sv_heap_Before_LOOP_A#143,
                                      sv_it_A#141,
                                      result_50_1,
                                      exc_66_1,
                                      heapAfter_next_0)
         & wellFormed(anon_heap_addInputCol<<anonHeapFunction>>)
         &   anon(heapAfter_next_0,
                  singleton(sv__vals_3_A_0#140, java.util.Collection::$seq),
                  anon_heap_addInputCol<<anonHeapFunction>>)
           = heapAfter_addInputCol_0
         & exc_67_0 = null
         & RELATED_BY_addInputCol_888604927(sv_self_50_A_0#138,
                                            sv__vals_3_A_0#140,
                                            (java.lang.String)result_50_1,
                                            sv__record_7_A_0#139,
                                            heapAfter_next_0,
                                            sv_self_50_A_0#138,
                                            exc_67_0,
                                            heapAfter_addInputCol_0)
         & geq(i_0_0, Z(0(#)))
         & lt(i_0_0,
              seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                 sv__record_7_A_0#139,
                                 org.apache.commons.csv.CSVRecord::$key_seq)))
         &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_A#143,
                                                  sv__record_7_A_0#139,
                                                  org.apache.commons.csv.CSVRecord::$key_seq),
                                      i_0_0)
           = (java.lang.String)result_50_1
         & wellFormed(heapAfter_next_0)
         & (    boolean::select(anon_heap_next<<anonHeapFunction>>,
                                (java.lang.String)result_50_1,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_A#143,
                                (java.lang.String)result_50_1,
                                java.lang.Object::<created>)
              = TRUE)
         & exc_68_0 = null
         & (    result_51_0 = TRUE
            <-> lt(int::select(anon_heap_next<<anonHeapFunction>>,
                               sv_it_A#141,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_A#143,
                                      sv_it_A#141,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_A#141,
                                        heapAfter_addInputCol_0,
                                        sv_it_A#141,
                                        result_51_0,
                                        exc_68_0,
                                        heapAfter_addInputCol_0)
         & java.lang.Object::<inv>(heapAfter_addInputCol_0, sv_it_A#141)
         & wellFormed(heapAfter_addInputCol_0)
         & !{b_0_0:=result_51_0}!sv_b_0_After_A#145 = b_0_0
         & !(java.lang.String)result_50_1 = null
         & !sv__vals_3_A_0#140 = _cols_2_0
         & !sv__record_7_A_0#139 = null
         & !sv__vals_3_A_0#140 = null
         & !sv_self_50_A_0#138 = null
         & !_cols_2_0 = null
         & !sv_it_A#141 = null)
    & {heap:=sv_heap_Before_LOOP_B#152}
        (  sv_self_50_After_LOOP_B#153 = sv_self_50_B_0#147
         & sv_heap_After_LOOP_B#155 = heapAfter_addInputCol_1
         & (result_50_3 = null | java.lang.String::instance(result_50_3) = TRUE)
         & result_49_1 = sv_b_0_Before_B#151
         & wellFormed(sv_heap_Before_LOOP_B#152)
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv_self_50_B_0#147,
                             java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_50_B_0#147)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv__record_7_B_0#148,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv__vals_3_B_0#149,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.lang.Object::<created>)
           = TRUE
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  _cols_2_1,
                                  java.util.Collection::$seq)),
               Z(0(#)))
         & \forall j#189;
             (     lt(j#189,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         _cols_2_1,
                                         java.util.Collection::$seq)))
                 & geq(j#189, Z(0(#)))
              -> \exists i#190;
                   (  lt(i#190,
                         seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                            sv__record_7_B_0#148,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))
                    &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                             _cols_2_1,
                                                             java.util.Collection::$seq),
                                                 j#189)
                      = java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                             sv__record_7_B_0#148,
                                                             org.apache.commons.csv.CSVRecord::$key_seq),
                                                 i#190)
                    & geq(i#190, Z(0(#)))))
         & \forall i#191;
             (     lt(i#191,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         _cols_2_1,
                                         java.util.Collection::$seq)))
                 & geq(i#191, Z(0(#)))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         _cols_2_1,
                                                         java.util.Collection::$seq),
                                             i#191)
                  = null)
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$value_seq)),
               Z(0(#)))
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv__record_7_B_0#148,
                                  org.apache.commons.csv.CSVRecord::$key_seq)),
               Z(0(#)))
         &   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv__record_7_B_0#148,
                                org.apache.commons.csv.CSVRecord::$value_seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv__record_7_B_0#148,
                                org.apache.commons.csv.CSVRecord::$key_seq))
         & \forall i_0#192;
             (     lt(i_0#192,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv__record_7_B_0#148,
                                         org.apache.commons.csv.CSVRecord::$key_seq)))
                 & geq(i_0#192, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i_0#192, Z(0(#)))
                 & leq(i_0#192, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         sv__record_7_B_0#148,
                                                         org.apache.commons.csv.CSVRecord::$key_seq),
                                             i_0#192)
                  = null)
         & \forall i#193;
             (     lt(i#193,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv__record_7_B_0#148,
                                         org.apache.commons.csv.CSVRecord::$value_seq)))
                 & geq(i#193, Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
                 & geq(i#193, Z(0(#)))
                 & leq(i#193, Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
              -> !  java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                         sv__record_7_B_0#148,
                                                         org.apache.commons.csv.CSVRecord::$value_seq),
                                             i#193)
                  = null)
         & java.lang.Object::<inv>(sv_heap_Before_LOOP_B#152, sv_it_B#150)
         & java.util.CollectionIterator::instance(sv_it_B#150) = TRUE
         &   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                sv_it_B#150,
                                java.util.Iterator::$seq))
           = seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                _cols_2_1,
                                java.util.Collection::$seq))
         & \forall iv#194;
             (     lt(iv#194,
                      seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                         sv_it_B#150,
                                         java.util.Iterator::$seq)))
                 & geq(iv#194, Z(0(#)))
              ->   any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                           sv_it_B#150,
                                           java.util.Iterator::$seq),
                               iv#194)
                 = any::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                           _cols_2_1,
                                           java.util.Collection::$seq),
                               iv#194))
         &   Seq::select(sv_heap_Before_LOOP_B#152,
                         sv_it_B#150,
                         java.util.Iterator::$seq)
           = Seq::select(sv_heap_Before_LOOP_B#152,
                         _cols_2_1,
                         java.util.Collection::$seq)
         & sv_b_0_Before_B#151 = TRUE
         & wellFormed(heap)
         & exc_65_1 = null
         & geq(seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                  sv_it_B#150,
                                  java.util.Iterator::$seq)),
               Z(0(#)))
         & (    result_49_1 = TRUE
            <-> lt(int::select(sv_heap_Before_LOOP_B#152,
                               sv_it_B#150,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                        sv_heap_Before_LOOP_B#152,
                                        sv_it_B#150,
                                        result_49_1,
                                        exc_65_1,
                                        sv_heap_Before_LOOP_B#152)
         & wellFormed(anon_heap_next<<anonHeapFunction>>)
         &   anon(sv_heap_Before_LOOP_B#152,
                  singleton(sv_it_B#150, java.util.Iterator::$index),
                  anon_heap_next<<anonHeapFunction>>)
           = heapAfter_next_1
         & (  result_50_3 = null
            |   boolean::select(anon_heap_next<<anonHeapFunction>>,
                                result_50_3,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_B#152,
                                result_50_3,
                                java.lang.Object::<created>)
              = TRUE)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            ->   java.lang.Object::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                      sv_it_B#150,
                                                      java.util.Iterator::$seq),
                                          int::select(sv_heap_Before_LOOP_B#152,
                                                      sv_it_B#150,
                                                      java.util.Iterator::$index))
               = result_50_3)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            -> !result_50_3 = null)
         & (   lt(int::select(sv_heap_Before_LOOP_B#152,
                              sv_it_B#150,
                              java.util.Iterator::$index),
                  seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                     sv_it_B#150,
                                     java.util.Iterator::$seq)))
            ->   int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_B#150,
                             java.util.Iterator::$index)
               = add(Z(1(#)),
                     int::select(sv_heap_Before_LOOP_B#152,
                                 sv_it_B#150,
                                 java.util.Iterator::$index)))
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
            -> result_50_3 = null)
         & (     seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                    sv_it_B#150,
                                    java.util.Iterator::$seq))
               = int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
            ->   int::select(sv_heap_Before_LOOP_B#152,
                             sv_it_B#150,
                             java.util.Iterator::$index)
               = int::select(anon_heap_next<<anonHeapFunction>>,
                             sv_it_B#150,
                             java.util.Iterator::$index))
         & java.lang.Object::<inv>(heapAfter_next_1, sv_it_B#150)
         & (exc_66_3 = null)<<impl>>
         & RELATED_BY_next_1806066688(sv_it_B#150,
                                      sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      result_50_3,
                                      exc_66_3,
                                      heapAfter_next_1)
         & wellFormed(anon_heap_addInputCol<<anonHeapFunction>>)
         &   anon(heapAfter_next_1,
                  singleton(sv__vals_3_B_0#149, java.util.Collection::$seq),
                  anon_heap_addInputCol<<anonHeapFunction>>)
           = heapAfter_addInputCol_1
         & exc_67_1 = null
         & RELATED_BY_addInputCol_888604927(sv_self_50_B_0#147,
                                            sv__vals_3_B_0#149,
                                            (java.lang.String)result_50_3,
                                            sv__record_7_B_0#148,
                                            heapAfter_next_1,
                                            sv_self_50_B_0#147,
                                            exc_67_1,
                                            heapAfter_addInputCol_1)
         & geq(i_0_1, Z(0(#)))
         & lt(i_0_1,
              seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                 sv__record_7_B_0#148,
                                 org.apache.commons.csv.CSVRecord::$key_seq)))
         &   java.lang.String::seqGet(Seq::select(sv_heap_Before_LOOP_B#152,
                                                  sv__record_7_B_0#148,
                                                  org.apache.commons.csv.CSVRecord::$key_seq),
                                      i_0_1)
           = (java.lang.String)result_50_3
         & wellFormed(heapAfter_next_1)
         & (    boolean::select(anon_heap_next<<anonHeapFunction>>,
                                (java.lang.String)result_50_3,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(sv_heap_Before_LOOP_B#152,
                                (java.lang.String)result_50_3,
                                java.lang.Object::<created>)
              = TRUE)
         & exc_68_1 = null
         & (    result_51_1 = TRUE
            <-> lt(int::select(anon_heap_next<<anonHeapFunction>>,
                               sv_it_B#150,
                               java.util.Iterator::$index),
                   seqLen(Seq::select(sv_heap_Before_LOOP_B#152,
                                      sv_it_B#150,
                                      java.util.Iterator::$seq))))
         & RELATED_BY_hasNext_608742876(sv_it_B#150,
                                        heapAfter_addInputCol_1,
                                        sv_it_B#150,
                                        result_51_1,
                                        exc_68_1,
                                        heapAfter_addInputCol_1)
         & java.lang.Object::<inv>(heapAfter_addInputCol_1, sv_it_B#150)
         & wellFormed(heapAfter_addInputCol_1)
         & !{b_0_1:=result_51_1}!sv_b_0_After_B#154 = b_0_1
         & !(java.lang.String)result_50_3 = null
         & !sv__vals_3_B_0#149 = _cols_2_1
         & !sv__record_7_B_0#148 = null
         & !sv__vals_3_B_0#149 = null
         & !sv_self_50_B_0#147 = null
         & !_cols_2_1 = null
         & !sv_it_B#150 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_hasNext_608742876_11 {
  \schemaVar \term java.util.Iterator find_it#59;
  \schemaVar \term boolean find_result_51#60;
  \schemaVar \term java.lang.Throwable find_exc_68#61;
  \schemaVar \term Heap find_heap#62;
  \schemaVar \term java.util.Iterator assumes_it#63;
  \schemaVar \term boolean assumes_result_51#64;
  \schemaVar \term java.lang.Throwable assumes_exc_68#65;
  \schemaVar \term Heap assumes_heap#66;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#63,
                                          assumes_heap#66,
                                          assumes_it#63,
                                          assumes_result_51#64,
                                          assumes_exc_68#65,
                                          assumes_heap#66)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#59,
                                 find_heap#62,
                                 find_it#59,
                                 find_result_51#60,
                                 find_exc_68#61,
                                 find_heap#62)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#59,
                                 find_heap#62,
                                 find_it#59,
                                 find_result_51#60,
                                 find_exc_68#61,
                                 find_heap#62)
  )
  \add (      java.lang.Object::<inv>(find_heap#62, find_it#59)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#66, assumes_it#63)<<impl>>
         ->     seqLen(Seq::select(find_heap#62,
                                   find_it#59,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#66,
                                   assumes_it#63,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#62,
                            find_it#59,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#66,
                            assumes_it#63,
                            java.util.Iterator::$index)
         -> (find_result_51#60 = assumes_result_51#64)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_addInputCol_888604927 {
  \schemaVar \term java.util.ArrayList find_var#44;
  \schemaVar \term java.lang.String find_var_1#45;
  \schemaVar \term org.apache.commons.csv.CSVRecord find_var_2#46;
  \schemaVar \term Heap find_heap#48;
  \schemaVar \term de.polyas.core3.open.cred.CredTool find_self_50#43;
  \schemaVar \term java.lang.Throwable find_exc_67#47;
  \schemaVar \term Heap find_heapAfter_addInputCol#49;
  \schemaVar \term java.util.ArrayList assumes_var#51;
  \schemaVar \term java.lang.String assumes_var_1#52;
  \schemaVar \term org.apache.commons.csv.CSVRecord assumes_var_2#53;
  \schemaVar \term Heap assumes_heap#55;
  \schemaVar \term de.polyas.core3.open.cred.CredTool assumes_self_50#50;
  \schemaVar \term java.lang.Throwable assumes_exc_67#54;
  \schemaVar \term Heap assumes_heapAfter_addInputCol#56;
  \schemaVar \variables int i#58;
  
  \assumes ( RELATED_BY_addInputCol_888604927(assumes_self_50#50,
                                              assumes_var#51,
                                              assumes_var_1#52,
                                              assumes_var_2#53,
                                              assumes_heap#55,
                                              assumes_self_50#50,
                                              assumes_exc_67#54,
                                              assumes_heapAfter_addInputCol#56)
            ==>
             
  )
  \find (
    RELATED_BY_addInputCol_888604927(find_self_50#43,
                                     find_var#44,
                                     find_var_1#45,
                                     find_var_2#46,
                                     find_heap#48,
                                     find_self_50#43,
                                     find_exc_67#47,
                                     find_heapAfter_addInputCol#49)
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#58, find_heapAfter_addInputCol#49),
     \notFreeIn( i#58, find_exc_67#47),
     \notFreeIn( i#58, find_heap#48),
     \notFreeIn( i#58, find_var_2#46),
     \notFreeIn( i#58, find_var_1#45),
     \notFreeIn( i#58, find_var#44),
     \notFreeIn( i#58, find_self_50#43),
     \notFreeIn( i#58, assumes_heapAfter_addInputCol#56),
     \notFreeIn( i#58, assumes_exc_67#54),
     \notFreeIn( i#58, assumes_heap#55),
     \notFreeIn( i#58, assumes_var_2#53),
     \notFreeIn( i#58, assumes_var_1#52),
     \notFreeIn( i#58, assumes_var#51),
     \notFreeIn( i#58, assumes_self_50#50)
  )
  \replacewith (
    RELATED_BY_addInputCol_888604927(find_self_50#43,
                                     find_var#44,
                                     find_var_1#45,
                                     find_var_2#46,
                                     find_heap#48,
                                     find_self_50#43,
                                     find_exc_67#47,
                                     find_heapAfter_addInputCol#49)
  )
  \add (      ((\exists i#58;
                  ((  (leq(Z(0(#)), i#58)<<origin("requires @ file CredTool.java @ line 333","[]")>>
                    & lt(i#58,
                         seqLen(Seq::select(find_heap#48,
                                            find_var_2#46,
                                            org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CredTool.java @ line 333","[]")>>)<<SC,
                                                                                                                                                       origin("requires @ file CredTool.java @ line 333","[]")>>
                    & (  (java.lang.String)(any::seqGet(Seq::select(find_heap#48,
                                                                    find_var_2#46,
                                                                    org.apache.commons.csv.CSVRecord::$key_seq),
                                                        i#58))
                       = find_var_1#45)<<origin("requires @ file CredTool.java @ line 333","[]")>>)<<SC,
                                                                                                     origin("requires @ file CredTool.java @ line 333","[]")>>))<<origin("requires @ file CredTool.java @ line 333","[]")>>
            & ((  java.lang.Object::<inv>(find_heap#48, find_var_2#46)
                & ((  java.lang.Object::<inv>(find_heap#48, find_var#44)
                    & ((  (!(find_var#44 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                              origin("requires @ file CredTool.java @ line 341","[]")>>
                        & ((  (!(find_var_1#45 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                                    origin("requires @ file CredTool.java @ line 341","[]")>>
                            & (!(find_var_2#46 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                                    origin("requires @ file CredTool.java @ line 341","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>
            & ((  (\exists i#58;
                     ((  (leq(Z(0(#)), i#58)<<origin("requires @ file CredTool.java @ line 333","[]")>>
                       & lt(i#58,
                            seqLen(Seq::select(assumes_heap#55,
                                               assumes_var_2#53,
                                               org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CredTool.java @ line 333","[]")>>)<<SC,
                                                                                                                                                          origin("requires @ file CredTool.java @ line 333","[]")>>
                       & (  (java.lang.String)(any::seqGet(Seq::select(assumes_heap#55,
                                                                       assumes_var_2#53,
                                                                       org.apache.commons.csv.CSVRecord::$key_seq),
                                                           i#58))
                          = assumes_var_1#52)<<origin("requires @ file CredTool.java @ line 333","[]")>>)<<SC,
                                                                                                           origin("requires @ file CredTool.java @ line 333","[]")>>))<<origin("requires @ file CredTool.java @ line 333","[]")>>
                & ((  java.lang.Object::<inv>(assumes_heap#55, assumes_var_2#53)
                    & ((  java.lang.Object::<inv>(assumes_heap#55,
                                                  assumes_var#51)
                        & ((  (!(assumes_var#51 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                                     origin("requires @ file CredTool.java @ line 341","[]")>>
                            & ((  (!(assumes_var_1#52 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                                           origin("requires @ file CredTool.java @ line 341","[]")>>
                                & (!(assumes_var_2#53 = null)<<origin("requires @ file CredTool.java @ line 341","[]")>>)<<impl,
                                                                                                                           origin("requires @ file CredTool.java @ line 341","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
         ->     Seq::select(find_heap#48,
                            find_var#44,
                            java.util.Collection::$seq)
              = Seq::select(assumes_heap#55,
                            assumes_var#51,
                            java.util.Collection::$seq)
            &   Seq::select(find_heap#48,
                            find_var_2#46,
                            org.apache.commons.csv.CSVRecord::$key_seq)
              = Seq::select(assumes_heap#55,
                            assumes_var_2#53,
                            org.apache.commons.csv.CSVRecord::$key_seq)
            &   Seq::select(find_heap#48,
                            find_var_2#46,
                            org.apache.commons.csv.CSVRecord::$value_seq)
              = Seq::select(assumes_heap#55,
                            assumes_var_2#53,
                            org.apache.commons.csv.CSVRecord::$value_seq)
            & strContent(find_var_1#45) = strContent(assumes_var_1#52)
         -> (  Seq::select(find_heapAfter_addInputCol#49,
                           find_var#44,
                           java.util.Collection::$seq)
             = Seq::select(assumes_heapAfter_addInputCol#56,
                           assumes_var#51,
                           java.util.Collection::$seq))<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_next_1806066688 {
  \schemaVar \term Heap find_heap#36;
  \schemaVar \term java.util.Iterator find_it#33;
  \schemaVar \term java.lang.Object find_result_50#34;
  \schemaVar \term java.lang.Throwable find_exc_66#35;
  \schemaVar \term Heap find_heapAfter_next#37;
  \schemaVar \term Heap assumes_heap#41;
  \schemaVar \term java.util.Iterator assumes_it#38;
  \schemaVar \term java.lang.Object assumes_result_50#39;
  \schemaVar \term java.lang.Throwable assumes_exc_66#40;
  \schemaVar \term Heap assumes_heapAfter_next#42;
  
  \assumes ( RELATED_BY_next_1806066688(assumes_it#38,
                                        assumes_heap#41,
                                        assumes_it#38,
                                        assumes_result_50#39,
                                        assumes_exc_66#40,
                                        assumes_heapAfter_next#42)
            ==>
             
  )
  \find (
    RELATED_BY_next_1806066688(find_it#33,
                               find_heap#36,
                               find_it#33,
                               find_result_50#34,
                               find_exc_66#35,
                               find_heapAfter_next#37)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_next_1806066688(find_it#33,
                               find_heap#36,
                               find_it#33,
                               find_result_50#34,
                               find_exc_66#35,
                               find_heapAfter_next#37)
  )
  \add (      java.lang.Object::<inv>(find_heap#36, find_it#33)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#41, assumes_it#38)<<impl>>
         ->   (       Seq::select(find_heap#36,
                                  find_it#33,
                                  java.util.Iterator::$seq)
                    = Seq::select(assumes_heap#41,
                                  assumes_it#38,
                                  java.util.Iterator::$seq)
                  &   int::select(find_heap#36,
                                  find_it#33,
                                  java.util.Iterator::$index)
                    = int::select(assumes_heap#41,
                                  assumes_it#38,
                                  java.util.Iterator::$index)
               -> (find_result_50#34 = assumes_result_50#39)<<postCondition>>)
            & (       seqLen(Seq::select(find_heap#36,
                                         find_it#33,
                                         java.util.Iterator::$seq))
                    = seqLen(Seq::select(assumes_heap#41,
                                         assumes_it#38,
                                         java.util.Iterator::$seq))
                  &   int::select(find_heap#36,
                                  find_it#33,
                                  java.util.Iterator::$index)
                    = int::select(assumes_heap#41,
                                  assumes_it#38,
                                  java.util.Iterator::$index)
               -> (  int::select(find_heapAfter_next#37,
                                 find_it#33,
                                 java.util.Iterator::$index)
                   = int::select(assumes_heapAfter_next#42,
                                 assumes_it#38,
                                 java.util.Iterator::$index))<<postCondition>>)
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_10 {
  \schemaVar \term java.util.Iterator find_it#22;
  \schemaVar \term boolean find_result_50#23;
  \schemaVar \term java.lang.Throwable find_exc_66#24;
  \schemaVar \term Heap find_heap#25;
  \schemaVar \term java.util.Iterator assumes_it#26;
  \schemaVar \term boolean assumes_result_50#27;
  \schemaVar \term java.lang.Throwable assumes_exc_66#28;
  \schemaVar \term Heap assumes_heap#29;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#26,
                                          assumes_heap#29,
                                          assumes_it#26,
                                          assumes_result_50#27,
                                          assumes_exc_66#28,
                                          assumes_heap#29)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#22,
                                 find_heap#25,
                                 find_it#22,
                                 find_result_50#23,
                                 find_exc_66#24,
                                 find_heap#25)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#22,
                                 find_heap#25,
                                 find_it#22,
                                 find_result_50#23,
                                 find_exc_66#24,
                                 find_heap#25)
  )
  \add (      java.lang.Object::<inv>(find_heap#25, find_it#22)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#29, assumes_it#26)<<impl>>
         ->     seqLen(Seq::select(find_heap#25,
                                   find_it#22,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#29,
                                   assumes_it#26,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#25,
                            find_it#22,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#29,
                            assumes_it#26,
                            java.util.Iterator::$index)
         -> (find_result_50#23 = assumes_result_50#27)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_hasNext_608742876_9 {
  \schemaVar \term java.util.Iterator find_it#14;
  \schemaVar \term boolean find_result_49#15;
  \schemaVar \term java.lang.Throwable find_exc_65#16;
  \schemaVar \term Heap find_heap#17;
  \schemaVar \term java.util.Iterator assumes_it#18;
  \schemaVar \term boolean assumes_result_49#19;
  \schemaVar \term java.lang.Throwable assumes_exc_65#20;
  \schemaVar \term Heap assumes_heap#21;
  
  \assumes ( RELATED_BY_hasNext_608742876(assumes_it#18,
                                          assumes_heap#21,
                                          assumes_it#18,
                                          assumes_result_49#19,
                                          assumes_exc_65#20,
                                          assumes_heap#21)
            ==>
             
  )
  \find (
    RELATED_BY_hasNext_608742876(find_it#14,
                                 find_heap#17,
                                 find_it#14,
                                 find_result_49#15,
                                 find_exc_65#16,
                                 find_heap#17)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_hasNext_608742876(find_it#14,
                                 find_heap#17,
                                 find_it#14,
                                 find_result_49#15,
                                 find_exc_65#16,
                                 find_heap#17)
  )
  \add (      java.lang.Object::<inv>(find_heap#17, find_it#14)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#21, assumes_it#18)<<impl>>
         ->     seqLen(Seq::select(find_heap#17,
                                   find_it#14,
                                   java.util.Iterator::$seq))
              = seqLen(Seq::select(assumes_heap#21,
                                   assumes_it#18,
                                   java.util.Iterator::$seq))
            &   int::select(find_heap#17,
                            find_it#14,
                            java.util.Iterator::$index)
              = int::select(assumes_heap#21,
                            assumes_it#18,
                            java.util.Iterator::$index)
         -> (find_result_49#15 = assumes_result_49#19)<<postCondition>>
        ==>
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
!(  wellFormed(heapAtPre<<anonHeapFunction>>)
  & heap = heapAtPre<<anonHeapFunction>>
  & !self_50 = null
  &   boolean::select(heap,
                      self_50,
                      java.lang.Object::<created>)
    = TRUE
  &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)
    = TRUE
  & (  ((  vals_3 = null
         |   boolean::select(heapAtPre<<anonHeapFunction>>,
                             vals_3,
                             java.lang.Object::<created>)
           = TRUE)<<SC>>)
     & ((  cols_2 = null
         |   boolean::select(heapAtPre<<anonHeapFunction>>,
                             cols_2,
                             java.lang.Object::<created>)
           = TRUE)<<SC>>)
     & ((  record_7 = null
         |   boolean::select(heapAtPre<<anonHeapFunction>>,
                             record_7,
                             java.lang.Object::<created>)
           = TRUE)<<SC>>))
  & ((  (\forall int j;
           ((   (  leq(Z(0(#)), j)<<origin("requires @ file CredTool.java @ line 295","[]")>>
                 & lt(j,
                      seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,
                                         cols_2,
                                         java.util.Collection::$seq)))<<origin("requires @ file CredTool.java @ line 295","[]")>>)<<SC,
                                                                                                                                    origin("requires @ file CredTool.java @ line 295","[]")>>
             -> (\exists int i;
                   ((  (leq(Z(0(#)), i)<<origin("requires @ file CredTool.java @ line 295","[]")>>
                     & lt(i,
                          seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,
                                             record_7,
                                             org.apache.commons.csv.CSVRecord::$key_seq)))<<origin("requires @ file CredTool.java @ line 295","[]")>>)<<SC,
                                                                                                                                                        origin("requires @ file CredTool.java @ line 295","[]")>>
                     & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,
                                                                     record_7,
                                                                     org.apache.commons.csv.CSVRecord::$key_seq),
                                                         i))
                        = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,
                                                                     cols_2,
                                                                     java.util.Collection::$seq),
                                                         j)))<<origin("requires @ file CredTool.java @ line 295","[]")>>)<<SC,
                                                                                                                           origin("requires @ file CredTool.java @ line 295","[]")>>))<<origin("requires @ file CredTool.java @ line 295","[]")>>)<<origin("requires @ file CredTool.java @ line 295","[]")>>))<<origin("requires @ file CredTool.java @ line 295","[]")>>
      & ((  (\forall int i;
               ((   (  leq(Z(0(#)), i)<<origin("requires @ file CredTool.java @ line 298","[]")>>
                     & lt(i,
                          seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,
                                             cols_2,
                                             java.util.Collection::$seq)))<<origin("requires @ file CredTool.java @ line 298","[]")>>)<<SC,
                                                                                                                                        origin("requires @ file CredTool.java @ line 298","[]")>>
                 -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,
                                                                    cols_2,
                                                                    java.util.Collection::$seq),
                                                        i))
                       = null)<<origin("requires @ file CredTool.java @ line 298","[]")>>)<<origin("requires @ file CredTool.java @ line 298","[]")>>)<<origin("requires @ file CredTool.java @ line 298","[]")>>))<<origin("requires @ file CredTool.java @ line 298","[]")>>
          & ((  (!(vals_3 = cols_2)<<origin("requires @ file CredTool.java @ line 299","[]")>>)<<origin("requires @ file CredTool.java @ line 299","[]")>>
              & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,
                                            record_7)
                  & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,
                                                vals_3)
                      & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,
                                                    cols_2)
                          & ((  (!(vals_3 = null)<<origin("requires @ file CredTool.java @ line 309","[]")>>)<<impl,
                                                                                                               origin("requires @ file CredTool.java @ line 309","[]")>>
                              & ((  (!(cols_2 = null)<<origin("requires @ file CredTool.java @ line 309","[]")>>)<<impl,
                                                                                                                   origin("requires @ file CredTool.java @ line 309","[]")>>
                                  & (!(record_7 = null)<<origin("requires @ file CredTool.java @ line 309","[]")>>)<<impl,
                                                                                                                     origin("requires @ file CredTool.java @ line 309","[]")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)
  & {_vals_3:=vals_3
     || _cols_2:=cols_2
     || _record_7:=record_7}
      \[{
          exc_64=null;try {
            self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;
          }   catch (java.lang.Throwable e) {
            exc_64=e;
          }
        }\] (  selfAtPost_50 = self_50
             & excAtPost_64 = exc_64
             & heapAtPost = heap))

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "127940")

(branch "dummy ID"
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "eqSymm" (formula "13") (term "0,0,0,1"))
(rule "eqSymm" (formula "13") (term "1,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,0"))
(rule "eqSymm" (formula "2"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "6"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "15"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0,1,0,1,0"))
(rule "castedGetAny" (formula "8") (term "1,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "boxToDiamond" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "10") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1,0"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "eqSymm" (formula "10"))
(rule "castedGetAny" (formula "12") (term "0,0,1,0"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
(rule "true_left" (formula "13"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
(rule "true_left" (formula "13"))
(rule "commute_and" (formula "8") (term "0,0"))
(rule "commute_and" (formula "9") (term "0,0"))
(rule "commute_and" (formula "12") (term "0,0,0"))
(rule "commute_and" (formula "12") (term "1,0,0"))
(rule "commute_and" (formula "8") (term "0,0,1,0"))
(rule "commute_and" (formula "11") (term "0,0,0"))
(rule "commute_and" (formula "11") (term "1,0,0"))
(rule "commute_and_2" (formula "8") (term "0,1,0"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_addInputCols,savedHeapBefore_addInputCols,_cols_2Before_addInputCols,_record_7Before_addInputCols,_vals_3Before_addInputCols"))
 (builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "it"))
(rule "shift_paren_and" (formula "12") (term "0,0"))
(rule "commute_and_2" (formula "12") (term "0,0,0"))
(rule "shift_paren_and" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "11") (term "0,0,0"))
 (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_iterator,result_49,exc_65,heapAfter_iterator,anon_heap_iterator") (contract "java.util.ArrayList[java.util.Collection::iterator()].JML normal_behavior operation contract.0"))
(branch "Post (iterator)"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "16"))
    (builtin "One Step Simplification" (formula "15"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "20"))
   (rule "andLeft" (formula "18"))
   (rule "notLeft" (formula "21"))
   (rule "notLeft" (formula "18"))
   (rule "replace_known_right" (formula "15") (term "0,1") (ifseqformula "24"))
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "25")))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=java_util_Iterator_index_0"))
   (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
   (rule "hideAuxiliaryEq" (formula "16"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "16") (term "0"))
   (rule "pullOutSelect" (formula "17") (term "1") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
   (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "28")))
   (rule "hideAuxiliaryEq" (formula "18"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "17") (term "1"))
   (rule "ifthenelse_negated" (formula "17") (term "0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "22"))
   (rule "true_left" (formula "22"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "19"))
   (rule "true_left" (formula "19"))
    (builtin "Loop Invariant" (formula "24") (newnames "variant,b_0,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f,heap_Before_LOOP,b_0_Before,b_0_After,self_50_After_LOOP,self_50_A_0,b_0_Before_A,_record_7_A_0,_vals_3_A_0,it_A,self_50_After_LOOP_A,b_0_After_A,self_50_B_0,b_0_Before_B,_record_7_B_0,_vals_3_B_0,it_B,self_50_After_LOOP_B,b_0_After_B"))
   (branch "Invariant Initially Valid"
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "23")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")) (ifInst ""  (formula "25")) (ifInst ""  (formula "23")))
      (rule "wellFormedAnonEQ" (formula "24") (term "1") (ifseqformula "14"))
      (rule "replaceKnownSelect_taclet0_4" (formula "24") (term "1,1,0"))
      (rule "replaceKnownSelect_taclet0_3" (formula "24") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")) (ifInst ""  (formula "13")))
      (rule "replaceKnownSelect_taclet0_4" (formula "24") (term "0,1,1,0,0,1,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_4" (formula "24") (term "0,1,1,0,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "24") (term "0,1,1,0,0,1,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "24") (term "0,1,1,0,0,0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_4" (formula "24") (term "0,0,0,0,1,0,1,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "24") (term "0,0,0,0,1,0,1,0,0,0,0"))
      (rule "replaceKnownSelect_taclet0_4" (formula "24") (term "0,0,1,1,0,1,0,0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "24") (term "0,0,1,1,0,1,0,0,0,0,0,0"))
      (rule "eqSymm" (formula "24") (term "1,0,1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "24") (term "0,0,1,0,1,0,0,0,0"))
      (rule "castedGetAny" (formula "24") (term "0,1,0,1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "24") (term "1,1,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "24") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0,1,0,0,0,0,0,0"))
      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "9") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "11") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "7") (term "0,0,0,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "8") (term "0,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "9"))
      (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "eqSymm" (formula "16"))
      (rule "applyEq" (formula "19") (term "4") (ifseqformula "18"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "10") (term "0,0,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0,0,0,0,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
      (rule "eqSymm" (formula "9"))
      (rule "applyEq" (formula "23") (term "0,0,0,1,0,1,0,0,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "23") (term "0,0,1,0,0,1,0,0,1,0,0,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "23") (term "0,0,1,0,1,0,0,0,0,0,0") (ifseqformula "16"))
      (rule "applyEq" (formula "11") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "9"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
      (rule "pullOutSelect" (formula "23") (term "0,1,1,0,1,0,0,0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "7")))
      (rule "applyEqReverse" (formula "24") (term "0,1,1,0,1,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
      (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "nnf_imp2or" (formula "8") (term "0"))
      (rule "nnf_imp2or" (formula "7") (term "0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "11") (term "0"))
      (rule "nnf_notAnd" (formula "8") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "8") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
      (rule "mul_literals" (formula "8") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
      (rule "mul_literals" (formula "7") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,1,0,0,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,0,0,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,0,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,1,0,0,0,0"))
      (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,1,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,0,0,0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "23") (term "1,0,0,0") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "23") (term "0,0,0,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "23") (term "0,0,0,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "23") (term "0,0,0,0,1,0,1,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "23") (term "0,1,1,0,0,0,1,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "23") (term "0,0,0,0,1,0,1,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "23") (term "0,1,1,0,0,0,1,0,1,0,0,0"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1,0,1,0,0,0"))
      (rule "expand_inInt" (formula "23") (term "1,0,0,1,1,0,0,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,0,1,0,0,0"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,0,1,0,0,0"))
      (rule "replace_int_MAX" (formula "23") (term "1,0,1,0,0,1,1,0,0,0"))
      (rule "replace_int_MIN" (formula "23") (term "0,1,1,0,0,1,1,0,0,0"))
      (rule "eqSymm" (formula "23") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "23") (term "0,0,1,0,1,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0,1,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0,1,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0,1,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0,1,0,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0,1,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0,1,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0,1,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0,1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0,1,0,1,0,0,0"))
      (rule "pullOutSelect" (formula "23") (term "0,0,0,0,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,0,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "24") (term "0,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")) (ifInst ""  (formula "7")))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,0,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,1,1,1,0,0,0,1,1,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,1,0,1,1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_left" (formula "23") (term "0,0,1,0,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "applyEq" (formula "23") (term "1,1,1,0,0,0,1,1,0,0,0") (ifseqformula "9"))
      (rule "nnf_imp2or" (formula "23") (term "0,0,1,0,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,0,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,0,1,0,0,0"))
      (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,1,1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,0,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,1,0,0,0,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0,1,1,0,0,0"))
      (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "23") (term "1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "23") (term "1,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,1,1,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,1,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,1,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "23") (term "0,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,0,0,1,0,0,1,1,0,0,0"))
      (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,1,0,0,1,1,0,0,0"))
      (rule "mul_literals" (formula "23") (term "1,0,1,0,0,1,1,0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "commute_or" (formula "7") (term "0,0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_and" (formula "7") (term "0,0,1,0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "23") (term "1,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "23") (term "1"))
      (rule "replaceKnownSelect_taclet0_1" (formula "23") (term "1,0,1"))
      (rule "replaceKnownSelect_taclet0_1" (formula "23") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "23") (term "1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "23") (term "0,1,1"))
      (rule "replaceKnownSelect_taclet0_3" (formula "23") (term "0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "23") (term "0,1,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "1,1"))
      (rule "applyEq" (formula "23") (term "0,0,1") (ifseqformula "15"))
      (rule "qeq_literals" (formula "23") (term "0,1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "applyEq" (formula "23") (term "1,1") (ifseqformula "15"))
      (rule "applyEq" (formula "23") (term "0,0,1") (ifseqformula "16"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "23") (term "1,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "commute_or_2" (formula "10") (term "0,0"))
      (rule "commute_or_2" (formula "11") (term "0,0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
      (rule "andLeft" (formula "16"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
      (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "lenNonNegative" (formula "9") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "lenNonNegative" (formula "10") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "applyEq" (formula "10") (term "0") (ifseqformula "11"))
      (rule "commute_or" (formula "11") (term "0,0,0"))
      (rule "commute_or_2" (formula "11") (term "0,0"))
      (rule "commute_or_2" (formula "11") (term "0"))
      (rule "commute_or" (formula "12") (term "0,0,0"))
      (rule "commute_or_2" (formula "12") (term "0,0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_and_2" (formula "7") (term "0,1,0"))
      (rule "ex_pull_out3" (formula "24") (term "0,0,0,0"))
      (rule "ex_pull_out3" (formula "7") (term "0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0"))
      (rule "shift_paren_or" (formula "7") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "1,0,0,0"))
      (rule "commute_or" (formula "7") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "7") (term "0,0,0"))
      (rule "commute_and_2" (formula "7") (term "0,0"))
      (rule "lenNonNegative" (formula "24") (term "1,1,0,0,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "andRight" (formula "25"))
      (branch
         (rule "andRight" (formula "25"))
         (branch
            (rule "allRight" (formula "25") (inst "sk=j_0"))
            (rule "eqSymm" (formula "25") (term "1,1,0"))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,0"))
            (rule "nnf_ex2all" (formula "25"))
            (rule "nnf_notOr" (formula "1") (term "0"))
            (rule "nnf_notOr" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "1,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,1,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,1,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,1,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,1,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
            (rule "distr_forallAnd" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "3") (term "0"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "allLeft" (formula "12") (inst "t=j_0"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "12") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "12") (term "0,0,1"))
            (rule "leq_literals" (formula "12") (term "0,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "notLeft" (formula "12"))
            (rule "allLeft" (formula "11") (inst "t=j_0"))
            (rule "exLeft" (formula "11") (inst "sk=i_0"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "11"))
            (rule "eqSymm" (formula "13") (term "0,0"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
            (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
            (rule "inEqSimp_homoInEq0" (formula "12") (term "0,0"))
            (rule "polySimp_addComm1" (formula "12") (term "0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "12") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "13") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
            (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "11") (term "0,0,1"))
            (rule "leq_literals" (formula "11") (term "0,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
            (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
            (rule "add_literals" (formula "12") (term "0,0,1"))
            (rule "leq_literals" (formula "12") (term "0,1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "1"))
            (rule "qeq_literals" (formula "11") (term "0,1"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "inEqSimp_contradInEq1" (formula "13") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "13") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "13") (term "0,0,1"))
            (rule "add_literals" (formula "13") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "13") (term "0,0,1"))
            (rule "leq_literals" (formula "13") (term "0,1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "allLeft" (formula "3") (inst "t=i_0"))
            (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "12"))
            (rule "qeq_literals" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "13"))
            (rule "andLeft" (formula "3"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "1,1,0"))
            (rule "times_zero_1" (formula "3") (term "1,0"))
            (rule "add_literals" (formula "3") (term "0"))
            (rule "leq_literals" (formula "3"))
            (rule "closeFalse" (formula "3"))
         )
         (branch
            (rule "allRight" (formula "25") (inst "sk=i_0"))
            (rule "orRight" (formula "25"))
            (rule "orRight" (formula "25"))
            (rule "notRight" (formula "27"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "27"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "allLeft" (formula "12") (inst "t=i_0"))
            (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "12") (term "0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "2"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0"))
            (rule "add_literals" (formula "12") (term "0"))
            (rule "leq_literals" (formula "12"))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch
         (rule "andRight" (formula "25"))
         (branch
            (rule "allRight" (formula "25") (inst "sk=i_0_0"))
            (rule "orRight" (formula "25"))
            (rule "notRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "28"))
            (rule "inEqSimp_leqRight" (formula "26"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "28"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "29"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "allLeft" (formula "16") (inst "t=i_0_0"))
            (rule "replace_known_left" (formula "16") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_commuteGeq" (formula "16") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "16") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,1"))
            (rule "leq_literals" (formula "16") (term "0,1"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
            (rule "qeq_literals" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeFalse" (formula "16"))
         )
         (branch
            (rule "allRight" (formula "25") (inst "sk=i_0"))
            (rule "orRight" (formula "25"))
            (rule "notRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "26"))
            (rule "orRight" (formula "28"))
            (rule "inEqSimp_leqRight" (formula "26"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "28"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_leqRight" (formula "29"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "4"))
            (rule "leq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "allLeft" (formula "17") (inst "t=i_0"))
            (rule "replace_known_left" (formula "17") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "17") (term "0,0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "17") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_contradInEq0" (formula "17") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "17") (term "0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "2"))
            (rule "andLeft" (formula "17"))
            (rule "inEqSimp_homoInEq1" (formula "17"))
            (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
            (rule "add_literals" (formula "17") (term "1,1,0"))
            (rule "times_zero_1" (formula "17") (term "1,0"))
            (rule "add_literals" (formula "17") (term "0"))
            (rule "leq_literals" (formula "17"))
            (rule "closeFalse" (formula "17"))
         )
      )
   )
   (branch "Information Flow Validity"
      (rule "unfold_computed_formula_0_of_Loop_Invariant_327_addInputCols_1102371444" (formula "1") (term "0") (inst "iv#194=iv#194") (inst "i#193=i#193") (inst "i_0#192=i_0#192"))
      (rule "impRight" (formula "1"))
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "orLeft" (formula "8"))
      (branch " {heap:=heap_Before_LOOP_A«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_A«anonHeapFunction») ∧ self_50_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_A_0) = TRUE ∧ _record_7_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _vals_3_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ it_A.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[j] = (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[i] = null) ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length = _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction»[i#193] = null) ∧ it_A.<inv> @heap_Before_LOOP_A«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_A) = TRUE ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction» = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction» ∧ self_50_After_LOOP_A = self_50_A_0 ∧ heap_After_LOOP_A = heap_Before_LOOP_A«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_65_0, heap_Before_LOOP_A«anonHeapFunction») ∧ exc_66_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_66_0, heap_Before_LOOP_A«anonHeapFunction») ∧ ¬result_50_0 = TRUE ∧ ¬{b_0_0:=FALSE}¬b_0_After_A = b_0_0 ∧ ¬ it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ¬result_49_0 = TRUE ∧ ¬b_0_Before_A = TRUE ∧ ¬_vals_3_A_0 = _cols_2_0 ∧ ¬_record_7_A_0 = null ∧ ¬_vals_3_A_0 = null ∧ ¬self_50_A_0 = null ∧ ¬_cols_2_0 = null ∧ ¬it_A = null) ∧ {heap:=heap_Before_LOOP_B«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_B«anonHeapFunction») ∧ self_50_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_B_0) = TRUE ∧ _record_7_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _vals_3_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ it_B.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[j] = (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[i] = null) ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length = _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction»[i#193] = null) ∧ it_B.<inv> @heap_Before_LOOP_B«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_B) = TRUE ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction» = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction» ∧ self_50_After_LOOP_B = self_50_B_0 ∧ heap_After_LOOP_B = heap_Before_LOOP_B«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_1 = null ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, FALSE, exc_65_1, heap_Before_LOOP_B«anonHeapFunction») ∧ exc_66_2 = null ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, FALSE, exc_66_2, heap_Before_LOOP_B«anonHeapFunction») ∧ ¬result_50_2 = TRUE ∧ ¬{b_0_1:=FALSE}¬b_0_After_B = b_0_1 ∧ ¬ it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ¬result_49_1 = TRUE ∧ ¬b_0_Before_B = TRUE ∧ ¬_vals_3_B_0 = _cols_2_1 ∧ ¬_record_7_B_0 = null ∧ ¬_vals_3_B_0 = null ∧ ¬self_50_B_0 = null ∧ ¬_cols_2_1 = null ∧ ¬it_B = null) ∨ {heap:=heap_Before_LOOP_A«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_A«anonHeapFunction») ∧ self_50_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_A_0) = TRUE ∧ _record_7_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _vals_3_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ it_A.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[j] = (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[i] = null) ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length = _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction»[i#193] = null) ∧ it_A.<inv>@heap_Before_LOOP_A«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_A) = TRUE ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction» = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction» ∧ self_50_After_LOOP_A = self_50_A_0 ∧ heap_After_LOOP_A = heap_Before_LOOP_A«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_65_0, heap_Before_LOOP_A«anonHeapFunction») ∧ exc_66_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_66_0, heap_Before_LOOP_A«anonHeapFunction») ∧ ¬result_50_0 = TRUE ∧ ¬{b_0_0:=FALSE}¬b_0_After_A = b_0_0 ∧ ¬ it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ¬result_49_0 = TRUE ∧ ¬b_0_Before_A = TRUE ∧ ¬_vals_3_A_0 = _cols_2_0 ∧ ¬_record_7_A_0 = null ∧ ¬_vals_3_A_0 = null ∧ ¬self_50_A_0 = null ∧ ¬_cols_2_0 = null ∧ ¬it_A = null) ∧ {heap:=heap_Before_LOOP_B«anonHeapFunction»} ( self_50_After_LOOP_B = self_50_B_0 ∧ heap_After_LOOP_B = heapAfter_addInputCol_1 ∧ ( result_50_3 = null ∨ java.lang.String::instance(result_50_3) = TRUE) ∧ result_49_1 = b_0_Before_B ∧ wellFormed(heap_Before_LOOP_B«anonHeapFunction») ∧ self_50_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_B_0) = TRUE ∧ _record_7_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _vals_3_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ it_B.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ∀ int j; ( j < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[j] = (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[i] = null) ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length = _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction»[i#193] = null) ∧ it_B.<inv>@heap_Before_LOOP_B«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_B) = TRUE ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int iv#194; ( iv#194 < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ iv#194 ≥ 0 → it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194] = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194]) ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction» = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction» ∧ b_0_Before_B = TRUE ∧ wellFormed(heap) ∧ exc_65_1 = null ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ( result_49_1 = TRUE ↔ it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_49_1, exc_65_1, heap_Before_LOOP_B«anonHeapFunction») ∧ wellFormed(anon_heap_next«anonHeapFunction») ∧ heap_Before_LOOP_B«anonHeapFunction»[anon({(it_B, java.util.Iterator::$index)}, anon_heap_next«anonHeapFunction»)] = heapAfter_next_1 ∧ ( result_50_3 = null ∨ result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → (java.lang.Object)it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[it_B.index@heap_Before_LOOP_B«anonHeapFunction»] = result_50_3) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → ¬result_50_3 = null) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → it_B.index@anon_heap_next«anonHeapFunction» = 1 + it_B.index@heap_Before_LOOP_B«anonHeapFunction») ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → result_50_3 = null) ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → it_B.index@heap_Before_LOOP_B«anonHeapFunction» = it_B.index@anon_heap_next«anonHeapFunction») ∧ it_B.<inv>@heapAfter_next_1 ∧ (exc_66_3 = null)«impl» ∧ RELATED_BY_next_1806066688(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_50_3, exc_66_3, heapAfter_next_1) ∧ wellFormed(anon_heap_addInputCol«anonHeapFunction») ∧ heapAfter_next_1[anon({(_vals_3_B_0, java.util.Collection::$seq)}, anon_heap_addInputCol«anonHeapFunction»)] = heapAfter_addInputCol_1 ∧ exc_67_1 = null ∧ RELATED_BY_addInputCol_888604927(self_50_B_0, _vals_3_B_0, (java.lang.String)result_50_3, _record_7_B_0, heapAfter_next_1, self_50_B_0, exc_67_1, heapAfter_addInputCol_1) ∧ i_0_1 ≥ 0 ∧ i_0_1 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0_1] = (java.lang.String)result_50_3 ∧ wellFormed(heapAfter_next_1) ∧ ( (java.lang.String)result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.lang.String)result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ exc_68_1 = null ∧ ( result_51_1 = TRUE ↔ it_B.index@anon_heap_next«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heapAfter_addInputCol_1, it_B, result_51_1, exc_68_1, heapAfter_addInputCol_1) ∧ it_B.<inv>@heapAfter_addInputCol_1 ∧ wellFormed(heapAfter_addInputCol_1) ∧ ¬{b_0_1:=result_51_1}¬b_0_After_B = b_0_1 ∧ ¬(java.lang.String)result_50_3 = null ∧ ¬_vals_3_B_0 = _cols_2_1 ∧ ¬_record_7_B_0 = null ∧ ¬_vals_3_B_0 = null ∧ ¬self_50_B_0 = null ∧ ¬_cols_2_1 = null ∧ ¬it_B = null)"
         (rule "orLeft" (formula "8"))
         (branch " {heap:=heap_Before_LOOP_A«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_A«anonHeapFunction») ∧ self_50_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_A_0) = TRUE ∧ _record_7_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _vals_3_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ it_A.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[j] = (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[i] = null) ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length = _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction»[i#193] = null) ∧ it_A.<inv>@heap_Before_LOOP_A«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_A) = TRUE ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction» = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction» ∧ self_50_After_LOOP_A = self_50_A_0 ∧ heap_After_LOOP_A = heap_Before_LOOP_A«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_65_0, heap_Before_LOOP_A«anonHeapFunction») ∧ exc_66_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_66_0, heap_Before_LOOP_A«anonHeapFunction») ∧ ¬result_50_0 = TRUE ∧ ¬{b_0_0:=FALSE}¬b_0_After_A = b_0_0 ∧ ¬ it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ¬result_49_0 = TRUE ∧ ¬b_0_Before_A = TRUE ∧ ¬_vals_3_A_0 = _cols_2_0 ∧ ¬_record_7_A_0 = null ∧ ¬_vals_3_A_0 = null ∧ ¬self_50_A_0 = null ∧ ¬_cols_2_0 = null ∧ ¬it_A = null) ∧ {heap:=heap_Before_LOOP_B«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_B«anonHeapFunction») ∧ self_50_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_B_0) = TRUE ∧ _record_7_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _vals_3_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ it_B.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[j] = (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[i] = null) ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length = _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction»[i#193] = null) ∧ it_B.<inv>@heap_Before_LOOP_B«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_B) = TRUE ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction» = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction» ∧ self_50_After_LOOP_B = self_50_B_0 ∧ heap_After_LOOP_B = heap_Before_LOOP_B«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_1 = null ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, FALSE, exc_65_1, heap_Before_LOOP_B«anonHeapFunction») ∧ exc_66_2 = null ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, FALSE, exc_66_2, heap_Before_LOOP_B«anonHeapFunction») ∧ ¬result_50_2 = TRUE ∧ ¬{b_0_1:=FALSE}¬b_0_After_B = b_0_1 ∧ ¬ it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ¬result_49_1 = TRUE ∧ ¬b_0_Before_B = TRUE ∧ ¬_vals_3_B_0 = _cols_2_1 ∧ ¬_record_7_B_0 = null ∧ ¬_vals_3_B_0 = null ∧ ¬self_50_B_0 = null ∧ ¬_cols_2_1 = null ∧ ¬it_B = null)"
            (rule "andLeft" (formula "8"))
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "8"))
            (rule "Use_information_flow_contract_for_hasNext_608742876_10" (formula "45") (ifseqformula "25"))
            (rule "Use_information_flow_contract_for_hasNext_608742876_9" (formula "46") (ifseqformula "25"))
            (rule "Use_information_flow_contract_for_hasNext_608742876_11" (formula "46") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "38")) (ifInst ""  (formula "18")))
            (rule "true_left" (formula "45"))
            (rule "eqSymm" (formula "2"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "70") (term "1,0,0,0,0"))
            (rule "eqSymm" (formula "5"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "70") (term "1"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "70") (term "1,0,0"))
            (rule "eqSymm" (formula "70") (term "1,0,0,0"))
            (rule "eqSymm" (formula "70") (term "0,0,0,0,0,0"))
            (rule "eqSymm" (formula "70") (term "1,0"))
            (rule "eqSymm" (formula "4"))
            (rule "eqSymm" (formula "41"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "70") (term "1,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,2,0"))
            (rule "eqSymm" (formula "6"))
            (rule "inEqSimp_ltRight" (formula "52"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltRight" (formula "53"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "castedGetAny" (formula "70") (term "0,2,1,1,0"))
            (rule "castedGetAny" (formula "70") (term "0,2,0,1,0"))
            (rule "castedGetAny" (formula "8") (term "0,2,0"))
            (rule "eqSymm" (formula "8"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "36") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
            (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "42"))
            (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "4"))
            (rule "apply_eq_boolean" (formula "9") (term "0") (ifseqformula "57"))
            (rule "eqSymm" (formula "9"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "56")))
            (rule "true_left" (formula "9"))
            (rule "applyEqRigid" (formula "69") (term "0,1,0,0,0,0,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "8") (term "0,1,1") (ifseqformula "21"))
            (rule "applyEqRigid" (formula "69") (term "0,0,0,2,1,1,0") (ifseqformula "23"))
            (rule "applyEqRigid" (formula "69") (term "0,0,0,0,0,0,0,0") (ifseqformula "43"))
            (rule "replace_known_left" (formula "69") (term "0,0,0,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "69"))
            (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "41"))
            (rule "applyEq" (formula "28") (term "4") (ifseqformula "27"))
            (rule "applyEq" (formula "8") (term "0,0,2,1") (ifseqformula "21"))
            (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "48") (term "4") (ifseqformula "47"))
            (rule "applyEq" (formula "4") (term "1") (ifseqformula "21"))
            (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "42"))
            (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "42"))
            (rule "applyEq" (formula "38") (term "0,0,0,1,0") (ifseqformula "7"))
            (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "7"))
            (rule "eqSymm" (formula "36"))
            (rule "applyEq" (formula "46") (term "4") (ifseqformula "45"))
            (rule "applyEq" (formula "26") (term "4") (ifseqformula "25"))
            (rule "applyEq" (formula "62") (term "0") (ifseqformula "41"))
            (rule "applyEq" (formula "33") (term "0,1,1,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "40"))
            (rule "applyEq" (formula "37") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "7"))
            (rule "applyEq" (formula "36") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "36") (term "0,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "18") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "16"))
            (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "34") (term "0,0,1,0,0,0,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "34") (term "0,0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "8") (term "0,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "37") (term "1") (ifseqformula "4"))
            (rule "applyEq" (formula "33") (term "0,0,1,0,0,1,0") (ifseqformula "4"))
            (rule "applyEqRigid" (formula "63") (term "0,0,1,0,0") (ifseqformula "38"))
            (rule "eqSymm" (formula "63") (term "1,0,0"))
            (rule "applyEq" (formula "63") (term "0,0,1,0,0,0") (ifseqformula "38"))
            (rule "eqSymm" (formula "63") (term "1,0,0,0"))
            (rule "applyEq" (formula "63") (term "0,0,2,1,1,0") (ifseqformula "21"))
            (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "6"))
            (rule "eqSymm" (formula "33"))
            (rule "applyEqRigid" (formula "62") (term "0,0,0,2,0,1,0") (ifseqformula "37"))
            (rule "applyEq" (formula "8") (term "0,0,2,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0") (ifseqformula "36"))
            (rule "eqSymm" (formula "61") (term "1,0,0,0,0"))
            (rule "applyEq" (formula "61") (term "0,0,1,1,1,0") (ifseqformula "22"))
            (rule "applyEq" (formula "61") (term "0,1,0,0,0,0,0") (ifseqformula "22"))
            (rule "apply_eq_boolean" (formula "61") (term "1,1") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "44")))
            (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "60") (term "0,0,1,0,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "60") (term "1,0,0"))
            (rule "replace_known_left" (formula "60") (term "1,0,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "applyEq" (formula "60") (term "0,0,1,0,1") (ifseqformula "35"))
            (rule "applyEq" (formula "60") (term "0,0,1,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "60") (term "1,0"))
            (rule "replace_known_left" (formula "60") (term "1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "applyEq" (formula "60") (term "0,0,0,0") (ifseqformula "35"))
            (rule "applyEq" (formula "60") (term "1,0,0") (ifseqformula "19"))
            (rule "replace_known_left" (formula "60") (term "0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "applyEq" (formula "60") (term "0,1,1,1") (ifseqformula "19"))
            (rule "applyEq" (formula "60") (term "0,0,0") (ifseqformula "21"))
            (rule "eqSymm" (formula "60") (term "0"))
            (rule "replace_known_left" (formula "60") (term "0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "applyEq" (formula "60") (term "0,1,0") (ifseqformula "33"))
            (rule "applyEq" (formula "60") (term "0,0,2,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "closeTrue" (formula "60"))
         )
         (branch " {heap:=heap_Before_LOOP_A«anonHeapFunction»} ( wellFormed(heap_Before_LOOP_A«anonHeapFunction») ∧ self_50_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_A_0) = TRUE ∧ _record_7_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _vals_3_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ it_A.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ ∀ int j; ( j < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[j] = (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[i] = null) ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length = _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction»[i#193] = null) ∧ it_A.<inv>@heap_Before_LOOP_A«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_A) = TRUE ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction» = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction» ∧ self_50_After_LOOP_A = self_50_A_0 ∧ heap_After_LOOP_A = heap_Before_LOOP_A«anonHeapFunction» ∧ wellFormed(heap) ∧ exc_65_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_65_0, heap_Before_LOOP_A«anonHeapFunction») ∧ exc_66_0 = null ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, FALSE, exc_66_0, heap_Before_LOOP_A«anonHeapFunction») ∧ ¬result_50_0 = TRUE ∧ ¬{b_0_0:=FALSE}¬b_0_After_A = b_0_0 ∧ ¬ it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ¬result_49_0 = TRUE ∧ ¬b_0_Before_A = TRUE ∧ ¬_vals_3_A_0 = _cols_2_0 ∧ ¬_record_7_A_0 = null ∧ ¬_vals_3_A_0 = null ∧ ¬self_50_A_0 = null ∧ ¬_cols_2_0 = null ∧ ¬it_A = null) ∧ {heap:=heap_Before_LOOP_B«anonHeapFunction»} ( self_50_After_LOOP_B = self_50_B_0 ∧ heap_After_LOOP_B = heapAfter_addInputCol_1 ∧ ( result_50_3 = null ∨ java.lang.String::instance(result_50_3) = TRUE) ∧ result_49_1 = b_0_Before_B ∧ wellFormed(heap_Before_LOOP_B«anonHeapFunction») ∧ self_50_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_B_0) = TRUE ∧ _record_7_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _vals_3_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ it_B.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ∀ int j; ( j < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[j] = (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[i] = null) ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length = _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction»[i#193] = null) ∧ it_B.<inv>@heap_Before_LOOP_B«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_B) = TRUE ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int iv#194; ( iv#194 < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ iv#194 ≥ 0 → it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194] = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194]) ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction» = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction» ∧ b_0_Before_B = TRUE ∧ wellFormed(heap) ∧ exc_65_1 = null ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ( result_49_1 = TRUE ↔ it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_49_1, exc_65_1, heap_Before_LOOP_B«anonHeapFunction») ∧ wellFormed(anon_heap_next«anonHeapFunction») ∧ heap_Before_LOOP_B«anonHeapFunction»[anon({(it_B, java.util.Iterator::$index)}, anon_heap_next«anonHeapFunction»)] = heapAfter_next_1 ∧ ( result_50_3 = null ∨ result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → (java.lang.Object)it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[it_B.index@heap_Before_LOOP_B«anonHeapFunction»] = result_50_3) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → ¬result_50_3 = null) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → it_B.index@anon_heap_next«anonHeapFunction» = 1 + it_B.index@heap_Before_LOOP_B«anonHeapFunction») ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → result_50_3 = null) ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → it_B.index@heap_Before_LOOP_B«anonHeapFunction» = it_B.index@anon_heap_next«anonHeapFunction») ∧ it_B.<inv>@heapAfter_next_1 ∧ (exc_66_3 = null)«impl» ∧ RELATED_BY_next_1806066688(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_50_3, exc_66_3, heapAfter_next_1) ∧ wellFormed(anon_heap_addInputCol«anonHeapFunction») ∧ heapAfter_next_1[anon({(_vals_3_B_0, java.util.Collection::$seq)}, anon_heap_addInputCol«anonHeapFunction»)] = heapAfter_addInputCol_1 ∧ exc_67_1 = null ∧ RELATED_BY_addInputCol_888604927(self_50_B_0, _vals_3_B_0, (java.lang.String)result_50_3, _record_7_B_0, heapAfter_next_1, self_50_B_0, exc_67_1, heapAfter_addInputCol_1) ∧ i_0_1 ≥ 0 ∧ i_0_1 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0_1] = (java.lang.String)result_50_3 ∧ wellFormed(heapAfter_next_1) ∧ ( (java.lang.String)result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.lang.String)result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ exc_68_1 = null ∧ ( result_51_1 = TRUE ↔ it_B.index@anon_heap_next«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heapAfter_addInputCol_1, it_B, result_51_1, exc_68_1, heapAfter_addInputCol_1) ∧ it_B.<inv>@heapAfter_addInputCol_1 ∧ wellFormed(heapAfter_addInputCol_1) ∧ ¬{b_0_1:=result_51_1}¬b_0_After_B = b_0_1 ∧ ¬(java.lang.String)result_50_3 = null ∧ ¬_vals_3_B_0 = _cols_2_1 ∧ ¬_record_7_B_0 = null ∧ ¬_vals_3_B_0 = null ∧ ¬self_50_B_0 = null ∧ ¬_cols_2_1 = null ∧ ¬it_B = null)"
            (rule "andLeft" (formula "8"))
             (builtin "One Step Simplification" (formula "9"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "11"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "notLeft" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "notLeft" (formula "9"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "10"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "11"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "18"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "19"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "20"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "21"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "22"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "24"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "eqSymm" (formula "4"))
            (rule "eqSymm" (formula "100") (term "1,0,0"))
            (rule "eqSymm" (formula "28"))
            (rule "eqSymm" (formula "100") (term "1"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "100") (term "1,0"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "2"))
            (rule "eqSymm" (formula "100") (term "0,0,0,0,0,0"))
            (rule "eqSymm" (formula "100") (term "1,0,0,0,0,0"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "100") (term "1,0,0,0"))
            (rule "eqSymm" (formula "81"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "100") (term "1,0,0,0,0"))
            (rule "eqSymm" (formula "5"))
            (rule "polySimp_homoEq" (formula "61") (term "1"))
            (rule "polySimp_addComm1" (formula "61") (term "0,1"))
            (rule "castedGetAny" (formula "100") (term "0,2,1,1,0"))
            (rule "castedGetAny" (formula "100") (term "0,2,0,1,0"))
            (rule "inEqSimp_ltRight" (formula "84"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "castedGetAny" (formula "7") (term "0,2,0"))
            (rule "eqSymm" (formula "7"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "60") (term "0"))
            (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "60") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "78") (term "1"))
            (rule "polySimp_mulComm0" (formula "78") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "78") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "73"))
            (rule "polySimp_mulComm0" (formula "73") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "73") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "55") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "62") (term "0"))
            (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "62") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "61") (term "0"))
            (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "61") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "49") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "49") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,2,0"))
            (rule "eqSymm" (formula "7"))
            (rule "applyEq" (formula "45") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "60") (term "0,0,1,0,0") (ifseqformula "50"))
            (rule "applyEq" (formula "100") (term "0,0,0,0,0,0,0,0") (ifseqformula "30"))
            (rule "eqSymm" (formula "100") (term "0,0,0,0,0,0"))
            (rule "applyEq" (formula "54") (term "0") (ifseqformula "48"))
            (rule "applyEqRigid" (formula "99") (term "0,0,0,2,1,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "3"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "50"))
            (rule "applyEq" (formula "54") (term "0,1,0,1") (ifseqformula "48"))
            (rule "applyEqRigid" (formula "99") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
            (rule "eqSymm" (formula "99") (term "1,0,0,0,0,0"))
            (rule "applyEq" (formula "28") (term "4") (ifseqformula "27"))
            (rule "applyEq" (formula "70") (term "6") (ifseqformula "69"))
            (rule "applyEq" (formula "73") (term "0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "6"))
            (rule "eqSymm" (formula "43"))
            (rule "applyEq" (formula "94") (term "0") (ifseqformula "29"))
            (rule "applyEq" (formula "49") (term "0,0,1,0") (ifseqformula "50"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "true_left" (formula "49"))
            (rule "applyEq" (formula "98") (term "0,1,1,0,0,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "59") (term "0,1,0,0") (ifseqformula "48"))
            (rule "applyEq" (formula "60") (term "0,1,0,0") (ifseqformula "48"))
            (rule "applyEq" (formula "60") (term "1,0,1") (ifseqformula "4"))
            (rule "applyEq" (formula "45") (term "0,0,0,1,0") (ifseqformula "6"))
            (rule "applyEq" (formula "70") (term "0,0,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "75") (term "0,1,0,1") (ifseqformula "47"))
            (rule "applyEq" (formula "97") (term "0,0,0,2,0,1,0") (ifseqformula "30"))
            (rule "applyEq" (formula "39") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "97") (term "0,1,1,0,0,0") (ifseqformula "23"))
            (rule "applyEq" (formula "7") (term "0,0,2,1") (ifseqformula "21"))
            (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "48"))
            (rule "applyEq" (formula "7") (term "0,1,1") (ifseqformula "21"))
            (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "6"))
            (rule "applyEq" (formula "44") (term "0,0,0,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "32") (term "1") (ifseqformula "49"))
            (rule "replace_known_left" (formula "52") (term "0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "52"))
            (rule "replace_known_left" (formula "59") (term "0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "replace_known_left" (formula "57") (term "0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "replace_known_left" (formula "58") (term "0") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "58"))
            (rule "notLeft" (formula "58"))
            (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "79"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "79"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "replace_known_right" (formula "59") (term "1") (ifseqformula "79"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "notLeft" (formula "59"))
            (rule "replace_known_right" (formula "59") (term "0") (ifseqformula "78"))
             (builtin "One Step Simplification" (formula "59"))
            (rule "true_left" (formula "59"))
            (rule "applyEqRigid" (formula "96") (term "0,0,1,0,0") (ifseqformula "30"))
            (rule "eqSymm" (formula "96") (term "1,0,0"))
            (rule "applyEq" (formula "3") (term "1") (ifseqformula "21"))
            (rule "applyEq" (formula "65") (term "5") (ifseqformula "29"))
            (rule "applyEq" (formula "96") (term "0,0,1,1,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "96") (term "0,0,1,0,1,0") (ifseqformula "30"))
            (rule "applyEqRigid" (formula "96") (term "0,0,1,0,0,0") (ifseqformula "30"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "49"))
            (rule "eqSymm" (formula "8"))
            (rule "close" (formula "82") (ifseqformula "8"))
         )
      )
      (branch " {heap:=heap_Before_LOOP_A«anonHeapFunction»} ( self_50_After_LOOP_A = self_50_A_0 ∧ heap_After_LOOP_A = heapAfter_addInputCol_0 ∧ ( result_50_1 = null ∨ java.lang.String::instance(result_50_1) = TRUE) ∧ result_49_0 = b_0_Before_A ∧ wellFormed(heap_Before_LOOP_A«anonHeapFunction») ∧ self_50_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_A_0) = TRUE ∧ _record_7_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _vals_3_A_0.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ it_A.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE ∧ _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ≥ 0 ∧ ∀ int j; ( j < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[j] = (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[i] = null) ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ≥ 0 ∧ _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ≥ 0 ∧ _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length = _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_A_0.value_seq@heap_Before_LOOP_A«anonHeapFunction»[i#193] = null) ∧ it_A.<inv>@heap_Before_LOOP_A«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_A) = TRUE ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ ∀ int iv#194; ( iv#194 < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ iv#194 ≥ 0 → it_A.seq@heap_Before_LOOP_A«anonHeapFunction»[iv#194] = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction»[iv#194]) ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction» = _cols_2_0.seq@heap_Before_LOOP_A«anonHeapFunction» ∧ b_0_Before_A = TRUE ∧ wellFormed(heap) ∧ exc_65_0 = null ∧ it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length ≥ 0 ∧ ( result_49_0 = TRUE ↔ it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, result_49_0, exc_65_0, heap_Before_LOOP_A«anonHeapFunction») ∧ wellFormed(anon_heap_next«anonHeapFunction») ∧ heap_Before_LOOP_A«anonHeapFunction»[anon({(it_A, java.util.Iterator::$index)}, anon_heap_next«anonHeapFunction»)] = heapAfter_next_0 ∧ ( result_50_1 = null ∨ result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ result_50_1.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE) ∧ ( it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length → (java.lang.Object)it_A.seq@heap_Before_LOOP_A«anonHeapFunction»[it_A.index@heap_Before_LOOP_A«anonHeapFunction»] = result_50_1) ∧ ( it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length → ¬result_50_1 = null) ∧ ( it_A.index@heap_Before_LOOP_A«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length → it_A.index@anon_heap_next«anonHeapFunction» = 1 + it_A.index@heap_Before_LOOP_A«anonHeapFunction») ∧ ( it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length = it_A.index@heap_Before_LOOP_A«anonHeapFunction» → result_50_1 = null) ∧ ( it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length = it_A.index@heap_Before_LOOP_A«anonHeapFunction» → it_A.index@heap_Before_LOOP_A«anonHeapFunction» = it_A.index@anon_heap_next«anonHeapFunction») ∧ it_A.<inv>@heapAfter_next_0 ∧ (exc_66_1 = null)«impl» ∧ RELATED_BY_next_1806066688(it_A, heap_Before_LOOP_A«anonHeapFunction», it_A, result_50_1, exc_66_1, heapAfter_next_0) ∧ wellFormed(anon_heap_addInputCol«anonHeapFunction») ∧ heapAfter_next_0[anon({(_vals_3_A_0, java.util.Collection::$seq)}, anon_heap_addInputCol«anonHeapFunction»)] = heapAfter_addInputCol_0 ∧ exc_67_0 = null ∧ RELATED_BY_addInputCol_888604927(self_50_A_0, _vals_3_A_0, (java.lang.String)result_50_1, _record_7_A_0, heapAfter_next_0, self_50_A_0, exc_67_0, heapAfter_addInputCol_0) ∧ i_0_0 ≥ 0 ∧ i_0_0 < _record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction».length ∧ (java.lang.String)_record_7_A_0.key_seq@heap_Before_LOOP_A«anonHeapFunction»[i_0_0] = (java.lang.String)result_50_1 ∧ wellFormed(heapAfter_next_0) ∧ ( (java.lang.String)result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.lang.String)result_50_1.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE) ∧ exc_68_0 = null ∧ ( result_51_0 = TRUE ↔ it_A.index@anon_heap_next«anonHeapFunction» < it_A.seq@heap_Before_LOOP_A«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_A, heapAfter_addInputCol_0, it_A, result_51_0, exc_68_0, heapAfter_addInputCol_0) ∧ it_A.<inv>@heapAfter_addInputCol_0 ∧ wellFormed(heapAfter_addInputCol_0) ∧ ¬{b_0_0:=result_51_0}¬b_0_After_A = b_0_0 ∧ ¬(java.lang.String)result_50_1 = null ∧ ¬_vals_3_A_0 = _cols_2_0 ∧ ¬_record_7_A_0 = null ∧ ¬_vals_3_A_0 = null ∧ ¬self_50_A_0 = null ∧ ¬_cols_2_0 = null ∧ ¬it_A = null) ∧ {heap:=heap_Before_LOOP_B«anonHeapFunction»} ( self_50_After_LOOP_B = self_50_B_0 ∧ heap_After_LOOP_B = heapAfter_addInputCol_1 ∧ ( result_50_3 = null ∨ java.lang.String::instance(result_50_3) = TRUE) ∧ result_49_1 = b_0_Before_B ∧ wellFormed(heap_Before_LOOP_B«anonHeapFunction») ∧ self_50_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ de.polyas.core3.open.cred.CredTool::exactInstance(self_50_B_0) = TRUE ∧ _record_7_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _vals_3_B_0.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ it_B.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE ∧ _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ∀ int j; ( j < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ j ≥ 0 → ∃ int i; ( i < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[j] = (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i] ∧ i ≥ 0)) ∧ ∀ int i; ( i < _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i ≥ 0 → ¬ (java.lang.String)_cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[i] = null) ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length = _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int i_0#192; ( i_0#192 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i_0#192 ≥ -2147483648 ∧ i_0#192 ≥ 0 ∧ i_0#192 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0#192] = null) ∧ ∀ int i#193; ( i#193 < _record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ i#193 ≥ -2147483648 ∧ i#193 ≥ 0 ∧ i#193 ≤ 2147483647 → ¬ (java.lang.String)_record_7_B_0.value_seq@heap_Before_LOOP_B«anonHeapFunction»[i#193] = null) ∧ it_B.<inv>@heap_Before_LOOP_B«anonHeapFunction» ∧ java.util.CollectionIterator::instance(it_B) = TRUE ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ ∀ int iv#194; ( iv#194 < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ iv#194 ≥ 0 → it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194] = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction»[iv#194]) ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction» = _cols_2_1.seq@heap_Before_LOOP_B«anonHeapFunction» ∧ b_0_Before_B = TRUE ∧ wellFormed(heap) ∧ exc_65_1 = null ∧ it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length ≥ 0 ∧ ( result_49_1 = TRUE ↔ it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_49_1, exc_65_1, heap_Before_LOOP_B«anonHeapFunction») ∧ wellFormed(anon_heap_next«anonHeapFunction») ∧ heap_Before_LOOP_B«anonHeapFunction»[anon({(it_B, java.util.Iterator::$index)}, anon_heap_next«anonHeapFunction»)] = heapAfter_next_1 ∧ ( result_50_3 = null ∨ result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → (java.lang.Object)it_B.seq@heap_Before_LOOP_B«anonHeapFunction»[it_B.index@heap_Before_LOOP_B«anonHeapFunction»] = result_50_3) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → ¬result_50_3 = null) ∧ ( it_B.index@heap_Before_LOOP_B«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length → it_B.index@anon_heap_next«anonHeapFunction» = 1 + it_B.index@heap_Before_LOOP_B«anonHeapFunction») ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → result_50_3 = null) ∧ ( it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length = it_B.index@heap_Before_LOOP_B«anonHeapFunction» → it_B.index@heap_Before_LOOP_B«anonHeapFunction» = it_B.index@anon_heap_next«anonHeapFunction») ∧ it_B.<inv>@heapAfter_next_1 ∧ (exc_66_3 = null)«impl» ∧ RELATED_BY_next_1806066688(it_B, heap_Before_LOOP_B«anonHeapFunction», it_B, result_50_3, exc_66_3, heapAfter_next_1) ∧ wellFormed(anon_heap_addInputCol«anonHeapFunction») ∧ heapAfter_next_1[anon({(_vals_3_B_0, java.util.Collection::$seq)}, anon_heap_addInputCol«anonHeapFunction»)] = heapAfter_addInputCol_1 ∧ exc_67_1 = null ∧ RELATED_BY_addInputCol_888604927(self_50_B_0, _vals_3_B_0, (java.lang.String)result_50_3, _record_7_B_0, heapAfter_next_1, self_50_B_0, exc_67_1, heapAfter_addInputCol_1) ∧ i_0_1 ≥ 0 ∧ i_0_1 < _record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction».length ∧ (java.lang.String)_record_7_B_0.key_seq@heap_Before_LOOP_B«anonHeapFunction»[i_0_1] = (java.lang.String)result_50_3 ∧ wellFormed(heapAfter_next_1) ∧ ( (java.lang.String)result_50_3.<created>@anon_heap_next«anonHeapFunction» = TRUE ∨ (java.lang.String)result_50_3.<created>@heap_Before_LOOP_B«anonHeapFunction» = TRUE) ∧ exc_68_1 = null ∧ ( result_51_1 = TRUE ↔ it_B.index@anon_heap_next«anonHeapFunction» < it_B.seq@heap_Before_LOOP_B«anonHeapFunction».length) ∧ RELATED_BY_hasNext_608742876(it_B, heapAfter_addInputCol_1, it_B, result_51_1, exc_68_1, heapAfter_addInputCol_1) ∧ it_B.<inv>@heapAfter_addInputCol_1 ∧ wellFormed(heapAfter_addInputCol_1) ∧ ¬{b_0_1:=result_51_1}¬b_0_After_B = b_0_1 ∧ ¬(java.lang.String)result_50_3 = null ∧ ¬_vals_3_B_0 = _cols_2_1 ∧ ¬_record_7_B_0 = null ∧ ¬_vals_3_B_0 = null ∧ ¬self_50_B_0 = null ∧ ¬_cols_2_1 = null ∧ ¬it_B = null)"
         (rule "andLeft" (formula "8"))
          (builtin "One Step Simplification" (formula "9"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "9"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "9"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "11"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "notLeft" (formula "12"))
         (rule "andLeft" (formula "8"))
         (rule "notLeft" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "11"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "12"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "13"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "14"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "15"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "16"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "17"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "18"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "19"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "28"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "31"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "32"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "33"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "33"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "35"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "36"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "37"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "38"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "40"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "42"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "43"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "46"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "47"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "48"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "49"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "50"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "51"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "52"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "53"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "54"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "55"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "56"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "57"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "57"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "58"))
         (rule "andLeft" (formula "8"))
         (rule "andLeft" (formula "59"))
         (rule "andLeft" (formula "8"))
         (rule "Use_information_flow_contract_for_next_1806066688" (formula "98") (ifseqformula "45"))
         (rule "Use_information_flow_contract_for_addInputCol_888604927" (formula "103") (inst "i#58=i#58") (ifseqformula "48"))
         (rule "andRight" (formula "130"))
         (branch
            (rule "andRight" (formula "130"))
            (branch
               (rule "andRight" (formula "130"))
               (branch
                  (rule "andRight" (formula "130"))
                  (branch
                     (rule "andRight" (formula "130"))
                     (branch
                        (rule "andRight" (formula "130"))
                        (branch
                           (rule "doubleImpLeft" (formula "103") (userinteraction))
                           (branch "Case 1"
                              (rule "andRight" (formula "115"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "115"))
                                 (branch "Case 1"
                                     (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_50 = null   &   boolean::select(heap,                       self_50,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)     = TRUE   & (  ((  vals_3 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              vals_3,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  cols_2 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              cols_2,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  record_7 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              record_7,                              java.lang.Object::<created>)            = TRUE)<<SC>>))   & ((  (\\forall int j;            ((   (  leq(Z(0(#)), j)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                  & lt(j,                       seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                          cols_2,                                          java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                     origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>              -> (\\exists int i;                    ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              record_7,                                              org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                                         origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      record_7,                                                                      org.apache.commons.csv.CSVRecord::$key_seq),                                                          i))                         = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      cols_2,                                                                      java.util.Collection::$seq),                                                          j)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                            origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>       & ((  (\\forall int i;                ((   (  leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              cols_2,                                              java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<SC,                                                                                                                                         origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                  -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                     cols_2,                                                                     java.util.Collection::$seq),                                                         i))                        = null)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>           & ((  (!(vals_3 = cols_2)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>               & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                             record_7)                   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                 vals_3)                       & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                     cols_2)                           & ((  (!(vals_3 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                               & ((  (!(cols_2 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                    origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                                   & (!(record_7 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                      origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)   & {_vals_3:=vals_3      || _cols_2:=cols_2      || _record_7:=record_7}       \\[{           exc_64=null;try {             self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_64=e;           }         }\\] (  selfAtPost_50 = self_50              & excAtPost_64 = exc_64              & heapAtPost = heap)) ")
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "115"))
                                    (branch
                                        (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_50 = null   &   boolean::select(heap,                       self_50,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)     = TRUE   & (  ((  vals_3 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              vals_3,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  cols_2 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              cols_2,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  record_7 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              record_7,                              java.lang.Object::<created>)            = TRUE)<<SC>>))   & ((  (\\forall int j;            ((   (  leq(Z(0(#)), j)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                  & lt(j,                       seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                          cols_2,                                          java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                     origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>              -> (\\exists int i;                    ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              record_7,                                              org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                                         origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      record_7,                                                                      org.apache.commons.csv.CSVRecord::$key_seq),                                                          i))                         = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      cols_2,                                                                      java.util.Collection::$seq),                                                          j)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                            origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>       & ((  (\\forall int i;                ((   (  leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              cols_2,                                              java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<SC,                                                                                                                                         origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                  -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                     cols_2,                                                                     java.util.Collection::$seq),                                                         i))                        = null)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>           & ((  (!(vals_3 = cols_2)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>               & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                             record_7)                   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                 vals_3)                       & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                     cols_2)                           & ((  (!(vals_3 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                               & ((  (!(cols_2 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                    origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                                   & (!(record_7 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                      origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)   & {_vals_3:=vals_3      || _cols_2:=cols_2      || _record_7:=record_7}       \\[{           exc_64=null;try {             self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_64=e;           }         }\\] (  selfAtPost_50 = self_50              & excAtPost_64 = exc_64              & heapAtPost = heap)) ")
                                    )
                                    (branch
                                       (rule "andRight" (formula "115"))
                                       (branch
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "eqSymm" (formula "59"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "eqSymm" (formula "3"))
                                          (rule "eqSymm" (formula "114"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "60"))
                                          (rule "eqSymm" (formula "130"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "replace_known_left" (formula "98") (term "1,0,1,1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                                          (rule "andLeft" (formula "98"))
                                          (rule "polySimp_homoEq" (formula "40") (term "1"))
                                          (rule "polySimp_homoEq" (formula "93") (term "1"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "111") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "111") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "111") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "106"))
                                          (rule "polySimp_mulComm0" (formula "106") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "106") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "50") (term "0"))
                                          (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "86") (term "0,0,1,0,1") (ifseqformula "81"))
                                          (rule "applyEq" (formula "40") (term "0,0,1,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "91") (term "0,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "85") (term "0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "7") (term "1") (ifseqformula "30"))
                                          (rule "applyEq" (formula "79") (term "0,0,1,0,0,0,0,0") (ifseqformula "80"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "109") (term "0,0") (ifseqformula "113"))
                                          (rule "applyEq" (formula "90") (term "0,0,1") (ifseqformula "96"))
                                          (rule "applyEq" (formula "47") (term "6") (ifseqformula "46"))
                                          (rule "applyEq" (formula "75") (term "0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "59"))
                                          (rule "applyEq" (formula "61") (term "0,0,1") (ifseqformula "96"))
                                          (rule "applyEq" (formula "89") (term "1,1") (ifseqformula "96"))
                                          (rule "applyEq" (formula "91") (term "0,1,0,0") (ifseqformula "78"))
                                          (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "78"))
                                          (rule "applyEqRigid" (formula "129") (term "0,0") (ifseqformula "60"))
                                          (rule "eqSymm" (formula "129"))
                                          (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "90") (term "0,1,0,0") (ifseqformula "78"))
                                          (rule "applyEq" (formula "124") (term "0") (ifseqformula "59"))
                                          (rule "applyEq" (formula "93") (term "0,0,0") (ifseqformula "80"))
                                          (rule "applyEq" (formula "54") (term "0,1,0,1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "75") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "104") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "55") (term "4") (ifseqformula "53"))
                                          (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "88") (term "0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "32") (term "0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "103") (term "0,1") (ifseqformula "94"))
                                          (rule "applyEq" (formula "107") (term "0,1,0,1") (ifseqformula "76"))
                                          (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "102") (term "0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "95") (term "0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "88") (term "1,0,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "89") (term "0,0") (ifseqformula "75"))
                                          (rule "applyEq" (formula "69") (term "0") (ifseqformula "71"))
                                          (rule "applyEq" (formula "71") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "10"))
                                          (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "notLeft" (formula "36"))
                                          (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "108"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "replace_known_right" (formula "84") (term "0,1") (ifseqformula "108"))
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "true_left" (formula "84"))
                                          (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "106"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "106"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "notLeft" (formula "37"))
                                          (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "105"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "true_left" (formula "37"))
                                          (rule "applyEq" (formula "56") (term "1") (ifseqformula "72"))
                                          (rule "replace_known_left" (formula "75") (term "0") (ifseqformula "56"))
                                           (builtin "One Step Simplification" (formula "75"))
                                          (rule "replace_known_left" (formula "81") (term "0") (ifseqformula "75"))
                                           (builtin "One Step Simplification" (formula "81"))
                                          (rule "applyEq" (formula "79") (term "0,0,0") (ifseqformula "86"))
                                          (rule "replace_known_right" (formula "79") (term "0,0") (ifseqformula "105"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0,0,0,0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "100") (term "3") (ifseqformula "103"))
                                          (rule "applyEq" (formula "97") (term "0,1,0,1") (ifseqformula "86"))
                                          (rule "applyEq" (formula "70") (term "0,0,1,0") (ifseqformula "71"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "true_left" (formula "70"))
                                          (rule "applyEq" (formula "39") (term "4") (ifseqformula "38"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "86") (term "4") (ifseqformula "83"))
                                          (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "68"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "51"))
                                          (rule "applyEq" (formula "105") (term "0,0") (ifseqformula "83"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "68"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "applyEq" (formula "84") (term "3") (ifseqformula "82"))
                                          (rule "applyEq" (formula "2") (term "1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "88") (term "5") (ifseqformula "52"))
                                          (rule "applyEq" (formula "88") (term "6") (ifseqformula "87"))
                                          (rule "applyEq" (formula "72") (term "4") (ifseqformula "70"))
                                          (rule "applyEq" (formula "10") (term "1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "52"))
                                          (rule "applyEq" (formula "61") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "64") (term "0,1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "78") (term "0,1") (ifseqformula "82"))
                                          (rule "replace_known_right" (formula "78") (term "1") (ifseqformula "101"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "notLeft" (formula "78"))
                                          (rule "replace_known_right" (formula "78") (term "0") (ifseqformula "99"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "true_left" (formula "78"))
                                          (rule "applyEq" (formula "30") (term "4") (ifseqformula "28"))
                                          (rule "applyEq" (formula "76") (term "1,0,1") (ifseqformula "3"))
                                          (rule "replace_known_left" (formula "76") (term "1") (ifseqformula "33"))
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "true_left" (formula "76"))
                                          (rule "applyEq" (formula "93") (term "4") (ifseqformula "91"))
                                          (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "84") (term "0,2") (ifseqformula "78"))
                                          (rule "applyEq" (formula "48") (term "3") (ifseqformula "51"))
                                          (rule "applyEq" (formula "84") (term "0") (ifseqformula "52"))
                                          (rule "applyEq" (formula "89") (term "0,1,0,0") (ifseqformula "78"))
                                          (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "30") (term "3") (ifseqformula "10"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "69") (term "3") (ifseqformula "54"))
                                          (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "63") (term "1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "60") (term "0,0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "70") (term "1,0,1") (ifseqformula "74"))
                                          (rule "applyEq" (formula "75") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "75"))
                                          (rule "applyEqRigid" (formula "109") (term "0,0") (ifseqformula "8"))
                                          (rule "eqSymm" (formula "109"))
                                          (rule "applyEq" (formula "70") (term "1,0,0") (ifseqformula "74"))
                                          (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "87") (term "0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "66") (term "0,0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "91") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "91") (term "1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "3"))
                                          (rule "polySimp_sepPosMonomial" (formula "33"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1"))
                                          (rule "mul_literals" (formula "33") (term "0,1"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                                          (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
                                          (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
                                          (rule "polySimp_addComm1" (formula "69") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                                          (rule "add_literals" (formula "69") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "69") (term "0,0"))
                                          (rule "applyEq" (formula "90") (term "1") (ifseqformula "33"))
                                          (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "33"))
                                          (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                                          (rule "add_literals" (formula "28") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "28") (term "0,0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                                          (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                                          (rule "polySimp_elimOne" (formula "41") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                                          (rule "polySimp_sepNegMonomial" (formula "69"))
                                          (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                                          (rule "polySimp_elimOne" (formula "69") (term "0"))
                                          (rule "applyEq" (formula "85") (term "1,0,0,1") (ifseqformula "69"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "80"))
                                          (rule "polySimp_mulLiterals" (formula "80") (term "0"))
                                          (rule "polySimp_elimOne" (formula "80") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                                          (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                                          (rule "polySimp_elimOne" (formula "28") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "85") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "85") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "85") (term "0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "90") (ifseqformula "28"))
                                          (rule "polySimp_rightDist" (formula "90") (term "1,0,0"))
                                          (rule "mul_literals" (formula "90") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "90") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "90") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "90") (term "0,0"))
                                          (rule "add_literals" (formula "90") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "90") (term "1,0,0"))
                                          (rule "add_literals" (formula "90") (term "0,0"))
                                          (rule "leq_literals" (formula "90") (term "0"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "false_right" (formula "90"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "105") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "105") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "105") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "105") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "105") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "105") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "105") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "105") (term "1,1,1,0,0,1"))
                                          (rule "pullOutSelect" (formula "73") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "67"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "105")) (ifInst ""  (formula "58")))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "104")) (ifInst ""  (formula "14")))
                                          (rule "elementOfSingleton" (formula "73") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
                                          (rule "hideAuxiliaryEq" (formula "73"))
                                          (rule "elementOfSingleton" (formula "73") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "pullOutSelect" (formula "104") (term "0,0,1,0,1") (inst "selectSK=java_util_Collection_seq_1"))
                                          (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "105") (term "0,0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                                          (rule "eqSymm" (formula "105") (term "1,0,1"))
                                          (rule "eqSymm" (formula "105") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "58"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "104") (term "0,0,1,0,1") (inst "selectSK=java_util_Collection_seq_2"))
                                          (rule "applyEq" (formula "105") (term "0,0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                                          (rule "eqSymm" (formula "105") (term "1,0,1"))
                                          (rule "eqSymm" (formula "105") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "14"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_and_subsumption3" (formula "20") (term "0,0,0"))
                                          (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                          (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "90"))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch
                                          (rule "andRight" (formula "115"))
                                          (branch
                                             (rule "notRight" (formula "115"))
                                             (rule "close" (formula "123") (ifseqformula "1"))
                                          )
                                          (branch
                                             (rule "andRight" (formula "115"))
                                             (branch
                                                (rule "notRight" (formula "115"))
                                                (rule "close" (formula "117") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notRight" (formula "115"))
                                                (rule "close" (formula "121") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "115"))
                                 (branch "Case 1"
                                    (rule "impLeft" (formula "38") (userinteraction))
                                    (branch "Case 1"
                                       (rule "eqSymm" (formula "3"))
                                       (rule "eqSymm" (formula "58"))
                                       (rule "eqSymm" (formula "5"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "eqSymm" (formula "1"))
                                       (rule "eqSymm" (formula "4"))
                                       (rule "eqSymm" (formula "59"))
                                       (rule "eqSymm" (formula "6"))
                                       (rule "eqSymm" (formula "113"))
                                       (rule "eqSymm" (formula "7"))
                                       (rule "eqSymm" (formula "130"))
                                       (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "114"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "113"))
                                        (builtin "One Step Simplification" (formula "38"))
                                       (rule "true_left" (formula "38"))
                                       (rule "replace_known_left" (formula "95") (term "0,0") (ifseqformula "74"))
                                        (builtin "One Step Simplification" (formula "95") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                                       (rule "andLeft" (formula "95"))
                                       (rule "replace_known_right" (formula "34") (term "1") (ifseqformula "113"))
                                        (builtin "One Step Simplification" (formula "34"))
                                       (rule "notLeft" (formula "34"))
                                       (rule "polySimp_homoEq" (formula "89") (term "1"))
                                       (rule "polySimp_addComm1" (formula "89") (term "0,1"))
                                       (rule "castedGetAny" (formula "114") (term "0,1,0"))
                                       (rule "castedGetAny" (formula "6") (term "0,2,1"))
                                       (rule "castedGetAny" (formula "6") (term "0,2,0"))
                                       (rule "inEqSimp_ltRight" (formula "113"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "88") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "88") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "88") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "114") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "114") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "108") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "108") (term "1,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "108") (term "0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "103"))
                                       (rule "polySimp_mulComm0" (formula "103") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "103") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "73") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "73") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "67") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "72") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "72") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "47"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "47") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "89") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "89") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "89") (term "0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "52") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "52") (term "0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "83") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "83") (term "1,0,0,1"))
                                       (rule "polySimp_addComm1" (formula "83") (term "0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "68") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "67") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "67") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "77") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "90") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "90") (term "1,0,0,0"))
                                       (rule "polySimp_addComm1" (formula "90") (term "0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "114") (term "0,0,0"))
                                       (rule "applyEq" (formula "90") (term "0,1,0,0") (ifseqformula "76"))
                                       (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "84") (term "3") (ifseqformula "60"))
                                       (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "6"))
                                       (rule "eqSymm" (formula "71"))
                                       (rule "applyEq" (formula "101") (term "0,2") (ifseqformula "95"))
                                       (rule "applyEq" (formula "101") (term "5") (ifseqformula "57"))
                                       (rule "applyEq" (formula "88") (term "0,0,1") (ifseqformula "78"))
                                       (rule "applyEq" (formula "92") (term "0,0") (ifseqformula "76"))
                                       (rule "applyEq" (formula "101") (term "0") (ifseqformula "57"))
                                       (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "78"))
                                       (rule "applyEq" (formula "103") (term "0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "76") (term "0,0") (ifseqformula "78"))
                                        (builtin "One Step Simplification" (formula "76"))
                                       (rule "true_left" (formula "76"))
                                       (rule "applyEq" (formula "67") (term "0,1,1,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "103") (term "0,1") (ifseqformula "94"))
                                       (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "56"))
                                       (rule "applyEq" (formula "127") (term "0,1") (ifseqformula "10"))
                                       (rule "applyEq" (formula "3") (term "0") (ifseqformula "76"))
                                       (rule "applyEq" (formula "3") (term "1") (ifseqformula "29"))
                                       (rule "applyEq" (formula "75") (term "0,0,1,0") (ifseqformula "76"))
                                        (builtin "One Step Simplification" (formula "75"))
                                       (rule "true_left" (formula "75"))
                                       (rule "applyEqRigid" (formula "126") (term "0,0") (ifseqformula "57"))
                                       (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "75"))
                                       (rule "applyEq" (formula "71") (term "0,0,0,1,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "75"))
                                       (rule "applyEq" (formula "121") (term "0") (ifseqformula "56"))
                                       (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "98") (term "6") (ifseqformula "97"))
                                       (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "5"))
                                       (rule "applyEq" (formula "92") (term "0,1,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "51") (term "0,0,1,0,1") (ifseqformula "29"))
                                       (rule "applyEq" (formula "83") (term "1,0,1,0") (ifseqformula "91"))
                                       (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "91"))
                                       (rule "applyEq" (formula "93") (term "3") (ifseqformula "91"))
                                       (rule "applyEq" (formula "71") (term "0,0,0,1,0") (ifseqformula "6"))
                                       (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "90"))
                                       (rule "applyEq" (formula "100") (term "0,1,0,0") (ifseqformula "89"))
                                       (rule "applyEq" (formula "12") (term "1") (ifseqformula "30"))
                                       (rule "close" (formula "107") (ifseqformula "12"))
                                    )
                                    (branch "Case 2"
                                       (rule "applyEqReverse" (formula "115") (term "0,1,1,0") (ifseqformula "38") (userinteraction))
                                       (rule "seqCastRemoveBeta" (formula "115") (term "1,1,0") (userinteraction))
                                       (rule "instAll" (formula "115") (term "1,1,1,0") (ifseqformula "18") (userinteraction))
                                       (rule "impLeft" (formula "1") (userinteraction))
                                       (branch "Case 1"
                                          (rule "eqSymm" (formula "131"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "eqSymm" (formula "114"))
                                          (rule "eqSymm" (formula "59"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "eqSymm" (formula "60"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "3"))
                                          (rule "replace_known_left" (formula "98") (term "0,0,0,1") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "25")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                                          (rule "andLeft" (formula "98"))
                                          (rule "polySimp_homoEq" (formula "93") (term "1"))
                                          (rule "polySimp_homoEq" (formula "40") (term "1"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                                          (rule "castedGetAny" (formula "117") (term "0,1,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,0"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "116") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "116") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "116") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "111") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "111") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "111") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "50") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "106"))
                                          (rule "polySimp_mulComm0" (formula "106") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "106") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "117") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "117") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,0"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "inEqSimp_commuteLeq" (formula "117") (term "0,0,0"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "29"))
                                          (rule "applyEq" (formula "86") (term "0,1,0,1") (ifseqformula "79"))
                                          (rule "applyEq" (formula "34") (term "0,0,1,0,1") (ifseqformula "29"))
                                          (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "29"))
                                          (rule "applyEq" (formula "92") (term "0,1,0,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "91") (term "0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "80") (term "0,0,1,0") (ifseqformula "81"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "true_left" (formula "80"))
                                          (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "56") (term "4") (ifseqformula "54"))
                                          (rule "applyEq" (formula "93") (term "0,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "105") (term "0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "108") (term "0,1,0,1") (ifseqformula "97"))
                                          (rule "applyEq" (formula "92") (term "0,1,0,0") (ifseqformula "79"))
                                          (rule "applyEq" (formula "106") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "90") (term "0,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "110") (term "0,0,1,0,1") (ifseqformula "80"))
                                          (rule "applyEq" (formula "99") (term "3") (ifseqformula "97"))
                                          (rule "applyEq" (formula "2") (term "0") (ifseqformula "80"))
                                          (rule "applyEq" (formula "39") (term "0,0,1,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "108") (term "0,1,0,0") (ifseqformula "97"))
                                          (rule "applyEq" (formula "103") (term "0") (ifseqformula "60"))
                                          (rule "applyEq" (formula "62") (term "0,0,1") (ifseqformula "97"))
                                          (rule "applyEq" (formula "11") (term "1") (ifseqformula "30"))
                                          (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "replace_known_left" (formula "115") (term "0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "115"))
                                          (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "notLeft" (formula "39"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "114"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_left" (formula "61") (term "1") (ifseqformula "10"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "true_left" (formula "61"))
                                          (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "113"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "replace_known_right" (formula "40") (term "1") (ifseqformula "113"))
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "notLeft" (formula "40"))
                                          (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "112"))
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "inEqSimp_geqRight" (formula "113"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "applyEq" (formula "108") (term "3") (ifseqformula "111"))
                                          (rule "applyEq" (formula "91") (term "0,0") (ifseqformula "76"))
                                          (rule "applyEq" (formula "76") (term "0,0") (ifseqformula "77"))
                                           (builtin "One Step Simplification" (formula "76"))
                                          (rule "true_left" (formula "76"))
                                          (rule "applyEq" (formula "123") (term "0") (ifseqformula "58"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                          (rule "applyEq" (formula "60") (term "1") (ifseqformula "77"))
                                          (rule "replace_known_left" (formula "81") (term "0") (ifseqformula "60"))
                                           (builtin "One Step Simplification" (formula "81"))
                                          (rule "replace_known_left" (formula "87") (term "0") (ifseqformula "81"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "notLeft" (formula "87"))
                                          (rule "replace_known_left" (formula "87") (term "0") (ifseqformula "81"))
                                           (builtin "One Step Simplification" (formula "87"))
                                          (rule "replace_known_right" (formula "85") (term "0,0") (ifseqformula "110"))
                                           (builtin "One Step Simplification" (formula "85"))
                                          (rule "replace_known_right" (formula "88") (term "1") (ifseqformula "110"))
                                           (builtin "One Step Simplification" (formula "88"))
                                          (rule "notLeft" (formula "88"))
                                          (rule "replace_known_right" (formula "88") (term "0") (ifseqformula "109"))
                                           (builtin "One Step Simplification" (formula "88"))
                                          (rule "true_left" (formula "88"))
                                          (rule "applyEq" (formula "36") (term "4") (ifseqformula "33"))
                                          (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "104") (term "4") (ifseqformula "102"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "23"))
                                          (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "57"))
                                          (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "applyEq" (formula "84") (term "1,0,1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "71") (term "0,0,0,1,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "69") (term "0,1") (ifseqformula "5"))
                                          (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "28"))
                                          (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "33"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "70") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "70") (term "0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "8") (term "0") (ifseqformula "74"))
                                          (rule "eqSymm" (formula "8"))
                                          (rule "applyEq" (formula "50") (term "0,0,1,0,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "64") (term "0,1,1,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "85") (term "0,1,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "108") (term "0,0") (ifseqformula "84"))
                                          (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "70"))
                                          (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "88") (term "0,2") (ifseqformula "82"))
                                          (rule "applyEq" (formula "88") (term "5") (ifseqformula "54"))
                                          (rule "applyEq" (formula "84") (term "4") (ifseqformula "81"))
                                          (rule "applyEqRigid" (formula "118") (term "0,1") (ifseqformula "9"))
                                          (rule "applyEq" (formula "74") (term "4") (ifseqformula "72"))
                                          (rule "applyEq" (formula "42") (term "6") (ifseqformula "41"))
                                          (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "104") (term "0,1,1,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "88") (term "6") (ifseqformula "87"))
                                          (rule "applyEqRigid" (formula "118") (term "0,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "50") (term "3") (ifseqformula "53"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
                                          (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "98"))
                                          (rule "applyEq" (formula "90") (term "0,1") (ifseqformula "81"))
                                          (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "52"))
                                          (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "76") (term "1,1") (ifseqformula "80"))
                                          (rule "applyEq" (formula "76") (term "1,0,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "7") (term "0,0,2,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "63") (term "0,0,0,1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "67") (term "1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "70") (term "3") (ifseqformula "55"))
                                          (rule "applyEq" (formula "31") (term "3") (ifseqformula "11"))
                                          (rule "applyEq" (formula "79") (term "0,0,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "7") (term "0,1,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "72") (term "0,0,1,0,0") (ifseqformula "25"))
                                          (rule "replace_known_left" (formula "72") (term "0") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "applyEq" (formula "89") (term "0,0,1,0,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "71") (term "1,0,1") (ifseqformula "76"))
                                          (rule "applyEq" (formula "71") (term "1,0,0") (ifseqformula "76"))
                                          (rule "applyEq" (formula "67") (term "0,0,1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "95") (term "0") (ifseqformula "76"))
                                          (rule "applyEq" (formula "67") (term "1,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "93") (term "1") (ifseqformula "4"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_sepPosMonomial" (formula "34"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                          (rule "mul_literals" (formula "34") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                          (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "34"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "34"))
                                          (rule "polySimp_addComm1" (formula "72") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "72") (term "0,0"))
                                          (rule "add_literals" (formula "72") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "72") (term "0,0"))
                                          (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "34"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0"))
                                          (rule "applyEq" (formula "4") (term "1") (ifseqformula "34"))
                                          (rule "applyEq" (formula "92") (term "1") (ifseqformula "34"))
                                          (rule "applyEq" (formula "94") (term "1,1,1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "60") (term "0") (ifseqformula "20"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "42"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "93") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "93") (term "1,1,0,0"))
                                          (rule "polySimp_rightDist" (formula "93") (term "1,1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "93") (term "1,1,1,0,0"))
                                          (rule "mul_literals" (formula "93") (term "0,1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "93") (term "1,1,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "81"))
                                          (rule "polySimp_mulLiterals" (formula "81") (term "0"))
                                          (rule "polySimp_elimOne" (formula "81") (term "0"))
                                          (rule "polySimp_sepNegMonomial" (formula "70"))
                                          (rule "polySimp_mulLiterals" (formula "70") (term "0"))
                                          (rule "polySimp_elimOne" (formula "70") (term "0"))
                                          (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "70"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "47") (term "0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "86") (term "0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "29"))
                                          (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
                                          (rule "mul_literals" (formula "91") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
                                          (rule "add_literals" (formula "91") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "91") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "91") (term "0,0"))
                                          (rule "leq_literals" (formula "91") (term "0"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "false_right" (formula "91"))
                                          (rule "pullOutSelect" (formula "92") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                          (rule "applyEq" (formula "93") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")) (ifInst ""  (formula "14")))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "93") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "93") (term "0,0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "106") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "106") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "106") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "106") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "106") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "106") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "106") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "106") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "106") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "106") (term "1,1,1,0,0,1"))
                                          (rule "pullOutSelect" (formula "74") (term "1") (inst "selectSK=java_util_Iterator_index_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "105")) (ifInst ""  (formula "15")))
                                          (rule "simplifySelectOfAnonEQ" (formula "75") (ifseqformula "68"))
                                           (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "106")) (ifInst ""  (formula "59")))
                                          (rule "elementOfSingleton" (formula "74") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "74"))
                                          (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "74"))
                                          (rule "hideAuxiliaryEq" (formula "74"))
                                          (rule "elementOfSingleton" (formula "74") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "70")))
                                          (rule "true_left" (formula "74"))
                                          (rule "pullOutSelect" (formula "105") (term "0,1,1,0,1") (inst "selectSK=java_util_Collection_seq_1"))
                                          (rule "applyEq" (formula "106") (term "0,1,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "106") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "106") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "105") (term "0,0,1,0,1") (inst "selectSK=java_util_Collection_seq_2"))
                                          (rule "applyEq" (formula "106") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "106") (term "0,0,0") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "77"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "99")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "69"))
                                          (rule "eqSymm" (formula "106") (term "1,0,1"))
                                          (rule "eqSymm" (formula "106") (term "0"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "59"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "106") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "106") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "106") (term "0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "eqSymm" (formula "105") (term "1,0,1"))
                                          (rule "eqSymm" (formula "105") (term "0"))
                                          (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                          (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                                          (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "22"))
                                          (rule "nnf_ex2all" (formula "91"))
                                          (rule "nnf_imp2or" (formula "19") (term "0"))
                                          (rule "nnf_imp2or" (formula "18") (term "0"))
                                          (rule "nnf_imp2or" (formula "22") (term "0"))
                                          (rule "nnf_imp2or" (formula "23") (term "0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0"))
                                          (rule "nnf_imp2or" (formula "105") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "19") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "19") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "19") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                                          (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "18") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
                                          (rule "mul_literals" (formula "18") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "105") (term "0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "105") (term "0,0,0,1"))
                                          (rule "times_zero_1" (formula "105") (term "1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "105") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "105") (term "1,0,0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "105") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "105") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "105") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "105") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "105") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "105") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "105") (term "1,1,0,0,1"))
                                          (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "22") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "22") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "22") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "22") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "1,1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "23") (term "0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "0,1,0,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "23") (term "0,0,0,0,0,0"))
                                          (rule "add_literals" (formula "23") (term "0,0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "23") (term "0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "23") (term "1,0,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "23") (term "1,0,0,0"))
                                          (rule "times_zero_1" (formula "23") (term "1,0,0,1,0,0,0"))
                                          (rule "add_zero_right" (formula "23") (term "0,0,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "23") (term "1,1,0,0,0"))
                                          (rule "lenNonNegative" (formula "17") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "17"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
                                          (rule "andLeft" (formula "26"))
                                          (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
                                          (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "lenNonNegative" (formula "21") (term "1"))
                                          (rule "inEqSimp_commuteLeq" (formula "21"))
                                          (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                          (rule "castedGetAny" (formula "44") (term "0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "lenNonNegative" (formula "21") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "21"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "7") (inst "iv=iv"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
                                          (rule "applyEq" (formula "8") (term "0,0,1,0,0,1,0,0") (ifseqformula "9"))
                                          (rule "applyEq" (formula "8") (term "0,0,1,0") (ifseqformula "9"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
                                          (rule "applyEq" (formula "7") (term "0,0,1,0,0,1,0,0") (ifseqformula "8"))
                                          (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
                                          (rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "4"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "commute_or_2" (formula "19") (term "0"))
                                          (rule "seqGetAlphaCast" (formula "82") (term "0"))
                                          (rule "castedGetAny" (formula "82") (term "0"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "true_left" (formula "82"))
                                          (rule "commute_or" (formula "18") (term "0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0"))
                                          (rule "commute_or_2" (formula "22") (term "0"))
                                          (rule "commute_and" (formula "18") (term "0,0,1,0"))
                                          (rule "commute_or_2" (formula "23") (term "0"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
                                          (rule "applyEq" (formula "5") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
                                          (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "63") (inst "iv=iv"))
                                          (rule "andLeft" (formula "63"))
                                          (rule "inEqSimp_ltToLeq" (formula "64") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "64") (term "0,0,0"))
                                          (rule "applyEq" (formula "64") (term "0,0,1,0") (ifseqformula "65"))
                                           (builtin "One Step Simplification" (formula "64"))
                                          (rule "true_left" (formula "64"))
                                          (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "63"))
                                          (rule "true_left" (formula "63"))
                                          (rule "equiv_left" (formula "48"))
                                          (branch
                                             (rule "replace_known_left" (formula "87") (term "1") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "87"))
                                             (rule "applyEq" (formula "53") (term "1") (ifseqformula "48"))
                                             (rule "applyEq" (formula "88") (term "3") (ifseqformula "87"))
                                             (rule "applyEq" (formula "50") (term "3") (ifseqformula "48"))
                                             (rule "applyEq" (formula "91") (term "1") (ifseqformula "87"))
                                             (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "49"))
                                             (rule "inEqSimp_homoInEq0" (formula "30") (term "0"))
                                             (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0"))
                                             (rule "add_literals" (formula "30") (term "1,1,0,0"))
                                             (rule "times_zero_1" (formula "30") (term "1,0,0"))
                                             (rule "add_zero_right" (formula "30") (term "0,0"))
                                             (rule "qeq_literals" (formula "30") (term "0"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "true_left" (formula "30"))
                                             (rule "commute_or" (formula "19") (term "0,0"))
                                             (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                             (rule "castedGetAny" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "commute_or" (formula "1") (term "0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0"))
                                             (rule "commute_or_2" (formula "23") (term "0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0"))
                                             (rule "commute_and_2" (formula "18") (term "0,1,0"))
                                             (rule "commute_or" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0"))
                                             (rule "commute_or" (formula "23") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "23") (term "0,0"))
                                             (rule "commute_or_2" (formula "23") (term "0"))
                                             (rule "lenNonNegative" (formula "105") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "lenNonNegative" (formula "106") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "ex_pull_out3" (formula "20") (term "0"))
                                             (rule "cnf_rightDist" (formula "20") (term "0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "1,0,0"))
                                             (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
                                             (rule "ineffectiveCast" (formula "47") (term "1,0,1") (ifseqformula "12"))
                                             (rule "typeEqDerived2" (formula "12") (term "0") (ifseqformula "47"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "applyEq" (formula "86") (term "1,0,0") (ifseqformula "46"))
                                             (rule "applyEq" (formula "86") (term "1,0,1") (ifseqformula "46"))
                                             (rule "applyEq" (formula "41") (term "2") (ifseqformula "46"))
                                             (rule "applyEq" (formula "81") (term "2") (ifseqformula "46"))
                                             (rule "applyEq" (formula "44") (term "1") (ifseqformula "46"))
                                             (rule "applyEq" (formula "47") (term "1,0,1") (ifseqformula "46"))
                                             (rule "applyEq" (formula "84") (term "1") (ifseqformula "46"))
                                             (rule "applyEq" (formula "93") (term "0") (ifseqformula "46"))
                                             (rule "applyEq" (formula "47") (term "1,0,0") (ifseqformula "46"))
                                             (rule "commute_and" (formula "19") (term "0,0,0"))
                                             (rule "commute_and_2" (formula "19") (term "0,0"))
                                             (rule "seqGetAlphaCast" (formula "3") (term "1,0,0,0,0"))
                                             (rule "castedGetAny" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "ineffectiveCast2" (formula "80") (term "2") (ifseqformula "44"))
                                             (rule "ineffectiveCast2" (formula "80") (term "2") (ifseqformula "46"))
                                             (rule "ineffectiveCast2" (formula "80") (term "2") (ifseqformula "83"))
                                             (rule "allLeft" (formula "23") (inst "t=i_0_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "45"))
                                             (rule "replace_known_right" (formula "23") (term "0,0,0,0") (ifseqformula "92"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "allLeft" (formula "23") (inst "t=i_0_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                             (rule "applyEq" (formula "23") (term "0,0,0,0,0") (ifseqformula "84"))
                                             (rule "replace_known_right" (formula "23") (term "0,0,0,0") (ifseqformula "92"))
                                              (builtin "One Step Simplification" (formula "23"))
                                             (rule "true_left" (formula "23"))
                                             (rule "cut_direct" (formula "33") (term "1"))
                                             (branch "CUT: result_50_1.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "true_left" (formula "34"))
                                                (rule "cut_direct" (formula "71") (term "0"))
                                                (branch "CUT: result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "72"))
                                                   (rule "true_left" (formula "72"))
                                                   (rule "cut_direct" (formula "104") (term "0"))
                                                   (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length TRUE"
                                                       (builtin "One Step Simplification" (formula "105"))
                                                      (rule "allRight" (formula "105") (inst "sk=iv_0"))
                                                      (rule "orRight" (formula "105"))
                                                      (rule "orRight" (formula "105"))
                                                      (rule "inEqSimp_geqRight" (formula "106"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "106"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "seqGetAlphaCast" (formula "106") (term "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "106") (term "0"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "75"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "75") (term "1,0"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "75") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "75") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "75") (term "0,1"))
                                                      (rule "andLeft" (formula "75"))
                                                      (rule "inEqSimp_commuteLeq" (formula "76"))
                                                      (rule "inEqSimp_commuteLeq" (formula "75"))
                                                      (rule "inEqSimp_antiSymm" (formula "75") (ifseqformula "6"))
                                                      (rule "applyEq" (formula "76") (term "0") (ifseqformula "75"))
                                                      (rule "qeq_literals" (formula "76"))
                                                      (rule "true_left" (formula "76"))
                                                      (rule "applyEq" (formula "51") (term "1,1") (ifseqformula "75"))
                                                      (rule "add_zero_right" (formula "51") (term "1"))
                                                      (rule "applyEq" (formula "6") (term "0") (ifseqformula "75"))
                                                      (rule "leq_literals" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "74"))
                                                      (rule "add_zero_right" (formula "35") (term "1,0"))
                                                      (rule "applyEq" (formula "75") (term "1") (ifseqformula "74"))
                                                      (rule "applyEq" (formula "5") (term "1,1,1,0,0,0,0") (ifseqformula "74"))
                                                      (rule "add_zero_right" (formula "5") (term "1,1,0,0,0,0"))
                                                      (rule "applyEq" (formula "73") (term "1") (ifseqformula "74"))
                                                      (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "74"))
                                                      (rule "add_zero_right" (formula "8") (term "1"))
                                                      (rule "applyEq" (formula "36") (term "1,1") (ifseqformula "74"))
                                                      (rule "add_literals" (formula "36") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "50"))
                                                      (rule "leq_literals" (formula "19") (term "0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "true_left" (formula "19"))
                                                      (rule "pullOutSelect" (formula "74") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "70"))
                                                       (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "106")) (ifInst ""  (formula "61")))
                                                      (rule "elementOfSingleton" (formula "74") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "74"))
                                                      (rule "applyEqReverse" (formula "75") (term "0,0") (ifseqformula "74"))
                                                      (rule "hideAuxiliaryEq" (formula "74"))
                                                      (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "64"))
                                                      (rule "inEqSimp_subsumption1" (formula "74") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "74") (term "0"))
                                                       (builtin "One Step Simplification" (formula "74"))
                                                      (rule "true_left" (formula "74"))
                                                      (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                                      (rule "castedGetAny" (formula "34") (term "0"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "seqGetAlphaCast" (formula "5") (term "1,0,0,0,0"))
                                                      (rule "castedGetAny" (formula "5") (term "0"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "36"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "1,0"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "0,1"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_commuteLeq" (formula "36"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "applyEq" (formula "37") (term "1") (ifseqformula "75"))
                                                      (rule "pullOutSelect" (formula "37") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "106")) (ifInst ""  (formula "18")))
                                                      (rule "elementOfSingleton" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "37"))
                                                      (rule "hideAuxiliaryEq" (formula "37"))
                                                      (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "27"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "51"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "52"))
                                                      (rule "andLeft" (formula "52"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "inEqSimp_commuteLeq" (formula "53"))
                                                      (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                                                      (rule "applyEq" (formula "54") (term "1") (ifseqformula "52"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "107")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "52") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "52") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "32"))
                                                      (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "52"))
                                                      (rule "applyEqReverse" (formula "53") (term "1") (ifseqformula "52"))
                                                      (rule "hideAuxiliaryEq" (formula "52"))
                                                      (rule "applyEq" (formula "52") (term "1") (ifseqformula "75"))
                                                      (rule "pullOutSelect" (formula "52") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "106")))
                                                      (rule "replaceKnownSelect_taclet000001010000000110_23" (formula "52") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet000001010000000110_24" (formula "52") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "32"))
                                                      (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "52"))
                                                      (rule "hideAuxiliaryEq" (formula "52"))
                                                      (rule "lenNonNegative" (formula "52") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "91"))
                                                      (rule "andLeft" (formula "91"))
                                                      (rule "inEqSimp_commuteLeq" (formula "91"))
                                                      (rule "inEqSimp_commuteLeq" (formula "92"))
                                                      (rule "pullOutSelect" (formula "91") (term "0") (inst "selectSK=java_util_Iterator_index_3"))
                                                      (rule "applyEq" (formula "93") (term "1") (ifseqformula "91"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "91") (ifseqformula "81"))
                                                       (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "109")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "91") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "91") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "91") (term "0,1,0,0") (ifseqformula "72"))
                                                      (rule "replace_known_left" (formula "91") (term "0,0,1,0,0") (ifseqformula "63"))
                                                       (builtin "One Step Simplification" (formula "91"))
                                                      (rule "elementOfSingleton" (formula "91") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "91"))
                                                      (rule "applyEqReverse" (formula "92") (term "0") (ifseqformula "91"))
                                                      (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "91"))
                                                      (rule "hideAuxiliaryEq" (formula "91"))
                                                      (rule "applyEq" (formula "36") (term "0") (ifseqformula "75"))
                                                      (rule "qeq_literals" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "applyEq" (formula "90") (term "1") (ifseqformula "74"))
                                                      (rule "pullOutSelect" (formula "90") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "90") (ifseqformula "80"))
                                                       (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "107")))
                                                      (rule "replaceKnownSelect_taclet000001010000000110_21" (formula "90") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet000001010000000110_22" (formula "90") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "90") (term "0,1,0,0") (ifseqformula "71"))
                                                      (rule "replace_known_left" (formula "90") (term "0,0,1,0,0") (ifseqformula "62"))
                                                       (builtin "One Step Simplification" (formula "90"))
                                                      (rule "elementOfSingleton" (formula "90") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "90"))
                                                      (rule "applyEqReverse" (formula "91") (term "0,0") (ifseqformula "90"))
                                                      (rule "hideAuxiliaryEq" (formula "90"))
                                                      (rule "lenNonNegative" (formula "90") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "90"))
                                                      (rule "applyEq" (formula "90") (term "0,0") (ifseqformula "65"))
                                                      (rule "inEqSimp_subsumption1" (formula "90") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "90") (term "0"))
                                                       (builtin "One Step Simplification" (formula "90"))
                                                      (rule "true_left" (formula "90"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "25"))
                                                      (rule "andLeft" (formula "25"))
                                                      (rule "inEqSimp_commuteLeq" (formula "25"))
                                                      (rule "inEqSimp_commuteLeq" (formula "26"))
                                                      (rule "applyEq" (formula "25") (term "0") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "25"))
                                                      (rule "closeFalse" (formula "25"))
                                                   )
                                                   (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length FALSE"
                                                       (builtin "One Step Simplification" (formula "105"))
                                                      (rule "false_right" (formula "105"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "73"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "73") (term "1,0"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "73") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "73") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "73") (term "0,1"))
                                                      (rule "andLeft" (formula "73"))
                                                      (rule "inEqSimp_commuteLeq" (formula "74"))
                                                      (rule "inEqSimp_commuteLeq" (formula "73"))
                                                      (rule "inEqSimp_antiSymm" (formula "73") (ifseqformula "4"))
                                                      (rule "applyEq" (formula "75") (term "1") (ifseqformula "73"))
                                                      (rule "applyEq" (formula "49") (term "1,1") (ifseqformula "73"))
                                                      (rule "add_zero_right" (formula "49") (term "1"))
                                                      (rule "applyEq" (formula "34") (term "1,1,0") (ifseqformula "73"))
                                                      (rule "add_literals" (formula "34") (term "1,0"))
                                                      (rule "applyEq" (formula "74") (term "0") (ifseqformula "73"))
                                                      (rule "qeq_literals" (formula "74"))
                                                      (rule "true_left" (formula "74"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "73"))
                                                      (rule "leq_literals" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "applyEq" (formula "71") (term "1") (ifseqformula "72"))
                                                      (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "72"))
                                                      (rule "add_literals" (formula "34") (term "1"))
                                                      (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "72"))
                                                      (rule "add_literals" (formula "6") (term "1"))
                                                      (rule "applyEq" (formula "3") (term "1,1,1,0,0,0,0") (ifseqformula "72"))
                                                      (rule "add_literals" (formula "3") (term "1,1,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "48"))
                                                      (rule "leq_literals" (formula "17") (term "0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "true_left" (formula "17"))
                                                      (rule "pullOutSelect" (formula "72") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "68"))
                                                       (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "104")) (ifInst ""  (formula "59")))
                                                      (rule "elementOfSingleton" (formula "72") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "72"))
                                                      (rule "applyEqReverse" (formula "73") (term "0,0") (ifseqformula "72"))
                                                      (rule "hideAuxiliaryEq" (formula "72"))
                                                      (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "62"))
                                                      (rule "inEqSimp_subsumption1" (formula "72") (ifseqformula "47"))
                                                      (rule "leq_literals" (formula "72") (term "0"))
                                                       (builtin "One Step Simplification" (formula "72"))
                                                      (rule "true_left" (formula "72"))
                                                      (rule "seqGetAlphaCast" (formula "32") (term "0"))
                                                      (rule "castedGetAny" (formula "32") (term "0"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "seqGetAlphaCast" (formula "3") (term "1,0,0,0,0"))
                                                      (rule "castedGetAny" (formula "3") (term "0"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "true_left" (formula "3"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "34"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "0,1"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "1,0"))
                                                      (rule "andLeft" (formula "34"))
                                                      (rule "inEqSimp_commuteLeq" (formula "35"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "applyEq" (formula "35") (term "1") (ifseqformula "73"))
                                                      (rule "pullOutSelect" (formula "35") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "30"))
                                                       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "104")) (ifInst ""  (formula "16")))
                                                      (rule "elementOfSingleton" (formula "35") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "25"))
                                                      (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "35") (term "0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "true_left" (formula "35"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "50"))
                                                      (rule "andLeft" (formula "50"))
                                                      (rule "inEqSimp_commuteLeq" (formula "51"))
                                                      (rule "inEqSimp_commuteLeq" (formula "50"))
                                                      (rule "pullOutSelect" (formula "51") (term "1") (inst "selectSK=java_util_Iterator_index_2"))
                                                      (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "105")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "51") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "51") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,0,0") (ifseqformula "30"))
                                                      (rule "replace_known_left" (formula "51") (term "0,0,1,0,0") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "elementOfSingleton" (formula "51") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "51"))
                                                      (rule "applyEqReverse" (formula "51") (term "1") (ifseqformula "50"))
                                                      (rule "hideAuxiliaryEq" (formula "50"))
                                                      (rule "applyEq" (formula "50") (term "1") (ifseqformula "73"))
                                                      (rule "pullOutSelect" (formula "50") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "104")))
                                                      (rule "replaceKnownSelect_taclet100001010000000110_23" (formula "50") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet100001010000000110_24" (formula "50") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,1,0,0") (ifseqformula "30"))
                                                      (rule "replace_known_left" (formula "50") (term "0,0,1,0,0") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "50"))
                                                      (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "50"))
                                                      (rule "applyEqReverse" (formula "51") (term "0,0") (ifseqformula "50"))
                                                      (rule "hideAuxiliaryEq" (formula "50"))
                                                      (rule "lenNonNegative" (formula "50") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "50"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "89"))
                                                      (rule "andLeft" (formula "89"))
                                                      (rule "inEqSimp_commuteLeq" (formula "89"))
                                                      (rule "inEqSimp_commuteLeq" (formula "90"))
                                                      (rule "pullOutSelect" (formula "89") (term "0") (inst "selectSK=java_util_Iterator_index_3"))
                                                      (rule "applyEq" (formula "91") (term "1") (ifseqformula "89"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "89") (ifseqformula "79"))
                                                       (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "107")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "89") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "89") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "89") (term "0,1,0,0") (ifseqformula "70"))
                                                      (rule "replace_known_left" (formula "89") (term "0,0,1,0,0") (ifseqformula "61"))
                                                       (builtin "One Step Simplification" (formula "89"))
                                                      (rule "elementOfSingleton" (formula "89") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "89"))
                                                      (rule "applyEqReverse" (formula "90") (term "0") (ifseqformula "89"))
                                                      (rule "applyEqReverse" (formula "90") (term "1") (ifseqformula "89"))
                                                      (rule "hideAuxiliaryEq" (formula "89"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "73"))
                                                      (rule "qeq_literals" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "applyEq" (formula "88") (term "1") (ifseqformula "72"))
                                                      (rule "pullOutSelect" (formula "88") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "88") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "105")))
                                                      (rule "replaceKnownSelect_taclet100001010000000110_21" (formula "88") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet100001010000000110_22" (formula "88") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "88") (term "0,1,0,0") (ifseqformula "69"))
                                                      (rule "replace_known_left" (formula "88") (term "0,0,1,0,0") (ifseqformula "60"))
                                                       (builtin "One Step Simplification" (formula "88"))
                                                      (rule "elementOfSingleton" (formula "88") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "88"))
                                                      (rule "applyEqReverse" (formula "89") (term "0,0") (ifseqformula "88"))
                                                      (rule "hideAuxiliaryEq" (formula "88"))
                                                      (rule "lenNonNegative" (formula "88") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "88"))
                                                      (rule "applyEq" (formula "88") (term "0,0") (ifseqformula "63"))
                                                      (rule "inEqSimp_subsumption1" (formula "88") (ifseqformula "47"))
                                                      (rule "leq_literals" (formula "88") (term "0"))
                                                       (builtin "One Step Simplification" (formula "88"))
                                                      (rule "true_left" (formula "88"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "23"))
                                                      (rule "andLeft" (formula "23"))
                                                      (rule "inEqSimp_commuteLeq" (formula "23"))
                                                      (rule "inEqSimp_commuteLeq" (formula "24"))
                                                      (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEq" (formula "24") (term "1") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "23") (term "0") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "23"))
                                                      (rule "closeFalse" (formula "23"))
                                                   )
                                                )
                                                (branch "CUT: result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "71"))
                                                   (rule "cut_direct" (formula "105") (term "0"))
                                                   (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length TRUE"
                                                       (builtin "One Step Simplification" (formula "106"))
                                                      (rule "allRight" (formula "106") (inst "sk=iv_0"))
                                                      (rule "orRight" (formula "106"))
                                                      (rule "orRight" (formula "106"))
                                                      (rule "inEqSimp_geqRight" (formula "107"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "107"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "seqGetAlphaCast" (formula "107") (term "0"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "107") (term "1"))
                                                      (rule "castDel" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "75"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "75") (term "1,0"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "75") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "75") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "75") (term "0,1"))
                                                      (rule "andLeft" (formula "75"))
                                                      (rule "inEqSimp_commuteLeq" (formula "75"))
                                                      (rule "inEqSimp_commuteLeq" (formula "76"))
                                                      (rule "inEqSimp_antiSymm" (formula "75") (ifseqformula "6"))
                                                      (rule "applyEq" (formula "6") (term "0") (ifseqformula "75"))
                                                      (rule "leq_literals" (formula "6"))
                                                      (rule "true_left" (formula "6"))
                                                      (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "74"))
                                                      (rule "add_literals" (formula "35") (term "1,0"))
                                                      (rule "applyEq" (formula "76") (term "1") (ifseqformula "74"))
                                                      (rule "applyEq" (formula "75") (term "0") (ifseqformula "74"))
                                                      (rule "qeq_literals" (formula "75"))
                                                      (rule "true_left" (formula "75"))
                                                      (rule "applyEq" (formula "50") (term "1,1") (ifseqformula "74"))
                                                      (rule "add_literals" (formula "50") (term "1"))
                                                      (rule "applyEq" (formula "5") (term "1,1,1,0,0,0,0") (ifseqformula "74"))
                                                      (rule "add_zero_right" (formula "5") (term "1,1,0,0,0,0"))
                                                      (rule "applyEq" (formula "36") (term "1,1") (ifseqformula "74"))
                                                      (rule "add_literals" (formula "36") (term "1"))
                                                      (rule "applyEq" (formula "73") (term "1") (ifseqformula "74"))
                                                      (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "74"))
                                                      (rule "add_literals" (formula "8") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "50"))
                                                      (rule "leq_literals" (formula "19") (term "0"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "true_left" (formula "19"))
                                                      (rule "pullOutSelect" (formula "74") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "70"))
                                                       (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "107")) (ifInst ""  (formula "61")))
                                                      (rule "elementOfSingleton" (formula "74") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "74"))
                                                      (rule "applyEqReverse" (formula "75") (term "0,0") (ifseqformula "74"))
                                                      (rule "hideAuxiliaryEq" (formula "74"))
                                                      (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "64"))
                                                      (rule "inEqSimp_subsumption1" (formula "74") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "74") (term "0"))
                                                       (builtin "One Step Simplification" (formula "74"))
                                                      (rule "true_left" (formula "74"))
                                                      (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                                      (rule "castedGetAny" (formula "34") (term "0"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "seqGetAlphaCast" (formula "5") (term "1,0,0,0,0"))
                                                      (rule "castedGetAny" (formula "5") (term "0"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "true_left" (formula "5"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "36"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "0,1"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "1,0"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "36"))
                                                      (rule "applyEq" (formula "37") (term "1") (ifseqformula "75"))
                                                      (rule "pullOutSelect" (formula "37") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "107")) (ifInst ""  (formula "18")))
                                                      (rule "elementOfSingleton" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "37"))
                                                      (rule "hideAuxiliaryEq" (formula "37"))
                                                      (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "27"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "51"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "52"))
                                                      (rule "andLeft" (formula "52"))
                                                      (rule "inEqSimp_commuteLeq" (formula "53"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "pullOutSelect" (formula "53") (term "1") (inst "selectSK=java_util_Iterator_index_2"))
                                                      (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "53") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "108")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "53") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "53") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,1,0,0") (ifseqformula "32"))
                                                      (rule "replace_known_left" (formula "53") (term "0,0,1,0,0") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "elementOfSingleton" (formula "53") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "53"))
                                                      (rule "applyEqReverse" (formula "52") (term "0") (ifseqformula "53"))
                                                      (rule "hideAuxiliaryEq" (formula "52"))
                                                      (rule "applyEq" (formula "52") (term "1") (ifseqformula "75"))
                                                      (rule "pullOutSelect" (formula "52") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "107")))
                                                      (rule "replaceKnownSelect_taclet010001010000000110_23" (formula "52") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet010001010000000110_24" (formula "52") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "32"))
                                                      (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "18"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "52"))
                                                      (rule "hideAuxiliaryEq" (formula "52"))
                                                      (rule "lenNonNegative" (formula "52") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "91"))
                                                      (rule "andLeft" (formula "91"))
                                                      (rule "inEqSimp_commuteLeq" (formula "92"))
                                                      (rule "inEqSimp_commuteLeq" (formula "91"))
                                                      (rule "pullOutSelect" (formula "92") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "92") (ifseqformula "81"))
                                                       (builtin "One Step Simplification" (formula "92") (ifInst ""  (formula "110")))
                                                      (rule "replaceKnownSelect_taclet010001010000000110_21" (formula "92") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet010001010000000110_22" (formula "92") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "92") (term "0,1,0,0") (ifseqformula "72"))
                                                      (rule "replace_known_left" (formula "92") (term "0,0,1,0,0") (ifseqformula "63"))
                                                       (builtin "One Step Simplification" (formula "92"))
                                                      (rule "elementOfSingleton" (formula "92") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "92"))
                                                      (rule "applyEqReverse" (formula "93") (term "0,0") (ifseqformula "92"))
                                                      (rule "hideAuxiliaryEq" (formula "92"))
                                                      (rule "applyEq" (formula "36") (term "0") (ifseqformula "75"))
                                                      (rule "qeq_literals" (formula "36"))
                                                      (rule "true_left" (formula "36"))
                                                      (rule "applyEq" (formula "91") (term "0,0") (ifseqformula "65"))
                                                      (rule "pullOutSelect" (formula "91") (term "1") (inst "selectSK=java_util_Iterator_index_3"))
                                                      (rule "applyEq" (formula "90") (term "0") (ifseqformula "91"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "91") (ifseqformula "80"))
                                                       (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "109")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "91") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "91") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "91") (term "0,1,0,0") (ifseqformula "71"))
                                                      (rule "replace_known_left" (formula "91") (term "0,0,1,0,0") (ifseqformula "62"))
                                                       (builtin "One Step Simplification" (formula "91"))
                                                      (rule "elementOfSingleton" (formula "91") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "91"))
                                                      (rule "applyEqReverse" (formula "90") (term "0") (ifseqformula "91"))
                                                      (rule "applyEqReverse" (formula "92") (term "1") (ifseqformula "91"))
                                                      (rule "hideAuxiliaryEq" (formula "91"))
                                                      (rule "applyEq" (formula "91") (term "1") (ifseqformula "74"))
                                                      (rule "inEqSimp_subsumption1" (formula "91") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "91") (term "0"))
                                                       (builtin "One Step Simplification" (formula "91"))
                                                      (rule "true_left" (formula "91"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "25"))
                                                      (rule "andLeft" (formula "25"))
                                                      (rule "inEqSimp_commuteLeq" (formula "26"))
                                                      (rule "inEqSimp_commuteLeq" (formula "25"))
                                                      (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "29"))
                                                      (rule "applyEq" (formula "26") (term "1") (ifseqformula "37"))
                                                      (rule "applyEq" (formula "25") (term "0") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "25"))
                                                      (rule "closeFalse" (formula "25"))
                                                   )
                                                   (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length FALSE"
                                                       (builtin "One Step Simplification" (formula "106"))
                                                      (rule "false_right" (formula "106"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "73"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "73") (term "1,0"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "73") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "73") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "73") (term "0,1"))
                                                      (rule "andLeft" (formula "73"))
                                                      (rule "inEqSimp_commuteLeq" (formula "73"))
                                                      (rule "inEqSimp_commuteLeq" (formula "74"))
                                                      (rule "inEqSimp_antiSymm" (formula "73") (ifseqformula "4"))
                                                      (rule "applyEq" (formula "4") (term "0") (ifseqformula "73"))
                                                      (rule "leq_literals" (formula "4"))
                                                      (rule "true_left" (formula "4"))
                                                      (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "72"))
                                                      (rule "add_literals" (formula "33") (term "1,0"))
                                                      (rule "applyEq" (formula "48") (term "1,1") (ifseqformula "72"))
                                                      (rule "add_literals" (formula "48") (term "1"))
                                                      (rule "applyEq" (formula "74") (term "1") (ifseqformula "72"))
                                                      (rule "applyEq" (formula "73") (term "0") (ifseqformula "72"))
                                                      (rule "qeq_literals" (formula "73"))
                                                      (rule "true_left" (formula "73"))
                                                      (rule "applyEq" (formula "71") (term "1") (ifseqformula "72"))
                                                      (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "72"))
                                                      (rule "add_zero_right" (formula "6") (term "1"))
                                                      (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "72"))
                                                      (rule "add_zero_right" (formula "34") (term "1"))
                                                      (rule "applyEq" (formula "3") (term "1,1,1,0,0,0,0") (ifseqformula "72"))
                                                      (rule "add_zero_right" (formula "3") (term "1,1,0,0,0,0"))
                                                      (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "48"))
                                                      (rule "leq_literals" (formula "17") (term "0"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "true_left" (formula "17"))
                                                      (rule "pullOutSelect" (formula "72") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "72") (ifseqformula "68"))
                                                       (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "105")) (ifInst ""  (formula "59")))
                                                      (rule "elementOfSingleton" (formula "72") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "72"))
                                                      (rule "applyEqReverse" (formula "73") (term "0,0") (ifseqformula "72"))
                                                      (rule "hideAuxiliaryEq" (formula "72"))
                                                      (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "62"))
                                                      (rule "inEqSimp_subsumption1" (formula "72") (ifseqformula "47"))
                                                      (rule "leq_literals" (formula "72") (term "0"))
                                                       (builtin "One Step Simplification" (formula "72"))
                                                      (rule "true_left" (formula "72"))
                                                      (rule "seqGetAlphaCast" (formula "32") (term "0"))
                                                      (rule "castedGetAny" (formula "32") (term "0"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "seqGetAlphaCast" (formula "3") (term "1,0,0,0,0"))
                                                      (rule "castedGetAny" (formula "3") (term "0"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "true_left" (formula "3"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "34"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "0,1"))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "1,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "0,1"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "1,0"))
                                                      (rule "andLeft" (formula "34"))
                                                      (rule "inEqSimp_commuteLeq" (formula "35"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "applyEq" (formula "35") (term "1") (ifseqformula "73"))
                                                      (rule "pullOutSelect" (formula "35") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "30"))
                                                       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "105")) (ifInst ""  (formula "16")))
                                                      (rule "elementOfSingleton" (formula "35") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "25"))
                                                      (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "49"))
                                                      (rule "leq_literals" (formula "35") (term "0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "true_left" (formula "35"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "50"))
                                                      (rule "andLeft" (formula "50"))
                                                      (rule "inEqSimp_commuteLeq" (formula "51"))
                                                      (rule "inEqSimp_commuteLeq" (formula "50"))
                                                      (rule "pullOutSelect" (formula "51") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "106")))
                                                      (rule "replaceKnownSelect_taclet110001010000000110_23" (formula "51") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet110001010000000110_24" (formula "51") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,0,0") (ifseqformula "30"))
                                                      (rule "replace_known_left" (formula "51") (term "0,0,1,0,0") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "elementOfSingleton" (formula "51") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "applyEqReverse" (formula "52") (term "0,0") (ifseqformula "51"))
                                                      (rule "hideAuxiliaryEq" (formula "51"))
                                                      (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "25"))
                                                      (rule "pullOutSelect" (formula "51") (term "1") (inst "selectSK=java_util_Iterator_index_2"))
                                                      (rule "applyEq" (formula "50") (term "0") (ifseqformula "51"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "106")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_14" (formula "51") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "51") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,1,0,0") (ifseqformula "30"))
                                                      (rule "replace_known_left" (formula "51") (term "0,0,1,0,0") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "elementOfSingleton" (formula "51") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "51"))
                                                      (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "51"))
                                                      (rule "applyEqReverse" (formula "50") (term "0") (ifseqformula "51"))
                                                      (rule "hideAuxiliaryEq" (formula "50"))
                                                      (rule "applyEq" (formula "50") (term "1") (ifseqformula "73"))
                                                      (rule "inEqSimp_subsumption1" (formula "50") (ifseqformula "48"))
                                                      (rule "leq_literals" (formula "50") (term "0"))
                                                       (builtin "One Step Simplification" (formula "50"))
                                                      (rule "true_left" (formula "50"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "88"))
                                                      (rule "andLeft" (formula "88"))
                                                      (rule "inEqSimp_commuteLeq" (formula "89"))
                                                      (rule "inEqSimp_commuteLeq" (formula "88"))
                                                      (rule "pullOutSelect" (formula "89") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "89") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "107")))
                                                      (rule "replaceKnownSelect_taclet110001010000000110_21" (formula "89") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet110001010000000110_22" (formula "89") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "89") (term "0,1,0,0") (ifseqformula "69"))
                                                      (rule "replace_known_left" (formula "89") (term "0,0,1,0,0") (ifseqformula "60"))
                                                       (builtin "One Step Simplification" (formula "89"))
                                                      (rule "elementOfSingleton" (formula "89") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "89"))
                                                      (rule "applyEqReverse" (formula "90") (term "0,0") (ifseqformula "89"))
                                                      (rule "hideAuxiliaryEq" (formula "89"))
                                                      (rule "applyEq" (formula "34") (term "0") (ifseqformula "72"))
                                                      (rule "qeq_literals" (formula "34"))
                                                      (rule "true_left" (formula "34"))
                                                      (rule "applyEq" (formula "88") (term "0,0") (ifseqformula "62"))
                                                      (rule "pullOutSelect" (formula "88") (term "1") (inst "selectSK=java_util_Iterator_index_3"))
                                                      (rule "applyEq" (formula "87") (term "0") (ifseqformula "88"))
                                                      (rule "simplifySelectOfAnonEQ" (formula "88") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "106")))
                                                      (rule "replaceKnownSelect_taclet01010000000110_15" (formula "88") (term "2,0"))
                                                      (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "88") (term "2,0"))
                                                      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "88") (term "0,1,0,0") (ifseqformula "68"))
                                                      (rule "replace_known_left" (formula "88") (term "0,0,1,0,0") (ifseqformula "59"))
                                                       (builtin "One Step Simplification" (formula "88"))
                                                      (rule "elementOfSingleton" (formula "88") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "88"))
                                                      (rule "applyEqReverse" (formula "87") (term "0") (ifseqformula "88"))
                                                      (rule "applyEqReverse" (formula "89") (term "1") (ifseqformula "88"))
                                                      (rule "hideAuxiliaryEq" (formula "88"))
                                                      (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "23"))
                                                      (rule "andLeft" (formula "23"))
                                                      (rule "inEqSimp_commuteLeq" (formula "24"))
                                                      (rule "inEqSimp_commuteLeq" (formula "23"))
                                                      (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEq" (formula "24") (term "1") (ifseqformula "35"))
                                                      (rule "applyEq" (formula "23") (term "0") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "23"))
                                                      (rule "closeFalse" (formula "23"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_50_1.<created>@heap_Before_LOOP_A«anonHeapFunction» = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "replace_known_left" (formula "71") (term "0") (ifseqformula "33"))
                                                 (builtin "One Step Simplification" (formula "71"))
                                                (rule "true_left" (formula "71"))
                                                (rule "cut_direct" (formula "104") (term "0"))
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length TRUE"
                                                    (builtin "One Step Simplification" (formula "105"))
                                                   (rule "allRight" (formula "105") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "105"))
                                                   (rule "orRight" (formula "105"))
                                                   (rule "inEqSimp_geqRight" (formula "106"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "106"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "seqGetAlphaCast" (formula "106") (term "1"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "seqGetAlphaCast" (formula "106") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "74"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "74") (term "1,0"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "74") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "74") (term "1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "74") (term "0,1"))
                                                   (rule "andLeft" (formula "74"))
                                                   (rule "inEqSimp_commuteLeq" (formula "75"))
                                                   (rule "inEqSimp_commuteLeq" (formula "74"))
                                                   (rule "inEqSimp_antiSymm" (formula "74") (ifseqformula "6"))
                                                   (rule "applyEq" (formula "75") (term "0") (ifseqformula "74"))
                                                   (rule "qeq_literals" (formula "75"))
                                                   (rule "true_left" (formula "75"))
                                                   (rule "applyEq" (formula "75") (term "1") (ifseqformula "74"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "74"))
                                                   (rule "leq_literals" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "73"))
                                                   (rule "add_zero_right" (formula "35") (term "1,0"))
                                                   (rule "applyEq" (formula "50") (term "1,1") (ifseqformula "73"))
                                                   (rule "add_literals" (formula "50") (term "1"))
                                                   (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "73"))
                                                   (rule "add_literals" (formula "8") (term "1"))
                                                   (rule "applyEq" (formula "72") (term "1") (ifseqformula "73"))
                                                   (rule "applyEq" (formula "5") (term "1,1,1,0,0,0,0") (ifseqformula "73"))
                                                   (rule "add_zero_right" (formula "5") (term "1,1,0,0,0,0"))
                                                   (rule "applyEq" (formula "36") (term "1,1") (ifseqformula "73"))
                                                   (rule "add_zero_right" (formula "36") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "19") (ifseqformula "50"))
                                                   (rule "leq_literals" (formula "19") (term "0"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "pullOutSelect" (formula "73") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "106")) (ifInst ""  (formula "61")))
                                                   (rule "elementOfSingleton" (formula "73") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "73"))
                                                   (rule "applyEqReverse" (formula "74") (term "0,0") (ifseqformula "73"))
                                                   (rule "hideAuxiliaryEq" (formula "73"))
                                                   (rule "applyEq" (formula "73") (term "0,0") (ifseqformula "64"))
                                                   (rule "inEqSimp_subsumption1" (formula "73") (ifseqformula "49"))
                                                   (rule "leq_literals" (formula "73") (term "0"))
                                                    (builtin "One Step Simplification" (formula "73"))
                                                   (rule "true_left" (formula "73"))
                                                   (rule "seqGetAlphaCast" (formula "34") (term "0"))
                                                   (rule "castedGetAny" (formula "34") (term "0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "seqGetAlphaCast" (formula "5") (term "1,0,0,0,0"))
                                                   (rule "castedGetAny" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "36"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "1,0"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "36") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "36") (term "0,1"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "36"))
                                                   (rule "applyEq" (formula "37") (term "1") (ifseqformula "74"))
                                                   (rule "pullOutSelect" (formula "37") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "106")) (ifInst ""  (formula "18")))
                                                   (rule "elementOfSingleton" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "37"))
                                                   (rule "hideAuxiliaryEq" (formula "37"))
                                                   (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "27"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "51"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "52"))
                                                   (rule "andLeft" (formula "52"))
                                                   (rule "inEqSimp_commuteLeq" (formula "52"))
                                                   (rule "inEqSimp_commuteLeq" (formula "53"))
                                                   (rule "pullOutSelect" (formula "52") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                                                   (rule "applyEq" (formula "54") (term "1") (ifseqformula "52"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "107")))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "52") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "52") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "32"))
                                                   (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "applyEqReverse" (formula "54") (term "1") (ifseqformula "52"))
                                                   (rule "applyEqReverse" (formula "53") (term "0") (ifseqformula "52"))
                                                   (rule "hideAuxiliaryEq" (formula "52"))
                                                   (rule "applyEq" (formula "52") (term "1") (ifseqformula "74"))
                                                   (rule "pullOutSelect" (formula "52") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "106")))
                                                   (rule "replaceKnownSelect_taclet01001010000000110_23" (formula "52") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01001010000000110_24" (formula "52") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "32"))
                                                   (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "elementOfSingleton" (formula "52") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "applyEqReverse" (formula "53") (term "0,0") (ifseqformula "52"))
                                                   (rule "hideAuxiliaryEq" (formula "52"))
                                                   (rule "lenNonNegative" (formula "52") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "52"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "90"))
                                                   (rule "andLeft" (formula "90"))
                                                   (rule "inEqSimp_commuteLeq" (formula "90"))
                                                   (rule "inEqSimp_commuteLeq" (formula "91"))
                                                   (rule "pullOutSelect" (formula "90") (term "0") (inst "selectSK=java_util_Iterator_index_3"))
                                                   (rule "applyEq" (formula "92") (term "1") (ifseqformula "90"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "90") (ifseqformula "80"))
                                                    (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "109")))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "90") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "90") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "90") (term "0,1,0,0") (ifseqformula "72"))
                                                   (rule "replace_known_left" (formula "90") (term "0,0,1,0,0") (ifseqformula "63"))
                                                    (builtin "One Step Simplification" (formula "90"))
                                                   (rule "elementOfSingleton" (formula "90") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "90"))
                                                   (rule "applyEqReverse" (formula "91") (term "0") (ifseqformula "90"))
                                                   (rule "applyEqReverse" (formula "91") (term "1") (ifseqformula "90"))
                                                   (rule "hideAuxiliaryEq" (formula "90"))
                                                   (rule "applyEq" (formula "36") (term "0") (ifseqformula "74"))
                                                   (rule "qeq_literals" (formula "36"))
                                                   (rule "true_left" (formula "36"))
                                                   (rule "applyEq" (formula "89") (term "1") (ifseqformula "73"))
                                                   (rule "pullOutSelect" (formula "89") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "89") (ifseqformula "79"))
                                                    (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "107")))
                                                   (rule "replaceKnownSelect_taclet01001010000000110_21" (formula "89") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01001010000000110_22" (formula "89") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "89") (term "0,1,0,0") (ifseqformula "71"))
                                                   (rule "replace_known_left" (formula "89") (term "0,0,1,0,0") (ifseqformula "62"))
                                                    (builtin "One Step Simplification" (formula "89"))
                                                   (rule "elementOfSingleton" (formula "89") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "89"))
                                                   (rule "applyEqReverse" (formula "90") (term "0,0") (ifseqformula "89"))
                                                   (rule "hideAuxiliaryEq" (formula "89"))
                                                   (rule "lenNonNegative" (formula "89") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "89"))
                                                   (rule "applyEq" (formula "89") (term "0,0") (ifseqformula "65"))
                                                   (rule "inEqSimp_subsumption1" (formula "89") (ifseqformula "49"))
                                                   (rule "leq_literals" (formula "89") (term "0"))
                                                    (builtin "One Step Simplification" (formula "89"))
                                                   (rule "true_left" (formula "89"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "25"))
                                                   (rule "andLeft" (formula "25"))
                                                   (rule "inEqSimp_commuteLeq" (formula "26"))
                                                   (rule "inEqSimp_commuteLeq" (formula "25"))
                                                   (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "29"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "37"))
                                                   (rule "qeq_literals" (formula "25"))
                                                   (rule "closeFalse" (formula "25"))
                                                )
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length FALSE"
                                                    (builtin "One Step Simplification" (formula "105"))
                                                   (rule "false_right" (formula "105"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "72"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "72") (term "0,1"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "72") (term "1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "72") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "72") (term "1,0"))
                                                   (rule "andLeft" (formula "72"))
                                                   (rule "inEqSimp_commuteLeq" (formula "72"))
                                                   (rule "inEqSimp_commuteLeq" (formula "73"))
                                                   (rule "inEqSimp_antiSymm" (formula "72") (ifseqformula "4"))
                                                   (rule "applyEq" (formula "73") (term "0") (ifseqformula "72"))
                                                   (rule "qeq_literals" (formula "73"))
                                                   (rule "true_left" (formula "73"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "72"))
                                                   (rule "leq_literals" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "72") (term "1") (ifseqformula "71"))
                                                   (rule "applyEq" (formula "48") (term "1,1") (ifseqformula "71"))
                                                   (rule "add_zero_right" (formula "48") (term "1"))
                                                   (rule "applyEq" (formula "33") (term "1,1,0") (ifseqformula "71"))
                                                   (rule "add_literals" (formula "33") (term "1,0"))
                                                   (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "71"))
                                                   (rule "add_literals" (formula "34") (term "1"))
                                                   (rule "applyEq" (formula "70") (term "1") (ifseqformula "71"))
                                                   (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "71"))
                                                   (rule "add_zero_right" (formula "6") (term "1"))
                                                   (rule "applyEq" (formula "3") (term "1,1,1,0,0,0,0") (ifseqformula "71"))
                                                   (rule "add_zero_right" (formula "3") (term "1,1,0,0,0,0"))
                                                   (rule "inEqSimp_subsumption1" (formula "17") (ifseqformula "48"))
                                                   (rule "leq_literals" (formula "17") (term "0"))
                                                    (builtin "One Step Simplification" (formula "17"))
                                                   (rule "true_left" (formula "17"))
                                                   (rule "pullOutSelect" (formula "71") (term "0,0") (inst "selectSK=java_util_Iterator_seq_0"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "71") (ifseqformula "68"))
                                                    (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "104")) (ifInst ""  (formula "59")))
                                                   (rule "elementOfSingleton" (formula "71") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "71"))
                                                   (rule "applyEqReverse" (formula "72") (term "0,0") (ifseqformula "71"))
                                                   (rule "hideAuxiliaryEq" (formula "71"))
                                                   (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "62"))
                                                   (rule "inEqSimp_subsumption1" (formula "71") (ifseqformula "47"))
                                                   (rule "leq_literals" (formula "71") (term "0"))
                                                    (builtin "One Step Simplification" (formula "71"))
                                                   (rule "true_left" (formula "71"))
                                                   (rule "seqGetAlphaCast" (formula "32") (term "0"))
                                                   (rule "castedGetAny" (formula "32") (term "0"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "seqGetAlphaCast" (formula "3") (term "1,0,0,0,0"))
                                                   (rule "castedGetAny" (formula "3") (term "0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "34"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "1,0"))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "34") (term "0,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "1,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "34") (term "0,1"))
                                                   (rule "andLeft" (formula "34"))
                                                   (rule "inEqSimp_commuteLeq" (formula "35"))
                                                   (rule "inEqSimp_commuteLeq" (formula "34"))
                                                   (rule "applyEq" (formula "35") (term "1") (ifseqformula "72"))
                                                   (rule "pullOutSelect" (formula "35") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "35") (ifseqformula "30"))
                                                    (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "104")) (ifInst ""  (formula "16")))
                                                   (rule "elementOfSingleton" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "applyEqReverse" (formula "36") (term "0,0") (ifseqformula "35"))
                                                   (rule "hideAuxiliaryEq" (formula "35"))
                                                   (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "25"))
                                                   (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "49"))
                                                   (rule "leq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "true_left" (formula "35"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "50"))
                                                   (rule "andLeft" (formula "50"))
                                                   (rule "inEqSimp_commuteLeq" (formula "50"))
                                                   (rule "inEqSimp_commuteLeq" (formula "51"))
                                                   (rule "pullOutSelect" (formula "50") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                                                   (rule "applyEq" (formula "52") (term "1") (ifseqformula "50"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "105")))
                                                   (rule "replaceKnownSelect_taclet01010000000110_14" (formula "50") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "50") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,1,0,0") (ifseqformula "30"))
                                                   (rule "replace_known_left" (formula "50") (term "0,0,1,0,0") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "applyEqReverse" (formula "52") (term "1") (ifseqformula "50"))
                                                   (rule "applyEqReverse" (formula "51") (term "0") (ifseqformula "50"))
                                                   (rule "hideAuxiliaryEq" (formula "50"))
                                                   (rule "applyEq" (formula "50") (term "1") (ifseqformula "72"))
                                                   (rule "pullOutSelect" (formula "50") (term "0,0") (inst "selectSK=java_util_Iterator_seq_2"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "50") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "104")))
                                                   (rule "replaceKnownSelect_taclet11001010000000110_23" (formula "50") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet11001010000000110_24" (formula "50") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "0,1,0,0") (ifseqformula "30"))
                                                   (rule "replace_known_left" (formula "50") (term "0,0,1,0,0") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "elementOfSingleton" (formula "50") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "applyEqReverse" (formula "51") (term "0,0") (ifseqformula "50"))
                                                   (rule "hideAuxiliaryEq" (formula "50"))
                                                   (rule "lenNonNegative" (formula "50") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "50"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "88"))
                                                   (rule "andLeft" (formula "88"))
                                                   (rule "inEqSimp_commuteLeq" (formula "89"))
                                                   (rule "inEqSimp_commuteLeq" (formula "88"))
                                                   (rule "pullOutSelect" (formula "89") (term "0,0") (inst "selectSK=java_util_Iterator_seq_3"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "89") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "107")))
                                                   (rule "replaceKnownSelect_taclet11001010000000110_21" (formula "89") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet11001010000000110_22" (formula "89") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "89") (term "0,1,0,0") (ifseqformula "70"))
                                                   (rule "replace_known_left" (formula "89") (term "0,0,1,0,0") (ifseqformula "61"))
                                                    (builtin "One Step Simplification" (formula "89"))
                                                   (rule "elementOfSingleton" (formula "89") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "89"))
                                                   (rule "applyEqReverse" (formula "90") (term "0,0") (ifseqformula "89"))
                                                   (rule "hideAuxiliaryEq" (formula "89"))
                                                   (rule "applyEq" (formula "34") (term "0") (ifseqformula "72"))
                                                   (rule "qeq_literals" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "applyEq" (formula "88") (term "0,0") (ifseqformula "63"))
                                                   (rule "pullOutSelect" (formula "88") (term "1") (inst "selectSK=java_util_Iterator_index_3"))
                                                   (rule "applyEq" (formula "87") (term "0") (ifseqformula "88"))
                                                   (rule "simplifySelectOfAnonEQ" (formula "88") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "106")))
                                                   (rule "replaceKnownSelect_taclet01010000000110_15" (formula "88") (term "2,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet01010000000110_16" (formula "88") (term "2,0"))
                                                   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "88") (term "0,1,0,0") (ifseqformula "69"))
                                                   (rule "replace_known_left" (formula "88") (term "0,0,1,0,0") (ifseqformula "60"))
                                                    (builtin "One Step Simplification" (formula "88"))
                                                   (rule "elementOfSingleton" (formula "88") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "88"))
                                                   (rule "applyEqReverse" (formula "87") (term "0") (ifseqformula "88"))
                                                   (rule "applyEqReverse" (formula "89") (term "1") (ifseqformula "88"))
                                                   (rule "hideAuxiliaryEq" (formula "88"))
                                                   (rule "applyEq" (formula "88") (term "1") (ifseqformula "71"))
                                                   (rule "inEqSimp_subsumption1" (formula "88") (ifseqformula "47"))
                                                   (rule "leq_literals" (formula "88") (term "0"))
                                                    (builtin "One Step Simplification" (formula "88"))
                                                   (rule "true_left" (formula "88"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "23"))
                                                   (rule "andLeft" (formula "23"))
                                                   (rule "inEqSimp_commuteLeq" (formula "23"))
                                                   (rule "inEqSimp_commuteLeq" (formula "24"))
                                                   (rule "applyEq" (formula "23") (term "0") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "23"))
                                                   (rule "closeFalse" (formula "23"))
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "replace_known_right" (formula "85") (term "1") (ifseqformula "91"))
                                              (builtin "One Step Simplification" (formula "85"))
                                             (rule "notLeft" (formula "85"))
                                             (rule "inEqSimp_geqRight" (formula "91"))
                                             (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                             (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0,0"))
                                             (rule "apply_eq_boolean" (formula "86") (term "3") (ifseqformula "90"))
                                             (rule "apply_eq_boolean" (formula "89") (term "1") (ifseqformula "90"))
                                              (builtin "One Step Simplification" (formula "89"))
                                             (rule "notLeft" (formula "89"))
                                             (rule "apply_eq_boolean" (formula "49") (term "3") (ifseqformula "91"))
                                             (rule "apply_eq_boolean" (formula "52") (term "1") (ifseqformula "91"))
                                              (builtin "One Step Simplification" (formula "52"))
                                             (rule "notLeft" (formula "52"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                             (rule "polySimp_elimOne" (formula "1") (term "1"))
                                             (rule "inEqSimp_antiSymm" (formula "31") (ifseqformula "1"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "31"))
                                             (rule "inEqSimp_homoInEq0" (formula "1"))
                                             (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                             (rule "add_literals" (formula "1") (term "1,0"))
                                             (rule "times_zero_1" (formula "1") (term "0"))
                                             (rule "qeq_literals" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "applyEq" (formula "31") (term "0") (ifseqformula "30"))
                                             (rule "inEqSimp_homoInEq1" (formula "31"))
                                             (rule "polySimp_pullOutFactor1" (formula "31") (term "0"))
                                             (rule "add_literals" (formula "31") (term "1,0"))
                                             (rule "times_zero_1" (formula "31") (term "0"))
                                             (rule "leq_literals" (formula "31"))
                                             (rule "true_left" (formula "31"))
                                             (rule "applyEq" (formula "17") (term "0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "19") (term "1,0,0,0") (ifseqformula "30"))
                                             (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "30"))
                                             (rule "inEqSimp_antiSymm" (formula "17") (ifseqformula "2"))
                                             (rule "applyEq" (formula "20") (term "1,0,0,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "19") (term "1,1,0,0") (ifseqformula "17"))
                                             (rule "applyEq" (formula "35") (term "1,1,0") (ifseqformula "17"))
                                             (rule "add_zero_right" (formula "35") (term "1,0"))
                                             (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                                             (rule "qeq_literals" (formula "18"))
                                             (rule "true_left" (formula "18"))
                                             (rule "applyEq" (formula "2") (term "0") (ifseqformula "17"))
                                             (rule "leq_literals" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "68") (term "1") (ifseqformula "16"))
                                             (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "16"))
                                             (rule "add_zero_right" (formula "34") (term "1"))
                                             (rule "applyEq" (formula "1") (term "1,1,1,0,1,0,0") (ifseqformula "16"))
                                             (rule "add_literals" (formula "1") (term "1,1,0,1,0,0"))
                                             (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "16"))
                                             (rule "add_zero_right" (formula "4") (term "1"))
                                             (rule "applyEq" (formula "29") (term "1") (ifseqformula "16"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "17") (term "0,0"))
                                             (rule "add_zero_right" (formula "17") (term "1,1,0,0"))
                                             (rule "qeq_literals" (formula "17") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "commute_or_2" (formula "20") (term "0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0"))
                                             (rule "commute_or" (formula "17") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq3" (formula "17") (term "0"))
                                             (rule "add_literals" (formula "17") (term "1,1,0"))
                                             (rule "qeq_literals" (formula "17") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "commute_or" (formula "1") (term "0,0"))
                                             (rule "commute_or" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0"))
                                             (rule "commute_or" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0"))
                                             (rule "lenNonNegative" (formula "102") (term "0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "lenNonNegative" (formula "103") (term "1,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "1"))
                                             (rule "ineffectiveCast" (formula "91") (term "0") (ifseqformula "11"))
                                             (rule "typeEqDerived2" (formula "12") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "true_left" (formula "12"))
                                             (rule "applyEq" (formula "81") (term "1,0,1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "79") (term "1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "40") (term "2") (ifseqformula "1"))
                                             (rule "applyEq" (formula "91") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "45") (term "1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "43") (term "1") (ifseqformula "1"))
                                             (rule "applyEq" (formula "76") (term "2") (ifseqformula "1"))
                                             (rule "applyEq" (formula "81") (term "1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "45") (term "1,0,1") (ifseqformula "1"))
                                             (rule "seqGetAlphaCast" (formula "33") (term "0"))
                                             (rule "castedGetAny" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "true_left" (formula "33"))
                                             (rule "seqGetAlphaCast" (formula "4") (term "1,0,0,0,0"))
                                             (rule "castedGetAny" (formula "4") (term "0"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "ineffectiveCast2" (formula "75") (term "2") (ifseqformula "78"))
                                             (rule "ineffectiveCast2" (formula "75") (term "2") (ifseqformula "43"))
                                             (rule "ineffectiveCast2" (formula "75") (term "2") (ifseqformula "1"))
                                             (rule "allLeft" (formula "21") (inst "t=i_0_0"))
                                             (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                             (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "44"))
                                             (rule "replace_known_right" (formula "21") (term "0,0,0,0") (ifseqformula "89"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "allLeft" (formula "21") (inst "t=i_0_1"))
                                             (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
                                             (rule "applyEq" (formula "21") (term "0,0,0,0,0") (ifseqformula "79"))
                                             (rule "replace_known_right" (formula "21") (term "0,0,0,0") (ifseqformula "89"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "cut_direct" (formula "32") (term "0"))
                                             (branch "CUT: result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "replace_known_left" (formula "66") (term "0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "66"))
                                                (rule "true_left" (formula "66"))
                                                (rule "cut_direct" (formula "100") (term "0"))
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length TRUE"
                                                    (builtin "One Step Simplification" (formula "101"))
                                                   (rule "allRight" (formula "101") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "101"))
                                                   (rule "orRight" (formula "101"))
                                                   (rule "inEqSimp_leqRight" (formula "101"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "102"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "seqGetAlphaCast" (formula "102") (term "1"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "seqGetAlphaCast" (formula "102") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "59"))
                                                   (rule "andLeft" (formula "59"))
                                                   (rule "inEqSimp_commuteLeq" (formula "59"))
                                                   (rule "inEqSimp_commuteLeq" (formula "60"))
                                                   (rule "applyEq" (formula "59") (term "0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "59"))
                                                   (rule "closeFalse" (formula "59"))
                                                )
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length FALSE"
                                                    (builtin "One Step Simplification" (formula "101"))
                                                   (rule "false_right" (formula "101"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "57"))
                                                   (rule "andLeft" (formula "57"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57"))
                                                   (rule "inEqSimp_commuteLeq" (formula "58"))
                                                   (rule "applyEq" (formula "57") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                             )
                                             (branch "CUT: result_50_1.<created>@anon_heap_next«anonHeapFunction» = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "66") (term "0") (ifseqformula "84"))
                                                 (builtin "One Step Simplification" (formula "66"))
                                                (rule "cut_direct" (formula "102") (term "0"))
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length TRUE"
                                                    (builtin "One Step Simplification" (formula "103"))
                                                   (rule "allRight" (formula "103") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "103"))
                                                   (rule "orRight" (formula "103"))
                                                   (rule "inEqSimp_geqRight" (formula "104"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "104"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "seqGetAlphaCast" (formula "104") (term "1"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "seqGetAlphaCast" (formula "104") (term "0"))
                                                   (rule "castDel" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "59"))
                                                   (rule "andLeft" (formula "59"))
                                                   (rule "inEqSimp_commuteLeq" (formula "59"))
                                                   (rule "inEqSimp_commuteLeq" (formula "60"))
                                                   (rule "applyEq" (formula "59") (term "0") (ifseqformula "9"))
                                                   (rule "qeq_literals" (formula "59"))
                                                   (rule "closeFalse" (formula "59"))
                                                )
                                                (branch "CUT: _vals_3_B_0.seq@anon_heap_addInputCol«anonHeapFunction».length = _vals_3_A_0.seq@anon_heap_addInputCol«anonHeapFunction».length FALSE"
                                                    (builtin "One Step Simplification" (formula "103"))
                                                   (rule "false_right" (formula "103"))
                                                   (rule "Partial_inv_axiom_for_JML_class_invariant_nr_63_in_Iterator" (formula "57"))
                                                   (rule "andLeft" (formula "57"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57"))
                                                   (rule "inEqSimp_commuteLeq" (formula "58"))
                                                   (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "61"))
                                                   (rule "applyEq" (formula "58") (term "1") (ifseqformula "7"))
                                                   (rule "applyEq" (formula "57") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "57"))
                                                   (rule "closeFalse" (formula "57"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "exLeft" (formula "1") (inst "sk=i_0") (userinteraction))
                                          (rule "instEx" (formula "1") (term "0,0,0") (ifseqformula "116") (userinteraction))
                                          (rule "andRight" (formula "116"))
                                          (branch
                                             (rule "andRight" (formula "116"))
                                             (branch
                                                (rule "andLeft" (formula "1"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "eqSymm" (formula "5"))
                                                (rule "eqSymm" (formula "7"))
                                                (rule "eqSymm" (formula "10"))
                                                (rule "eqSymm" (formula "4"))
                                                (rule "eqSymm" (formula "134"))
                                                (rule "eqSymm" (formula "9"))
                                                (rule "eqSymm" (formula "6"))
                                                (rule "eqSymm" (formula "62"))
                                                (rule "eqSymm" (formula "117"))
                                                (rule "eqSymm" (formula "8"))
                                                (rule "eqSymm" (formula "63"))
                                                (rule "eqSymm" (formula "2"))
                                                (rule "replace_known_left" (formula "101") (term "0,0,0,1") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "80")) (ifInst ""  (formula "28")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")))
                                                (rule "andLeft" (formula "101"))
                                                (rule "polySimp_homoEq" (formula "43") (term "1"))
                                                (rule "polySimp_homoEq" (formula "96") (term "1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "96") (term "0,1"))
                                                (rule "castedGetAny" (formula "120") (term "0,1,0"))
                                                (rule "castedGetAny" (formula "9") (term "0,2,1"))
                                                (rule "castedGetAny" (formula "9") (term "0,2,0"))
                                                (rule "inEqSimp_leqRight" (formula "119"))
                                                (rule "add_zero_right" (formula "1") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "97") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "97") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "97") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "44") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "44") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "120") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "120") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "96") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "96") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "96") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "74") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "90") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "90") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "90") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "74") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "54"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "84") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "84") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "43") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "95") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "95") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "95") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "79") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "115") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "115") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "115") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "59") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "110"))
                                                (rule "polySimp_mulComm0" (formula "110") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "59") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "110") (term "0"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "120") (term "0,0,0"))
                                                (rule "applyEq" (formula "59") (term "0,0,1,0,1") (ifseqformula "33"))
                                                (rule "applyEq" (formula "115") (term "0,1,0,1") (ifseqformula "83"))
                                                (rule "applyEq" (formula "79") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "38") (term "0,0,1,0,1") (ifseqformula "33"))
                                                (rule "applyEq" (formula "6") (term "1") (ifseqformula "33"))
                                                (rule "applyEq" (formula "86") (term "0") (ifseqformula "11"))
                                                (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "64"))
                                                (rule "applyEq" (formula "97") (term "0,1") (ifseqformula "101"))
                                                (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
                                                (rule "applyEq" (formula "88") (term "0,1,0,1") (ifseqformula "82"))
                                                (rule "applyEq" (formula "38") (term "3") (ifseqformula "15"))
                                                (rule "applyEq" (formula "109") (term "0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "111") (term "0,1,0,1") (ifseqformula "100"))
                                                (rule "applyEq" (formula "95") (term "1,0,1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "94") (term "0,1,0,0") (ifseqformula "82"))
                                                (rule "applyEq" (formula "111") (term "0,1,0,0") (ifseqformula "100"))
                                                (rule "applyEq" (formula "42") (term "0,1,0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "95") (term "0,0,1,0,0") (ifseqformula "84"))
                                                (rule "applyEq" (formula "93") (term "0,0,1,0,0") (ifseqformula "84"))
                                                (rule "applyEq" (formula "101") (term "0,0,0") (ifseqformula "84"))
                                                (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "62"))
                                                (rule "applyEq" (formula "48") (term "4") (ifseqformula "47"))
                                                (rule "applyEq" (formula "102") (term "3") (ifseqformula "100"))
                                                (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "99"))
                                                (rule "applyEq" (formula "81") (term "0,0") (ifseqformula "83"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "true_left" (formula "81"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "82"))
                                                (rule "applyEq" (formula "77") (term "0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "44") (term "0,0,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "43") (term "0,0,0") (ifseqformula "31"))
                                                (rule "applyEqRigid" (formula "130") (term "0,0") (ifseqformula "63"))
                                                (rule "eqSymm" (formula "130"))
                                                (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "81"))
                                                (rule "applyEq" (formula "94") (term "0,1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "89") (term "1,0,1,0") (ifseqformula "97"))
                                                (rule "applyEq" (formula "64") (term "0,0,1") (ifseqformula "97"))
                                                (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "15"))
                                                (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "replace_known_left" (formula "41") (term "0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "notLeft" (formula "41"))
                                                (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "113"))
                                                 (builtin "One Step Simplification" (formula "14"))
                                                (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "113"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "replace_known_right" (formula "91") (term "1") (ifseqformula "113"))
                                                 (builtin "One Step Simplification" (formula "91"))
                                                (rule "notLeft" (formula "91"))
                                                (rule "replace_known_right" (formula "91") (term "0") (ifseqformula "112"))
                                                 (builtin "One Step Simplification" (formula "91"))
                                                (rule "true_left" (formula "91"))
                                                (rule "replace_known_right" (formula "42") (term "1") (ifseqformula "112"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notLeft" (formula "42"))
                                                (rule "replace_known_right" (formula "42") (term "0") (ifseqformula "110"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "true_left" (formula "42"))
                                                (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "96") (term "0,2") (ifseqformula "90"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "76"))
                                                (rule "applyEq" (formula "71") (term "0,1") (ifseqformula "8"))
                                                (rule "applyEq" (formula "10") (term "0,1,1") (ifseqformula "31"))
                                                (rule "applyEq" (formula "85") (term "0,0,1") (ifseqformula "76"))
                                                (rule "applyEq" (formula "99") (term "0,1") (ifseqformula "90"))
                                                (rule "applyEq" (formula "98") (term "0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "54") (term "4") (ifseqformula "52"))
                                                (rule "applyEq" (formula "46") (term "6") (ifseqformula "45"))
                                                (rule "applyEq" (formula "80") (term "0,0") (ifseqformula "60"))
                                                (rule "applyEq" (formula "104") (term "3") (ifseqformula "107"))
                                                (rule "applyEq" (formula "113") (term "0,0") (ifseqformula "90"))
                                                (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "40") (term "0,0,1,0,0") (ifseqformula "31"))
                                                (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "35"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "applyEq" (formula "80") (term "4") (ifseqformula "77"))
                                                (rule "applyEq" (formula "60") (term "1") (ifseqformula "11"))
                                                (rule "applyEq" (formula "95") (term "5") (ifseqformula "58"))
                                                (rule "applyEq" (formula "78") (term "0,0") (ifseqformula "75"))
                                                (rule "applyEq" (formula "94") (term "6") (ifseqformula "93"))
                                                (rule "applyEq" (formula "94") (term "0") (ifseqformula "58"))
                                                (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "applyEq" (formula "101") (term "4") (ifseqformula "99"))
                                                (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0") (ifseqformula "74"))
                                                (rule "applyEq" (formula "100") (term "0,0") (ifseqformula "104"))
                                                (rule "applyEq" (formula "81") (term "1,0,1") (ifseqformula "87"))
                                                (rule "applyEq" (formula "73") (term "0,0,1,0") (ifseqformula "74"))
                                                 (builtin "One Step Simplification" (formula "73"))
                                                (rule "true_left" (formula "73"))
                                                (rule "applyEq" (formula "80") (term "0,0,0") (ifseqformula "86"))
                                                (rule "replace_known_right" (formula "80") (term "0,0") (ifseqformula "106"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "applyEq" (formula "53") (term "3") (ifseqformula "56"))
                                                (rule "applyEq" (formula "35") (term "4") (ifseqformula "33"))
                                                (rule "applyEq" (formula "116") (term "0") (ifseqformula "57"))
                                                (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,1") (ifseqformula "30"))
                                                (rule "applyEq" (formula "107") (term "0,1,1,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "70") (term "0,0,0,1,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "87") (term "0,1,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "15") (term "1") (ifseqformula "31"))
                                                (rule "applyEq" (formula "88") (term "4") (ifseqformula "85"))
                                                (rule "applyEq" (formula "70") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "81") (term "0,0,1") (ifseqformula "85"))
                                                (rule "replace_known_right" (formula "81") (term "0,1") (ifseqformula "105"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "true_left" (formula "81"))
                                                (rule "applyEq" (formula "80") (term "1,0,1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "11") (term "1") (ifseqformula "31"))
                                                (rule "replace_known_left" (formula "75") (term "0") (ifseqformula "11"))
                                                 (builtin "One Step Simplification" (formula "75"))
                                                (rule "replace_known_left" (formula "80") (term "0") (ifseqformula "75"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "replace_known_left" (formula "81") (term "0") (ifseqformula "75"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "applyEq" (formula "66") (term "0,1,1,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "68") (term "0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "27") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,1,0,0,1,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,0,1,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "72") (term "3") (ifseqformula "59"))
                                                (rule "applyEq" (formula "68") (term "1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "93") (term "0,0,1,0,1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "59") (term "1") (ifseqformula "31"))
                                                (rule "applyEq" (formula "76") (term "0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "76") (term "1") (ifseqformula "80"))
                                                (rule "applyEq" (formula "71") (term "0,0,1,0") (ifseqformula "6"))
                                                (rule "applyEqRigid" (formula "114") (term "0,0") (ifseqformula "13"))
                                                (rule "eqSymm" (formula "114"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "applyEq" (formula "34") (term "3") (ifseqformula "30"))
                                                (rule "applyEq" (formula "79") (term "0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "79"))
                                                (rule "applyEq" (formula "64") (term "0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "69") (term "1,0,0") (ifseqformula "7"))
                                                (rule "applyEq" (formula "95") (term "1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "66"))
                                                (rule "applyEq" (formula "69") (term "3") (ifseqformula "30"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "96") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "96") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "96") (term "1,1,0,0"))
                                                (rule "mul_literals" (formula "96") (term "0,1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "96") (term "1,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "96") (term "1,1,1,0,0"))
                                                (rule "polySimp_sepPosMonomial" (formula "38"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1"))
                                                (rule "mul_literals" (formula "38") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1"))
                                                (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "38"))
                                                (rule "polySimp_addComm1" (formula "73") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "73") (term "0,0"))
                                                (rule "add_literals" (formula "73") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "73") (term "0,0"))
                                                (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "38"))
                                                (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "38"))
                                                (rule "applyEq" (formula "33") (term "1,0,0") (ifseqformula "38"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0"))
                                                (rule "applyEq" (formula "96") (term "1,1,1,0") (ifseqformula "38"))
                                                (rule "applyEq" (formula "94") (term "1") (ifseqformula "38"))
                                                (rule "applyEq" (formula "7") (term "1") (ifseqformula "38"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "46"))
                                                (rule "polySimp_mulLiterals" (formula "46") (term "0"))
                                                (rule "polySimp_elimOne" (formula "46") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "51") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "51") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "51") (term "0,1"))
                                                (rule "polySimp_sepNegMonomial" (formula "73"))
                                                (rule "polySimp_mulLiterals" (formula "73") (term "0"))
                                                (rule "polySimp_elimOne" (formula "73") (term "0"))
                                                (rule "applyEq" (formula "89") (term "1,0,0,1") (ifseqformula "73"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "84"))
                                                (rule "polySimp_mulLiterals" (formula "84") (term "0"))
                                                (rule "polySimp_elimOne" (formula "84") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "33"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "89") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "89") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "89") (term "0,1"))
                                                (rule "inEqSimp_contradEq7" (formula "94") (ifseqformula "33"))
                                                (rule "polySimp_rightDist" (formula "94") (term "1,0,0"))
                                                (rule "mul_literals" (formula "94") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "94") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "94") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "94") (term "0,0"))
                                                (rule "add_literals" (formula "94") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "94") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "94") (term "0,0"))
                                                (rule "leq_literals" (formula "94") (term "0"))
                                                 (builtin "One Step Simplification" (formula "94"))
                                                (rule "false_right" (formula "94"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                                                (rule "qeq_literals" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch
                                                (rule "andLeft" (formula "1"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "eqSymm" (formula "63"))
                                                (rule "eqSymm" (formula "117"))
                                                (rule "eqSymm" (formula "10"))
                                                (rule "eqSymm" (formula "62"))
                                                (rule "eqSymm" (formula "4"))
                                                (rule "eqSymm" (formula "5"))
                                                (rule "eqSymm" (formula "9"))
                                                (rule "eqSymm" (formula "6"))
                                                (rule "eqSymm" (formula "8"))
                                                (rule "eqSymm" (formula "134"))
                                                (rule "eqSymm" (formula "7"))
                                                (rule "eqSymm" (formula "2"))
                                                (rule "replace_known_left" (formula "101") (term "0,0") (ifseqformula "80"))
                                                 (builtin "One Step Simplification" (formula "101") (ifInst ""  (formula "28")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")))
                                                (rule "andLeft" (formula "101"))
                                                (rule "polySimp_homoEq" (formula "96") (term "1"))
                                                (rule "polySimp_homoEq" (formula "43") (term "1"))
                                                (rule "polySimp_addComm1" (formula "96") (term "0,1"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,1"))
                                                (rule "castedGetAny" (formula "120") (term "0,1,0"))
                                                (rule "castedGetAny" (formula "9") (term "0,2,0"))
                                                (rule "eqSymm" (formula "9"))
                                                (rule "inEqSimp_ltRight" (formula "119"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "74") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "59") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "59") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "84") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "84") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "54"))
                                                (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "54") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "79") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "79") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "95") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "95") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "95") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "38") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "96") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "96") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "96") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "43") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "97") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "97") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "97") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "110"))
                                                (rule "polySimp_mulComm0" (formula "110") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "110") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "90") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "90") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "90") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "120") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "120") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "115") (term "1"))
                                                (rule "polySimp_mulComm0" (formula "115") (term "1,0,0,1"))
                                                (rule "polySimp_addComm1" (formula "115") (term "0,1"))
                                                (rule "inEqSimp_ltToLeq" (formula "74") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "74") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "44") (term "0"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0"))
                                                (rule "polySimp_addComm1" (formula "44") (term "0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "2"))
                                                (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                (rule "castedGetAny" (formula "10") (term "0,2,0"))
                                                (rule "eqSymm" (formula "10"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "120") (term "0,0,0"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "85"))
                                                (rule "applyEq" (formula "95") (term "0,0,1,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "11") (term "0") (ifseqformula "86"))
                                                (rule "eqSymm" (formula "11"))
                                                (rule "applyEq" (formula "10") (term "0,1,1") (ifseqformula "32"))
                                                (rule "applyEqRigid" (formula "134") (term "0,1") (ifseqformula "12"))
                                                (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "114") (term "0,1,0,1") (ifseqformula "82"))
                                                (rule "applyEq" (formula "107") (term "6") (ifseqformula "106"))
                                                (rule "applyEq" (formula "89") (term "0,0,1,0,1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "98") (term "0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "119") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "42") (term "0,0,1,0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "110") (term "0,1") (ifseqformula "101"))
                                                (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "109") (term "0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "95") (term "0,0,1") (ifseqformula "101"))
                                                (rule "applyEq" (formula "65") (term "0,0,1") (ifseqformula "101"))
                                                (rule "applyEq" (formula "95") (term "0,1,0,0") (ifseqformula "82"))
                                                (rule "applyEq" (formula "134") (term "0,0") (ifseqformula "64"))
                                                (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "103") (term "4") (ifseqformula "100"))
                                                (rule "applyEq" (formula "97") (term "0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "94") (term "0,0,1") (ifseqformula "84"))
                                                (rule "applyEq" (formula "129") (term "0") (ifseqformula "63"))
                                                (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "107") (term "5") (ifseqformula "63"))
                                                (rule "applyEq" (formula "114") (term "0,0") (ifseqformula "118"))
                                                (rule "applyEq" (formula "94") (term "1,0,1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,1") (ifseqformula "32"))
                                                (rule "applyEq" (formula "79") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "96") (term "0,0,1,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "62"))
                                                (rule "applyEq" (formula "37") (term "0,0,1,0,1") (ifseqformula "32"))
                                                (rule "applyEq" (formula "14") (term "1") (ifseqformula "33"))
                                                (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "14"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "notLeft" (formula "42"))
                                                (rule "replace_known_right" (formula "94") (term "0,1") (ifseqformula "118"))
                                                 (builtin "One Step Simplification" (formula "94"))
                                                (rule "true_left" (formula "94"))
                                                (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "117"))
                                                 (builtin "One Step Simplification" (formula "13"))
                                                (rule "replace_known_left" (formula "64") (term "1") (ifseqformula "13"))
                                                 (builtin "One Step Simplification" (formula "64"))
                                                (rule "true_left" (formula "64"))
                                                (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "116"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "116"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "notLeft" (formula "43"))
                                                (rule "applyEq" (formula "57") (term "4") (ifseqformula "55"))
                                                (rule "applyEq" (formula "6") (term "1") (ifseqformula "32"))
                                                (rule "applyEq" (formula "85") (term "0,0") (ifseqformula "81"))
                                                (rule "applyEq" (formula "93") (term "0,1") (ifseqformula "7"))
                                                (rule "applyEq" (formula "56") (term "0,0,1,0,1") (ifseqformula "32"))
                                                (rule "applyEq" (formula "80") (term "0,0,1,0") (ifseqformula "81"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "true_left" (formula "80"))
                                                (rule "applyEq" (formula "109") (term "3") (ifseqformula "112"))
                                                (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "83") (term "0,0") (ifseqformula "62"))
                                                (rule "replace_known_left" (formula "83") (term "0") (ifseqformula "80"))
                                                 (builtin "One Step Simplification" (formula "83"))
                                                (rule "replace_known_left" (formula "88") (term "0") (ifseqformula "83"))
                                                 (builtin "One Step Simplification" (formula "88"))
                                                (rule "replace_known_left" (formula "89") (term "0") (ifseqformula "83"))
                                                 (builtin "One Step Simplification" (formula "89"))
                                                (rule "applyEq" (formula "48") (term "6") (ifseqformula "47"))
                                                (rule "applyEq" (formula "95") (term "0,0,0") (ifseqformula "79"))
                                                (rule "applyEq" (formula "100") (term "0") (ifseqformula "60"))
                                                (rule "applyEq" (formula "73") (term "0,0") (ifseqformula "9"))
                                                (rule "eqSymm" (formula "73"))
                                                (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "69") (term "0,1,1,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "72") (term "0,0,0,1,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "31") (term "0,0,1,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEq" (formula "61") (term "1") (ifseqformula "76"))
                                                (rule "applyEq" (formula "83") (term "1,0,1") (ifseqformula "90"))
                                                (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "59"))
                                                (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "59"))
                                                (rule "applyEq" (formula "83") (term "0,0,0") (ifseqformula "90"))
                                                (rule "replace_known_right" (formula "83") (term "0,0") (ifseqformula "109"))
                                                 (builtin "One Step Simplification" (formula "83"))
                                                (rule "applyEq" (formula "6") (term "0") (ifseqformula "75"))
                                                (rule "applyEq" (formula "80") (term "4") (ifseqformula "78"))
                                                (rule "applyEq" (formula "71") (term "0,0,0,1,0") (ifseqformula "9"))
                                                (rule "applyEq" (formula "95") (term "0,2") (ifseqformula "89"))
                                                (rule "applyEq" (formula "111") (term "0,0") (ifseqformula "89"))
                                                (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "applyEq" (formula "84") (term "0,1") (ifseqformula "88"))
                                                (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "107"))
                                                 (builtin "One Step Simplification" (formula "84"))
                                                (rule "notLeft" (formula "84"))
                                                (rule "replace_known_right" (formula "84") (term "0") (ifseqformula "105"))
                                                 (builtin "One Step Simplification" (formula "84"))
                                                (rule "true_left" (formula "84"))
                                                (rule "applyEq" (formula "97") (term "0,1,0,1") (ifseqformula "86"))
                                                (rule "applyEq" (formula "88") (term "3") (ifseqformula "86"))
                                                (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "8"))
                                                (rule "applyEq" (formula "39") (term "0,0,1,0,0") (ifseqformula "30"))
                                                (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "34"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "25"))
                                                (rule "applyEq" (formula "42") (term "4") (ifseqformula "41"))
                                                (rule "applyEq" (formula "86") (term "0,1,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "96") (term "0,1,0,0") (ifseqformula "85"))
                                                (rule "applyEq" (formula "53") (term "3") (ifseqformula "56"))
                                                (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "72"))
                                                 (builtin "One Step Simplification" (formula "71"))
                                                (rule "true_left" (formula "71"))
                                                (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "29"))
                                                (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "103"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "applyEq" (formula "34") (term "4") (ifseqformula "32"))
                                                (rule "applyEq" (formula "97") (term "4") (ifseqformula "95"))
                                                (rule "applyEq" (formula "26") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,1,0,0,1,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "65") (term "0,0,0,1,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "69") (term "1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "73") (term "3") (ifseqformula "58"))
                                                (rule "applyEq" (formula "64") (term "0,0,1,0,0,0,0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "34") (term "3") (ifseqformula "14"))
                                                (rule "applyEq" (formula "10") (term "0,0,2,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "75") (term "1,0,0") (ifseqformula "80"))
                                                (rule "applyEq" (formula "76") (term "0,0") (ifseqformula "6"))
                                                (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "77") (term "1,0") (ifseqformula "7"))
                                                (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "8"))
                                                (rule "eqSymm" (formula "64"))
                                                (rule "applyEq" (formula "80") (term "0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "applyEq" (formula "70") (term "0,0,1,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "92") (term "0,0,1,0,1") (ifseqformula "6"))
                                                (rule "applyEq" (formula "10") (term "0,1,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "applyEq" (formula "74") (term "1") (ifseqformula "78"))
                                                (rule "applyEq" (formula "69") (term "1,0,0") (ifseqformula "7"))
                                                (rule "applyEq" (formula "94") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                                                (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                                (rule "polySimp_elimOne" (formula "45") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "96") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "96") (term "1,1,0,0"))
                                                (rule "polySimp_rightDist" (formula "96") (term "1,1,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "96") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "96") (term "0,1,1,0,0"))
                                                (rule "polySimp_elimOne" (formula "96") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "20") (term "0,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_sepPosMonomial" (formula "37"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1"))
                                                (rule "mul_literals" (formula "37") (term "0,1"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1"))
                                                (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "37"))
                                                (rule "polySimp_addComm1" (formula "73") (term "0"))
                                                (rule "polySimp_addAssoc" (formula "73") (term "0,0"))
                                                (rule "add_literals" (formula "73") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "73") (term "0,0"))
                                                (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "37"))
                                                (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "37"))
                                                (rule "applyEq" (formula "7") (term "1") (ifseqformula "37"))
                                                (rule "applyEq" (formula "32") (term "1,0,0") (ifseqformula "37"))
                                                (rule "polySimp_addAssoc" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "32") (term "0,0"))
                                                (rule "applyEq" (formula "96") (term "1,1,1,0") (ifseqformula "37"))
                                                (rule "applyEq" (formula "94") (term "1") (ifseqformula "37"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "84"))
                                                (rule "polySimp_mulLiterals" (formula "84") (term "0"))
                                                (rule "polySimp_elimOne" (formula "84") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "50") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "50") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "50") (term "0,1"))
                                                (rule "polySimp_sepNegMonomial" (formula "73"))
                                                (rule "polySimp_mulLiterals" (formula "73") (term "0"))
                                                (rule "polySimp_elimOne" (formula "73") (term "0"))
                                                (rule "applyEq" (formula "89") (term "1,0,0,1") (ifseqformula "73"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "32"))
                                                (rule "polySimp_mulLiterals" (formula "32") (term "0"))
                                                (rule "polySimp_elimOne" (formula "32") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "89") (term "1"))
                                                (rule "polySimp_mulLiterals" (formula "89") (term "0,1"))
                                                (rule "polySimp_elimOne" (formula "89") (term "0,1"))
                                                (rule "inEqSimp_contradEq7" (formula "94") (ifseqformula "32"))
                                                (rule "polySimp_rightDist" (formula "94") (term "1,0,0"))
                                                (rule "mul_literals" (formula "94") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "94") (term "0,0"))
                                                (rule "polySimp_addComm0" (formula "94") (term "0,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "94") (term "0,0"))
                                                (rule "add_literals" (formula "94") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "94") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "94") (term "0,0"))
                                                (rule "leq_literals" (formula "94") (term "0"))
                                                 (builtin "One Step Simplification" (formula "94"))
                                                (rule "false_right" (formula "94"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "109") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "109") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "109") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "109") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "109") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "109") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "109") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "109") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "109") (term "1,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "109") (term "1,1,1,0,0,1"))
                                                (rule "pullOutSelect" (formula "95") (term "0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                                                (rule "applyEq" (formula "96") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "100")) (ifInst ""  (formula "17")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "96") (term "0,1,1,1,0,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "96") (term "0,0,1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "inEqSimp_homoInEq1" (formula "2"))
                                                (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                                (rule "add_literals" (formula "2") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "2") (term "1,0"))
                                                (rule "add_zero_right" (formula "2") (term "0"))
                                                (rule "leq_literals" (formula "2"))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch
                                             (rule "castedGetAny" (formula "116") (term "0") (userinteraction))
                                             (rule "andLeft" (formula "1") (userinteraction))
                                             (rule "andLeft" (formula "1") (userinteraction))
                                             (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "32") (userinteraction))
                                             (rule "eqSymm" (formula "2") (userinteraction))
                                             (rule "selectOfAnonEQ" (formula "118") (term "0,0") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "118") (ifInst ""  (formula "124")) (ifInst ""  (formula "17")))
                                             (rule "elementOfSingleton" (formula "118") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "118"))
                                              (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_50 = null   &   boolean::select(heap,                       self_50,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)     = TRUE   & (  ((  vals_3 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              vals_3,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  cols_2 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              cols_2,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  record_7 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              record_7,                              java.lang.Object::<created>)            = TRUE)<<SC>>))   & ((  (\\forall int j;            ((   (  leq(Z(0(#)), j)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                  & lt(j,                       seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                          cols_2,                                          java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                     origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>              -> (\\exists int i;                    ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              record_7,                                              org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                                         origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      record_7,                                                                      org.apache.commons.csv.CSVRecord::$key_seq),                                                          i))                         = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      cols_2,                                                                      java.util.Collection::$seq),                                                          j)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                            origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>       & ((  (\\forall int i;                ((   (  leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              cols_2,                                              java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<SC,                                                                                                                                         origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                  -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                     cols_2,                                                                     java.util.Collection::$seq),                                                         i))                        = null)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>           & ((  (!(vals_3 = cols_2)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>               & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                             record_7)                   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                 vals_3)                       & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                     cols_2)                           & ((  (!(vals_3 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                               & ((  (!(cols_2 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                    origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                                   & (!(record_7 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                      origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)   & {_vals_3:=vals_3      || _cols_2:=cols_2      || _record_7:=record_7}       \\[{           exc_64=null;try {             self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_64=e;           }         }\\] (  selfAtPost_50 = self_50              & excAtPost_64 = exc_64              & heapAtPost = heap)) ")
                                          )
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "115"))
                                    (branch
                                        (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_50 = null   &   boolean::select(heap,                       self_50,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)     = TRUE   & (  ((  vals_3 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              vals_3,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  cols_2 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              cols_2,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  record_7 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              record_7,                              java.lang.Object::<created>)            = TRUE)<<SC>>))   & ((  (\\forall int j;            ((   (  leq(Z(0(#)), j)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                  & lt(j,                       seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                          cols_2,                                          java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                     origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>              -> (\\exists int i;                    ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              record_7,                                              org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                                         origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      record_7,                                                                      org.apache.commons.csv.CSVRecord::$key_seq),                                                          i))                         = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      cols_2,                                                                      java.util.Collection::$seq),                                                          j)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                            origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>       & ((  (\\forall int i;                ((   (  leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              cols_2,                                              java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<SC,                                                                                                                                         origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                  -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                     cols_2,                                                                     java.util.Collection::$seq),                                                         i))                        = null)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>           & ((  (!(vals_3 = cols_2)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>               & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                             record_7)                   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                 vals_3)                       & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                     cols_2)                           & ((  (!(vals_3 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                               & ((  (!(cols_2 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                    origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                                   & (!(record_7 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                      origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)   & {_vals_3:=vals_3      || _cols_2:=cols_2      || _record_7:=record_7}       \\[{           exc_64=null;try {             self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_64=e;           }         }\\] (  selfAtPost_50 = self_50              & excAtPost_64 = exc_64              & heapAtPost = heap)) ")
                                    )
                                    (branch
                                       (rule "andRight" (formula "115"))
                                       (branch
                                          (rule "eqSymm" (formula "2"))
                                          (rule "eqSymm" (formula "4"))
                                          (rule "eqSymm" (formula "59"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "6"))
                                          (rule "eqSymm" (formula "3"))
                                          (rule "eqSymm" (formula "114"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "eqSymm" (formula "60"))
                                          (rule "eqSymm" (formula "130"))
                                          (rule "eqSymm" (formula "7"))
                                          (rule "replace_known_left" (formula "98") (term "1,0,1,1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                                          (rule "andLeft" (formula "98"))
                                          (rule "polySimp_homoEq" (formula "40") (term "1"))
                                          (rule "polySimp_homoEq" (formula "93") (term "1"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,1"))
                                          (rule "castedGetAny" (formula "6") (term "0,2,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "50"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "50") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "111") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "111") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "111") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                                          (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                                          (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                          (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "106"))
                                          (rule "polySimp_mulComm0" (formula "106") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "106") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "106") (term "0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "93") (term "0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "94") (term "0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "56") (term "3") (ifseqformula "59"))
                                          (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "93") (term "1,0,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "60"))
                                          (rule "applyEq" (formula "95") (term "0,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "91") (term "0,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "100") (term "3") (ifseqformula "98"))
                                          (rule "applyEqRigid" (formula "131") (term "0,1") (ifseqformula "9"))
                                          (rule "applyEq" (formula "86") (term "0,1,0,1") (ifseqformula "79"))
                                          (rule "applyEq" (formula "126") (term "0") (ifseqformula "60"))
                                          (rule "applyEq" (formula "41") (term "0,0,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "63") (term "1") (ifseqformula "82"))
                                          (rule "replace_known_left" (formula "86") (term "0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "86"))
                                          (rule "applyEq" (formula "111") (term "0,0") (ifseqformula "115"))
                                          (rule "applyEq" (formula "55") (term "0,0,1,0,1") (ifseqformula "29"))
                                          (rule "applyEq" (formula "82") (term "0") (ifseqformula "7"))
                                          (rule "applyEq" (formula "108") (term "0,1,0,0") (ifseqformula "97"))
                                          (rule "applyEq" (formula "81") (term "0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "81"))
                                          (rule "applyEq" (formula "86") (term "4") (ifseqformula "83"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                                          (rule "applyEq" (formula "34") (term "4") (ifseqformula "31"))
                                          (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "128") (term "0,0") (ifseqformula "59"))
                                          (rule "applyEq" (formula "37") (term "0,0,1,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "87") (term "1,0,1,0") (ifseqformula "95"))
                                          (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "40") (term "0,0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "108") (term "4") (ifseqformula "106"))
                                          (rule "applyEq" (formula "108") (term "3") (ifseqformula "111"))
                                          (rule "applyEq" (formula "11") (term "1") (ifseqformula "28"))
                                          (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "11"))
                                           (builtin "One Step Simplification" (formula "31"))
                                          (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "37"))
                                          (rule "applyEq" (formula "42") (term "4") (ifseqformula "41"))
                                          (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "77") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "87") (term "1,0,1") (ifseqformula "3"))
                                          (rule "applyEq" (formula "100") (term "0,2") (ifseqformula "94"))
                                          (rule "applyEq" (formula "45") (term "6") (ifseqformula "44"))
                                          (rule "applyEq" (formula "88") (term "0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "100") (term "6") (ifseqformula "99"))
                                          (rule "applyEq" (formula "107") (term "0,0,1,0,1") (ifseqformula "2"))
                                          (rule "applyEq" (formula "86") (term "1,0,1") (ifseqformula "94"))
                                          (rule "applyEq" (formula "100") (term "5") (ifseqformula "57"))
                                          (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "71") (term "0,1") (ifseqformula "4"))
                                          (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "72") (term "0,0,0,1,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                                          (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "93") (term "0,0") (ifseqformula "74"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "27"))
                                          (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                                           (builtin "One Step Simplification" (formula "26"))
                                          (rule "true_left" (formula "26"))
                                          (rule "applyEq" (formula "102") (term "0,1,0,1") (ifseqformula "91"))
                                          (rule "applyEq" (formula "70") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "72"))
                                          (rule "replace_known_left" (formula "91") (term "0") (ifseqformula "72"))
                                           (builtin "One Step Simplification" (formula "91"))
                                          (rule "applyEq" (formula "83") (term "1,1") (ifseqformula "90"))
                                          (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "55"))
                                          (rule "applyEq" (formula "77") (term "0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "83") (term "0,0,1,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "87") (term "0,0,0") (ifseqformula "2"))
                                          (rule "applyEq" (formula "84") (term "0,0,1") (ifseqformula "90"))
                                          (rule "applyEq" (formula "92") (term "4") (ifseqformula "89"))
                                          (rule "applyEq" (formula "73") (term "0,0,1,0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "73") (term "1,0"))
                                          (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "90"))
                                          (rule "applyEq" (formula "66") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "69") (term "0,0,0,1,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "85") (term "0,1") (ifseqformula "89"))
                                          (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "56"))
                                          (rule "applyEq" (formula "2") (term "1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "4"))
                                          (rule "applyEq" (formula "81") (term "0,0,0") (ifseqformula "89"))
                                          (rule "applyEq" (formula "98") (term "0,1") (ifseqformula "89"))
                                          (rule "applyEq" (formula "52") (term "4") (ifseqformula "50"))
                                          (rule "applyEq" (formula "95") (term "0") (ifseqformula "56"))
                                          (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "89"))
                                          (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "5"))
                                          (rule "applyEq" (formula "108") (term "0,0") (ifseqformula "88"))
                                          (rule "applyEq" (formula "84") (term "1,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
                                          (rule "applyEq" (formula "82") (term "1,0,0,0") (ifseqformula "3"))
                                          (rule "replace_known_left" (formula "82") (term "0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "notLeft" (formula "82"))
                                          (rule "replace_known_right" (formula "35") (term "0,1") (ifseqformula "105"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "104"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "replace_known_right" (formula "79") (term "0,0") (ifseqformula "104"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "104"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "replace_known_right" (formula "82") (term "1") (ifseqformula "104"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "notLeft" (formula "82"))
                                          (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "104"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "notLeft" (formula "36"))
                                          (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "102"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "true_left" (formula "36"))
                                          (rule "applyEq" (formula "80") (term "1,0") (ifseqformula "3"))
                                          (rule "replace_known_right" (formula "80") (term "0") (ifseqformula "102"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "true_left" (formula "80"))
                                          (rule "applyEq" (formula "78") (term "1,0,0,0") (ifseqformula "3"))
                                          (rule "replace_known_left" (formula "78") (term "0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "applyEq" (formula "79") (term "1,0,0,0") (ifseqformula "3"))
                                          (rule "replace_known_left" (formula "79") (term "0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "applyEq" (formula "61") (term "0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,1,0") (ifseqformula "68"))
                                          (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
                                          (rule "applyEq" (formula "73") (term "3") (ifseqformula "55"))
                                          (rule "applyEq" (formula "31") (term "3") (ifseqformula "11"))
                                          (rule "applyEq" (formula "62") (term "0,0,0,1,0") (ifseqformula "68"))
                                          (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
                                          (rule "applyEq" (formula "67") (term "0,0,1,0") (ifseqformula "68"))
                                           (builtin "One Step Simplification" (formula "67"))
                                          (rule "true_left" (formula "67"))
                                          (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "26"))
                                          (rule "applyEq" (formula "66") (term "0,1") (ifseqformula "26"))
                                          (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "67"))
                                          (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "66") (term "1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "91") (term "0,0,1,0,1") (ifseqformula "25"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "25"))
                                          (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "applyEq" (formula "69") (term "1,0,0") (ifseqformula "3"))
                                          (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "96") (term "0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "20"))
                                          (rule "applyEq" (formula "60") (term "0,0,1,0,0,1,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "60") (term "0,0,1,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "60") (term "0,0,1,0,0,0,0,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "60") (term "0,0,0,1,0") (ifseqformula "25"))
                                          (rule "applyEq" (formula "66") (term "0,0,1,0") (ifseqformula "63"))
                                          (rule "applyEq" (formula "62") (term "0,0") (ifseqformula "25"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "true_left" (formula "62"))
                                          (rule "polySimp_sepPosMonomial" (formula "34"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                                          (rule "mul_literals" (formula "34") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                                          (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "34"))
                                          (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "34"))
                                          (rule "polySimp_addComm1" (formula "69") (term "0"))
                                          (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                                          (rule "add_literals" (formula "69") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "69") (term "0,0"))
                                          (rule "applyEq" (formula "3") (term "1") (ifseqformula "34"))
                                          (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "34"))
                                          (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                                          (rule "add_literals" (formula "29") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "29") (term "0,0"))
                                          (rule "applyEq" (formula "90") (term "1") (ifseqformula "34"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "42"))
                                          (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                                          (rule "polySimp_elimOne" (formula "42") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "80"))
                                          (rule "polySimp_mulLiterals" (formula "80") (term "0"))
                                          (rule "polySimp_elimOne" (formula "80") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "47") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "47") (term "0,1"))
                                          (rule "polySimp_sepNegMonomial" (formula "69"))
                                          (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                                          (rule "polySimp_elimOne" (formula "69") (term "0"))
                                          (rule "applyEq" (formula "85") (term "1,0,0,1") (ifseqformula "69"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                                          (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                                          (rule "polySimp_elimOne" (formula "29") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "85") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "85") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "85") (term "0,1"))
                                          (rule "inEqSimp_contradEq7" (formula "90") (ifseqformula "29"))
                                          (rule "polySimp_rightDist" (formula "90") (term "1,0,0"))
                                          (rule "mul_literals" (formula "90") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "90") (term "0,0"))
                                          (rule "polySimp_addComm0" (formula "90") (term "0,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "90") (term "0,0"))
                                          (rule "add_literals" (formula "90") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "90") (term "1,0,0"))
                                          (rule "add_literals" (formula "90") (term "0,0"))
                                          (rule "leq_literals" (formula "90") (term "0"))
                                           (builtin "One Step Simplification" (formula "90"))
                                          (rule "false_right" (formula "90"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "105") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "105") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "105") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "105") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "105") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "105") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "105") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "105") (term "1,1,1,0,0,1"))
                                          (rule "pullOutSelect" (formula "73") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "67"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "105")) (ifInst ""  (formula "59")))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "104")) (ifInst ""  (formula "15")))
                                          (rule "elementOfSingleton" (formula "73") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
                                          (rule "hideAuxiliaryEq" (formula "73"))
                                          (rule "elementOfSingleton" (formula "73") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "73"))
                                          (rule "eqSymm" (formula "73"))
                                          (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
                                          (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                                          (rule "eqSymm" (formula "105") (term "0"))
                                          (rule "eqSymm" (formula "105") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "59"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_2"))
                                          (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                                          (rule "eqSymm" (formula "105") (term "0"))
                                          (rule "eqSymm" (formula "105") (term "1,0,1"))
                                          (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                                          (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
                                          (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "21"))
                                          (rule "inEqSimp_and_subsumption3" (formula "22") (term "0,0,0"))
                                          (rule "leq_literals" (formula "22") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "22"))
                                          (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "90"))
                                          (rule "closeTrue" (formula "90"))
                                       )
                                       (branch
                                          (rule "andRight" (formula "115"))
                                          (branch
                                             (rule "notRight" (formula "115"))
                                             (rule "close" (formula "122") (ifseqformula "1"))
                                          )
                                          (branch
                                             (rule "andRight" (formula "115"))
                                             (branch
                                                (rule "notRight" (formula "115"))
                                                (rule "close" (formula "116") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notRight" (formula "115"))
                                                (rule "close" (formula "120") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "6"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSymm" (formula "130"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "4"))
                              (rule "eqSymm" (formula "7"))
                              (rule "eqSymm" (formula "60"))
                              (rule "eqSymm" (formula "59"))
                              (rule "eqSymm" (formula "114"))
                              (rule "replace_known_left" (formula "98") (term "1,0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                              (rule "andLeft" (formula "98"))
                              (rule "polySimp_homoEq" (formula "93") (term "1"))
                              (rule "polySimp_homoEq" (formula "40") (term "1"))
                              (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                              (rule "castedGetAny" (formula "6") (term "0,2,0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                              (rule "castedGetAny" (formula "6") (term "0,2,0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                              (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                              (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                              (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "106"))
                              (rule "polySimp_mulComm0" (formula "106") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "106") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "50"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "50") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                              (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "111") (term "1"))
                              (rule "polySimp_mulComm0" (formula "111") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "111") (term "0,1"))
                              (rule "applyEq" (formula "91") (term "0,0,1,0,0") (ifseqformula "81"))
                              (rule "applyEq" (formula "111") (term "0,0,1,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "11") (term "1") (ifseqformula "30"))
                              (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "34"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "notLeft" (formula "39"))
                              (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "34"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "replace_known_left" (formula "38") (term "0") (ifseqformula "34"))
                               (builtin "One Step Simplification" (formula "38"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "115"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "115"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "replace_known_right" (formula "40") (term "1") (ifseqformula "115"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "notLeft" (formula "40"))
                              (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "114"))
                               (builtin "One Step Simplification" (formula "40"))
                              (rule "true_left" (formula "40"))
                              (rule "applyEq" (formula "83") (term "0,0,1,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "86") (term "1,0,1,0") (ifseqformula "94"))
                              (rule "applyEq" (formula "129") (term "0,0") (ifseqformula "57"))
                              (rule "eqSymm" (formula "129"))
                              (rule "applyEq" (formula "105") (term "0,1,0,1") (ifseqformula "94"))
                              (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "75"))
                              (rule "applyEq" (formula "68") (term "0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "34") (term "4") (ifseqformula "31"))
                              (rule "applyEq" (formula "58") (term "0,0,1") (ifseqformula "93"))
                              (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "58"))
                              (rule "true_left" (formula "58"))
                              (rule "applyEq" (formula "88") (term "0,0") (ifseqformula "73"))
                              (rule "applyEq" (formula "86") (term "0,0,1") (ifseqformula "92"))
                              (rule "replace_known_right" (formula "86") (term "0,1") (ifseqformula "111"))
                               (builtin "One Step Simplification" (formula "86"))
                              (rule "true_left" (formula "86"))
                              (rule "applyEq" (formula "76") (term "0") (ifseqformula "7"))
                              (rule "applyEq" (formula "110") (term "0,0,0,1") (ifseqformula "90"))
                               (builtin "One Step Simplification" (formula "110"))
                              (rule "applyEq" (formula "104") (term "4") (ifseqformula "102"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "64") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "57") (term "1") (ifseqformula "7"))
                              (rule "applyEq" (formula "86") (term "0,0,0") (ifseqformula "74"))
                              (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "72"))
                              (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "27"))
                              (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "55"))
                              (rule "applyEq" (formula "83") (term "0,0,1") (ifseqformula "74"))
                              (rule "applyEq" (formula "97") (term "0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0") (ifseqformula "74"))
                              (rule "applyEq" (formula "91") (term "3") (ifseqformula "89"))
                              (rule "applyEq" (formula "95") (term "0") (ifseqformula "55"))
                              (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "91") (term "4") (ifseqformula "88"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "74"))
                              (rule "applyEq" (formula "90") (term "0,1,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "84") (term "0,0,1,0,0") (ifseqformula "74"))
                              (rule "applyEq" (formula "84") (term "1,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "83") (term "1,1") (ifseqformula "89"))
                              (rule "applyEq" (formula "85") (term "0,1") (ifseqformula "89"))
                              (rule "replace_known_right" (formula "85") (term "1") (ifseqformula "108"))
                               (builtin "One Step Simplification" (formula "85"))
                              (rule "notLeft" (formula "85"))
                              (rule "replace_known_right" (formula "85") (term "0") (ifseqformula "106"))
                               (builtin "One Step Simplification" (formula "85"))
                              (rule "true_left" (formula "85"))
                              (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "27"))
                              (rule "applyEq" (formula "92") (term "6") (ifseqformula "91"))
                              (rule "applyEq" (formula "95") (term "0,1") (ifseqformula "86"))
                              (rule "applyEq" (formula "81") (term "0,0,0") (ifseqformula "86"))
                              (rule "replace_known_right" (formula "81") (term "0,0") (ifseqformula "106"))
                               (builtin "One Step Simplification" (formula "81"))
                              (rule "applyEq" (formula "92") (term "0,2") (ifseqformula "86"))
                              (rule "applyEq" (formula "50") (term "4") (ifseqformula "48"))
                              (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "27"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "108") (term "0,0") (ifseqformula "85"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "72"))
                              (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "102"))
                              (rule "applyEq" (formula "48") (term "0,0,1,0,1") (ifseqformula "26"))
                              (rule "applyEq" (formula "75") (term "0,0") (ifseqformula "72"))
                              (rule "applyEq" (formula "62") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "65"))
                              (rule "applyEq" (formula "71") (term "0,0,1,0") (ifseqformula "72"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "true_left" (formula "71"))
                              (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "49") (term "3") (ifseqformula "52"))
                              (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "88") (term "5") (ifseqformula "53"))
                              (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "53"))
                              (rule "applyEq" (formula "93") (term "0,1,0,0") (ifseqformula "82"))
                              (rule "applyEq" (formula "112") (term "0") (ifseqformula "53"))
                              (rule "applyEq" (formula "41") (term "6") (ifseqformula "40"))
                              (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
                              (rule "applyEq" (formula "65") (term "0,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "77") (term "1,0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "65") (term "0,0,0,1,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "68"))
                               (builtin "One Step Simplification" (formula "67"))
                              (rule "true_left" (formula "67"))
                              (rule "applyEq" (formula "71") (term "4") (ifseqformula "69"))
                              (rule "applyEq" (formula "93") (term "3") (ifseqformula "96"))
                              (rule "applyEq" (formula "76") (term "1,0,0,0") (ifseqformula "3"))
                              (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
                              (rule "applyEq" (formula "70") (term "1,0,0,1") (ifseqformula "3"))
                              (rule "replace_known_left" (formula "70") (term "1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "70"))
                              (rule "applyEq" (formula "31") (term "3") (ifseqformula "11"))
                              (rule "applyEq" (formula "71") (term "3") (ifseqformula "55"))
                              (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "92") (term "0,0,1,0,1") (ifseqformula "26"))
                              (rule "applyEq" (formula "75") (term "0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "55") (term "1") (ifseqformula "27"))
                              (rule "applyEqRigid" (formula "113") (term "0,0") (ifseqformula "9"))
                              (rule "eqSymm" (formula "113"))
                              (rule "applyEq" (formula "66") (term "1") (ifseqformula "2"))
                              (rule "applyEq" (formula "74") (term "0,0,1") (ifseqformula "2"))
                              (rule "applyEq" (formula "62") (term "0,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "60") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "72") (term "1,0,0,0") (ifseqformula "3"))
                              (rule "replace_known_left" (formula "72") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "72"))
                              (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "76") (term "0,0,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "applyEq" (formula "59") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "92") (term "0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "71") (term "0,0,1,0,0") (ifseqformula "2"))
                              (rule "replace_known_left" (formula "71") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "71"))
                              (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "4"))
                              (rule "eqSymm" (formula "59"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "67") (term "1,0,1") (ifseqformula "72"))
                              (rule "applyEq" (formula "90") (term "1") (ifseqformula "3"))
                              (rule "applyEq" (formula "64") (term "3") (ifseqformula "26"))
                              (rule "polySimp_sepPosMonomial" (formula "33"))
                              (rule "polySimp_mulComm0" (formula "33") (term "1"))
                              (rule "polySimp_rightDist" (formula "33") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                              (rule "mul_literals" (formula "33") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                              (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
                              (rule "polySimp_addComm1" (formula "69") (term "0"))
                              (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                              (rule "add_literals" (formula "69") (term "0,0,0"))
                              (rule "add_zero_left" (formula "69") (term "0,0"))
                              (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "33"))
                              (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
                              (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "33"))
                              (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                              (rule "add_literals" (formula "29") (term "0,0,0"))
                              (rule "add_zero_left" (formula "29") (term "0,0"))
                              (rule "applyEq" (formula "90") (term "1") (ifseqformula "33"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                              (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                              (rule "polySimp_elimOne" (formula "41") (term "0"))
                              (rule "polySimp_sepNegMonomial" (formula "69"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                              (rule "polySimp_elimOne" (formula "69") (term "0"))
                              (rule "applyEq" (formula "85") (term "1,0,0,1") (ifseqformula "69"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "80"))
                              (rule "polySimp_mulLiterals" (formula "80") (term "0"))
                              (rule "polySimp_elimOne" (formula "80") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                              (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                              (rule "polySimp_elimOne" (formula "29") (term "0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "85") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "85") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "85") (term "0,1"))
                              (rule "inEqSimp_contradEq7" (formula "90") (ifseqformula "29"))
                              (rule "polySimp_rightDist" (formula "90") (term "1,0,0"))
                              (rule "mul_literals" (formula "90") (term "0,1,0,0"))
                              (rule "polySimp_addAssoc" (formula "90") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "90") (term "0,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "90") (term "0,0"))
                              (rule "add_literals" (formula "90") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "90") (term "1,0,0"))
                              (rule "add_literals" (formula "90") (term "0,0"))
                              (rule "leq_literals" (formula "90") (term "0"))
                               (builtin "One Step Simplification" (formula "90"))
                              (rule "false_right" (formula "90"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "105") (inst "iv=iv"))
                              (rule "inEqSimp_ltToLeq" (formula "105") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "105") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "105") (term "0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "105") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "105") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "105") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "105") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "105") (term "1,1,1,0,0,1"))
                              (rule "pullOutSelect" (formula "91") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "67"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "99")) (ifInst ""  (formula "57")))
                              (rule "eqSymm" (formula "92") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "92") (term "1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "91") (term "1,0,0") (ifseqformula "1"))
                              (rule "pullOutSelect" (formula "91") (term "0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "67"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")) (ifInst ""  (formula "56")))
                              (rule "eqSymm" (formula "92") (term "1,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "92") (term "1,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "91") (term "1,1,0") (ifseqformula "4"))
                              (rule "pullOutSelect" (formula "91") (term "0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "67"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")) (ifInst ""  (formula "56")))
                              (rule "eqSymm" (formula "92") (term "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "92") (term "1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "91") (term "1,1") (ifseqformula "5"))
                              (rule "pullOutSelect" (formula "73") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "66"))
                               (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "105")) (ifInst ""  (formula "57")))
                              (rule "eqSymm" (formula "74"))
                              (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "104")) (ifInst ""  (formula "15")))
                              (rule "elementOfSingleton" (formula "73") (term "0,0"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
                              (rule "hideAuxiliaryEq" (formula "73"))
                              (rule "elementOfSingleton" (formula "73") (term "0,0"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "eqSymm" (formula "73"))
                              (rule "pullOutSelect" (formula "104") (term "0,1,1,0,1") (inst "selectSK=java_util_Collection_seq_2"))
                              (rule "applyEq" (formula "105") (term "0,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                              (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "104") (term "0,0,1,0,1") (inst "selectSK=java_util_Collection_seq_3"))
                              (rule "applyEq" (formula "105") (term "0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "98")))
                              (rule "replaceKnownSelect_taclet1000000110_12" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1000000110_13" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "67"))
                              (rule "eqSymm" (formula "105") (term "1,0,1"))
                              (rule "eqSymm" (formula "105") (term "0"))
                              (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "57"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "104") (term "1,0,1"))
                              (rule "eqSymm" (formula "104") (term "0"))
                              (rule "pullOutSelect" (formula "90") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_4"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "97")) (ifInst ""  (formula "15")))
                              (rule "eqSymm" (formula "91") (term "0,0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "91") (term "1,0,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "91"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "90") (term "0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")) (ifInst ""  (formula "14")))
                              (rule "eqSymm" (formula "91") (term "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "91") (term "1,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "91"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "equalityToSeqGetAndSeqLenRight" (formula "90") (inst "iv=iv"))
                              (rule "inEqSimp_ltToLeq" (formula "90") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "90") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_commuteLeq" (formula "90") (term "0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "90") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "90") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "90") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "90") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "90") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "90") (term "1,1,1,0,0,1"))
                              (rule "pullOutSelect" (formula "90") (term "0,0,1,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                              (rule "applyEq" (formula "91") (term "0,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "91") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")) (ifInst ""  (formula "14")))
                              (rule "eqSymm" (formula "91") (term "1,0,1"))
                              (rule "eqSymm" (formula "91") (term "0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "91") (term "0,1,0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "91"))
                              (rule "allRight" (formula "91") (inst "sk=iv_0"))
                              (rule "impRight" (formula "91"))
                              (rule "andLeft" (formula "1"))
                              (rule "applyEqReverse" (formula "93") (term "0,1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "93"))
                              (rule "closeTrue" (formula "93"))
                           )
                           (branch "Case 3"
                              (rule "eqSymm" (formula "59"))
                              (rule "eqSymm" (formula "7"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "6"))
                              (rule "eqSymm" (formula "60"))
                              (rule "eqSymm" (formula "130"))
                              (rule "eqSymm" (formula "115"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSymm" (formula "4"))
                              (rule "replace_known_left" (formula "98") (term "0,0") (ifseqformula "77"))
                               (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                              (rule "andLeft" (formula "98"))
                              (rule "polySimp_homoEq" (formula "40") (term "1"))
                              (rule "polySimp_homoEq" (formula "93") (term "1"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                              (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                              (rule "castedGetAny" (formula "6") (term "0,2,0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                              (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                              (rule "castedGetAny" (formula "6") (term "0,2,0"))
                              (rule "eqSymm" (formula "6"))
                              (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                              (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                              (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "50"))
                              (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "50") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "107"))
                              (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "107") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                              (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                              (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
                              (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "112") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                              (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                              (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                              (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                              (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                              (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                              (rule "applyEq" (formula "75") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "48") (term "6") (ifseqformula "47"))
                              (rule "applyEq" (formula "76") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                              (rule "applyEq" (formula "91") (term "0,0,1,0,0") (ifseqformula "81"))
                              (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "applyEq" (formula "89") (term "0,0,0") (ifseqformula "97"))
                              (rule "applyEq" (formula "44") (term "4") (ifseqformula "43"))
                              (rule "applyEq" (formula "71") (term "0") (ifseqformula "73"))
                              (rule "applyEq" (formula "39") (term "0,0,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "55") (term "3") (ifseqformula "58"))
                              (rule "applyEq" (formula "85") (term "4") (ifseqformula "82"))
                              (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "26"))
                              (rule "applyEq" (formula "90") (term "0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "54") (term "0,1,0,1") (ifseqformula "26"))
                              (rule "applyEq" (formula "85") (term "3") (ifseqformula "62"))
                              (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEq" (formula "110") (term "0,0") (ifseqformula "114"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "91") (term "0,1,0,0") (ifseqformula "77"))
                              (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "10"))
                              (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "39"))
                              (rule "applyEq" (formula "37") (term "0,1,0,0") (ifseqformula "26"))
                              (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "33"))
                               (builtin "One Step Simplification" (formula "37"))
                              (rule "applyEq" (formula "90") (term "0,0,1") (ifseqformula "96"))
                              (rule "applyEq" (formula "40") (term "0,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "83") (term "0,0") (ifseqformula "79"))
                              (rule "applyEq" (formula "92") (term "0,1") (ifseqformula "3"))
                              (rule "applyEq" (formula "69") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "105") (term "0,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "96") (term "0,0,0") (ifseqformula "79"))
                              (rule "applyEq" (formula "104") (term "0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "true_left" (formula "27"))
                              (rule "applyEq" (formula "76") (term "0,0") (ifseqformula "2"))
                              (rule "eqSymm" (formula "76"))
                              (rule "replace_known_left" (formula "95") (term "0") (ifseqformula "76"))
                               (builtin "One Step Simplification" (formula "95"))
                              (rule "applyEq" (formula "122") (term "0") (ifseqformula "58"))
                              (rule "applyEq" (formula "6") (term "1") (ifseqformula "28"))
                              (rule "applyEq" (formula "76") (term "0,0,1,0") (ifseqformula "77"))
                               (builtin "One Step Simplification" (formula "76"))
                              (rule "true_left" (formula "76"))
                              (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "2") (term "1") (ifseqformula "26"))
                              (rule "applyEq" (formula "32") (term "4") (ifseqformula "29"))
                              (rule "applyEq" (formula "32") (term "3") (ifseqformula "9"))
                              (rule "applyEq" (formula "84") (term "1,0,1") (ifseqformula "92"))
                              (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "26"))
                              (rule "applyEq" (formula "106") (term "3") (ifseqformula "109"))
                              (rule "applyEq" (formula "111") (term "0,0") (ifseqformula "91"))
                              (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "55"))
                              (rule "applyEq" (formula "83") (term "1,0,1,0") (ifseqformula "91"))
                              (rule "applyEq" (formula "98") (term "0") (ifseqformula "56"))
                              (rule "applyEq" (formula "59") (term "1") (ifseqformula "76"))
                              (rule "replace_known_left" (formula "79") (term "0") (ifseqformula "59"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "applyEq" (formula "35") (term "0,1,0,0") (ifseqformula "25"))
                              (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "35"))
                              (rule "notLeft" (formula "35"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "109"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_right" (formula "84") (term "0,1") (ifseqformula "109"))
                               (builtin "One Step Simplification" (formula "84"))
                              (rule "true_left" (formula "84"))
                              (rule "replace_known_right" (formula "82") (term "0,0") (ifseqformula "108"))
                               (builtin "One Step Simplification" (formula "82"))
                              (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "108"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "108"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "notLeft" (formula "36"))
                              (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "107"))
                               (builtin "One Step Simplification" (formula "36"))
                              (rule "true_left" (formula "36"))
                              (rule "applyEq" (formula "94") (term "0,2") (ifseqformula "87"))
                              (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "87"))
                              (rule "replace_known_right" (formula "55") (term "0") (ifseqformula "107"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "5"))
                              (rule "eqSymm" (formula "66"))
                              (rule "applyEq" (formula "83") (term "0,0,0") (ifseqformula "72"))
                              (rule "applyEq" (formula "81") (term "1,1") (ifseqformula "87"))
                              (rule "applyEq" (formula "101") (term "0,0,1,0,1") (ifseqformula "72"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "72"))
                              (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "true_left" (formula "25"))
                              (rule "applyEqRigid" (formula "120") (term "0,1") (ifseqformula "7"))
                              (rule "applyEq" (formula "93") (term "6") (ifseqformula "91"))
                              (rule "applyEq" (formula "93") (term "5") (ifseqformula "52"))
                              (rule "applyEq" (formula "66") (term "0,0,0,1,0") (ifseqformula "4"))
                              (rule "applyEq" (formula "48") (term "4") (ifseqformula "46"))
                              (rule "applyEq" (formula "57") (term "0,0") (ifseqformula "52"))
                              (rule "applyEq" (formula "97") (term "0,1,0,1") (ifseqformula "85"))
                              (rule "applyEq" (formula "119") (term "0,0") (ifseqformula "53"))
                              (rule "close" (formula "119") (ifseqformula "91"))
                           )
                        )
                        (branch
                           (rule "eqSymm" (formula "7"))
                           (rule "eqSymm" (formula "59"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "60"))
                           (rule "eqSymm" (formula "115"))
                           (rule "eqSymm" (formula "130"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "4"))
                           (rule "eqSymm" (formula "6"))
                           (rule "eqSymm" (formula "5"))
                           (rule "replace_known_left" (formula "98") (term "0,0") (ifseqformula "77"))
                            (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                           (rule "andLeft" (formula "98"))
                           (rule "replace_known_right" (formula "104") (term "0,0,1,1,1,1,1,0") (ifseqformula "117"))
                            (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "122")) (ifInst ""  (formula "123")) (ifInst ""  (formula "121")))
                           (rule "polySimp_homoEq" (formula "93") (term "1"))
                           (rule "polySimp_homoEq" (formula "40") (term "1"))
                           (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                           (rule "castedGetAny" (formula "6") (term "0,2,1"))
                           (rule "castedGetAny" (formula "6") (term "0,2,0"))
                           (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
                           (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
                           (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "112") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                           (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "50"))
                           (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "50") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                           (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                           (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                           (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "107"))
                           (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "107") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                           (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                           (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                           (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                           (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
                           (rule "applyEq" (formula "38") (term "0,1,0,0") (ifseqformula "27"))
                           (rule "applyEq" (formula "76") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "80") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "105") (term "5") (ifseqformula "60"))
                           (rule "applyEq" (formula "105") (term "6") (ifseqformula "103"))
                           (rule "applyEq" (formula "92") (term "0,0,1") (ifseqformula "98"))
                           (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                           (rule "applyEq" (formula "94") (term "0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "86") (term "3") (ifseqformula "62"))
                           (rule "applyEq" (formula "7") (term "0") (ifseqformula "81"))
                           (rule "eqSymm" (formula "7"))
                           (rule "applyEq" (formula "32") (term "0,0,1,0,1") (ifseqformula "28"))
                           (rule "applyEq" (formula "91") (term "0,1,0,0") (ifseqformula "77"))
                           (rule "applyEq" (formula "77") (term "0,0") (ifseqformula "79"))
                            (builtin "One Step Simplification" (formula "77"))
                           (rule "true_left" (formula "77"))
                           (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "28"))
                           (rule "applyEq" (formula "61") (term "1") (ifseqformula "79"))
                           (rule "replace_known_left" (formula "83") (term "0") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "83"))
                           (rule "replace_known_left" (formula "89") (term "0") (ifseqformula "83"))
                            (builtin "One Step Simplification" (formula "89"))
                           (rule "notLeft" (formula "89"))
                           (rule "replace_known_left" (formula "88") (term "0") (ifseqformula "83"))
                            (builtin "One Step Simplification" (formula "88"))
                           (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "113"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "113"))
                            (builtin "One Step Simplification" (formula "37"))
                           (rule "true_left" (formula "37"))
                           (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "112"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "112"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "notLeft" (formula "38"))
                           (rule "replace_known_right" (formula "38") (term "0") (ifseqformula "111"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "applyEq" (formula "88") (term "0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "70") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "2"))
                           (rule "applyEqRigid" (formula "126") (term "0,0") (ifseqformula "56"))
                           (rule "eqSymm" (formula "126"))
                           (rule "applyEq" (formula "105") (term "0,0") (ifseqformula "109"))
                           (rule "applyEq" (formula "84") (term "1,0,1") (ifseqformula "91"))
                           (rule "applyEq" (formula "37") (term "0,0,1,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "55"))
                           (rule "applyEq" (formula "2") (term "0") (ifseqformula "75"))
                           (rule "applyEq" (formula "86") (term "1,0,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "98") (term "0,2") (ifseqformula "91"))
                           (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "28"))
                           (rule "applyEq" (formula "74") (term "0,0,1,0") (ifseqformula "75"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "true_left" (formula "74"))
                           (rule "applyEq" (formula "86") (term "0,1") (ifseqformula "90"))
                           (rule "replace_known_right" (formula "86") (term "1") (ifseqformula "110"))
                            (builtin "One Step Simplification" (formula "86"))
                           (rule "notLeft" (formula "86"))
                           (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "51") (term "3") (ifseqformula "54"))
                           (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "54"))
                           (rule "applyEq" (formula "50") (term "0,1,0,1") (ifseqformula "26"))
                           (rule "applyEq" (formula "104") (term "4") (ifseqformula "102"))
                           (rule "applyEq" (formula "70") (term "0,0,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "98") (term "0,1") (ifseqformula "88"))
                           (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "73"))
                           (rule "applyEq" (formula "90") (term "4") (ifseqformula "87"))
                           (rule "applyEq" (formula "67") (term "0") (ifseqformula "69"))
                           (rule "applyEq" (formula "68") (term "0,0") (ifseqformula "5"))
                           (rule "eqSymm" (formula "68"))
                           (rule "applyEq" (formula "93") (term "0,0,0,1,0,1") (ifseqformula "87"))
                            (builtin "One Step Simplification" (formula "93"))
                           (rule "applyEq" (formula "97") (term "0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "98") (term "0,1,0,0") (ifseqformula "86"))
                           (rule "applyEq" (formula "95") (term "0,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "88") (term "3") (ifseqformula "86"))
                           (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                           (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "54"))
                           (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "10"))
                           (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "35"))
                           (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "36"))
                           (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "85"))
                           (rule "replace_known_right" (formula "56") (term "0") (ifseqformula "106"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "applyEq" (formula "67") (term "0,0,0,1,0") (ifseqformula "5"))
                           (rule "applyEq" (formula "32") (term "4") (ifseqformula "30"))
                           (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "true_left" (formula "26"))
                           (rule "applyEq" (formula "31") (term "3") (ifseqformula "10"))
                           (rule "applyEq" (formula "106") (term "0,0") (ifseqformula "83"))
                           (rule "applyEq" (formula "74") (term "4") (ifseqformula "71"))
                           (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "68"))
                           (rule "applyEq" (formula "113") (term "0") (ifseqformula "53"))
                           (rule "applyEq" (formula "2") (term "1") (ifseqformula "26"))
                           (rule "applyEq" (formula "84") (term "0,1,0") (ifseqformula "26"))
                           (rule "applyEq" (formula "95") (term "0,1,0,1") (ifseqformula "83"))
                           (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "68"))
                           (rule "applyEq" (formula "83") (term "0,0,0") (ifseqformula "68"))
                           (rule "applyEq" (formula "10") (term "1") (ifseqformula "27"))
                           (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
                           (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "applyEq" (formula "75") (term "1,0,1,0") (ifseqformula "81"))
                           (rule "applyEq" (formula "40") (term "6") (ifseqformula "39"))
                           (rule "applyEq" (formula "75") (term "0,0,0") (ifseqformula "81"))
                           (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "102"))
                            (builtin "One Step Simplification" (formula "75"))
                           (rule "applyEq" (formula "88") (term "0") (ifseqformula "52"))
                           (rule "applyEq" (formula "62") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "48") (term "4") (ifseqformula "46"))
                           (rule "applyEq" (formula "96") (term "3") (ifseqformula "99"))
                           (rule "applyEq" (formula "78") (term "1,0") (ifseqformula "3"))
                           (rule "replace_known_right" (formula "78") (term "0") (ifseqformula "101"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "true_left" (formula "78"))
                           (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
                           (rule "applyEq" (formula "77") (term "1,0,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "67") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "63") (term "0,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "62") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "30") (term "3") (ifseqformula "26"))
                           (rule "applyEq" (formula "83") (term "0,1,1,0,0,0,0") (ifseqformula "77"))
                           (rule "applyEq" (formula "73") (term "1") (ifseqformula "77"))
                           (rule "applyEq" (formula "74") (term "0,0,1,0,0") (ifseqformula "2"))
                           (rule "replace_known_left" (formula "74") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "applyEq" (formula "111") (term "0,0") (ifseqformula "7"))
                           (rule "eqSymm" (formula "111"))
                           (rule "applyEq" (formula "77") (term "0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "77"))
                           (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "4"))
                           (rule "eqSymm" (formula "60"))
                           (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "75"))
                           (rule "applyEq" (formula "88") (term "0,0,1,0,1") (ifseqformula "24"))
                           (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "66") (term "3") (ifseqformula "62"))
                           (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "3"))
                           (rule "applyEq" (formula "93") (term "1") (ifseqformula "3"))
                           (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "61"))
                           (rule "applyEq" (formula "65") (term "0,0,1,0") (ifseqformula "61"))
                           (rule "applyEq" (formula "91") (term "0,0") (ifseqformula "61"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                           (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                           (rule "polySimp_elimOne" (formula "41") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                           (rule "polySimp_sepPosMonomial" (formula "33"))
                           (rule "polySimp_mulComm0" (formula "33") (term "1"))
                           (rule "polySimp_rightDist" (formula "33") (term "1"))
                           (rule "mul_literals" (formula "33") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                           (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
                           (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
                           (rule "polySimp_addComm1" (formula "69") (term "0"))
                           (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                           (rule "add_literals" (formula "69") (term "0,0,0"))
                           (rule "add_zero_left" (formula "69") (term "0,0"))
                           (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "33"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0"))
                           (rule "add_zero_left" (formula "28") (term "0,0"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
                           (rule "applyEq" (formula "91") (term "1") (ifseqformula "33"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_sepNegMonomial" (formula "69"))
                           (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                           (rule "polySimp_elimOne" (formula "69") (term "0"))
                           (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "69"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "81"))
                           (rule "polySimp_mulLiterals" (formula "81") (term "0"))
                           (rule "polySimp_elimOne" (formula "81") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                           (rule "polySimp_elimOne" (formula "28") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "86") (term "0,1"))
                           (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "28"))
                           (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
                           (rule "mul_literals" (formula "91") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
                           (rule "add_literals" (formula "91") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "91") (term "1,0,0"))
                           (rule "add_zero_right" (formula "91") (term "0,0"))
                           (rule "leq_literals" (formula "91") (term "0"))
                            (builtin "One Step Simplification" (formula "91"))
                           (rule "false_right" (formula "91"))
                           (rule "equalityToSeqGetAndSeqLenRight" (formula "105") (inst "iv=iv"))
                           (rule "inEqSimp_ltToLeq" (formula "105") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "105") (term "1,0,0,1,0,0,1"))
                           (rule "inEqSimp_commuteLeq" (formula "105") (term "0,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "1,0,0,1"))
                           (rule "polySimp_mulComm0" (formula "105") (term "1,1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "105") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "105") (term "0,1,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "105") (term "1,1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "105") (term "1,1,1,0,0,1"))
                           (rule "pullOutSelect" (formula "78") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")) (ifInst ""  (formula "57")))
                           (rule "eqSymm" (formula "79") (term "0,0,0,1"))
                           (rule "elementOfSingleton" (formula "78") (term "0,0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
                           (rule "hideAuxiliaryEq" (formula "78"))
                           (rule "applyEq" (formula "78") (term "1,0,0,0,1") (ifseqformula "1"))
                           (rule "pullOutSelect" (formula "78") (term "0,0,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                           (rule "applyEq" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                           (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                           (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")) (ifInst ""  (formula "12")))
                           (rule "elementOfSingleton" (formula "78") (term "0,0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                           (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                           (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
                           (rule "hideAuxiliaryEq" (formula "78"))
                           (rule "pullOutSelect" (formula "78") (term "0,0,1,0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                           (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "78"))
                           (rule "applyEq" (formula "79") (term "0,1,0,0,1") (ifseqformula "78"))
                           (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "97")) (ifInst ""  (formula "56")))
                           (rule "eqSymm" (formula "79") (term "1,0,0,1"))
                           (rule "elementOfSingleton" (formula "78") (term "0,0"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,0,0") (ifseqformula "78"))
                           (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                           (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "78"))
                           (rule "hideAuxiliaryEq" (formula "78"))
                           (rule "eqSymm" (formula "78") (term "1,0,0,1"))
                           (rule "replace_known_left" (formula "78") (term "1,0,0,1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "4"))
                           (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                           (rule "pullOutSelect" (formula "73") (term "1") (inst "selectSK=java_util_Iterator_index_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "67"))
                            (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "105")) (ifInst ""  (formula "58")))
                           (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "14")))
                           (rule "elementOfSingleton" (formula "74") (term "0,0"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "74"))
                           (rule "hideAuxiliaryEq" (formula "74"))
                           (rule "elementOfSingleton" (formula "73") (term "0,0"))
                            (builtin "One Step Simplification" (formula "73"))
                           (rule "eqSymm" (formula "73"))
                           (rule "pullOutSelect" (formula "104") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_0"))
                           (rule "applyEq" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                           (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")) (ifInst ""  (formula "15")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "applyEq" (formula "104") (term "0,1,0") (ifseqformula "24"))
                           (rule "applyEq" (formula "104") (term "0,1,1,0,1") (ifseqformula "24"))
                           (rule "pullOutSelect" (formula "104") (term "0,0,1,0,1") (inst "selectSK=java_util_Iterator_seq_1"))
                           (rule "applyEq" (formula "105") (term "0,0,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                           (rule "eqSymm" (formula "105") (term "1,0,1"))
                           (rule "eqSymm" (formula "105") (term "0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")) (ifInst ""  (formula "59")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                           (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "104") (term "0"))
                           (rule "eqSymm" (formula "104") (term "1,0,1"))
                           (rule "applyEq" (formula "104") (term "0,1,1,1,0,0,1") (ifseqformula "61"))
                           (rule "applyEq" (formula "104") (term "0,0,1,0,1") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "104"))
                           (rule "applyEq" (formula "104") (term "0,0") (ifseqformula "61"))
                            (builtin "One Step Simplification" (formula "104"))
                           (rule "closeTrue" (formula "104"))
                        )
                     )
                     (branch
                        (rule "eqSymm" (formula "6"))
                        (rule "eqSymm" (formula "3"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "7"))
                        (rule "eqSymm" (formula "5"))
                        (rule "eqSymm" (formula "59"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "130"))
                        (rule "eqSymm" (formula "115"))
                        (rule "eqSymm" (formula "4"))
                        (rule "eqSymm" (formula "60"))
                        (rule "replace_known_left" (formula "98") (term "0,0") (ifseqformula "77"))
                         (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                        (rule "andLeft" (formula "98"))
                        (rule "replace_known_right" (formula "104") (term "0,1,1,1,1,1,0,0") (ifseqformula "122"))
                         (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "123")) (ifInst ""  (formula "117")) (ifInst ""  (formula "121")))
                        (rule "polySimp_homoEq" (formula "40") (term "1"))
                        (rule "polySimp_homoEq" (formula "93") (term "1"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                        (rule "castedGetAny" (formula "6") (term "0,2,0"))
                        (rule "eqSymm" (formula "6"))
                        (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
                        (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                        (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                        (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                        (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                        (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                        (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                        (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                        (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "107"))
                        (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "107") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                        (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                        (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                        (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                        (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
                        (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "50"))
                        (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "112") (term "0,1"))
                        (rule "polySimp_addComm1" (formula "50") (term "0"))
                        (rule "castedGetAny" (formula "6") (term "0,2,0"))
                        (rule "eqSymm" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
                        (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "29"))
                        (rule "applyEq" (formula "39") (term "0,0,1,0,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "34") (term "0,1,0,1") (ifseqformula "27"))
                        (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "59"))
                        (rule "applyEq" (formula "118") (term "0,0") (ifseqformula "98"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "81"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "29"))
                        (rule "applyEq" (formula "95") (term "0,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                        (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "80"))
                        (rule "applyEq" (formula "103") (term "0,0,0,1,0,1") (ifseqformula "97"))
                         (builtin "One Step Simplification" (formula "103"))
                        (rule "applyEq" (formula "109") (term "0,1,0,1") (ifseqformula "97"))
                        (rule "applyEq" (formula "34") (term "4") (ifseqformula "32"))
                        (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "80"))
                        (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "29"))
                        (rule "applyEq" (formula "104") (term "5") (ifseqformula "59"))
                        (rule "applyEq" (formula "104") (term "0,2") (ifseqformula "97"))
                        (rule "applyEqRigid" (formula "129") (term "0,0") (ifseqformula "60"))
                        (rule "eqSymm" (formula "129"))
                        (rule "applyEq" (formula "92") (term "0,1,0,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "92") (term "1,0,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "54") (term "0,1,0,1") (ifseqformula "27"))
                        (rule "applyEq" (formula "106") (term "0,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "99") (term "4") (ifseqformula "96"))
                        (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "59"))
                        (rule "applyEq" (formula "104") (term "6") (ifseqformula "102"))
                        (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "78") (term "0,0") (ifseqformula "80"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "true_left" (formula "78"))
                        (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "83") (term "0,0") (ifseqformula "62"))
                        (rule "replace_known_left" (formula "83") (term "0") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "83"))
                        (rule "replace_known_left" (formula "88") (term "0") (ifseqformula "83"))
                         (builtin "One Step Simplification" (formula "88"))
                        (rule "replace_known_left" (formula "89") (term "0") (ifseqformula "83"))
                         (builtin "One Step Simplification" (formula "89"))
                        (rule "notLeft" (formula "89"))
                        (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "113"))
                         (builtin "One Step Simplification" (formula "61"))
                        (rule "replace_known_right" (formula "87") (term "0,0") (ifseqformula "113"))
                         (builtin "One Step Simplification" (formula "87"))
                        (rule "replace_known_right" (formula "90") (term "1") (ifseqformula "113"))
                         (builtin "One Step Simplification" (formula "90"))
                        (rule "notLeft" (formula "90"))
                        (rule "replace_known_right" (formula "90") (term "0") (ifseqformula "112"))
                         (builtin "One Step Simplification" (formula "90"))
                        (rule "true_left" (formula "90"))
                        (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "5"))
                        (rule "eqSymm" (formula "72"))
                        (rule "applyEq" (formula "37") (term "0,0,1,0,0") (ifseqformula "29"))
                        (rule "applyEq" (formula "62") (term "1") (ifseqformula "79"))
                        (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "true_left" (formula "28"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "78"))
                        (rule "eqSymm" (formula "7"))
                        (rule "applyEq" (formula "91") (term "0,1,0") (ifseqformula "27"))
                        (rule "applyEq" (formula "100") (term "0,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "37") (term "0,1,0,0") (ifseqformula "26"))
                        (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "57"))
                        (rule "applyEq" (formula "42") (term "4") (ifseqformula "41"))
                        (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "10"))
                        (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "replace_known_left" (formula "37") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "notLeft" (formula "36"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "108"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "108"))
                         (builtin "One Step Simplification" (formula "34"))
                        (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "108"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "notLeft" (formula "37"))
                        (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "107"))
                         (builtin "One Step Simplification" (formula "37"))
                        (rule "true_left" (formula "37"))
                        (rule "applyEq" (formula "118") (term "0") (ifseqformula "54"))
                        (rule "applyEq" (formula "10") (term "1") (ifseqformula "28"))
                        (rule "applyEq" (formula "101") (term "0,0,1,0,1") (ifseqformula "73"))
                        (rule "applyEq" (formula "99") (term "0,1,0,0") (ifseqformula "87"))
                        (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "42") (term "6") (ifseqformula "41"))
                        (rule "applyEq" (formula "71") (term "0,0,1,0,0,0,0,0") (ifseqformula "72"))
                        (rule "applyEq" (formula "68") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "100") (term "0,0") (ifseqformula "104"))
                        (rule "applyEq" (formula "68") (term "0,0,0,1,0") (ifseqformula "5"))
                        (rule "applyEq" (formula "75") (term "0,0") (ifseqformula "71"))
                        (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "true_left" (formula "26"))
                        (rule "applyEq" (formula "49") (term "4") (ifseqformula "47"))
                        (rule "applyEq" (formula "66") (term "0,0,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "63") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "74") (term "4") (ifseqformula "72"))
                        (rule "applyEq" (formula "92") (term "0,1") (ifseqformula "82"))
                        (rule "applyEq" (formula "49") (term "3") (ifseqformula "52"))
                        (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "89") (term "0") (ifseqformula "53"))
                        (rule "applyEq" (formula "97") (term "4") (ifseqformula "95"))
                        (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
                        (rule "applyEq" (formula "67") (term "0,0,1,0") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "67"))
                        (rule "true_left" (formula "67"))
                        (rule "applyEq" (formula "95") (term "3") (ifseqformula "98"))
                        (rule "applyEq" (formula "82") (term "3") (ifseqformula "80"))
                        (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
                        (rule "applyEq" (formula "77") (term "1,0,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "61") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "61") (term "0,0,0,1,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "70") (term "3") (ifseqformula "55"))
                        (rule "applyEq" (formula "30") (term "3") (ifseqformula "10"))
                        (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "64") (term "1") (ifseqformula "2"))
                        (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "4"))
                        (rule "eqSymm" (formula "61"))
                        (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "112") (term "0,0") (ifseqformula "8"))
                        (rule "eqSymm" (formula "112"))
                        (rule "applyEq" (formula "98") (term "0") (ifseqformula "76"))
                        (rule "applyEq" (formula "73") (term "0,0,1,0,0") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "73") (term "0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "applyEq" (formula "71") (term "1,0,1") (ifseqformula "76"))
                        (rule "applyEq" (formula "72") (term "1") (ifseqformula "76"))
                        (rule "applyEq" (formula "71") (term "1,0,0") (ifseqformula "76"))
                        (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "89") (term "0,0,1,0,1") (ifseqformula "2"))
                        (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "24"))
                        (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "75"))
                        (rule "applyEq" (formula "75") (term "0,0,0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "75"))
                        (rule "applyEq" (formula "80") (term "0,1,1,0,0,0,0") (ifseqformula "74"))
                        (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "95") (term "1") (ifseqformula "3"))
                        (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "61"))
                        (rule "applyEq" (formula "65") (term "0,0,1,0") (ifseqformula "61"))
                        (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "61"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                        (rule "polySimp_sepPosMonomial" (formula "33"))
                        (rule "polySimp_mulComm0" (formula "33") (term "1"))
                        (rule "polySimp_rightDist" (formula "33") (term "1"))
                        (rule "mul_literals" (formula "33") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "33") (term "1,1"))
                        (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
                        (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
                        (rule "polySimp_addComm1" (formula "69") (term "0"))
                        (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                        (rule "add_literals" (formula "69") (term "0,0,0"))
                        (rule "add_zero_left" (formula "69") (term "0,0"))
                        (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "33"))
                        (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                        (rule "add_literals" (formula "28") (term "0,0,0"))
                        (rule "add_zero_left" (formula "28") (term "0,0"))
                        (rule "applyEq" (formula "91") (term "1") (ifseqformula "33"))
                        (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                        (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                        (rule "polySimp_elimOne" (formula "41") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "81"))
                        (rule "polySimp_mulLiterals" (formula "81") (term "0"))
                        (rule "polySimp_elimOne" (formula "81") (term "0"))
                        (rule "polySimp_sepNegMonomial" (formula "69"))
                        (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                        (rule "polySimp_elimOne" (formula "69") (term "0"))
                        (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "69"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                        (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                        (rule "polySimp_elimOne" (formula "28") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "86") (term "0,1"))
                        (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "28"))
                        (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
                        (rule "mul_literals" (formula "91") (term "0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
                        (rule "add_literals" (formula "91") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "91") (term "1,0,0"))
                        (rule "add_zero_right" (formula "91") (term "0,0"))
                        (rule "leq_literals" (formula "91") (term "0"))
                         (builtin "One Step Simplification" (formula "91"))
                        (rule "false_right" (formula "91"))
                        (rule "pullOutSelect" (formula "78") (term "0,1,1") (inst "selectSK=java_util_Collection_seq_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "76"))
                         (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "78") (term "0,1,0,0") (ifseqformula "67"))
                        (rule "eqSymm" (formula "79") (term "1,1"))
                        (rule "replace_known_left" (formula "78") (term "0,0,1,0,0") (ifseqformula "57"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "elementOfSingleton" (formula "78") (term "0,0"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "applyEqReverse" (formula "79") (term "1,1,1") (ifseqformula "78"))
                        (rule "hideAuxiliaryEq" (formula "78"))
                        (rule "pullOutSelect" (formula "78") (term "1,1,0,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                        (rule "applyEq" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
                        (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                        (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")) (ifInst ""  (formula "12")))
                        (rule "elementOfSingleton" (formula "78") (term "0,0"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                        (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
                        (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                        (rule "hideAuxiliaryEq" (formula "78"))
                        (rule "pullOutSelect" (formula "78") (term "1,0,0,0,1") (inst "selectSK=java_util_Collection_seq_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "98")) (ifInst ""  (formula "13")))
                        (rule "elementOfSingleton" (formula "78") (term "0,0"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
                        (rule "hideAuxiliaryEq" (formula "78"))
                        (rule "pullOutSelect" (formula "78") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
                         (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")) (ifInst ""  (formula "57")))
                        (rule "eqSymm" (formula "79") (term "0,0,0,1"))
                        (rule "elementOfSingleton" (formula "78") (term "0,0"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
                        (rule "hideAuxiliaryEq" (formula "78"))
                        (rule "eqSymm" (formula "78") (term "0,0,0,1"))
                        (rule "replace_known_left" (formula "78") (term "0,0,0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "pullOutSelect" (formula "105") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "77"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "105")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                        (rule "eqSymm" (formula "106"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEq" (formula "74") (term "0") (ifseqformula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "105")) (ifInst ""  (formula "59")))
                        (rule "eqSymm" (formula "74"))
                        (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "104")) (ifInst ""  (formula "15")))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "106") (term "1") (ifseqformula "1"))
                        (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "elementOfSingleton" (formula "73") (term "0,0"))
                         (builtin "One Step Simplification" (formula "73"))
                        (rule "eqSymm" (formula "73"))
                        (rule "applyEq" (formula "104") (term "1") (ifseqformula "69"))
                        (rule "pullOutSelect" (formula "77") (term "0,1,1,1,0,0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                        (rule "applyEq" (formula "78") (term "0,0,0,1") (ifseqformula "77"))
                        (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "77"))
                        (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "67"))
                         (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "96")) (ifInst ""  (formula "56")))
                        (rule "eqSymm" (formula "78") (term "0,0,1"))
                        (rule "elementOfSingleton" (formula "77") (term "0,0"))
                         (builtin "One Step Simplification" (formula "77"))
                        (rule "applyEqReverse" (formula "78") (term "1,0,0,1") (ifseqformula "77"))
                        (rule "applyEqReverse" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "77"))
                        (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "77"))
                        (rule "hideAuxiliaryEq" (formula "77"))
                        (rule "eqSymm" (formula "77") (term "0,0,1"))
                        (rule "replace_known_left" (formula "77") (term "0,0,1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "77"))
                        (rule "applyEq" (formula "77") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                        (rule "applyEq" (formula "77") (term "0,0,1,0,0,0,0") (ifseqformula "4"))
                        (rule "pullOutSelect" (formula "104") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
                        (rule "replaceKnownSelect_taclet10000110_22" (formula "1") (term "2,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet10000110_23" (formula "1") (term "2,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                        (rule "eqSymm" (formula "105"))
                        (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "applyEqReverse" (formula "105") (term "1") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "eqSymm" (formula "104"))
                        (rule "close" (formula "104") (ifseqformula "69"))
                     )
                  )
                  (branch
                     (rule "eqSymm" (formula "7"))
                     (rule "eqSymm" (formula "59"))
                     (rule "eqSymm" (formula "3"))
                     (rule "eqSymm" (formula "2"))
                     (rule "eqSymm" (formula "60"))
                     (rule "eqSymm" (formula "115"))
                     (rule "eqSymm" (formula "130"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "4"))
                     (rule "eqSymm" (formula "6"))
                     (rule "eqSymm" (formula "5"))
                     (rule "replace_known_left" (formula "98") (term "1,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                     (rule "andLeft" (formula "98"))
                     (rule "replace_known_right" (formula "104") (term "0,0,1,1,1,1,1,0") (ifseqformula "117"))
                      (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "122")) (ifInst ""  (formula "123")) (ifInst ""  (formula "121")))
                     (rule "polySimp_homoEq" (formula "40") (term "1"))
                     (rule "polySimp_homoEq" (formula "93") (term "1"))
                     (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                     (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                     (rule "castedGetAny" (formula "6") (term "0,2,0"))
                     (rule "eqSymm" (formula "6"))
                     (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
                     (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                     (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                     (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "107"))
                     (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "107") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                     (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                     (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                     (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                     (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "50"))
                     (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "50") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
                     (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
                     (rule "polySimp_addComm1" (formula "112") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                     (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                     (rule "castedGetAny" (formula "6") (term "0,2,0"))
                     (rule "eqSymm" (formula "6"))
                     (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
                     (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "76") (term "0,0,0,1,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "90") (term "1,0,1") (ifseqformula "98"))
                     (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "81"))
                     (rule "applyEq" (formula "93") (term "0,1,0,0") (ifseqformula "79"))
                     (rule "applyEq" (formula "35") (term "3") (ifseqformula "11"))
                     (rule "applyEq" (formula "90") (term "0,0,0") (ifseqformula "98"))
                     (rule "applyEq" (formula "35") (term "4") (ifseqformula "32"))
                     (rule "applyEq" (formula "56") (term "3") (ifseqformula "59"))
                     (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "60"))
                     (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "29"))
                     (rule "applyEq" (formula "82") (term "0") (ifseqformula "7"))
                     (rule "applyEq" (formula "91") (term "0,0,1,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "111") (term "0,0,1,0,1") (ifseqformula "81"))
                     (rule "applyEq" (formula "34") (term "0,1,0,1") (ifseqformula "27"))
                     (rule "applyEq" (formula "40") (term "0,0,1,0,0") (ifseqformula "29"))
                     (rule "applyEq" (formula "106") (term "0,0,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "75") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                     (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "applyEq" (formula "84") (term "3") (ifseqformula "61"))
                     (rule "applyEq" (formula "84") (term "4") (ifseqformula "81"))
                     (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "28"))
                     (rule "applyEq" (formula "68") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "88") (term "0,0,1,0,0") (ifseqformula "79"))
                     (rule "applyEq" (formula "91") (term "0,1") (ifseqformula "95"))
                     (rule "applyEq" (formula "82") (term "0") (ifseqformula "77"))
                     (rule "applyEq" (formula "77") (term "0,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "77"))
                     (rule "applyEq" (formula "114") (term "0,0") (ifseqformula "94"))
                     (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "58"))
                     (rule "applyEq" (formula "101") (term "6") (ifseqformula "99"))
                     (rule "applyEq" (formula "88") (term "0,0,1") (ifseqformula "94"))
                     (rule "applyEq" (formula "121") (term "0") (ifseqformula "58"))
                     (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "57"))
                     (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "82") (term "0,0,1,0,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "true_left" (formula "27"))
                     (rule "applyEq" (formula "67") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "77") (term "0,0,1,0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "77") (term "1,0"))
                     (rule "applyEq" (formula "105") (term "0,1,0,0") (ifseqformula "93"))
                     (rule "applyEq" (formula "52") (term "0,0,1,0,1") (ifseqformula "27"))
                     (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "78"))
                     (rule "applyEq" (formula "36") (term "0,0,1,0,0") (ifseqformula "27"))
                     (rule "applyEqRigid" (formula "125") (term "0,1") (ifseqformula "9"))
                     (rule "applyEq" (formula "99") (term "0,0,0,1,0,1") (ifseqformula "93"))
                      (builtin "One Step Simplification" (formula "99"))
                     (rule "applyEq" (formula "59") (term "0,0,1") (ifseqformula "93"))
                     (rule "applyEq" (formula "71") (term "0,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "90") (term "0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "108") (term "3") (ifseqformula "111"))
                     (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "93") (term "0,1,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "93") (term "0,0,0") (ifseqformula "77"))
                     (rule "applyEq" (formula "7") (term "1") (ifseqformula "28"))
                     (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "93") (term "4") (ifseqformula "90"))
                     (rule "applyEq" (formula "79") (term "0,0") (ifseqformula "60"))
                     (rule "replace_known_left" (formula "79") (term "0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "replace_known_left" (formula "85") (term "0") (ifseqformula "79"))
                      (builtin "One Step Simplification" (formula "85"))
                     (rule "notLeft" (formula "85"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "109"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_right" (formula "36") (term "0,1") (ifseqformula "109"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "true_left" (formula "58"))
                     (rule "replace_known_right" (formula "81") (term "0,0") (ifseqformula "107"))
                      (builtin "One Step Simplification" (formula "81"))
                     (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "107"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "107"))
                      (builtin "One Step Simplification" (formula "84"))
                     (rule "notLeft" (formula "84"))
                     (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "107"))
                      (builtin "One Step Simplification" (formula "37"))
                     (rule "notLeft" (formula "37"))
                     (rule "applyEq" (formula "101") (term "4") (ifseqformula "99"))
                     (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "82") (term "0,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "11"))
                     (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "35"))
                     (rule "applyEq" (formula "80") (term "0,0,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "43") (term "6") (ifseqformula "42"))
                     (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "5"))
                     (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                     (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "26"))
                     (rule "applyEqRigid" (formula "118") (term "0,0") (ifseqformula "55"))
                     (rule "applyEq" (formula "70") (term "0") (ifseqformula "2"))
                     (rule "eqSymm" (formula "70"))
                     (rule "applyEq" (formula "2") (term "1") (ifseqformula "26"))
                     (rule "applyEq" (formula "95") (term "0,1,0,1") (ifseqformula "83"))
                     (rule "applyEq" (formula "36") (term "0,0,0") (ifseqformula "26"))
                     (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "102"))
                      (builtin "One Step Simplification" (formula "36"))
                     (rule "true_left" (formula "36"))
                     (rule "applyEq" (formula "78") (term "1,0,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "89") (term "0") (ifseqformula "53"))
                     (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
                     (rule "applyEq" (formula "77") (term "1,1") (ifseqformula "82"))
                     (rule "applyEq" (formula "11") (term "1") (ifseqformula "27"))
                     (rule "applyEq" (formula "84") (term "3") (ifseqformula "82"))
                     (rule "applyEq" (formula "89") (term "5") (ifseqformula "53"))
                     (rule "applyEq" (formula "89") (term "0,2") (ifseqformula "82"))
                     (rule "applyEq" (formula "96") (term "0,0") (ifseqformula "100"))
                     (rule "applyEq" (formula "77") (term "1,0,1") (ifseqformula "3"))
                     (rule "replace_known_left" (formula "77") (term "1") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "77"))
                     (rule "true_left" (formula "77"))
                     (rule "applyEq" (formula "91") (term "0,1") (ifseqformula "81"))
                     (rule "applyEq" (formula "49") (term "4") (ifseqformula "47"))
                     (rule "applyEq" (formula "64") (term "0,0,0,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "77") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "23") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "21"))
                     (rule "applyEq" (formula "76") (term "1,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "62") (term "0,0,1,0,0,1,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "61") (term "0") (ifseqformula "66"))
                     (rule "applyEq" (formula "63") (term "0,0,0,1,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "55") (term "1") (ifseqformula "7"))
                     (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "66"))
                     (rule "applyEq" (formula "31") (term "3") (ifseqformula "27"))
                     (rule "applyEq" (formula "76") (term "0,0,1,0,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "77") (term "0,0,0") (ifseqformula "26"))
                     (rule "replace_known_right" (formula "77") (term "0") (ifseqformula "99"))
                      (builtin "One Step Simplification" (formula "77"))
                     (rule "true_left" (formula "77"))
                     (rule "applyEq" (formula "93") (term "0,0,1,0,1") (ifseqformula "68"))
                     (rule "applyEq" (formula "71") (term "0,0,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "80") (term "0,0,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "75") (term "1,0,0") (ifseqformula "79"))
                     (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "68"))
                     (rule "applyEq" (formula "67") (term "0,1,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "68") (term "1") (ifseqformula "26"))
                     (rule "applyEq" (formula "72") (term "3") (ifseqformula "7"))
                     (rule "applyEq" (formula "85") (term "0,1,1,0,0,0,0") (ifseqformula "79"))
                     (rule "applyEq" (formula "66") (term "0,1") (ifseqformula "26"))
                     (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "71") (term "1,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "98") (term "1") (ifseqformula "3"))
                     (rule "applyEq" (formula "62") (term "0,0,1,0,0,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "61") (term "0,0,0,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "26"))
                     (rule "applyEq" (formula "64") (term "0,0,1,0") (ifseqformula "65"))
                      (builtin "One Step Simplification" (formula "64"))
                     (rule "true_left" (formula "64"))
                     (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "64"))
                      (builtin "One Step Simplification" (formula "63"))
                     (rule "true_left" (formula "63"))
                     (rule "applyEq" (formula "70") (term "0,0,1,0,0") (ifseqformula "26"))
                     (rule "replace_known_left" (formula "70") (term "0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "70"))
                     (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "applyEq" (formula "86") (term "0,0,1,0,1") (ifseqformula "25"))
                     (rule "applyEq" (formula "73") (term "0,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_sepPosMonomial" (formula "34"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1"))
                     (rule "polySimp_rightDist" (formula "34") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1"))
                     (rule "mul_literals" (formula "34") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1"))
                     (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "34"))
                     (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "34"))
                     (rule "polySimp_addComm1" (formula "69") (term "0"))
                     (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                     (rule "add_literals" (formula "69") (term "0,0,0"))
                     (rule "add_zero_left" (formula "69") (term "0,0"))
                     (rule "applyEq" (formula "29") (term "1,0,0") (ifseqformula "34"))
                     (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
                     (rule "add_literals" (formula "29") (term "0,0,0"))
                     (rule "add_zero_left" (formula "29") (term "0,0"))
                     (rule "applyEq" (formula "3") (term "1") (ifseqformula "34"))
                     (rule "applyEq" (formula "91") (term "1") (ifseqformula "34"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "42"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "0"))
                     (rule "polySimp_elimOne" (formula "42") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "81"))
                     (rule "polySimp_mulLiterals" (formula "81") (term "0"))
                     (rule "polySimp_elimOne" (formula "81") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "47") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "47") (term "0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
                     (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
                     (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
                     (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
                     (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
                     (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
                     (rule "polySimp_sepNegMonomial" (formula "69"))
                     (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                     (rule "polySimp_elimOne" (formula "69") (term "0"))
                     (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "69"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "22") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "29"))
                     (rule "polySimp_mulLiterals" (formula "29") (term "0"))
                     (rule "polySimp_elimOne" (formula "29") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "86") (term "0,1"))
                     (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "29"))
                     (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
                     (rule "mul_literals" (formula "91") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
                     (rule "add_literals" (formula "91") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "91") (term "1,0,0"))
                     (rule "add_zero_right" (formula "91") (term "0,0"))
                     (rule "leq_literals" (formula "91") (term "0"))
                      (builtin "One Step Simplification" (formula "91"))
                     (rule "false_right" (formula "91"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "105") (inst "iv=iv"))
                     (rule "inEqSimp_ltToLeq" (formula "105") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "105") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "105") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "105") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "105") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "105") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "105") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "105") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "105") (term "1,1,1,0,0,1"))
                     (rule "pullOutSelect" (formula "78") (term "0,0,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                     (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                     (rule "applyEq" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                     (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                     (rule "elementOfSingleton" (formula "78") (term "0,0"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
                     (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
                     (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
                     (rule "hideAuxiliaryEq" (formula "78"))
                     (rule "pullOutSelect" (formula "78") (term "1,0,0,0,1") (inst "selectSK=java_util_Collection_seq_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "98")) (ifInst ""  (formula "14")))
                     (rule "elementOfSingleton" (formula "78") (term "0,0"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
                     (rule "hideAuxiliaryEq" (formula "78"))
                     (rule "pullOutSelect" (formula "78") (term "1,1,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")) (ifInst ""  (formula "13")))
                     (rule "elementOfSingleton" (formula "78") (term "0,0"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "applyEqReverse" (formula "79") (term "1,1,0,1") (ifseqformula "78"))
                     (rule "hideAuxiliaryEq" (formula "78"))
                     (rule "pullOutSelect" (formula "78") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
                      (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")) (ifInst ""  (formula "58")))
                     (rule "eqSymm" (formula "79") (term "0,0,0,1"))
                     (rule "elementOfSingleton" (formula "78") (term "0,0"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
                     (rule "hideAuxiliaryEq" (formula "78"))
                     (rule "eqSymm" (formula "78") (term "0,0,0,1"))
                     (rule "replace_known_left" (formula "78") (term "0,0,0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "pullOutSelect" (formula "73") (term "1") (inst "selectSK=java_util_Iterator_index_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "67"))
                      (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "105")) (ifInst ""  (formula "59")))
                     (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "31"))
                      (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "15")))
                     (rule "elementOfSingleton" (formula "74") (term "0,0"))
                      (builtin "One Step Simplification" (formula "74"))
                     (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "74"))
                     (rule "hideAuxiliaryEq" (formula "74"))
                     (rule "elementOfSingleton" (formula "73") (term "0,0"))
                      (builtin "One Step Simplification" (formula "73"))
                     (rule "eqSymm" (formula "73"))
                     (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                     (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                     (rule "eqSymm" (formula "105") (term "0"))
                     (rule "eqSymm" (formula "105") (term "1,0,1"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "58"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "78") (term "0,0,0,1") (ifseqformula "1"))
                     (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")) (ifInst ""  (formula "58")))
                     (rule "eqSymm" (formula "78") (term "0,0,1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "78") (term "1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                     (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "eqSymm" (formula "77") (term "0,0,1"))
                     (rule "replace_known_left" (formula "77") (term "0,0,1") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "77"))
                     (rule "applyEq" (formula "104") (term "0,1,1,0,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "104") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
                     (rule "applyEq" (formula "104") (term "0,1,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "77") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                     (rule "applyEq" (formula "77") (term "0,0,1,0,0,0,0") (ifseqformula "4"))
                     (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_2"))
                     (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")))
                     (rule "replaceKnownSelect_taclet1000110_12" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet1000110_13" (formula "1") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "32"))
                     (rule "eqSymm" (formula "105") (term "0"))
                     (rule "eqSymm" (formula "105") (term "1,0,1"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "105"))
                     (rule "applyEqReverse" (formula "105") (term "0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "105"))
                     (rule "closeTrue" (formula "105"))
                  )
               )
               (branch
                  (rule "eqSymm" (formula "7"))
                  (rule "eqSymm" (formula "59"))
                  (rule "eqSymm" (formula "3"))
                  (rule "eqSymm" (formula "2"))
                  (rule "eqSymm" (formula "60"))
                  (rule "eqSymm" (formula "115"))
                  (rule "eqSymm" (formula "130"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "eqSymm" (formula "6"))
                  (rule "eqSymm" (formula "5"))
                  (rule "replace_known_left" (formula "98") (term "1,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "andLeft" (formula "98"))
                  (rule "replace_known_right" (formula "104") (term "0,0,1,1,1,1,1,0") (ifseqformula "117"))
                   (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "122")) (ifInst ""  (formula "123")) (ifInst ""  (formula "121")))
                  (rule "polySimp_homoEq" (formula "40") (term "1"))
                  (rule "polySimp_homoEq" (formula "93") (term "1"))
                  (rule "polySimp_addComm1" (formula "40") (term "0,1"))
                  (rule "polySimp_addComm1" (formula "93") (term "0,1"))
                  (rule "castedGetAny" (formula "6") (term "0,2,0"))
                  (rule "eqSymm" (formula "6"))
                  (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
                  (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
                  (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "34") (term "0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
                  (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "86") (term "0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
                  (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "38") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
                  (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "91") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "107"))
                  (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "107") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
                  (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "93") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
                  (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "40") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
                  (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "55") (term "0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "50"))
                  (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "50") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
                  (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
                  (rule "polySimp_addComm1" (formula "112") (term "0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
                  (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "92") (term "0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,2,0"))
                  (rule "eqSymm" (formula "6"))
                  (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
                  (rule "applyEq" (formula "40") (term "0,1,0,0") (ifseqformula "27"))
                  (rule "applyEq" (formula "38") (term "0,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEq" (formula "131") (term "0,0") (ifseqformula "61"))
                  (rule "eqSymm" (formula "131"))
                  (rule "applyEq" (formula "112") (term "0,0,1,0,1") (ifseqformula "2"))
                  (rule "applyEq" (formula "99") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "99"))
                  (rule "applyEq" (formula "93") (term "0,0,1,0,0") (ifseqformula "81"))
                  (rule "applyEq" (formula "80") (term "0,0,1,0") (ifseqformula "2"))
                  (rule "eqSymm" (formula "80") (term "1,0"))
                  (rule "applyEq" (formula "95") (term "0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "39") (term "0,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEq" (formula "105") (term "5") (ifseqformula "60"))
                  (rule "applyEq" (formula "108") (term "0,1") (ifseqformula "98"))
                  (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "79"))
                  (rule "applyEq" (formula "104") (term "0,1,1,0,0,0,0") (ifseqformula "98"))
                  (rule "applyEq" (formula "35") (term "4") (ifseqformula "32"))
                  (rule "applyEq" (formula "35") (term "3") (ifseqformula "11"))
                  (rule "applyEq" (formula "70") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "79") (term "0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "79"))
                  (rule "true_left" (formula "79"))
                  (rule "applyEq" (formula "89") (term "0,0,0") (ifseqformula "97"))
                  (rule "applyEq" (formula "76") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "5"))
                  (rule "eqSymm" (formula "74"))
                  (rule "applyEq" (formula "90") (term "1,0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "86") (term "4") (ifseqformula "83"))
                  (rule "applyEq" (formula "106") (term "0,0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "84") (term "0,0") (ifseqformula "80"))
                  (rule "applyEq" (formula "85") (term "3") (ifseqformula "63"))
                  (rule "applyEq" (formula "48") (term "6") (ifseqformula "47"))
                  (rule "applyEq" (formula "98") (term "3") (ifseqformula "96"))
                  (rule "applyEq" (formula "20") (term "0") (ifseqformula "22"))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "28"))
                  (rule "applyEq" (formula "107") (term "0,1,0,0") (ifseqformula "95"))
                  (rule "applyEq" (formula "62") (term "1") (ifseqformula "80"))
                  (rule "replace_known_left" (formula "83") (term "0") (ifseqformula "62"))
                   (builtin "One Step Simplification" (formula "83"))
                  (rule "replace_known_left" (formula "89") (term "0") (ifseqformula "83"))
                   (builtin "One Step Simplification" (formula "89"))
                  (rule "notLeft" (formula "89"))
                  (rule "replace_known_left" (formula "88") (term "0") (ifseqformula "83"))
                   (builtin "One Step Simplification" (formula "88"))
                  (rule "replace_known_right" (formula "61") (term "0") (ifseqformula "113"))
                   (builtin "One Step Simplification" (formula "61"))
                  (rule "replace_known_right" (formula "90") (term "1") (ifseqformula "113"))
                   (builtin "One Step Simplification" (formula "90"))
                  (rule "notLeft" (formula "90"))
                  (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "79"))
                  (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0,0") (ifseqformula "79"))
                  (rule "applyEq" (formula "107") (term "0,0") (ifseqformula "111"))
                  (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "87") (term "1,0,1") (ifseqformula "93"))
                  (rule "applyEq" (formula "100") (term "6") (ifseqformula "98"))
                  (rule "applyEq" (formula "27") (term "0,0,1,0,0,0,0,0") (ifseqformula "28"))
                  (rule "applyEq" (formula "108") (term "3") (ifseqformula "111"))
                  (rule "applyEq" (formula "74") (term "0,0,0,1,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "123") (term "0") (ifseqformula "59"))
                  (rule "applyEq" (formula "75") (term "0,0,0,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "94") (term "4") (ifseqformula "91"))
                  (rule "applyEq" (formula "89") (term "0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "59"))
                  (rule "applyEq" (formula "32") (term "0") (ifseqformula "26"))
                  (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "11"))
                  (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "applyEq" (formula "53") (term "0,1,0,1") (ifseqformula "26"))
                  (rule "applyEq" (formula "36") (term "0,0,1") (ifseqformula "28"))
                  (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "57"))
                  (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "28"))
                  (rule "applyEq" (formula "98") (term "0") (ifseqformula "58"))
                  (rule "applyEq" (formula "43") (term "4") (ifseqformula "42"))
                  (rule "applyEq" (formula "98") (term "0,2") (ifseqformula "91"))
                  (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "106") (term "4") (ifseqformula "104"))
                  (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "28"))
                  (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "28"))
                  (rule "applyEq" (formula "54") (term "3") (ifseqformula "57"))
                  (rule "applyEq" (formula "54") (term "4") (ifseqformula "52"))
                  (rule "applyEq" (formula "83") (term "1,0,1,0") (ifseqformula "89"))
                  (rule "applyEq" (formula "101") (term "0,1,0,1") (ifseqformula "89"))
                  (rule "applyEq" (formula "7") (term "0") (ifseqformula "76"))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "74"))
                  (rule "applyEq" (formula "110") (term "0,0") (ifseqformula "88"))
                  (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "74"))
                  (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "57"))
                  (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "applyEq" (formula "97") (term "0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "10") (term "1") (ifseqformula "27"))
                  (rule "applyEq" (formula "83") (term "1,0,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "93") (term "0,0,0,1,0,1") (ifseqformula "87"))
                   (builtin "One Step Simplification" (formula "93"))
                  (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "applyEq" (formula "82") (term "1,0,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "83") (term "1,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
                  (rule "applyEq" (formula "66") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "65") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "65") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "65") (term "0,0,0,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "69") (term "1") (ifseqformula "2"))
                  (rule "applyEqRigid" (formula "117") (term "0,0") (ifseqformula "8"))
                  (rule "eqSymm" (formula "117"))
                  (rule "applyEq" (formula "97") (term "0,0,1,0,1") (ifseqformula "25"))
                  (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "103") (term "0") (ifseqformula "83"))
                  (rule "replace_known_right" (formula "34") (term "0,1") (ifseqformula "103"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "true_left" (formula "34"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "102"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "102"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "replace_known_right" (formula "76") (term "0,0") (ifseqformula "102"))
                   (builtin "One Step Simplification" (formula "76"))
                  (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "102"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "notLeft" (formula "35"))
                  (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "100"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "true_left" (formula "35"))
                  (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "80"))
                  (rule "applyEq" (formula "76") (term "0,0,0") (ifseqformula "25"))
                  (rule "replace_known_right" (formula "76") (term "0") (ifseqformula "98"))
                   (builtin "One Step Simplification" (formula "76"))
                  (rule "true_left" (formula "76"))
                  (rule "applyEq" (formula "64") (term "0,1,1,0") (ifseqformula "25"))
                  (rule "applyEq" (formula "98") (term "0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "60") (term "0") (ifseqformula "20"))
                  (rule "applyEq" (formula "73") (term "1") (ifseqformula "77"))
                  (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "4"))
                  (rule "eqSymm" (formula "60"))
                  (rule "applyEq" (formula "62") (term "0,0,1,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "62"))
                  (rule "true_left" (formula "62"))
                  (rule "applyEq" (formula "67") (term "3") (ifseqformula "63"))
                  (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "applyEq" (formula "29") (term "3") (ifseqformula "25"))
                  (rule "applyEq" (formula "71") (term "0,0,1,0,0") (ifseqformula "2"))
                  (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "24"))
                  (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "replace_known_left" (formula "71") (term "0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "71"))
                  (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "applyEq" (formula "65") (term "1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "94") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "61"))
                  (rule "applyEq" (formula "65") (term "0,0,1,0") (ifseqformula "61"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "41"))
                  (rule "polySimp_mulLiterals" (formula "41") (term "0"))
                  (rule "polySimp_elimOne" (formula "41") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "69"))
                  (rule "polySimp_mulComm0" (formula "69") (term "1"))
                  (rule "polySimp_rightDist" (formula "69") (term "1"))
                  (rule "mul_literals" (formula "69") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "69") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "69") (term "1,1"))
                  (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "69"))
                  (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "69"))
                  (rule "polySimp_addAssoc" (formula "33") (term "0"))
                  (rule "polySimp_addComm1" (formula "33") (term "0,0"))
                  (rule "add_literals" (formula "33") (term "0,0,0"))
                  (rule "add_zero_left" (formula "33") (term "0,0"))
                  (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "69"))
                  (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
                  (rule "add_literals" (formula "28") (term "0,0,0"))
                  (rule "add_zero_left" (formula "28") (term "0,0"))
                  (rule "applyEq" (formula "91") (term "1") (ifseqformula "69"))
                  (rule "applyEq" (formula "3") (term "1") (ifseqformula "69"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "81"))
                  (rule "polySimp_mulLiterals" (formula "81") (term "0"))
                  (rule "polySimp_elimOne" (formula "81") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "46") (term "0,1"))
                  (rule "polySimp_sepPosMonomial" (formula "33"))
                  (rule "polySimp_mulLiterals" (formula "33") (term "1"))
                  (rule "polySimp_elimOne" (formula "33") (term "1"))
                  (rule "applyEq" (formula "32") (term "1,1,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "33"))
                  (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "33"))
                  (rule "applyEq" (formula "91") (term "1,1") (ifseqformula "33"))
                  (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "69") (term "1,1") (ifseqformula "33"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "86") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "28"))
                  (rule "polySimp_mulLiterals" (formula "28") (term "0"))
                  (rule "polySimp_elimOne" (formula "28") (term "0"))
                  (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "28"))
                  (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
                  (rule "mul_literals" (formula "91") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
                  (rule "add_literals" (formula "91") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "91") (term "1,0,0"))
                  (rule "add_zero_right" (formula "91") (term "0,0"))
                  (rule "leq_literals" (formula "91") (term "0"))
                   (builtin "One Step Simplification" (formula "91"))
                  (rule "false_right" (formula "91"))
                  (rule "pullOutSelect" (formula "73") (term "1") (inst "selectSK=java_util_Iterator_index_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "14")))
                  (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "67"))
                   (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "105")) (ifInst ""  (formula "58")))
                  (rule "elementOfSingleton" (formula "73") (term "0,0"))
                   (builtin "One Step Simplification" (formula "73"))
                  (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
                  (rule "hideAuxiliaryEq" (formula "73"))
                  (rule "elementOfSingleton" (formula "73") (term "0,0"))
                   (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "33")))
                  (rule "true_left" (formula "73"))
                  (rule "equalityToSeqGetAndSeqLenRight" (formula "104") (inst "iv=iv"))
                  (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "104") (term "1,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "104") (term "1,1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "104") (term "1,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0,0,1"))
                  (rule "mul_literals" (formula "104") (term "0,1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0,0,1"))
                  (rule "pullOutSelect" (formula "77") (term "0,0,1,0,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                  (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "77"))
                  (rule "applyEq" (formula "78") (term "0,1,0,0,1") (ifseqformula "77"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "67"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "96")) (ifInst ""  (formula "56")))
                  (rule "eqSymm" (formula "78") (term "1,0,0,1"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "77"))
                  (rule "applyEqReverse" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,1,0,0,1") (ifseqformula "77"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "applyEq" (formula "77") (term "1,1,0,0,1") (ifseqformula "4"))
                  (rule "applyEq" (formula "77") (term "0,0,1,0,0,0,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "77") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
                  (rule "pullOutSelect" (formula "77") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_1"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "67"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "98")) (ifInst ""  (formula "57")))
                  (rule "eqSymm" (formula "78") (term "0,0,0,1"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,0,0,0,1") (ifseqformula "77"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "applyEq" (formula "77") (term "1,0,0,0,1") (ifseqformula "1"))
                  (rule "pullOutSelect" (formula "77") (term "1,1,1") (inst "selectSK=java_util_Collection_seq_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "97")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "0,1,0,0") (ifseqformula "30"))
                  (rule "replace_known_left" (formula "77") (term "0,0,1,0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,1,1") (ifseqformula "77"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "pullOutSelect" (formula "77") (term "0,1,1") (inst "selectSK=java_util_Collection_seq_3"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "75"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "98")))
                  (rule "replaceKnownSelect_taclet100110_17" (formula "77") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet100110_18" (formula "77") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "0,1,0,0") (ifseqformula "67"))
                  (rule "eqSymm" (formula "78") (term "1,1"))
                  (rule "replace_known_left" (formula "77") (term "0,0,1,0,0") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,1,1") (ifseqformula "77"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "eqSymm" (formula "77") (term "1,1"))
                  (rule "pullOutSelect" (formula "77") (term "0,0,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
                  (rule "applyEq" (formula "78") (term "0,1,0,0,1") (ifseqformula "77"))
                  (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "77"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "95")) (ifInst ""  (formula "12")))
                  (rule "eqSymm" (formula "78") (term "1,0,0,1"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,1,0,0,1") (ifseqformula "77"))
                   (builtin "One Step Simplification" (formula "78"))
                  (rule "applyEqReverse" (formula "78") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "77"))
                  (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,1,0") (ifseqformula "77"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                  (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
                  (rule "eqSymm" (formula "105") (term "0"))
                  (rule "eqSymm" (formula "105") (term "1,0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "57"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "78") (term "0,1,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "96")) (ifInst ""  (formula "57")))
                  (rule "eqSymm" (formula "78") (term "1,0,1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "78") (term "1,1,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "105") (term "0,1,0") (ifseqformula "1"))
                  (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "applyEq" (formula "77") (term "1,1,0,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "104") (term "0,1,1,1,0,0,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "104") (term "0,1,0") (ifseqformula "5"))
                  (rule "applyEq" (formula "104") (term "0,1,1,0,1") (ifseqformula "5"))
                  (rule "applyEq" (formula "104") (term "1,1,1,0,0,1") (ifseqformula "19"))
                  (rule "applyEq" (formula "104") (term "1,0") (ifseqformula "19"))
                  (rule "pullOutSelect" (formula "77") (term "0,0,0,1") (inst "selectSK=java_util_Collection_seq_4"))
                  (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
                  (rule "eqSymm" (formula "78") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "77") (term "0,0"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "applyEqReverse" (formula "78") (term "1,0,0,1") (ifseqformula "77"))
                   (builtin "One Step Simplification" (formula "78"))
                  (rule "hideAuxiliaryEq" (formula "77"))
                  (rule "pullOutSelect" (formula "104") (term "0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
                  (rule "applyEq" (formula "105") (term "0,0,1,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
                  (rule "eqSymm" (formula "105") (term "0"))
                  (rule "eqSymm" (formula "105") (term "1,0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEq" (formula "78") (term "0,0,1") (ifseqformula "1"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "95")) (ifInst ""  (formula "13")))
                  (rule "eqSymm" (formula "78") (term "0,1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "105") (term "0,1,1,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "105"))
                  (rule "applyEqReverse" (formula "78") (term "1,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "78"))
                  (rule "applyEqReverse" (formula "105") (term "0,1") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "eqSymm" (formula "104"))
                  (rule "close" (formula "104") (ifseqformula "19"))
               )
            )
            (branch
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "6"))
               (rule "eqSymm" (formula "7"))
               (rule "eqSymm" (formula "130"))
               (rule "eqSymm" (formula "5"))
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "4"))
               (rule "eqSymm" (formula "115"))
               (rule "eqSymm" (formula "60"))
               (rule "eqSymm" (formula "3"))
               (rule "eqSymm" (formula "59"))
               (rule "replace_known_left" (formula "98") (term "1,0,1,1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "77")) (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
               (rule "andLeft" (formula "98"))
               (rule "replace_known_right" (formula "104") (term "0,0,1,1,1,1,1,0") (ifseqformula "117"))
                (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "122")) (ifInst ""  (formula "123")) (ifInst ""  (formula "121")))
               (rule "polySimp_homoEq" (formula "93") (term "1"))
               (rule "polySimp_homoEq" (formula "40") (term "1"))
               (rule "polySimp_addComm1" (formula "93") (term "0,1"))
               (rule "polySimp_addComm1" (formula "40") (term "0,1"))
               (rule "castedGetAny" (formula "6") (term "0,2,1"))
               (rule "castedGetAny" (formula "6") (term "0,2,0"))
               (rule "castedGetAny" (formula "131") (term "0,2,1"))
               (rule "castedGetAny" (formula "131") (term "0,2,0"))
               (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
               (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
               (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "92") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "50"))
               (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "50") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
               (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "34") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "38") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
               (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "86") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
               (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "93") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
               (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "112") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "39") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "40") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
               (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
               (rule "polySimp_addComm1" (formula "55") (term "0,1"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
               (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
               (rule "polySimp_addComm1" (formula "91") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "107"))
               (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "107") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
               (rule "applyEq" (formula "75") (term "0,0,0,1,0") (ifseqformula "4"))
               (rule "applyEq" (formula "131") (term "0,0,1,0") (ifseqformula "61"))
               (rule "eqSymm" (formula "131"))
               (rule "applyEq" (formula "81") (term "0") (ifseqformula "2"))
               (rule "eqSymm" (formula "81"))
               (rule "applyEq" (formula "126") (term "0") (ifseqformula "60"))
               (rule "applyEq" (formula "40") (term "0,0,1,0,0") (ifseqformula "29"))
               (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "60"))
               (rule "applyEq" (formula "80") (term "0,0,1,0") (ifseqformula "2"))
               (rule "eqSymm" (formula "80") (term "1,0"))
               (rule "applyEq" (formula "99") (term "0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "99"))
               (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "29"))
               (rule "applyEq" (formula "91") (term "0,0,1,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "91") (term "0,0,1") (ifseqformula "97"))
               (rule "applyEq" (formula "47") (term "6") (ifseqformula "46"))
               (rule "applyEq" (formula "90") (term "0,1,0,0") (ifseqformula "78"))
               (rule "applyEq" (formula "86") (term "3") (ifseqformula "62"))
               (rule "applyEq" (formula "73") (term "0,1") (ifseqformula "4"))
               (rule "applyEq" (formula "111") (term "0,1,0,1") (ifseqformula "78"))
               (rule "applyEq" (formula "55") (term "4") (ifseqformula "53"))
               (rule "applyEq" (formula "78") (term "0,0") (ifseqformula "2"))
               (rule "eqSymm" (formula "78"))
               (rule "applyEq" (formula "109") (term "0,1,0,0") (ifseqformula "97"))
               (rule "applyEq" (formula "55") (term "3") (ifseqformula "58"))
               (rule "applyEq" (formula "103") (term "0,1,1,0,0,0,0") (ifseqformula "97"))
               (rule "applyEq" (formula "37") (term "0,0,1,0,0") (ifseqformula "29"))
               (rule "applyEq" (formula "28") (term "0,0,1,0,0,0,0,0") (ifseqformula "29"))
               (rule "applyEq" (formula "54") (term "0,0,1,0,1") (ifseqformula "29"))
               (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
               (rule "applyEq" (formula "92") (term "1,0,1") (ifseqformula "3"))
               (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "59"))
               (rule "applyEq" (formula "33") (term "0,1,0,1") (ifseqformula "27"))
               (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
               (rule "applyEq" (formula "86") (term "4") (ifseqformula "83"))
               (rule "applyEq" (formula "69") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
               (rule "applyEq" (formula "2") (term "1") (ifseqformula "29"))
               (rule "applyEq" (formula "44") (term "4") (ifseqformula "43"))
               (rule "applyEq" (formula "107") (term "0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "117") (term "0,0") (ifseqformula "97"))
               (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "true_left" (formula "28"))
               (rule "applyEq" (formula "60") (term "0,0") (ifseqformula "96"))
               (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "28"))
               (rule "applyEq" (formula "88") (term "1,0,1") (ifseqformula "96"))
               (rule "applyEq" (formula "103") (term "0") (ifseqformula "58"))
               (rule "applyEq" (formula "7") (term "1") (ifseqformula "29"))
               (rule "applyEq" (formula "32") (term "4") (ifseqformula "30"))
               (rule "applyEq" (formula "36") (term "0,1,0,0") (ifseqformula "26"))
               (rule "applyEq" (formula "97") (term "4") (ifseqformula "94"))
               (rule "applyEq" (formula "104") (term "0,0,1,0") (ifseqformula "4"))
               (rule "applyEq" (formula "73") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
               (rule "applyEq" (formula "101") (term "0,0,0,1,0,1") (ifseqformula "95"))
                (builtin "One Step Simplification" (formula "101"))
               (rule "applyEq" (formula "91") (term "0,1") (ifseqformula "95"))
               (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "56"))
               (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "10"))
               (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "notLeft" (formula "36"))
               (rule "replace_known_left" (formula "36") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "replace_known_right" (formula "58") (term "0") (ifseqformula "113"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "replace_known_right" (formula "88") (term "0,1") (ifseqformula "113"))
                (builtin "One Step Simplification" (formula "88"))
               (rule "true_left" (formula "88"))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "112"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "112"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "replace_known_right" (formula "37") (term "1") (ifseqformula "112"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "notLeft" (formula "37"))
               (rule "replace_known_right" (formula "88") (term "1") (ifseqformula "112"))
                (builtin "One Step Simplification" (formula "88"))
               (rule "notLeft" (formula "88"))
               (rule "replace_known_right" (formula "88") (term "0") (ifseqformula "110"))
                (builtin "One Step Simplification" (formula "88"))
               (rule "true_left" (formula "88"))
               (rule "applyEq" (formula "81") (term "0,0") (ifseqformula "58"))
               (rule "replace_known_left" (formula "81") (term "0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "81"))
               (rule "replace_known_left" (formula "87") (term "0") (ifseqformula "81"))
                (builtin "One Step Simplification" (formula "87"))
               (rule "applyEq" (formula "97") (term "6") (ifseqformula "95"))
               (rule "applyEq" (formula "97") (term "0,2") (ifseqformula "90"))
               (rule "applyEq" (formula "102") (term "0,1,0,1") (ifseqformula "90"))
               (rule "applyEq" (formula "58") (term "1") (ifseqformula "77"))
               (rule "applyEq" (formula "85") (term "1,0,1,0") (ifseqformula "90"))
               (rule "applyEq" (formula "10") (term "1") (ifseqformula "28"))
               (rule "applyEq" (formula "100") (term "0,1") (ifseqformula "90"))
               (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "26"))
               (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "110"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "true_left" (formula "37"))
               (rule "applyEq" (formula "85") (term "1,1") (ifseqformula "89"))
               (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "5"))
               (rule "applyEq" (formula "90") (term "3") (ifseqformula "88"))
               (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "applyEq" (formula "68") (term "0,0,0,1,0") (ifseqformula "5"))
               (rule "applyEq" (formula "100") (term "0,0") (ifseqformula "104"))
               (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "5"))
               (rule "applyEq" (formula "80") (term "0,0,0") (ifseqformula "85"))
               (rule "replace_known_right" (formula "80") (term "0,0") (ifseqformula "106"))
                (builtin "One Step Simplification" (formula "80"))
               (rule "applyEq" (formula "66") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "99") (term "4") (ifseqformula "97"))
               (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "26"))
               (rule "applyEq" (formula "91") (term "5") (ifseqformula "53"))
               (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "26"))
               (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "79") (term "1,0,1") (ifseqformula "3"))
               (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "97") (term "3") (ifseqformula "100"))
               (rule "applyEq" (formula "78") (term "1,0,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
               (rule "applyEq" (formula "30") (term "3") (ifseqformula "10"))
               (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
               (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0") (ifseqformula "68"))
               (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "68"))
               (rule "applyEq" (formula "78") (term "0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "67") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "63") (term "0,0,0,1,0") (ifseqformula "68"))
               (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "62") (term "0,0,1,0,0,1,0") (ifseqformula "68"))
               (rule "applyEq" (formula "116") (term "0,0,0,2,1") (ifseqformula "53"))
               (rule "applyEq" (formula "116") (term "0,0,0,2,0") (ifseqformula "8"))
               (rule "applyEq" (formula "68") (term "1") (ifseqformula "25"))
               (rule "applyEqRigid" (formula "116") (term "0,0,1,0") (ifseqformula "8"))
               (rule "eqSymm" (formula "116"))
               (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "applyEq" (formula "72") (term "3") (ifseqformula "68"))
               (rule "applyEq" (formula "99") (term "0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "94") (term "0,1,0,1") (ifseqformula "65"))
               (rule "applyEq" (formula "76") (term "0,1,0,0") (ifseqformula "65"))
               (rule "applyEq" (formula "65") (term "0,1") (ifseqformula "24"))
               (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "24"))
               (rule "replace_known_left" (formula "76") (term "1") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "76"))
               (rule "true_left" (formula "76"))
               (rule "applyEq" (formula "71") (term "0,0,1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "79"))
               (rule "applyEq" (formula "65") (term "0,1,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "70") (term "1,0,0") (ifseqformula "3"))
               (rule "applyEq" (formula "96") (term "1") (ifseqformula "3"))
               (rule "applyEq" (formula "65") (term "0,0,1,0") (ifseqformula "66"))
                (builtin "One Step Simplification" (formula "65"))
               (rule "true_left" (formula "65"))
               (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "65"))
                (builtin "One Step Simplification" (formula "64"))
               (rule "true_left" (formula "64"))
               (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "24"))
               (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "24"))
               (rule "applyEq" (formula "59") (term "0,0,1,0,0,0,0,0") (ifseqformula "24"))
               (rule "applyEq" (formula "60") (term "0,0,0,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "59") (term "0,0,1,0,0,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "86") (term "0,0,1,0,1") (ifseqformula "24"))
               (rule "polySimp_sepPosMonomial" (formula "33"))
               (rule "polySimp_mulComm0" (formula "33") (term "1"))
               (rule "polySimp_rightDist" (formula "33") (term "1"))
               (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
               (rule "mul_literals" (formula "33") (term "0,1"))
               (rule "polySimp_elimOne" (formula "33") (term "1,1"))
               (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
               (rule "polySimp_addComm1" (formula "69") (term "0"))
               (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
               (rule "add_literals" (formula "69") (term "0,0,0"))
               (rule "add_zero_left" (formula "69") (term "0,0"))
               (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
               (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "33"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0"))
               (rule "add_zero_left" (formula "28") (term "0,0"))
               (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
               (rule "applyEq" (formula "91") (term "1") (ifseqformula "33"))
               (rule "inEqSimp_sepNegMonomial0" (formula "41"))
               (rule "polySimp_mulLiterals" (formula "41") (term "0"))
               (rule "polySimp_elimOne" (formula "41") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
               (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
               (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
               (rule "polySimp_elimOne" (formula "46") (term "0,1"))
               (rule "polySimp_sepNegMonomial" (formula "69"))
               (rule "polySimp_mulLiterals" (formula "69") (term "0"))
               (rule "polySimp_elimOne" (formula "69") (term "0"))
               (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "69"))
               (rule "inEqSimp_sepNegMonomial0" (formula "81"))
               (rule "polySimp_mulLiterals" (formula "81") (term "0"))
               (rule "polySimp_elimOne" (formula "81") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0"))
               (rule "polySimp_elimOne" (formula "28") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
               (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
               (rule "polySimp_elimOne" (formula "86") (term "0,1"))
               (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "28"))
               (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
               (rule "mul_literals" (formula "91") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
               (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
               (rule "add_literals" (formula "91") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "91") (term "1,0,0"))
               (rule "add_literals" (formula "91") (term "0,0"))
               (rule "leq_literals" (formula "91") (term "0"))
                (builtin "One Step Simplification" (formula "91"))
               (rule "false_right" (formula "91"))
               (rule "pullOutSelect" (formula "73") (term "1") (inst "selectSK=java_util_Iterator_index_1"))
               (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "104")) (ifInst ""  (formula "14")))
               (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "67"))
                (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "105")) (ifInst ""  (formula "58")))
               (rule "elementOfSingleton" (formula "73") (term "0,0"))
                (builtin "One Step Simplification" (formula "73"))
               (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
               (rule "hideAuxiliaryEq" (formula "73"))
               (rule "elementOfSingleton" (formula "73") (term "0,0"))
                (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "69")))
               (rule "true_left" (formula "73"))
               (rule "eqSeqDef" (formula "104") (inst "iv=iv"))
               (rule "getOfSeqDef" (formula "104") (term "1,1,0,1"))
               (rule "castDel" (formula "104") (term "2,1,1,0,1"))
               (rule "castDel" (formula "104") (term "1,1,1,0,1"))
               (rule "add_zero_right" (formula "104") (term "1,0,1,1,1,0,1"))
               (rule "eqSymm" (formula "104") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "times_zero_2" (formula "104") (term "1,1,1,0,0,1,0,1"))
               (rule "add_zero_right" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "lenOfSeqDef" (formula "104") (term "0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_elimSub" (formula "104") (term "1,1,0"))
               (rule "mul_literals" (formula "104") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "104") (term "1,1,0"))
               (rule "lenOfSeqDef" (formula "104") (term "1,1,0,0,1"))
               (rule "polySimp_elimSub" (formula "104") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "104") (term "1,1,1,1,0,0,1"))
               (rule "add_zero_right" (formula "104") (term "1,1,1,0,0,1"))
               (rule "getOfSeqDef" (formula "104") (term "1,1,0,1"))
               (rule "castDel" (formula "104") (term "2,1,1,0,1"))
               (rule "castDel" (formula "104") (term "1,1,1,0,1"))
               (rule "add_zero_right" (formula "104") (term "1,0,1,1,1,0,1"))
               (rule "eqSymm" (formula "104") (term "1,0,1"))
               (rule "polySimp_elimSub" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "times_zero_2" (formula "104") (term "1,1,1,0,0,1,0,1"))
               (rule "add_zero_right" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "lenOfSeqDef" (formula "104") (term "0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_elimSub" (formula "104") (term "1,1,0"))
               (rule "times_zero_2" (formula "104") (term "1,1,1,0"))
               (rule "add_zero_right" (formula "104") (term "1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "0,1,1,0,0,1"))
               (rule "add_zero_right" (formula "104") (term "0,0,1,1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,1,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,1,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,1,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "0,0,0"))
               (rule "add_zero_right" (formula "104") (term "0,0,0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "104") (term "0,0,0"))
               (rule "add_zero_right" (formula "104") (term "0,0,0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,1,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "104") (term "1,0,1,1,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,1,0,1,1,0,1"))
               (rule "polySimp_rightDist" (formula "104") (term "1,1,0,1,1,0,1"))
               (rule "mul_literals" (formula "104") (term "0,1,1,0,1,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0,1,1,0,1"))
               (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0,1,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "104") (term "1,0,0,1,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "polySimp_rightDist" (formula "104") (term "1,1,0,0,1,0,1"))
               (rule "mul_literals" (formula "104") (term "0,1,1,0,0,1,0,1"))
               (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0,0,1,0,1"))
               (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0,0,1,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "104") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "104") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "104") (term "1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "104") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "104") (term "0,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "104") (term "1,1,1,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "104") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "104") (term "0,0,0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_elimOne" (formula "104") (term "0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "104") (term "0,1,1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "104") (term "0,0,1,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "104") (term "0,0,1,1,1,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "104") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "104") (term "0,0,0,0"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "polySimp_elimOne" (formula "104") (term "0,0,1,0"))
               (rule "pullOutSelect" (formula "77") (term "1,1,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
               (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "95")) (ifInst ""  (formula "12")))
               (rule "elementOfSingleton" (formula "77") (term "0,0"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "applyEqReverse" (formula "78") (term "1,1,0,1") (ifseqformula "77"))
               (rule "hideAuxiliaryEq" (formula "77"))
               (rule "pullOutSelect" (formula "77") (term "0,0,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
               (rule "applyEq" (formula "78") (term "1,1,0,0,1") (ifseqformula "77"))
               (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "77"))
               (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "95")) (ifInst ""  (formula "12")))
               (rule "elementOfSingleton" (formula "77") (term "0,0"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,1,0") (ifseqformula "77"))
               (rule "applyEqReverse" (formula "78") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "77"))
               (rule "applyEqReverse" (formula "78") (term "1,1,0,0,1") (ifseqformula "77"))
               (rule "hideAuxiliaryEq" (formula "77"))
               (rule "pullOutSelect" (formula "77") (term "0,1,1") (inst "selectSK=java_util_Collection_seq_1"))
               (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "75"))
                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "98")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "0,1,0,0") (ifseqformula "67"))
               (rule "eqSymm" (formula "78") (term "1,1"))
               (rule "replace_known_left" (formula "77") (term "0,0,1,0,0") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "elementOfSingleton" (formula "77") (term "0,0"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "applyEqReverse" (formula "78") (term "1,1,1") (ifseqformula "77"))
               (rule "hideAuxiliaryEq" (formula "77"))
               (rule "pullOutSelect" (formula "77") (term "1,0,0,0,1") (inst "selectSK=java_util_Collection_seq_2"))
               (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
               (rule "elementOfSingleton" (formula "77") (term "0,0"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "applyEqReverse" (formula "78") (term "1,0,0,0,1") (ifseqformula "77"))
               (rule "hideAuxiliaryEq" (formula "77"))
               (rule "pullOutSelect" (formula "77") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_3"))
               (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "67"))
                (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "98")) (ifInst ""  (formula "57")))
               (rule "eqSymm" (formula "78") (term "0,0,0,1"))
               (rule "elementOfSingleton" (formula "77") (term "0,0"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "applyEqReverse" (formula "78") (term "1,0,0,0,1") (ifseqformula "77"))
               (rule "hideAuxiliaryEq" (formula "77"))
               (rule "eqSymm" (formula "77") (term "0,0,0,1"))
               (rule "replace_known_left" (formula "77") (term "0,0,0,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "77"))
               (rule "pullOutSelect" (formula "104") (term "0,0,1,1,1,0,1") (inst "selectSK=java_util_Iterator_seq_0"))
               (rule "applyEq" (formula "105") (term "0,1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,0,0,1,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "31"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "103")) (ifInst ""  (formula "15")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,0,1,1,1,0,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "applyEq" (formula "104") (term "0,0,0,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "104") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "24"))
               (rule "applyEq" (formula "104") (term "0,1,1,0") (ifseqformula "24"))
               (rule "applyEq" (formula "104") (term "0,0,1,1,1,0,1") (ifseqformula "24"))
               (rule "pullOutSelect" (formula "104") (term "0,0,1,0,1,0,1") (inst "selectSK=java_util_Iterator_seq_1"))
               (rule "applyEq" (formula "105") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,1,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
               (rule "applyEq" (formula "105") (term "0,1,1,1,0,0,1,0,1") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "68"))
               (rule "eqSymm" (formula "105") (term "0"))
               (rule "eqSymm" (formula "105") (term "1,0,1"))
               (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "59"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "104")) (ifInst ""  (formula "59")))
               (rule "elementOfSingleton" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,1,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,0,1,1,1,0,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,1,1,1,0,1,1,0,1") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "105") (term "0,1,1,1,1,0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "eqSymm" (formula "104") (term "0"))
               (rule "eqSymm" (formula "104") (term "1,0,1"))
               (rule "applyEq" (formula "104") (term "0,0,0,1,1,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "104") (term "0,1,1,1,1,0,0,1") (ifseqformula "2"))
               (rule "applyEq" (formula "104") (term "0,1,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "104") (term "0,0,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "104"))
               (rule "allRight" (formula "104") (inst "sk=iv_0"))
               (rule "impRight" (formula "104"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_left" (formula "106") (term "0,0,1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "106") (ifInst ""  (formula "1")))
               (rule "inEqSimp_homoInEq0" (formula "2"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "106") (term "0,1"))
               (rule "polySimp_addComm1" (formula "106") (term "0,0,1"))
               (rule "inEqSimp_homoInEq0" (formula "106") (term "0,0"))
               (rule "polySimp_addComm1" (formula "106") (term "0,0,0"))
               (rule "applyEq" (formula "106") (term "0,1,0,0,0") (ifseqformula "4"))
               (rule "applyEq" (formula "106") (term "0,0,1,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "106"))
               (rule "closeTrue" (formula "106"))
            )
         )
         (branch
            (rule "eqSymm" (formula "115"))
            (rule "eqSymm" (formula "6"))
            (rule "eqSymm" (formula "2"))
            (rule "eqSymm" (formula "3"))
            (rule "eqSymm" (formula "4"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "60"))
            (rule "eqSymm" (formula "5"))
            (rule "eqSymm" (formula "7"))
            (rule "eqSymm" (formula "59"))
            (rule "eqSymm" (formula "130"))
            (rule "replace_known_left" (formula "98") (term "0,0") (ifseqformula "77"))
             (builtin "One Step Simplification" (formula "98") (ifInst ""  (formula "25")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "andLeft" (formula "98"))
            (rule "replace_known_right" (formula "104") (term "0,1,1,1,1,1,0,0") (ifseqformula "122"))
             (builtin "One Step Simplification" (formula "104") (ifInst ""  (formula "124")) (ifInst ""  (formula "118")) (ifInst ""  (formula "123")) (ifInst ""  (formula "117")) (ifInst ""  (formula "121")))
            (rule "polySimp_homoEq" (formula "40") (term "1"))
            (rule "polySimp_homoEq" (formula "93") (term "1"))
            (rule "polySimp_addComm1" (formula "40") (term "0,1"))
            (rule "polySimp_addComm1" (formula "93") (term "0,1"))
            (rule "castedGetAny" (formula "6") (term "0,2,1"))
            (rule "castedGetAny" (formula "6") (term "0,2,0"))
            (rule "castedGetAny" (formula "104") (term "0,1,0,0,0,0"))
            (rule "castedGetAny" (formula "104") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "92") (term "0"))
            (rule "polySimp_mulComm0" (formula "92") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "92") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "107"))
            (rule "polySimp_mulComm0" (formula "107") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "107") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "50"))
            (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "50") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "91") (term "0"))
            (rule "polySimp_mulComm0" (formula "91") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "91") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "80") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "80") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "76") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "76") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "23") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "86") (term "1"))
            (rule "polySimp_mulComm0" (formula "86") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "86") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "40") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "93") (term "0"))
            (rule "polySimp_mulComm0" (formula "93") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "93") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "34") (term "1"))
            (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "34") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "38") (term "0"))
            (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
            (rule "polySimp_addComm1" (formula "38") (term "0,0"))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "112") (term "1"))
            (rule "polySimp_mulComm0" (formula "112") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "112") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "39") (term "0"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "55") (term "1"))
            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1"))
            (rule "polySimp_addComm1" (formula "39") (term "0,0"))
            (rule "polySimp_addComm1" (formula "55") (term "0,1"))
            (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "104") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "104") (term "1,0,0,1,0,0,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "104") (term "0,0,0,0,0,0"))
            (rule "applyEq" (formula "55") (term "0,1,0,1") (ifseqformula "27"))
            (rule "applyEq" (formula "39") (term "0,1,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "93") (term "0,1,0,0") (ifseqformula "79"))
            (rule "applyEq" (formula "107") (term "0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "90") (term "1,0,1,0") (ifseqformula "98"))
            (rule "applyEq" (formula "28") (term "0,0,1,0,0,0,0,0") (ifseqformula "29"))
            (rule "applyEq" (formula "63") (term "1") (ifseqformula "82"))
            (rule "replace_known_left" (formula "86") (term "0") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "86"))
            (rule "replace_known_left" (formula "91") (term "0") (ifseqformula "86"))
             (builtin "One Step Simplification" (formula "91"))
            (rule "replace_known_left" (formula "92") (term "0") (ifseqformula "86"))
             (builtin "One Step Simplification" (formula "92"))
            (rule "notLeft" (formula "92"))
            (rule "replace_known_right" (formula "62") (term "0") (ifseqformula "116"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "replace_known_right" (formula "90") (term "0,0") (ifseqformula "116"))
             (builtin "One Step Simplification" (formula "90"))
            (rule "replace_known_right" (formula "93") (term "1") (ifseqformula "116"))
             (builtin "One Step Simplification" (formula "93"))
            (rule "notLeft" (formula "93"))
            (rule "replace_known_right" (formula "93") (term "0") (ifseqformula "115"))
             (builtin "One Step Simplification" (formula "93"))
            (rule "true_left" (formula "93"))
            (rule "applyEq" (formula "74") (term "0,0") (ifseqformula "5"))
            (rule "eqSymm" (formula "74"))
            (rule "applyEq" (formula "109") (term "0,1,0,1") (ifseqformula "79"))
            (rule "applyEq" (formula "38") (term "0,1,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "76") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "75") (term "0,0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "7") (term "0") (ifseqformula "82"))
            (rule "eqSymm" (formula "7"))
            (rule "applyEq" (formula "39") (term "0,1,0,0") (ifseqformula "26"))
            (rule "applyEq" (formula "74") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "28"))
            (rule "applyEq" (formula "103") (term "0,1") (ifseqformula "93"))
            (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "33") (term "0,0,1,0,1") (ifseqformula "28"))
            (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "94") (term "0,1,0") (ifseqformula "28"))
            (rule "applyEq" (formula "94") (term "0,0,0") (ifseqformula "79"))
            (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "applyEq" (formula "33") (term "3") (ifseqformula "10"))
            (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "99") (term "5") (ifseqformula "58"))
            (rule "applyEq" (formula "82") (term "0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "83") (term "4") (ifseqformula "81"))
            (rule "applyEq" (formula "31") (term "0") (ifseqformula "26"))
            (rule "applyEq" (formula "76") (term "0,0,1,0") (ifseqformula "2"))
            (rule "eqSymm" (formula "76") (term "1,0"))
            (rule "applyEq" (formula "72") (term "0,0,0,1,0") (ifseqformula "5"))
            (rule "applyEq" (formula "101") (term "0,1,0,0") (ifseqformula "89"))
            (rule "applyEq" (formula "2") (term "1") (ifseqformula "27"))
            (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "5"))
            (rule "applyEq" (formula "39") (term "0,0,0") (ifseqformula "27"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "75"))
            (rule "applyEq" (formula "103") (term "3") (ifseqformula "106"))
            (rule "applyEq" (formula "6") (term "0,0,2,1") (ifseqformula "27"))
            (rule "applyEq" (formula "69") (term "0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "53") (term "3") (ifseqformula "56"))
            (rule "applyEq" (formula "89") (term "3") (ifseqformula "87"))
            (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "56"))
            (rule "applyEq" (formula "35") (term "0,0,1") (ifseqformula "27"))
            (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "applyEq" (formula "101") (term "4") (ifseqformula "99"))
            (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "56"))
            (rule "applyEq" (formula "31") (term "4") (ifseqformula "29"))
            (rule "applyEq" (formula "98") (term "0,1,0,1") (ifseqformula "86"))
            (rule "applyEq" (formula "92") (term "0,1,1,0,0,0,0") (ifseqformula "86"))
            (rule "applyEq" (formula "108") (term "0,0") (ifseqformula "86"))
            (rule "applyEq" (formula "100") (term "0,0") (ifseqformula "104"))
            (rule "applyEq" (formula "37") (term "0,0,0") (ifseqformula "26"))
            (rule "applyEq" (formula "92") (term "0,0,0,1,0,1") (ifseqformula "86"))
             (builtin "One Step Simplification" (formula "92"))
            (rule "applyEq" (formula "93") (term "0") (ifseqformula "56"))
            (rule "applyEq" (formula "88") (term "4") (ifseqformula "85"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "21"))
            (rule "applyEq" (formula "95") (term "0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "10"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "notLeft" (formula "34"))
            (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "103"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "103"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "replace_known_right" (formula "35") (term "1") (ifseqformula "103"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "notLeft" (formula "35"))
            (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "102"))
             (builtin "One Step Simplification" (formula "35"))
            (rule "true_left" (formula "35"))
            (rule "applyEq" (formula "40") (term "6") (ifseqformula "39"))
            (rule "applyEq" (formula "89") (term "6") (ifseqformula "87"))
            (rule "applyEq" (formula "79") (term "1,0,1") (ifseqformula "3"))
            (rule "applyEq" (formula "37") (term "4") (ifseqformula "36"))
            (rule "applyEq" (formula "67") (term "0,0") (ifseqformula "69"))
             (builtin "One Step Simplification" (formula "67"))
            (rule "true_left" (formula "67"))
            (rule "applyEq" (formula "62") (term "0,1,1,0,0,1,0") (ifseqformula "4"))
            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "68"))
            (rule "applyEq" (formula "88") (term "0,2") (ifseqformula "81"))
            (rule "applyEq" (formula "112") (term "0") (ifseqformula "52"))
            (rule "applyEq" (formula "10") (term "1") (ifseqformula "26"))
            (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "52"))
            (rule "applyEq" (formula "48") (term "4") (ifseqformula "46"))
            (rule "applyEq" (formula "22") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "20"))
            (rule "applyEq" (formula "78") (term "1,0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "63") (term "0,0,0,1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "62") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "61") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
            (rule "applyEq" (formula "61") (term "0,0,1,0,0,1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "70") (term "3") (ifseqformula "55"))
            (rule "applyEq" (formula "65") (term "1") (ifseqformula "2"))
            (rule "applyEq" (formula "75") (term "0,0,1,0,0") (ifseqformula "2"))
            (rule "replace_known_left" (formula "75") (term "0") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "75"))
            (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "4"))
            (rule "eqSymm" (formula "61"))
            (rule "applyEq" (formula "91") (term "0,0,1,0,1") (ifseqformula "2"))
            (rule "applyEq" (formula "73") (term "1") (ifseqformula "77"))
            (rule "applyEq" (formula "30") (term "3") (ifseqformula "26"))
            (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "2"))
            (rule "applyEq" (formula "63") (term "0,0,1,0,0,0,0,0") (ifseqformula "25"))
            (rule "applyEq" (formula "99") (term "0") (ifseqformula "77"))
            (rule "applyEq" (formula "72") (term "1,0,1") (ifseqformula "77"))
            (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "77"))
            (rule "applyEq" (formula "77") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEq" (formula "61") (term "0,0,1,0") (ifseqformula "2"))
            (rule "eqSymm" (formula "61") (term "1,0"))
            (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "3"))
            (rule "applyEq" (formula "66") (term "1,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "96") (term "1") (ifseqformula "3"))
            (rule "applyEq" (formula "71") (term "0,0") (ifseqformula "62"))
            (rule "applyEq" (formula "66") (term "0,0,1,0") (ifseqformula "62"))
            (rule "applyEq" (formula "94") (term "0,0") (ifseqformula "62"))
            (rule "applyEq" (formula "61") (term "0,0,1,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "61"))
            (rule "true_left" (formula "61"))
            (rule "inEqSimp_sepNegMonomial0" (formula "41"))
            (rule "polySimp_mulLiterals" (formula "41") (term "0"))
            (rule "polySimp_elimOne" (formula "41") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_sepPosMonomial" (formula "33"))
            (rule "polySimp_mulComm0" (formula "33") (term "1"))
            (rule "polySimp_rightDist" (formula "33") (term "1"))
            (rule "mul_literals" (formula "33") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1"))
            (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "33"))
            (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "33"))
            (rule "polySimp_addComm1" (formula "69") (term "0"))
            (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
            (rule "add_literals" (formula "69") (term "0,0,0"))
            (rule "add_zero_left" (formula "69") (term "0,0"))
            (rule "applyEq" (formula "3") (term "1") (ifseqformula "33"))
            (rule "applyEq" (formula "91") (term "1") (ifseqformula "33"))
            (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "33"))
            (rule "polySimp_addAssoc" (formula "28") (term "0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0"))
            (rule "add_zero_left" (formula "28") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "46") (term "1"))
            (rule "polySimp_mulLiterals" (formula "46") (term "0,1"))
            (rule "polySimp_elimOne" (formula "46") (term "0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "81"))
            (rule "polySimp_mulLiterals" (formula "81") (term "0"))
            (rule "polySimp_elimOne" (formula "81") (term "0"))
            (rule "polySimp_sepNegMonomial" (formula "69"))
            (rule "polySimp_mulLiterals" (formula "69") (term "0"))
            (rule "polySimp_elimOne" (formula "69") (term "0"))
            (rule "applyEq" (formula "86") (term "1,0,0,1") (ifseqformula "69"))
            (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "78") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "78") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "78") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "78") (term "1,1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "78") (term "0,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "78") (term "1,1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "28"))
            (rule "polySimp_mulLiterals" (formula "28") (term "0"))
            (rule "polySimp_elimOne" (formula "28") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "86") (term "1"))
            (rule "polySimp_mulLiterals" (formula "86") (term "0,1"))
            (rule "polySimp_elimOne" (formula "86") (term "0,1"))
            (rule "inEqSimp_contradEq7" (formula "91") (ifseqformula "28"))
            (rule "polySimp_rightDist" (formula "91") (term "1,0,0"))
            (rule "mul_literals" (formula "91") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "91") (term "0,0"))
            (rule "polySimp_addComm0" (formula "91") (term "0,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "91") (term "0,0"))
            (rule "add_literals" (formula "91") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "91") (term "1,0,0"))
            (rule "add_zero_right" (formula "91") (term "0,0"))
            (rule "leq_literals" (formula "91") (term "0"))
             (builtin "One Step Simplification" (formula "91"))
            (rule "false_right" (formula "91"))
            (rule "pullOutSelect" (formula "78") (term "1,1,0,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
            (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
            (rule "applyEq" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "96")) (ifInst ""  (formula "12")))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
            (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,1,0") (ifseqformula "78"))
            (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,1,0") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "pullOutSelect" (formula "78") (term "1,1,1") (inst "selectSK=java_util_Collection_seq_1"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "98")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "78") (term "0,1,0,0") (ifseqformula "30"))
            (rule "replace_known_left" (formula "78") (term "0,0,1,0,0") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "1,1,1") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "pullOutSelect" (formula "78") (term "0,0,0,0,1") (inst "selectSK=java_util_Collection_seq_2"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")) (ifInst ""  (formula "57")))
            (rule "eqSymm" (formula "79") (term "0,0,0,1"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "1,0,0,0,1") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "applyEq" (formula "78") (term "1,0,0,0,1") (ifseqformula "1"))
            (rule "pullOutSelect" (formula "78") (term "0,1,1") (inst "selectSK=java_util_Collection_seq_3"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "76"))
             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "99")))
            (rule "replaceKnownSelect_taclet1110_16" (formula "78") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_17" (formula "78") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "78") (term "0,1,0,0") (ifseqformula "67"))
            (rule "eqSymm" (formula "79") (term "1,1"))
            (rule "replace_known_left" (formula "78") (term "0,0,1,0,0") (ifseqformula "57"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "1,1,1") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "eqSymm" (formula "78") (term "1,1"))
            (rule "pullOutSelect" (formula "78") (term "0,1,0,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
            (rule "applyEq" (formula "79") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "78"))
            (rule "applyEq" (formula "79") (term "0,0,1,0,0,0,0") (ifseqformula "78"))
            (rule "simplifySelectOfAnonEQ" (formula "78") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "97")) (ifInst ""  (formula "56")))
            (rule "eqSymm" (formula "79") (term "1,0,0,1"))
            (rule "elementOfSingleton" (formula "78") (term "0,0"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEqReverse" (formula "79") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "78"))
            (rule "applyEqReverse" (formula "79") (term "1,1,0,0,1") (ifseqformula "78"))
            (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0,0,0") (ifseqformula "78"))
            (rule "hideAuxiliaryEq" (formula "78"))
            (rule "eqSymm" (formula "78") (term "1,0,0,1"))
            (rule "replace_known_left" (formula "78") (term "1,0,0,1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "applyEq" (formula "78") (term "0,1,1,1,0,0,0,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "4"))
            (rule "pullOutSelect" (formula "73") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
            (rule "simplifySelectOfAnonEQ" (formula "73") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "105")) (ifInst ""  (formula "58")))
            (rule "eqSymm" (formula "74"))
            (rule "simplifySelectOfAnonEQ" (formula "74") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "104")) (ifInst ""  (formula "14")))
            (rule "elementOfSingleton" (formula "73") (term "0,0"))
             (builtin "One Step Simplification" (formula "73"))
            (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "73"))
            (rule "hideAuxiliaryEq" (formula "73"))
            (rule "elementOfSingleton" (formula "73") (term "0,0"))
             (builtin "One Step Simplification" (formula "73"))
            (rule "eqSymm" (formula "73"))
            (rule "pullOutSelect" (formula "77") (term "0,0,0,1") (inst "selectSK=java_util_Collection_seq_4"))
            (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "97")) (ifInst ""  (formula "13")))
            (rule "eqSymm" (formula "78") (term "0,0,1"))
            (rule "elementOfSingleton" (formula "77") (term "0,0"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEqReverse" (formula "78") (term "1,0,0,1") (ifseqformula "77"))
             (builtin "One Step Simplification" (formula "78"))
            (rule "hideAuxiliaryEq" (formula "77"))
            (rule "pullOutSelect" (formula "77") (term "1,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
            (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "95")) (ifInst ""  (formula "12")))
            (rule "elementOfSingleton" (formula "77") (term "0,0"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEqReverse" (formula "78") (term "1,0,1") (ifseqformula "77"))
            (rule "hideAuxiliaryEq" (formula "77"))
            (rule "pullOutSelect" (formula "77") (term "0,0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
            (rule "simplifySelectOfAnonEQ" (formula "77") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "96")) (ifInst ""  (formula "56")))
            (rule "eqSymm" (formula "78") (term "0,1"))
            (rule "elementOfSingleton" (formula "77") (term "0,0"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEqReverse" (formula "78") (term "1,0,1") (ifseqformula "77"))
            (rule "hideAuxiliaryEq" (formula "77"))
            (rule "eqSymm" (formula "77") (term "0,1"))
            (rule "replace_known_left" (formula "77") (term "0,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "inEqSimp_and_subsumption3" (formula "20") (term "0,0,0"))
            (rule "leq_literals" (formula "20") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_and_subsumption3" (formula "21") (term "0,0,0"))
            (rule "leq_literals" (formula "21") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "16") (term "0"))
            (rule "nnf_imp2or" (formula "20") (term "0"))
            (rule "nnf_imp2or" (formula "21") (term "0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
            (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
            (rule "mul_literals" (formula "16") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0"))
            (rule "mul_literals" (formula "21") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "20") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
            (rule "mul_literals" (formula "20") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "20") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "20") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "20") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "20") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "20") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "20") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "21") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "21") (term "1,0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "21") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0"))
            (rule "mul_literals" (formula "21") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "21") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "21") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "21") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "21") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "21") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "21") (term "1,0,0,0,0"))
            (rule "lenNonNegative" (formula "19") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "seqGetAlphaCast" (formula "42") (term "0"))
            (rule "castedGetAny" (formula "42") (term "0"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "true_left" (formula "42"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
            (rule "andLeft" (formula "24"))
            (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
            (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
            (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "26"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "lenNonNegative" (formula "19") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "19"))
            (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
            (rule "lenNonNegative" (formula "15") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
            (rule "andLeft" (formula "4"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
            (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "1") (inst "iv=iv"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "2") (term "0,0,0"))
            (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
            (rule "andLeft" (formula "5"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
            (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "77") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "2") (inst "iv=iv"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
            (rule "applyEq" (formula "3") (term "0,0,1,0,0,1,0,0") (ifseqformula "4"))
            (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "commute_or" (formula "16") (term "0,0"))
            (rule "seqGetAlphaCast" (formula "81") (term "0"))
            (rule "castedGetAny" (formula "81") (term "0"))
             (builtin "One Step Simplification" (formula "81"))
            (rule "true_left" (formula "81"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "commute_or_2" (formula "21") (term "0"))
            (rule "commute_and" (formula "16") (term "0,0,1,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "61") (inst "iv=iv"))
            (rule "andLeft" (formula "61"))
            (rule "inEqSimp_ltToLeq" (formula "62") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "62") (term "0,0,0"))
            (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "63"))
             (builtin "One Step Simplification" (formula "61"))
            (rule "true_left" (formula "61"))
            (rule "applyEq" (formula "61") (term "0,0,1,0") (ifseqformula "62"))
             (builtin "One Step Simplification" (formula "61"))
            (rule "true_left" (formula "61"))
            (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "77") (term "1,1,0") (inst "i=i") (inst "i_0=i_0"))
            (rule "replaceKnownSelect_taclet1110_12" (formula "77") (term "0,0,0,0,1,1,0"))
            (rule "replaceKnownSelect_taclet1110_27" (formula "77") (term "0,1,0,0,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_13" (formula "77") (term "0,0,0,0,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_28" (formula "77") (term "0,1,0,0,1,1,0"))
            (rule "replaceKnownSelect_taclet1110_27" (formula "77") (term "0,0,0,0,1,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet1110_27" (formula "77") (term "0,1,1,0,0,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_28" (formula "77") (term "0,0,0,0,1,0,1,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_28" (formula "77") (term "0,1,1,0,0,0,1,1,1,0"))
            (rule "replaceKnownSelect_taclet1110_12" (formula "77") (term "0,1,1,0,0,0,1,0,1,1,0"))
            (rule "replaceKnownSelect_taclet1110_12" (formula "77") (term "0,0,0,0,1,0,1,0,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_13" (formula "77") (term "0,1,1,0,0,0,1,0,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet1110_13" (formula "77") (term "0,0,0,0,1,0,1,0,1,1,0"))
            (rule "expand_inInt" (formula "77") (term "1,0,0,1,0,1,1,0"))
            (rule "expand_inInt" (formula "77") (term "1,0,0,1,1,1,0"))
            (rule "replace_int_MAX" (formula "77") (term "1,0,1,0,0,1,0,1,1,0"))
            (rule "replace_int_MIN" (formula "77") (term "0,1,1,0,0,1,0,1,1,0"))
            (rule "replace_int_MAX" (formula "77") (term "1,0,1,0,0,1,1,1,0"))
            (rule "replace_int_MIN" (formula "77") (term "0,1,1,0,0,1,1,1,0"))
            (rule "eqSymm" (formula "77") (term "0,0,1,1,0"))
            (rule "replace_known_left" (formula "77") (term "0,0,1,1,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "castedGetAny" (formula "77") (term "0,0,1,0,1,1,1,0"))
            (rule "castedGetAny" (formula "77") (term "0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "77") (term "1,0,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,1,0,0,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "77") (term "1,0,0,0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,1,0,0,0,1,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "77") (term "1,1,0,0,0,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "77") (term "0,0,0,0,1,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "77") (term "1,1,0,0,1,1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "77") (term "0,0,0,0,0,1,1,0"))
            (rule "applyEq" (formula "77") (term "0,1,0,0,1,0,0,0,1,1,1,0") (ifseqformula "19"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "1,0,0,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,1,0,0,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "77") (term "1,1,0,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "0,1,1,0,0,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "1,1,1,0,0,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "77") (term "1,1,1,0,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "1,0,0,0,1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,1,0,0,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "77") (term "1,1,0,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "0,1,1,0,0,0,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "1,1,1,0,0,0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "77") (term "1,1,1,0,0,0,1,1,1,0"))
            (rule "nnf_imp2or" (formula "77") (term "0,0,1,1,0"))
            (rule "nnf_imp2or" (formula "77") (term "0,1,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "0,0,0,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "0,0,1,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "1,0,0,0,1,1,0"))
            (rule "inEqSimp_notLeq" (formula "77") (term "0,1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,1,0,0,0,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,1,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "0,1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,1,0,0,0,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "77") (term "1,1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,1,1,0,0,0,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,1,1,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "1,1,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,1,1,0,0,0,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "0,0,0,0,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "77") (term "0,0,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,0,0,0,0,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "0,0,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_notLeq" (formula "77") (term "1,0,0,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "77") (term "1,0,0,1,0,0,0,0,1,1,0"))
            (rule "mul_literals" (formula "77") (term "0,1,0,0,1,0,0,0,0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "77") (term "0,0,1,0,0,0,0,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,1,0,0,0,0,1,1,0"))
            (rule "add_zero_left" (formula "77") (term "0,0,1,0,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "1,0,0,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "77") (term "1,1,0,0,0,0,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "0,0,0,1,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "77") (term "0,0,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,0,0,0,1,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,0,0,0,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "0,0,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,0,1,1,1,0"))
            (rule "inEqSimp_notLeq" (formula "77") (term "1,0,0,0,1,1,1,0"))
            (rule "polySimp_rightDist" (formula "77") (term "1,0,0,1,0,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "0,1,0,0,1,0,0,0,1,1,1,0"))
            (rule "polySimp_addAssoc" (formula "77") (term "0,0,1,0,0,0,1,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,1,0,0,0,1,1,1,0"))
            (rule "add_zero_left" (formula "77") (term "0,0,1,0,0,0,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "1,0,0,0,1,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0,0,1,1,1,0"))
            (rule "polySimp_elimOne" (formula "77") (term "1,1,0,0,0,1,1,1,0"))
            (rule "nnf_notAnd" (formula "77") (term "1,0,0,1,1,1,0"))
            (rule "inEqSimp_notGeq" (formula "77") (term "1,1,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,1,1,0,0,1,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,1,1,0,0,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "1,1,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,1,1,0,0,1,1,1,0"))
            (rule "inEqSimp_notLeq" (formula "77") (term "0,1,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,0,0,1,0,0,1,1,1,0"))
            (rule "add_literals" (formula "77") (term "0,0,0,1,0,0,1,1,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "0,1,0,0,1,1,1,0"))
            (rule "mul_literals" (formula "77") (term "1,0,1,0,0,1,1,1,0"))
            (rule "equiv_left" (formula "46"))
            (branch
               (rule "replace_known_left" (formula "86") (term "1") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "86"))
               (rule "applyEq" (formula "105") (term "1") (ifseqformula "46"))
               (rule "close" (formula "105") (ifseqformula "86"))
            )
            (branch
               (rule "replace_known_right" (formula "84") (term "1") (ifseqformula "90"))
                (builtin "One Step Simplification" (formula "84"))
               (rule "notLeft" (formula "84"))
               (rule "inEqSimp_geqRight" (formula "90"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "apply_eq_boolean" (formula "47") (term "3") (ifseqformula "90"))
               (rule "apply_eq_boolean" (formula "105") (term "1") (ifseqformula "90"))
                (builtin "One Step Simplification" (formula "105") (ifInst ""  (formula "89")))
               (rule "closeTrue" (formula "105"))
            )
         )
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "32")) (ifInst ""  (formula "26")) (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "28")) (ifInst ""  (formula "26")))
       (builtin "One Step Simplification" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "27"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "29"))
      (rule "eqSymm" (formula "24"))
      (rule "eqSymm" (formula "29") (term "1,0,1,0"))
      (rule "castedGetAny" (formula "30") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "29") (term "1,1,0,1,0"))
      (rule "castedGetAny" (formula "29") (term "0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0"))
      (rule "variableDeclarationAssign" (formula "38") (term "1"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclarationAssign" (formula "25") (term "1"))
      (rule "variableDeclaration" (formula "38") (term "1") (newnames "b_0_1"))
      (rule "variableDeclaration" (formula "25") (term "1") (newnames "b_0_2"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "b_0_3"))
      (rule "applyEqRigid" (formula "27") (term "5") (ifseqformula "22"))
      (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=java_util_Iterator_seq_0"))
      (rule "simplifySelectOfAnon" (formula "35"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "38")))
      (rule "replaceKnownSelect_taclet0_3" (formula "35") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "35") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,0,0") (ifseqformula "14"))
      (rule "eqSymm" (formula "36"))
      (rule "simplifySelectOfAnon" (formula "36"))
       (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "40")))
      (rule "replaceKnownSelect_taclet0_4" (formula "36") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "36") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replaceKnownSelect_taclet20_8" (formula "30") (term "0,1,1,0,0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "29") (term "0,1,1,0,0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "30") (term "0,0,0,1,0"))
      (rule "replaceKnownSelect_taclet20_8" (formula "29") (term "0,0,1,0,1,0"))
      (rule "replace_known_left" (formula "35") (term "1,0,1,0,0") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "37")))
      (rule "elementOfUnion" (formula "36") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "36") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "elementOfSingleton" (formula "36") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "eqSymm" (formula "36") (term "0,0,0"))
      (rule "replace_known_right" (formula "36") (term "0,0,0") (ifseqformula "44"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "ifthenelse_negated" (formula "36") (term "0"))
      (rule "elementOfUnion" (formula "35") (term "0,0"))
      (rule "elementOfSingleton" (formula "35") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "elementOfSingleton" (formula "35") (term "0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "hideAuxiliaryEq" (formula "35"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "29") (term "0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "30") (term "0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "30") (term "0,1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "29") (term "0,0,1,0,1,0"))
      (rule "eqSymm" (formula "35") (term "1"))
      (rule "pullOutSelect" (formula "29") (term "0,1,1,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "simplifySelectOfAnon" (formula "29"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "41")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replaceKnownSelect_taclet20_10" (formula "30") (term "0,1,1,0,1,0"))
      (rule "elementOfUnion" (formula "29") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "29") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "elementOfSingleton" (formula "29") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "ifthenelse_negated" (formula "29") (term "0"))
      (rule "pullOutSelect" (formula "29") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "42")))
      (rule "ifthenelse_negated" (formula "29") (term "0"))
      (rule "boxToDiamond" (formula "23") (term "1"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "notLeft" (formula "23"))
      (rule "boxToDiamond" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "34"))
      (rule "replaceKnownSelect_taclet20_7" (formula "34") (term "0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "34") (term "0,1,1"))
      (rule "andLeft" (formula "34"))
      (rule "inEqSimp_commuteLeq" (formula "34"))
      (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "simplifySelectOfAnon" (formula "35"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "41")))
      (rule "replaceKnownSelect_taclet20_12" (formula "34") (term "0"))
      (rule "replaceKnownSelect_taclet0_1" (formula "35") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "35") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replace_known_right" (formula "35") (term "0,0,1,0,0") (ifseqformula "40"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "15")))
      (rule "inEqSimp_commuteLeq" (formula "36"))
      (rule "elementOfUnion" (formula "35") (term "0,0"))
      (rule "elementOfSingleton" (formula "35") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "elementOfSingleton" (formula "35") (term "0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "hideAuxiliaryEq" (formula "35"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "34") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "35") (term "1"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "33"))
      (rule "true_left" (formula "33"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "31") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet20_10" (formula "31") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet20_10" (formula "31") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet20_10" (formula "31") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "31") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "31") (term "1,0,0,1"))
      (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "eqSymm" (formula "31"))
      (rule "castedGetAny" (formula "33") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "32") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "33") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0"))
      (rule "pullOutSelect" (formula "33") (term "0,1,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "simplifySelectOfAnon" (formula "33"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "44")))
      (rule "replaceKnownSelect_taclet20_14" (formula "31") (term "0,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "33") (term "0,1,0,0") (ifseqformula "14"))
      (rule "replaceKnownSelect_taclet20_14" (formula "34") (term "0,0,0,1,0"))
      (rule "applyEqRigid" (formula "34") (term "1,1,0,0,0") (ifseqformula "31"))
      (rule "elementOfUnion" (formula "33") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "33") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "elementOfSingleton" (formula "33") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "ifthenelse_negated" (formula "33") (term "0"))
      (rule "pullOutSelect" (formula "33") (term "1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "45")))
      (rule "ifthenelse_negated" (formula "33") (term "0"))
      (rule "commute_and" (formula "29") (term "0,0"))
      (rule "commute_and" (formula "30") (term "0,0"))
      (rule "commute_and" (formula "29") (term "0,0,1,0"))
      (rule "commute_and" (formula "35") (term "1,0,0"))
      (rule "commute_and" (formula "32") (term "0,0,0"))
      (rule "commute_and" (formula "32") (term "1,0,0"))
      (rule "commute_and" (formula "35") (term "0,0,0"))
      (rule "commute_and_2" (formula "29") (term "0,1,0"))
       (builtin "Use Operation Contract" (formula "43") (newnames "heapBefore_hasNext,result_50,exc_66") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "41"))
          (builtin "One Step Simplification" (formula "40"))
          (builtin "One Step Simplification" (formula "46"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "replaceKnownSelect_taclet20_12" (formula "39") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "39") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_7" (formula "39") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "39") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "41"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "40"))
         (rule "andLeft" (formula "40"))
         (rule "assignment" (formula "48") (term "1"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "42"))
         (rule "replaceKnownSelect_taclet20_12" (formula "42") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_12" (formula "42") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "42") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "42") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_7" (formula "42") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "42") (term "0,1,1"))
         (rule "andLeft" (formula "42"))
         (rule "inEqSimp_commuteLeq" (formula "43"))
         (rule "inEqSimp_commuteLeq" (formula "42"))
         (rule "lenNonNegative" (formula "10") (term "1"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "lenNonNegative" (formula "11") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "11"))
         (rule "shift_paren_and" (formula "34") (term "0,0"))
         (rule "shift_paren_and" (formula "37") (term "0,0"))
         (rule "commute_and_2" (formula "34") (term "0,0,0"))
         (rule "commute_and_2" (formula "37") (term "0,0,0"))
         (rule "lenNonNegative" (formula "8") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "8"))
          (builtin "Use Operation Contract" (formula "47") (newnames "heapBefore_hasNext_0,result_51,exc_67") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "48"))
             (builtin "One Step Simplification" (formula "47"))
             (builtin "One Step Simplification" (formula "46"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "replaceKnownSelect_taclet0_1" (formula "46") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "46") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet0_3" (formula "46") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "46") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "48"))
            (rule "andLeft" (formula "46"))
            (rule "andLeft" (formula "47"))
            (rule "andLeft" (formula "47"))
            (rule "assignment" (formula "52") (term "1"))
             (builtin "One Step Simplification" (formula "52"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "49"))
            (rule "replaceKnownSelect_taclet0_1" (formula "49") (term "0,1"))
            (rule "replaceKnownSelect_taclet0_1" (formula "49") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "49") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "49") (term "1,0"))
            (rule "replaceKnownSelect_taclet0_3" (formula "49") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "49") (term "0,1,1"))
            (rule "andLeft" (formula "49"))
            (rule "inEqSimp_commuteLeq" (formula "50"))
            (rule "inEqSimp_commuteLeq" (formula "49"))
             (builtin "Use Operation Contract" (formula "52") (newnames "heapBefore_hasNext_1,result_52,exc_68") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
            (branch "Post (hasNext)"
                (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "45")))
                (builtin "One Step Simplification" (formula "53"))
                (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "54")))
                (builtin "One Step Simplification" (formula "55"))
               (rule "replaceKnownSelect_taclet20_12" (formula "52") (term "0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "52") (term "0,1,0,1"))
               (rule "replaceKnownSelect_taclet20_7" (formula "52") (term "0,1,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "52") (term "0,1,1,0,1"))
               (rule "andLeft" (formula "52"))
               (rule "andLeft" (formula "53"))
               (rule "assignment" (formula "56") (term "1"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "55"))
               (rule "replaceKnownSelect_taclet20_12" (formula "55") (term "0,1"))
               (rule "replaceKnownSelect_taclet20_12" (formula "55") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "55") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "55") (term "1,0"))
               (rule "replaceKnownSelect_taclet20_7" (formula "55") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "55") (term "0,1,1"))
               (rule "andLeft" (formula "55"))
               (rule "inEqSimp_commuteLeq" (formula "56"))
               (rule "inEqSimp_commuteLeq" (formula "55"))
               (rule "methodCallEmpty" (formula "59") (term "1"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "commute_and" (formula "21") (term "0,0"))
               (rule "methodCallEmpty" (formula "58") (term "1"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "methodCallEmpty" (formula "57") (term "1"))
                (builtin "One Step Simplification" (formula "57"))
               (rule "emptyModality" (formula "61") (term "1"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "impRight" (formula "61"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "45") (term "0") (ifseqformula "57"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "notLeft" (formula "45"))
               (rule "replace_known_right" (formula "54") (term "1") (ifseqformula "56"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "notLeft" (formula "54"))
               (rule "apply_eq_boolean" (formula "58") (term "0,0") (ifseqformula "55"))
               (rule "apply_eq_boolean" (formula "54") (term "3") (ifseqformula "55"))
               (rule "apply_eq_boolean" (formula "45") (term "3") (ifseqformula "57"))
               (rule "emptyModality" (formula "59") (term "1"))
                (builtin "One Step Simplification" (formula "59"))
               (rule "notRight" (formula "59"))
               (rule "eqSymm" (formula "1"))
               (rule "emptyModality" (formula "59") (term "1"))
                (builtin "One Step Simplification" (formula "59"))
               (rule "apply_eq_boolean" (formula "31") (term "7") (ifseqformula "59"))
               (rule "methodCallEmpty" (formula "62") (term "1"))
               (rule "tryEmpty" (formula "62") (term "1"))
               (rule "emptyModality" (formula "62") (term "1"))
                (builtin "One Step Simplification" (formula "62"))
               (rule "notRight" (formula "62"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
                (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_50 = null   &   boolean::select(heap,                       self_50,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.cred.CredTool::exactInstance(self_50)     = TRUE   & (  ((  vals_3 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              vals_3,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  cols_2 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              cols_2,                              java.lang.Object::<created>)            = TRUE)<<SC>>)      & ((  record_7 = null          |   boolean::select(heapAtPre<<anonHeapFunction>>,                              record_7,                              java.lang.Object::<created>)            = TRUE)<<SC>>))   & ((  (\\forall int j;            ((   (  leq(Z(0(#)), j)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                  & lt(j,                       seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                          cols_2,                                          java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                     origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>              -> (\\exists int i;                    ((  (leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              record_7,                                              org.apache.commons.csv.CSVRecord::$key_seq)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                                                         origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>                      & (  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      record_7,                                                                      org.apache.commons.csv.CSVRecord::$key_seq),                                                          i))                         = (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                      cols_2,                                                                      java.util.Collection::$seq),                                                          j)))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<SC,                                                                                                                            origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 295\",\"[]\")>>       & ((  (\\forall int i;                ((   (  leq(Z(0(#)), i)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                      & lt(i,                           seqLen(Seq::select(heapAtPre<<anonHeapFunction>>,                                              cols_2,                                              java.util.Collection::$seq)))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<SC,                                                                                                                                         origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>                  -> (!(  (java.lang.String)(any::seqGet(Seq::select(heapAtPre<<anonHeapFunction>>,                                                                     cols_2,                                                                     java.util.Collection::$seq),                                                         i))                        = null)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>))<<origin(\"requires @ file CredTool.java @ line 298\",\"[]\")>>           & ((  (!(vals_3 = cols_2)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>)<<origin(\"requires @ file CredTool.java @ line 299\",\"[]\")>>               & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                             record_7)                   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                 vals_3)                       & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                                     cols_2)                           & ((  (!(vals_3 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                               & ((  (!(cols_2 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                    origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>                                   & (!(record_7 = null)<<origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<impl,                                                                                                                      origin(\"requires @ file CredTool.java @ line 309\",\"[]\")>>)<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>))<<SC>>)   & {_vals_3:=vals_3      || _cols_2:=cols_2      || _record_7:=record_7}       \\[{           exc_64=null;try {             self_50.addInputCols(_vals_3,_cols_2,_record_7)@de.polyas.core3.open.cred.CredTool;           }   catch (java.lang.Throwable e) {             exc_64=e;           }         }\\] (  selfAtPost_50 = self_50              & excAtPost_64 = exc_64              & heapAtPost = heap)) ")
            )
            (branch "Exceptional Post (hasNext)"
                (builtin "One Step Simplification" (formula "53"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0") (ifseqformula "17"))
               (rule "replaceKnownSelect_taclet20_12" (formula "52") (term "0,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "52") (term "0,1,0,0,1"))
               (rule "replaceKnownSelect_taclet20_7" (formula "52") (term "0,1,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "52") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "52"))
               (rule "andLeft" (formula "53"))
               (rule "andLeft" (formula "52"))
               (rule "andLeft" (formula "54"))
               (rule "notLeft" (formula "52"))
               (rule "close" (formula "56") (ifseqformula "55"))
            )
            (branch "Pre (hasNext)"
                (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "45")))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "52"))
               (rule "replaceKnownSelect_taclet20_12" (formula "52") (term "0,1"))
               (rule "replaceKnownSelect_taclet20_12" (formula "52") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "52") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "52") (term "1,0"))
               (rule "replaceKnownSelect_taclet20_7" (formula "52") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "52") (term "0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "52") (term "0"))
               (rule "replace_known_left" (formula "52") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "inEqSimp_commuteLeq" (formula "52"))
               (rule "close" (formula "52") (ifseqformula "40"))
            )
            (branch "Null reference (it = null)"
                (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "55")))
               (rule "closeTrue" (formula "52"))
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "46"))
             (builtin "One Step Simplification" (formula "48"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "1,0") (ifseqformula "17"))
            (rule "replaceKnownSelect_taclet0_1" (formula "46") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "46") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet0_3" (formula "46") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "46") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "46"))
            (rule "andLeft" (formula "46"))
            (rule "andLeft" (formula "48"))
            (rule "notLeft" (formula "46"))
            (rule "close" (formula "49") (ifseqformula "48"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "47"))
            (rule "wellFormedAnonEQ" (formula "47") (term "1") (ifseqformula "17"))
            (rule "replace_known_left" (formula "47") (term "1,1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "24")))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "47"))
            (rule "replaceKnownSelect_taclet0_1" (formula "47") (term "1,0"))
            (rule "replaceKnownSelect_taclet0_1" (formula "47") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "47") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_2" (formula "47") (term "0,1"))
            (rule "replaceKnownSelect_taclet0_3" (formula "47") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "47") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "47") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "47") (term "1"))
             (builtin "Use Operation Contract" (formula "46") (newnames "heapBefore_hasNext_1,result_52,exc_68") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
            (branch "Post (hasNext)"
                (builtin "One Step Simplification" (formula "46"))
                (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "45")))
                (builtin "One Step Simplification" (formula "47"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "replaceKnownSelect_taclet20_12" (formula "46") (term "0,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "46") (term "0,1,0,0,1"))
               (rule "replaceKnownSelect_taclet20_7" (formula "46") (term "0,1,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "46") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "46"))
               (rule "andLeft" (formula "47"))
               (rule "andLeft" (formula "47"))
               (rule "assignment" (formula "50") (term "1"))
                (builtin "One Step Simplification" (formula "50"))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "49"))
               (rule "replaceKnownSelect_taclet20_12" (formula "49") (term "0,1"))
               (rule "replaceKnownSelect_taclet20_12" (formula "49") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "49") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "49") (term "1,0"))
               (rule "replaceKnownSelect_taclet20_7" (formula "49") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "49") (term "0,1,1"))
               (rule "andLeft" (formula "49"))
               (rule "inEqSimp_commuteLeq" (formula "49"))
               (rule "inEqSimp_commuteLeq" (formula "49"))
               (rule "methodCallEmpty" (formula "53") (term "1"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
               (rule "andLeft" (formula "20"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
               (rule "commute_and" (formula "21") (term "0,0"))
               (rule "methodCallEmpty" (formula "51") (term "1"))
                (builtin "One Step Simplification" (formula "51"))
               (rule "emptyModality" (formula "55") (term "1"))
                (builtin "One Step Simplification" (formula "55"))
               (rule "impRight" (formula "55"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "45") (term "0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "notLeft" (formula "45"))
               (rule "replace_known_right" (formula "48") (term "1") (ifseqformula "50"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "notLeft" (formula "48"))
               (rule "apply_eq_boolean" (formula "48") (term "3") (ifseqformula "49"))
               (rule "apply_eq_boolean" (formula "52") (term "0,0") (ifseqformula "49"))
               (rule "apply_eq_boolean" (formula "45") (term "3") (ifseqformula "51"))
               (rule "emptyModality" (formula "52") (term "1"))
                (builtin "One Step Simplification" (formula "52"))
               (rule "apply_eq_boolean" (formula "30") (term "7") (ifseqformula "52"))
               (rule "methodCallEmpty" (formula "56") (term "1"))
               (rule "tryEmpty" (formula "56") (term "1"))
               (rule "emptyModality" (formula "56") (term "1"))
                (builtin "One Step Simplification" (formula "56"))
               (rule "notRight" (formula "56"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "eqSymm" (formula "3"))
               (rule "eqSymm" (formula "2"))
               (rule "inEqSimp_ltRight" (formula "53"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
               (rule "polySimp_addComm0" (formula "1") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0,1,0"))
               (rule "applyEq" (formula "19") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "18") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "6"))
               (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "eqSymm" (formula "24"))
               (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "eqSymm" (formula "26"))
               (rule "replace_known_left" (formula "25") (term "0,0,0,1,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "10")))
               (rule "eqSymm" (formula "25") (term "1,0"))
               (rule "replace_known_left" (formula "47") (term "0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "55") (term "1,1") (ifseqformula "23"))
               (rule "applyEq" (formula "49") (term "0") (ifseqformula "32"))
               (rule "applyEq" (formula "51") (term "1") (ifseqformula "4"))
               (rule "applyEq" (formula "48") (term "1") (ifseqformula "4"))
               (rule "applyEq" (formula "14") (term "0,0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "34") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "29") (term "4") (ifseqformula "28"))
               (rule "applyEq" (formula "34") (term "6") (ifseqformula "33"))
               (rule "applyEq" (formula "18") (term "0,0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "14") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "19") (term "0,0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "6"))
               (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "applyEqReverse" (formula "43") (term "1,0") (ifseqformula "42"))
               (rule "hideAuxiliaryEq" (formula "42"))
               (rule "replace_known_left" (formula "42") (term "0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "applyEqReverse" (formula "43") (term "0,0,0,1,0") (ifseqformula "42"))
               (rule "applyEqReverse" (formula "40") (term "0,0") (ifseqformula "42"))
               (rule "hideAuxiliaryEq" (formula "42"))
               (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "applyEqReverse" (formula "38") (term "0,1,1,0,0,1,0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "40") (term "0,1") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "41") (term "0,0,0,1,0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "38") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "41") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "37"))
               (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "37"))
               (rule "hideAuxiliaryEq" (formula "37"))
               (rule "replace_known_left" (formula "36") (term "0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "applyEqReverse" (formula "40") (term "0,0,0,1,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "37") (term "0,1,1,0,0,1,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "40") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "40") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "39") (term "0,1") (ifseqformula "36"))
               (rule "applyEqReverse" (formula "37") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "36"))
               (rule "hideAuxiliaryEq" (formula "36"))
               (rule "applyEq" (formula "13") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "17") (term "0,0,1") (ifseqformula "6"))
               (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "6"))
               (rule "applyEq" (formula "45") (term "4") (ifseqformula "44"))
               (rule "applyEq" (formula "55") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "45") (term "5") (ifseqformula "4"))
               (rule "applyEq" (formula "13") (term "0,0,0,1,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "42") (term "4") (ifseqformula "41"))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "4"))
               (rule "eqSymm" (formula "31"))
               (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "22"))
               (rule "qeq_literals" (formula "49") (term "0"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "inEqSimp_geqRight" (formula "49"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0"))
               (rule "applyEq" (formula "33") (term "1") (ifseqformula "3"))
               (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "14") (term "0,0,1,1,0,0,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "6") (term "0") (ifseqformula "7"))
               (rule "applyEq" (formula "13") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "9") (term "0,0") (ifseqformula "6"))
               (rule "apply_eq_monomials" (formula "2") (term "1,0") (ifseqformula "23"))
               (rule "polySimp_rightDist" (formula "2") (term "0,1,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "1,0,1,0"))
               (rule "polySimp_pullOutFactor0b" (formula "2") (term "1,0"))
               (rule "add_literals" (formula "2") (term "1,1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,1,0"))
               (rule "add_zero_right" (formula "2") (term "1,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "applyEq" (formula "33") (term "6") (ifseqformula "3"))
               (rule "applyEqRigid" (formula "43") (term "0") (ifseqformula "31"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "37"))
               (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "applyEq" (formula "34") (term "0,0,0,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "33") (term "0,0,1,0,0,1,0") (ifseqformula "23"))
               (rule "applyEqRigid" (formula "31") (term "8") (ifseqformula "29"))
               (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "applyEq" (formula "17") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "32"))
               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "21"))
               (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
               (rule "qeq_literals" (formula "1") (term "0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Exceptional Post (hasNext)"
                (builtin "One Step Simplification" (formula "46"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,1,0") (ifseqformula "17"))
               (rule "replaceKnownSelect_taclet20_12" (formula "46") (term "0,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "46") (term "0,1,0,0,1"))
               (rule "replaceKnownSelect_taclet20_7" (formula "46") (term "0,1,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "46") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "46"))
               (rule "andLeft" (formula "47"))
               (rule "andLeft" (formula "46"))
               (rule "andLeft" (formula "48"))
               (rule "notLeft" (formula "46"))
               (rule "close" (formula "50") (ifseqformula "49"))
            )
            (branch "Pre (hasNext)"
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "45")))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "46"))
               (rule "replaceKnownSelect_taclet20_12" (formula "46") (term "0,1"))
               (rule "replaceKnownSelect_taclet20_12" (formula "46") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "46") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "46") (term "1,0"))
               (rule "replaceKnownSelect_taclet20_7" (formula "46") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "46") (term "0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "46") (term "0"))
               (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "inEqSimp_commuteLeq" (formula "46"))
               (rule "close" (formula "46") (ifseqformula "40"))
            )
            (branch "Null reference (it = null)"
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "49")))
               (rule "closeTrue" (formula "46"))
            )
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "49")))
            (rule "closeTrue" (formula "47"))
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "44"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "39") (term "0,1,0") (ifseqformula "14"))
         (rule "replaceKnownSelect_taclet20_12" (formula "39") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "39") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_7" (formula "39") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "39") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "39"))
         (rule "andLeft" (formula "41"))
         (rule "notLeft" (formula "39"))
         (rule "close" (formula "42") (ifseqformula "41"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "43"))
         (rule "wellFormedAnon" (formula "43") (term "1"))
         (rule "wellFormedAnonEQ" (formula "43") (term "0,1") (ifseqformula "14"))
         (rule "replace_known_left" (formula "43") (term "1,1") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "21")) (ifInst ""  (formula "13")))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "43"))
         (rule "replaceKnownSelect_taclet20_12" (formula "43") (term "0,1"))
         (rule "replaceKnownSelect_taclet20_12" (formula "43") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "43") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_13" (formula "43") (term "1,0"))
         (rule "replaceKnownSelect_taclet20_7" (formula "43") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_9" (formula "43") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "43") (term "0"))
         (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "36"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "inEqSimp_commuteLeq" (formula "43"))
         (rule "close" (formula "43") (ifseqformula "37"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "42")))
         (rule "closeTrue" (formula "43"))
      )
   )
)
(branch "Exceptional Post (iterator)"
    (builtin "One Step Simplification" (formula "14"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "14"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "notLeft" (formula "15"))
   (rule "close" (formula "19") (ifseqformula "18"))
)
(branch "Pre (iterator)"
    (builtin "One Step Simplification" (formula "13"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,0,0"))
   (rule "applyEq" (formula "11") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "9") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "8") (term "0,0,1,1,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "2"))
   (rule "eqSymm" (formula "10"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "12") (term "0,0,0,1,0,0,0,0,0,0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "11") (term "0,0,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "8") (term "0,0,0,1,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "9") (term "0,0,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "12") (term "0,0,0,0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "2"))
   (rule "eqSymm" (formula "10"))
   (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0,0,0") (ifseqformula "10"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_and_subsumption3" (formula "11") (term "0,0,0"))
   (rule "leq_literals" (formula "11") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "inEqSimp_and_subsumption3" (formula "12") (term "0,0,0"))
   (rule "leq_literals" (formula "12") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "mul_literals" (formula "11") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "12") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,0,0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
   (rule "closeTrue" (formula "13"))
)
(branch "Null reference (_cols_2 = null)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")))
   (rule "closeTrue" (formula "13"))
)
)
}
