\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Dec 04 17:25:13 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "src";

\problem {
!(  wellFormed(heapAtPre<<anonHeapFunction>>)
  & heap = heapAtPre<<anonHeapFunction>>
  & !self_53 = null
  &   boolean::select(heap,
                      self_53,
                      java.lang.Object::<created>)
    = TRUE
  &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_53)
    = TRUE
  & ((  p_3 = null
      |   boolean::select(heapAtPre<<anonHeapFunction>>,
                          p_3,
                          java.lang.Object::<created>)
        = TRUE)<<SC>>)
  & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,
                                self_53)<<impl>>
      & (!(p_3 = null)<<origin("requires @ file ECGroup.java @ line 49","[]")>>)<<impl,
                                                                                  origin("requires @ file ECGroup.java @ line 49","[]")>>)<<SC>>)
  & {_p_3:=p_3}
      \[{
          exc_66=null;try {
            result_50=self_53.asBytes(_p_3)@de.polyas.core3.open.crypto.groups.ECGroup;
          }   catch (java.lang.Throwable e) {
            exc_66=e;
          }
        }\] (  selfAtPost_53 = self_53
             & resultAtPost_50 = result_50
             & excAtPost_66 = exc_66
             & heapAtPost = heap))

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "155")

(branch "dummy ID"
(rule "notRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "7") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "7") (term "1,0,0,1"))
(rule "eqSymm" (formula "2"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "5"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "boxToDiamond" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "6"))
(rule "true_left" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "6"))
(rule "true_left" (formula "6"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_asBytes,savedHeapBefore_asBytes"))
 (builtin "One Step Simplification" (formula "9"))
(rule "returnUnfold" (formula "9") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "x_arr"))
 (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_getEncoded,result_51,exc_67,heapAfter_getEncoded,anon_heap_getEncoded") (contract "org.bouncycastle.math.ec.ECPoint[org.bouncycastle.math.ec.ECPoint::getEncoded(boolean)].JML normal_behavior operation contract.0"))
(branch "Post (getEncoded)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "15")))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "methodCallReturn" (formula "17") (term "1"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallEmpty" (formula "17") (term "1"))
   (rule "tryEmpty" (formula "17") (term "1"))
   (rule "emptyModality" (formula "17") (term "1"))
    (opengoal "!(  wellFormed(heapAtPre<<anonHeapFunction>>)   & heap = heapAtPre<<anonHeapFunction>>   & !self_53 = null   &   boolean::select(heap,                       self_53,                       java.lang.Object::<created>)     = TRUE   &   de.polyas.core3.open.crypto.groups.ECGroup::exactInstance(self_53)     = TRUE   & ((  p_3 = null       |   boolean::select(heapAtPre<<anonHeapFunction>>,                           p_3,                           java.lang.Object::<created>)         = TRUE)<<SC>>)   & ((  java.lang.Object::<inv>(heapAtPre<<anonHeapFunction>>,                                 self_53)<<impl>>       & (!(p_3 = null)<<origin(\"requires @ file ECGroup.java @ line 49\",\"[]\")>>)<<impl,                                                                                   origin(\"requires @ file ECGroup.java @ line 49\",\"[]\")>>)<<SC>>)   & {_p_3:=p_3}       \\[{           exc_66=null;try {             result_50=self_53.asBytes(_p_3)@de.polyas.core3.open.crypto.groups.ECGroup;           }   catch (java.lang.Throwable e) {             exc_66=e;           }         }\\] (  selfAtPost_53 = self_53              & resultAtPost_50 = result_50              & excAtPost_66 = exc_66              & heapAtPost = heap)) ")
)
(branch "Exceptional Post (getEncoded)"
    (builtin "One Step Simplification" (formula "11"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (getEncoded)"
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "applyEq" (formula "6") (term "0,1,0") (ifseqformula "2"))
   (rule "applyEq" (formula "8") (term "0,0") (ifseqformula "2"))
   (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "2"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "9"))
   (rule "closeTrue" (formula "9"))
)
(branch "Null reference (_p_3 = null)"
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
   (rule "closeTrue" (formula "9"))
)
)
}
