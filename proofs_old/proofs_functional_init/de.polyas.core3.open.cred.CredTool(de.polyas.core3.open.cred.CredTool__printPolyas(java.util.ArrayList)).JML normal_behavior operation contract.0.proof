\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 02:16:34 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 02:16:34 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printPolyas(java.util.ArrayList)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:printPolyas(java.util.ArrayList)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "66822")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cols_5,result_299,exc_341,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "4"))
(rule "true_left" (formula "4"))
(rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "5"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0,0,0"))
(rule "castDel" (formula "5") (term "0,0,0,1,0,0"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "applyEq" (formula "12") (term "0") (ifseqformula "5"))
(rule "commute_and" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_printPolyas,savedHeapBefore_printPolyas"))
 (builtin "One Step Simplification" (formula "15"))
(rule "returnUnfold" (formula "15") (term "1") (inst "#v0=c"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_5"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "15") (term "1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "var"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=c_6"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_6"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "15") (term "1") (inst "#v0=c_7"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "c_7"))
(rule "activeUseStaticFieldReadAccess" (formula "15") (term "1"))
(rule "assignment_read_static_attribute" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
 (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_withDelimiter,result_300,exc_342,heapAfter_withDelimiter,anon_heap_withDelimiter") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::withDelimiter(char)].JML normal_behavior operation contract.0"))
(branch "Post (withDelimiter)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment" (formula "21") (term "1"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "10"))
   (rule "notLeft" (formula "10"))
   (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_1"))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_2"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_3"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_4"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "20") (term "1"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_5"))
   (rule "assignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "variableDeclarationAssign" (formula "20") (term "1"))
   (rule "variableDeclaration" (formula "20") (term "1") (newnames "var_6"))
   (rule "stringAssignment" (formula "20") (term "1"))
    (builtin "One Step Simplification" (formula "22"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "8"))
    (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_toList,result_301,exc_343,heapAfter_toList,anon_heap_toList") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toList(java.util.ArrayList,java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (toList)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "18"))
      (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "castedGetAny" (formula "15") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "blockEmpty" (formula "30") (term "1"))
      (rule "variableDeclarationAssign" (formula "30") (term "1"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "var_7"))
      (rule "stringAssignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "1"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "13"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0") (ifseqformula "9"))
      (rule "pullOutSelect" (formula "16") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_0"))
      (rule "applyEq" (formula "17") (term "0,0,0,1,0") (ifseqformula "16"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "21")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,0,0") (ifseqformula "9"))
      (rule "ifthenelse_negated" (formula "16") (term "0"))
      (rule "pullOutSelect" (formula "16") (term "1,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "22")))
      (rule "ifthenelse_negated" (formula "16") (term "0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "18"))
      (rule "notLeft" (formula "18"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "18"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "insert_constant_string_value" (formula "18") (term "0,0,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "insert_constant_string_value" (formula "18") (term "0,0,1,0,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "insert_constant_string_value" (formula "18") (term "0,0,1,0,0,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "castDel" (formula "18") (term "0,0,0,1,0,0,0,0"))
      (rule "castDel" (formula "18") (term "0,0,0,1,0,0,0"))
      (rule "castDel" (formula "18") (term "0,0,0,1,0,0"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "20"))
      (rule "notLeft" (formula "19"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "19"))
      (rule "notLeft" (formula "18"))
      (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "18"))
      (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "18"))
      (rule "hideAuxiliaryEq" (formula "18"))
      (rule "eqSymm" (formula "18"))
      (rule "applyEq" (formula "18") (term "1") (ifseqformula "7"))
      (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "applyEqReverse" (formula "20") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "commute_or_2" (formula "14"))
      (rule "commute_or_2" (formula "1"))
      (rule "commute_and" (formula "17") (term "0,0"))
       (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore_toList_0,result_302,exc_344,heapAfter_toList_0,anon_heap_toList_0") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toList(java.util.ArrayList,java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (toList)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,1,0") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "castedGetAny" (formula "23") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
         (rule "assignment" (formula "39") (term "1"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "blockEmpty" (formula "39") (term "1"))
         (rule "pullOutSelect" (formula "23") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "applyEq" (formula "24") (term "0,0,0,1,0") (ifseqformula "23"))
         (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0,0") (ifseqformula "9"))
         (rule "ifthenelse_negated" (formula "23") (term "0"))
         (rule "pullOutSelect" (formula "23") (term "1,0") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,0") (ifseqformula "9"))
         (rule "ifthenelse_negated" (formula "23") (term "0"))
         (rule "pullOutSelect" (formula "23") (term "1,0") (inst "selectSK=java_util_Collection_seq_4"))
         (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "30")))
         (rule "ifthenelse_negated" (formula "23") (term "0"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_2"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_4" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "26"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "insert_constant_string_value" (formula "26") (term "0,0,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "insert_constant_string_value" (formula "26") (term "0,0,1,0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "insert_constant_string_value" (formula "26") (term "0,0,1,0,0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "castDel" (formula "26") (term "0,0,0,1,0,0,0,0"))
         (rule "castDel" (formula "26") (term "0,0,0,1,0,0,0"))
         (rule "castDel" (formula "26") (term "0,0,0,1,0,0"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "28"))
         (rule "notLeft" (formula "27"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "28"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "28"))
         (rule "andLeft" (formula "26"))
         (rule "notLeft" (formula "28"))
         (rule "notLeft" (formula "27"))
         (rule "notLeft" (formula "26"))
         (rule "applyEqRigid" (formula "31") (term "0") (ifseqformula "26"))
         (rule "pullOutSelect" (formula "26") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_1"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "26"))
         (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "replaceKnownSelect_taclet00_18" (formula "26") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_20" (formula "26") (term "0"))
         (rule "simplifySelectOfAnonEQ" (formula "27") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "replaceKnownSelect_taclet00_6" (formula "27") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "27") (term "0"))
         (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "26"))
         (rule "applyEqReverse" (formula "31") (term "0") (ifseqformula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_9" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_11" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_12" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_14" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "replaceKnownSelect_taclet00_15" (formula "1") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "1") (term "0"))
         (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "commute_or_2" (formula "21") (term "0"))
         (rule "commute_or_2" (formula "24") (term "0,0"))
         (rule "commute_and" (formula "25") (term "0,0"))
         (rule "commute_or_2" (formula "21"))
         (rule "lenNonNegative" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "6"))
          (builtin "Use Operation Contract" (formula "40") (newnames "heapBefore_toArray,result_303,exc_345,heapAfter_toArray,anon_heap_toArray") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toArray(java.util.ArrayList)].JML normal_behavior operation contract.0"))
         (branch "Post (toArray)"
             (builtin "One Step Simplification" (formula "29"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "andLeft" (formula "29"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,1,0") (ifseqformula "29"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1,1,0") (ifseqformula "21"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,1,1,0") (ifseqformula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0,1,1,0") (ifseqformula "10"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "33"))
            (rule "assignment" (formula "47") (term "1"))
             (builtin "One Step Simplification" (formula "47"))
            (rule "blockEmpty" (formula "47") (term "1"))
            (rule "nonNull" (formula "31") (inst "i=i"))
            (rule "sub_literals" (formula "31") (term "2,1,0,1,1"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "greater_literals" (formula "31") (term "0,1"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "31"))
            (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0"))
            (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "32"))
            (rule "notLeft" (formula "32"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_3"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet000_24" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_25" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "32"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "insert_constant_string_value" (formula "32") (term "0,0,1,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "insert_constant_string_value" (formula "32") (term "0,0,1,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "insert_constant_string_value" (formula "32") (term "0,0,1,0,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "castDel" (formula "32") (term "0,0,0,1,0,0,0,0"))
            (rule "castDel" (formula "32") (term "0,0,0,1,0,0"))
            (rule "castDel" (formula "32") (term "0,0,0,1,0,0,0"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "33"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "34"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "34"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "34"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "34"))
            (rule "notLeft" (formula "32"))
            (rule "notLeft" (formula "32"))
            (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "32"))
            (rule "pullOutSelect" (formula "32") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_2"))
            (rule "applyEq" (formula "38") (term "0") (ifseqformula "32"))
            (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "replaceKnownSelect_taclet000_26" (formula "32") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_28" (formula "32") (term "0"))
            (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "29"))
             (builtin "One Step Simplification" (formula "33"))
            (rule "replaceKnownSelect_taclet000_27" (formula "33") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_28" (formula "33") (term "0"))
            (rule "applyEqReverse" (formula "37") (term "0") (ifseqformula "32"))
            (rule "hideAuxiliaryEq" (formula "32"))
            (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet000_29" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_30" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet000_33" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_34" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replaceKnownSelect_taclet000_31" (formula "1") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_32" (formula "1") (term "0"))
            (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or_2" (formula "30"))
            (rule "commute_and" (formula "31") (term "0,0"))
            (rule "commute_or_2" (formula "30") (term "0"))
            (rule "commute_or_2" (formula "30") (term "0,0"))
            (rule "commute_or_2" (formula "30") (term "0"))
            (rule "commute_or_2" (formula "30"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
            (rule "andLeft" (formula "17"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "16") (inst "iv=iv"))
            (rule "andLeft" (formula "16"))
            (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0"))
            (rule "applyEq" (formula "17") (term "0,0,1,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "lenNonNegative" (formula "18") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18"))
             (builtin "Use Operation Contract" (formula "47") (newnames "heapBefore_withHeader,result_304,exc_346,heapAfter_withHeader,anon_heap_withHeader") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::withHeader([Ljava.lang.String)].JML normal_behavior operation contract.0"))
            (branch "Post (withHeader)"
                (builtin "One Step Simplification" (formula "49"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "andLeft" (formula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,1,0") (ifseqformula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,1,0") (ifseqformula "30"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1,1,0") (ifseqformula "22"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,1,1,0") (ifseqformula "14"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0,1,1,0") (ifseqformula "10"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "notLeft" (formula "39"))
               (rule "replace_known_right" (formula "37") (term "0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "assignment" (formula "53") (term "1"))
                (builtin "One Step Simplification" (formula "53"))
               (rule "blockEmpty" (formula "53") (term "1"))
               (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "38"))
               (rule "notLeft" (formula "38"))
               (rule "pullOutSelect" (formula "38") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_4"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replaceKnownSelect_taclet0000_35" (formula "1") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_36" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "39") (term "0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_or_2" (formula "37") (term "0"))
               (rule "commute_or_2" (formula "37") (term "0,0"))
               (rule "commute_or_2" (formula "37") (term "0,0,0"))
               (rule "commute_or_2" (formula "37") (term "0,0"))
               (rule "commute_or_2" (formula "37") (term "0"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "25") (inst "iv=iv"))
               (rule "andLeft" (formula "25"))
               (rule "inEqSimp_commuteLeq" (formula "26") (term "0,0,0"))
               (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "applyEq" (formula "25") (term "0,1,1,0,0") (ifseqformula "26"))
               (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
               (rule "andLeft" (formula "24"))
               (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
               (rule "applyEq" (formula "25") (term "0,1,1,0,0") (ifseqformula "26"))
               (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
               (rule "andLeft" (formula "26"))
               (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
               (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "lenNonNegative" (formula "27") (term "1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "27"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "50") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "5"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "0") (ifseqformula "6"))
               (rule "applyEq" (formula "11") (term "1,0,1") (ifseqformula "12"))
               (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "true_left" (formula "11"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "6"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "55") (term "0") (ifseqformula "7"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "56"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "arrayLengthNotNegative" (formula "38") (term "1,0,0,0"))
               (rule "arrayLengthIsAnInt" (formula "39") (term "1,0,0,0"))
               (rule "expand_inInt" (formula "39"))
               (rule "replace_int_MIN" (formula "39") (term "0,1"))
               (rule "replace_int_MAX" (formula "39") (term "1,0"))
               (rule "andLeft" (formula "39"))
               (rule "inEqSimp_commuteLeq" (formula "40"))
               (rule "methodCallWithAssignmentWithinClass" (formula "61") (term "1") (inst "#v0=c_6"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "c_8"))
               (rule "variableDeclarationFinalAssign" (formula "61") (term "1"))
               (rule "variableDeclarationFinal" (formula "61") (term "1") (newnames "csv"))
               (rule "assignment" (formula "61") (term "1"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "methodBodyExpand" (formula "61") (term "1") (newnames "heapBefore_print,savedHeapBefore_print"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "returnUnfold" (formula "61") (term "1") (inst "#v0=c_9"))
               (rule "variableDeclarationAssign" (formula "61") (term "1"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "c_9"))
               (rule "methodCallWithAssignmentUnfoldArguments" (formula "61") (term "1"))
               (rule "variableDeclarationAssign" (formula "61") (term "1"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_8"))
               (rule "assignment" (formula "61") (term "1"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "variableDeclarationAssign" (formula "61") (term "1"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "var_9"))
               (rule "instanceCreationAssignment" (formula "61") (term "1") (inst "#v0=s"))
               (rule "variableDeclarationAssign" (formula "61") (term "1"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "s"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "61") (term "1") (inst "#v0=s_1"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "s_1"))
               (rule "methodBodyExpand" (formula "61") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                (builtin "One Step Simplification" (formula "61"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "__NEW__"))
               (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "61") (term "1") (inst "#v0=s_2"))
               (rule "variableDeclaration" (formula "61") (term "1") (newnames "s_2"))
               (rule "allocateInstance" (formula "61"))
                (builtin "One Step Simplification" (formula "62"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "45"))
               (rule "wellFormedAnonEQ" (formula "1") (term "0,0,1,0") (ifseqformula "37"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "45"))
               (rule "wellFormedAnonEQ" (formula "1") (term "0,0,0,1,0") (ifseqformula "28"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0") (ifseqformula "37"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "28"))
               (rule "wellFormedAnonEQ" (formula "1") (term "0,0,0,0,1,0") (ifseqformula "20"))
               (rule "wellFormedAnonEQ" (formula "1") (term "0,0,0,0,0,1,0") (ifseqformula "16"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0") (ifseqformula "20"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,1,0") (ifseqformula "16"))
               (rule "andLeft" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "16")) (ifInst ""  (formula "20")) (ifInst ""  (formula "28")) (ifInst ""  (formula "37")))
               (rule "notLeft" (formula "1"))
               (rule "orRight" (formula "48"))
               (rule "orRight" (formula "48"))
               (rule "orRight" (formula "48"))
               (rule "orRight" (formula "48"))
               (rule "orRight" (formula "48"))
               (rule "blockEmpty" (formula "69") (term "1"))
               (rule "assignment" (formula "69") (term "1"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodBodyExpand" (formula "69") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "assignment_write_attribute_this" (formula "69") (term "1"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallWithinClass" (formula "69") (term "1"))
               (rule "methodBodyExpand" (formula "69") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallSuper" (formula "69") (term "1"))
               (rule "methodBodyExpand" (formula "69") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "blockEmpty" (formula "69") (term "1"))
               (rule "methodCallReturnIgnoreResult" (formula "69") (term "1"))
               (rule "methodCallReturn" (formula "69") (term "1"))
               (rule "assignment" (formula "69") (term "1"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "blockEmpty" (formula "69") (term "1"))
               (rule "assignment" (formula "69") (term "1"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodBodyExpand" (formula "69") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallSuper" (formula "69") (term "1"))
               (rule "methodBodyExpand" (formula "69") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                (builtin "One Step Simplification" (formula "69"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "methodCallEmpty" (formula "69") (term "1"))
               (rule "blockEmpty" (formula "69") (term "1"))
               (rule "assignment_write_attribute" (formula "69") (term "1"))
               (branch "Normal Execution (s != null)"
                   (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "54")))
                   (builtin "One Step Simplification" (formula "70"))
                  (rule "false_right" (formula "69"))
                  (rule "assignment" (formula "69") (term "1"))
                   (builtin "One Step Simplification" (formula "69"))
                   (builtin "Use Operation Contract" (formula "69") (newnames "heapBefore_print_0,result_305,exc_347,heapAfter_print,anon_heap_print") (contract "org.apache.commons.csv.CSVFormat[org.apache.commons.csv.CSVFormat::print(java.lang.Appendable)].JML normal_behavior operation contract.0"))
                  (branch "Post (print)"
                      (builtin "One Step Simplification" (formula "71"))
                      (builtin "One Step Simplification" (formula "49"))
                     (rule "andLeft" (formula "49"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,1,0") (ifseqformula "49"))
                     (rule "andLeft" (formula "50"))
                     (rule "andLeft" (formula "50"))
                     (rule "andLeft" (formula "52"))
                     (rule "andLeft" (formula "52"))
                     (rule "notLeft" (formula "53"))
                     (rule "replace_known_right" (formula "51") (term "0") (ifseqformula "53"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "dismissNonSelectedField" (formula "51") (term "0,0"))
                     (rule "assignment" (formula "75") (term "1"))
                      (builtin "One Step Simplification" (formula "75"))
                     (rule "blockEmpty" (formula "75") (term "1"))
                     (rule "pullOutSelect" (formula "51") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
                     (rule "simplifySelectOfCreate" (formula "51"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "61")))
                     (rule "castDel" (formula "51") (term "1,0"))
                     (rule "sortsDisjointModuloNull" (formula "51") (term "0,0"))
                     (rule "replace_known_right" (formula "51") (term "0,0,0") (ifseqformula "61"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "54")))
                     (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "45"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "54")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "37"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "28"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0,0") (ifseqformula "20"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0,0,0") (ifseqformula "16"))
                     (rule "ifthenelse_negated" (formula "51") (term "0"))
                     (rule "pullOutSelect" (formula "51") (term "1,0") (inst "selectSK=java_lang_Object_created__1"))
                     (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "37"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "55")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "28"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "20"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0,0") (ifseqformula "16"))
                     (rule "ifthenelse_negated" (formula "51") (term "0"))
                     (rule "pullOutSelect" (formula "51") (term "1,0") (inst "selectSK=java_lang_Object_created__2"))
                     (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "56")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "20"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0,0") (ifseqformula "16"))
                     (rule "ifthenelse_negated" (formula "51") (term "0"))
                     (rule "pullOutSelect" (formula "51") (term "1,0") (inst "selectSK=java_lang_Object_created__3"))
                     (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "57")))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "51") (term "0,0,0") (ifseqformula "16"))
                     (rule "ifthenelse_negated" (formula "51") (term "0"))
                     (rule "pullOutSelect" (formula "51") (term "1,0") (inst "selectSK=java_lang_Object_created__4"))
                     (rule "simplifySelectOfAnonEQ" (formula "51") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "58")))
                     (rule "ifthenelse_negated" (formula "51") (term "0"))
                     (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "57"))
                     (rule "notLeft" (formula "57"))
                     (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_5"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "simplifySelectOfStore" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")))
                     (rule "simplifySelectOfCreate" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "66")) (ifInst ""  (formula "66")))
                     (rule "replaceKnownSelect_taclet00000_46" (formula "1") (term "0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00000_47" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "commute_or_2" (formula "55") (term "0,0"))
                     (rule "commute_or_2" (formula "53") (term "0,0"))
                     (rule "commute_or_2" (formula "54") (term "0,0,0"))
                     (rule "commute_or_2" (formula "54") (term "0,0"))
                     (rule "commute_or_2" (formula "55") (term "0,0,0"))
                     (rule "commute_or_2" (formula "55") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "55") (term "0,0,0"))
                     (rule "commute_or_2" (formula "55") (term "0,0"))
                     (rule "tryReturn" (formula "79") (term "1"))
                     (rule "methodCallReturn" (formula "79") (term "1"))
                     (rule "assignment" (formula "79") (term "1"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "methodCallEmpty" (formula "79") (term "1"))
                     (rule "blockEmpty" (formula "79") (term "1"))
                     (rule "assignment" (formula "79") (term "1"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "blockEmpty" (formula "79") (term "1"))
                     (rule "methodCallReturn" (formula "79") (term "1"))
                     (rule "assignment" (formula "79") (term "1"))
                      (builtin "One Step Simplification" (formula "79"))
                     (rule "methodCallEmpty" (formula "79") (term "1"))
                     (rule "tryEmpty" (formula "79") (term "1"))
                     (rule "emptyModality" (formula "79") (term "1"))
                     (rule "andRight" (formula "79"))
                     (branch
                        (rule "andRight" (formula "79"))
                        (branch
                           (rule "andRight" (formula "79"))
                           (branch
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "39"))
                              (rule "leq_literals" (formula "41") (term "0"))
                               (builtin "One Step Simplification" (formula "41"))
                              (rule "true_left" (formula "41"))
                              (rule "nnf_imp2or" (formula "41") (term "0"))
                              (rule "nnf_imp2or" (formula "25") (term "0"))
                              (rule "nnf_imp2or" (formula "13") (term "0"))
                              (rule "nnf_imp2or" (formula "34") (term "0"))
                              (rule "nnf_notAnd" (formula "41") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "41") (term "1,0,0"))
                              (rule "mul_literals" (formula "41") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "41") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                              (rule "mul_literals" (formula "41") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "41") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "41") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "41") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "41") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "25") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                              (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "13") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "13") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                              (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                              (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "78"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "insert_constant_string_value" (formula "78") (term "0,0,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "insert_constant_string_value" (formula "78") (term "0,0,1,0,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "insert_constant_string_value" (formula "78") (term "0,0,1,0,0,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "castDel" (formula "78") (term "0,0,0,1,0,0,0"))
                              (rule "castDel" (formula "78") (term "0,0,0,1,0,0,0,0"))
                              (rule "castDel" (formula "78") (term "0,0,0,1,0,0"))
                              (rule "replace_known_right" (formula "78") (term "0,1,0,0,0") (ifseqformula "73"))
                               (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "72")) (ifInst ""  (formula "74")))
                              (rule "pullOutSelect" (formula "78") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_1"))
                              (rule "applyEq" (formula "79") (term "0,0,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0000_38" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000_39" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "79") (term "0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "79") (term "0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "78") (term "1"))
                              (rule "replace_known_right" (formula "78") (term "0,1,0") (ifseqformula "75"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "pullOutSelect" (formula "78") (term "0,0,1,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0000_44" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000_45" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "79") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "78") (term "0,1,0,0") (ifseqformula "70"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "pullOutSelect" (formula "78") (term "0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0000_42" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000_43" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "79") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "78") (term "0,0,0") (ifseqformula "69"))
                               (builtin "One Step Simplification" (formula "78"))
                              (rule "pullOutSelect" (formula "78") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "64")) (ifInst ""  (formula "64")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0000_37" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000_39" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "79") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "79"))
                              (rule "notRight" (formula "79"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_3"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfStore" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                              (rule "simplifySelectOfCreate" (formula "1"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")) (ifInst ""  (formula "65")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replaceKnownSelect_taclet0000_40" (formula "1") (term "0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000_41" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "73") (ifseqformula "2"))
                           )
                           (branch
                               (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "57")))
                              (rule "closeTrue" (formula "79"))
                           )
                        )
                        (branch
                            (builtin "One Step Simplification" (formula "79"))
                           (rule "closeTrue" (formula "79"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "allRight" (formula "79") (inst "sk=f_0"))
                        (rule "allRight" (formula "79") (inst "sk=o_0"))
                        (rule "orRight" (formula "79"))
                        (rule "selectOfAnonEQ" (formula "80") (term "1") (ifseqformula "49"))
                         (builtin "One Step Simplification" (formula "80"))
                        (rule "dismissNonSelectedField" (formula "80") (term "0,0,1,0,1"))
                        (rule "selectOfStore" (formula "80") (term "2,1"))
                         (builtin "One Step Simplification" (formula "80"))
                        (rule "castDel" (formula "80") (term "1,2,1"))
                        (rule "ifthenelse_split" (formula "80") (term "2,1"))
                        (branch "s_2 = o_0 ∧ java.lang.Object::<initialized> = f_0 TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "ifthenelse_split" (formula "82") (term "1"))
                           (branch " ¬o_0 = null ∧ ¬ o_0.<created>@heapAfter_withHeader[create(s_2)] = TRUE TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "selectOfCreate" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")) (ifInst ""  (formula "68")))
                              (rule "castDel" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                           (branch " ¬o_0 = null ∧ ¬ o_0.<created>@heapAfter_withHeader[create(s_2)] = TRUE FALSE"
                              (rule "selectOfCreate" (formula "82") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "1")) (ifInst ""  (formula "66")))
                              (rule "castDel" (formula "82") (term "0,0,1"))
                               (builtin "One Step Simplification" (formula "82"))
                              (rule "andRight" (formula "81"))
                              (branch
                                 (rule "false_right" (formula "82"))
                                 (rule "notRight" (formula "81"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "close" (formula "67") (ifseqformula "2"))
                              )
                              (branch
                                 (rule "false_right" (formula "82"))
                                 (rule "notRight" (formula "81"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                 (rule "applyEqRigid" (formula "82") (term "2,0") (ifseqformula "3"))
                                 (rule "narrowSelectType" (formula "82") (term "0") (ifseqformula "12"))
                                 (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                 (rule "close" (formula "61") (ifseqformula "1"))
                              )
                           )
                        )
                        (branch "s_2 = o_0 ∧ java.lang.Object::<initialized> = f_0 FALSE"
                           (rule "selectOfCreate" (formula "81") (term "0,0,1,0,1"))
                            (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "64")))
                           (rule "castDel" (formula "81") (term "1,0,0,1,0,1"))
                            (builtin "One Step Simplification" (formula "81"))
                           (rule "selectOfCreate" (formula "81") (term "2,1"))
                           (rule "castDel" (formula "81") (term "1,2,1"))
                           (rule "ifthenelse_split" (formula "81") (term "2,1"))
                           (branch " s_2 = o_0 ∧ ¬s_2 = null ∧ f_0 = java.lang.Object::<created> TRUE"
                              (rule "andLeft" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "ifthenelse_split" (formula "84") (term "1"))
                              (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ o_0.<created>@heapAfter_withHeader = TRUE) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,1,0") (ifseqformula "50"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ o_0.<created>@heapAfter_withHeader = TRUE) FALSE"
                                 (rule "selectOfAnonEQ" (formula "84") (term "0,1,0,1") (ifseqformula "48"))
                                  (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")))
                                 (rule "andRight" (formula "82"))
                                 (branch
                                    (rule "andRight" (formula "83"))
                                    (branch
                                       (rule "close" (formula "83") (ifseqformula "1"))
                                    )
                                    (branch
                                       (rule "false_right" (formula "84"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notRight" (formula "81"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                                       (rule "applyEqRigid" (formula "83") (term "2,0") (ifseqformula "3"))
                                       (rule "narrowSelectType" (formula "83") (term "0") (ifseqformula "12"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                       (rule "close" (formula "67") (ifseqformula "1"))
                                    )
                                 )
                                 (branch
                                    (rule "andRight" (formula "83"))
                                    (branch
                                       (rule "close" (formula "83") (ifseqformula "1"))
                                    )
                                    (branch
                                       (rule "false_right" (formula "84"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "notRight" (formula "81"))
                                       (rule "eqSymm" (formula "2"))
                                       (rule "eqSymm" (formula "82"))
                                       (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "82") (term "0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "82"))
                                       (rule "false_right" (formula "82"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                                       (rule "close" (formula "61") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                           (branch " s_2 = o_0 ∧ ¬s_2 = null ∧ f_0 = java.lang.Object::<created> FALSE"
                              (rule "selectCreatedOfAnonEQ" (formula "82") (term "0,1,0,1,0,1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "82"))
                              (rule "ifthenelse_split" (formula "82") (term "1"))
                              (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ ( o_0.<created>@heapAfter_toArray = TRUE ∨ o_0.<created>@anon_heap_withHeader«anonHeapFunction» = TRUE)) TRUE"
                                 (rule "andLeft" (formula "1"))
                                 (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,1,0") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,0,1,0") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                 (rule "ifthenelse_negated" (formula "2") (term "0,0,0,0,1,0"))
                                 (rule "ifthenelse_split" (formula "2") (term "0,0,0,0,1,0"))
                                 (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                    (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,0,0,1,0") (ifseqformula "19"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "selectOfAnonEQ" (formula "2") (term "0") (ifseqformula "19"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "82")))
                                    (rule "andRight" (formula "82"))
                                    (branch
                                       (rule "andRight" (formula "83"))
                                       (branch
                                          (rule "andRight" (formula "84"))
                                          (branch
                                             (rule "andRight" (formula "84"))
                                             (branch
                                                (rule "close" (formula "82") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "close" (formula "82") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "close" (formula "82") (ifseqformula "1"))
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "84"))
                                          (branch
                                             (rule "andRight" (formula "84"))
                                             (branch
                                                (rule "close" (formula "82") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "close" (formula "82") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "close" (formula "82") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "andRight" (formula "83"))
                                       (branch
                                          (rule "andRight" (formula "84"))
                                          (branch
                                             (rule "andRight" (formula "84"))
                                             (branch
                                                (rule "notRight" (formula "82"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "close" (formula "58") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notRight" (formula "82"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notRight" (formula "83"))
                                                (rule "close" (formula "68") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "notRight" (formula "82"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "58"))
                                             (rule "orRight" (formula "58"))
                                             (rule "orRight" (formula "58"))
                                             (rule "orRight" (formula "58"))
                                             (rule "orRight" (formula "58"))
                                             (rule "close" (formula "58") (ifseqformula "1"))
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "84"))
                                          (branch
                                             (rule "andRight" (formula "84"))
                                             (branch
                                                (rule "notRight" (formula "82"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "orRight" (formula "58"))
                                                (rule "close" (formula "58") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notLeft" (formula "1"))
                                                (rule "notRight" (formula "82"))
                                                (rule "notRight" (formula "83"))
                                                (rule "close" (formula "68") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "notRight" (formula "82"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "orRight" (formula "58"))
                                             (rule "orRight" (formula "59"))
                                             (rule "orRight" (formula "59"))
                                             (rule "orRight" (formula "59"))
                                             (rule "orRight" (formula "59"))
                                             (rule "close" (formula "59") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                    (rule "selectCreatedOfAnonEQ" (formula "59") (term "0") (ifseqformula "18"))
                                     (builtin "One Step Simplification" (formula "59"))
                                    (rule "orRight" (formula "59"))
                                    (rule "andRight" (formula "83"))
                                    (branch
                                       (rule "andRight" (formula "84"))
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "andRight" (formula "85"))
                                             (branch
                                                (rule "close" (formula "83") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "close" (formula "83") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "close" (formula "83") (ifseqformula "1"))
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "andRight" (formula "85"))
                                             (branch
                                                (rule "close" (formula "83") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "close" (formula "83") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "close" (formula "83") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "andRight" (formula "84"))
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "andRight" (formula "85"))
                                             (branch
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notRight" (formula "83"))
                                                (rule "close" (formula "60") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notRight" (formula "85"))
                                                (rule "close" (formula "69") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "notLeft" (formula "1"))
                                             (rule "notRight" (formula "83"))
                                             (rule "close" (formula "60") (ifseqformula "1"))
                                          )
                                       )
                                       (branch
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "andRight" (formula "85"))
                                             (branch
                                                (rule "notLeft" (formula "1"))
                                                (rule "notRight" (formula "83"))
                                                (rule "close" (formula "60") (ifseqformula "1"))
                                             )
                                             (branch
                                                (rule "notRight" (formula "83"))
                                                (rule "close" (formula "60") (ifseqformula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "notLeft" (formula "1"))
                                             (rule "notRight" (formula "83"))
                                             (rule "close" (formula "60") (ifseqformula "1"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ¬o_0 = null ∧ ¬( s_2 = o_0 ∨ ( o_0.<created>@heapAfter_toArray = TRUE ∨ o_0.<created>@anon_heap_withHeader«anonHeapFunction» = TRUE)) FALSE"
                                 (rule "selectOfAnonEQ" (formula "82") (term "0,0,1,0,1") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "82"))
                                 (rule "selectOfAnonEQ" (formula "83") (term "1") (ifseqformula "45"))
                                  (builtin "One Step Simplification" (formula "83"))
                                 (rule "ifthenelse_split" (formula "83") (term "1"))
                                 (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toArray = TRUE TRUE"
                                    (rule "andLeft" (formula "1"))
                                    (rule "selectCreatedOfAnonEQ" (formula "84") (term "2,0,0,1,0,1") (ifseqformula "30"))
                                    (rule "ifthenelse_split" (formula "84") (term "0,0,1,0,1"))
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                                       (rule "ifthenelse_negated" (formula "1") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "1") (term "0,0"))
                                       (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                          (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0,0") (ifseqformula "32"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                          (rule "closeFalse" (formula "4"))
                                       )
                                       (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                          (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "60")))
                                          (rule "selectCreatedOfAnonEQ" (formula "60") (term "0") (ifseqformula "23"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "orRight" (formula "60"))
                                          (rule "selectCreatedOfAnonEQ" (formula "60") (term "0") (ifseqformula "19"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "orRight" (formula "60"))
                                          (rule "andRight" (formula "85"))
                                          (branch
                                             (rule "andRight" (formula "86"))
                                             (branch
                                                (rule "andRight" (formula "87"))
                                                (branch
                                                   (rule "andRight" (formula "87"))
                                                   (branch
                                                      (rule "close" (formula "85") (ifseqformula "2"))
                                                   )
                                                   (branch
                                                      (rule "close" (formula "85") (ifseqformula "2"))
                                                   )
                                                )
                                                (branch
                                                   (rule "close" (formula "85") (ifseqformula "2"))
                                                )
                                             )
                                             (branch
                                                (rule "andRight" (formula "87"))
                                                (branch
                                                   (rule "andRight" (formula "87"))
                                                   (branch
                                                      (rule "close" (formula "85") (ifseqformula "2"))
                                                   )
                                                   (branch
                                                      (rule "close" (formula "85") (ifseqformula "2"))
                                                   )
                                                )
                                                (branch
                                                   (rule "close" (formula "85") (ifseqformula "2"))
                                                )
                                             )
                                          )
                                          (branch
                                             (rule "andRight" (formula "86"))
                                             (branch
                                                (rule "andRight" (formula "87"))
                                                (branch
                                                   (rule "andRight" (formula "87"))
                                                   (branch
                                                      (rule "andRight" (formula "87"))
                                                      (branch
                                                         (rule "close" (formula "87") (ifseqformula "2"))
                                                      )
                                                      (branch
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notRight" (formula "87"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notRight" (formula "86"))
                                                         (rule "close" (formula "62") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "88"))
                                                      (branch
                                                         (rule "close" (formula "88") (ifseqformula "2"))
                                                      )
                                                      (branch
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "87"))
                                                         (rule "close" (formula "71") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "88"))
                                                   (branch
                                                      (rule "close" (formula "88") (ifseqformula "2"))
                                                   )
                                                   (branch
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notRight" (formula "88"))
                                                      (rule "notRight" (formula "86"))
                                                      (rule "close" (formula "62") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                             (branch
                                                (rule "andRight" (formula "87"))
                                                (branch
                                                   (rule "andRight" (formula "87"))
                                                   (branch
                                                      (rule "andRight" (formula "88"))
                                                      (branch
                                                         (rule "close" (formula "88") (ifseqformula "2"))
                                                      )
                                                      (branch
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notRight" (formula "88"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notRight" (formula "86"))
                                                         (rule "close" (formula "62") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "88"))
                                                      (branch
                                                         (rule "close" (formula "88") (ifseqformula "2"))
                                                      )
                                                      (branch
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "87"))
                                                         (rule "close" (formula "71") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "88"))
                                                   (branch
                                                      (rule "close" (formula "88") (ifseqformula "2"))
                                                   )
                                                   (branch
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notRight" (formula "88"))
                                                      (rule "notRight" (formula "86"))
                                                      (rule "close" (formula "62") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "1")))
                                       (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,1") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")))
                                       (rule "selectOfAnonEQ" (formula "85") (term "0,0,0,1,0") (ifseqformula "22"))
                                        (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "1")))
                                       (rule "ifthenelse_negated" (formula "85") (term "0,0,0,1,0"))
                                       (rule "ifthenelse_split" (formula "85") (term "0,0,0,1,0"))
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                          (rule "selectOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0,0,0"))
                                          (rule "ifthenelse_split" (formula "3") (term "0,0,0"))
                                          (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "87") (term "0,0,0,1,0") (ifseqformula "20"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "83")))
                                             (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0,0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                             (rule "closeFalse" (formula "4"))
                                          )
                                          (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "87") (term "0,0,0,1,0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "83")))
                                             (rule "selectOfAnonEQ" (formula "60") (term "0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "2")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                             (rule "closeTrue" (formula "60"))
                                          )
                                       )
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,0") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "85")))
                                          (rule "selectOfAnonEQ" (formula "85") (term "0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "81")))
                                          (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0") (ifseqformula "22"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                          (rule "ifthenelse_negated" (formula "2") (term "0,0,0,0"))
                                          (rule "ifthenelse_split" (formula "2") (term "0,0,0,0"))
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                             (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0,0,0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "86")))
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "86")))
                                             (rule "andRight" (formula "82"))
                                             (branch
                                                (rule "andRight" (formula "83"))
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "82") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "82") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                             (branch
                                                (rule "andRight" (formula "83"))
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "notRight" (formula "82"))
                                                         (rule "close" (formula "85") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "notRight" (formula "82"))
                                                         (rule "close" (formula "86") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notRight" (formula "87"))
                                                      (rule "notLeft" (formula "3"))
                                                      (rule "notRight" (formula "83"))
                                                      (rule "close" (formula "87") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "notRight" (formula "82"))
                                                         (rule "close" (formula "86") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "notRight" (formula "82"))
                                                         (rule "close" (formula "86") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notRight" (formula "87"))
                                                      (rule "notLeft" (formula "3"))
                                                      (rule "notRight" (formula "83"))
                                                      (rule "close" (formula "87") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "59") (term "0") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "82")) (ifInst ""  (formula "86")))
                                             (rule "andRight" (formula "82"))
                                             (branch
                                                (rule "andRight" (formula "83"))
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "82") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "82") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                             (branch
                                                (rule "andRight" (formula "83"))
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "false_right" (formula "59"))
                                                         (rule "notRight" (formula "81"))
                                                         (rule "close" (formula "84") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "59"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "83"))
                                                         (rule "close" (formula "67") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "false_right" (formula "59"))
                                                      (rule "notRight" (formula "86"))
                                                      (rule "notRight" (formula "82"))
                                                      (rule "close" (formula "86") (ifseqformula "1"))
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "84"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "false_right" (formula "59"))
                                                         (rule "notRight" (formula "86"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notRight" (formula "82"))
                                                         (rule "close" (formula "86") (ifseqformula "1"))
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "59"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "83"))
                                                         (rule "close" (formula "67") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "false_right" (formula "59"))
                                                      (rule "notRight" (formula "86"))
                                                      (rule "notRight" (formula "82"))
                                                      (rule "close" (formula "86") (ifseqformula "1"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toArray = TRUE FALSE"
                                    (rule "selectCreatedOfAnonEQ" (formula "82") (term "2,0,0,1,0,1") (ifseqformula "28"))
                                    (rule "selectCreatedOfAnonEQ" (formula "83") (term "0,0,1") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "83"))
                                    (rule "selectOfAnonEQ" (formula "82") (term "0,0,2,0,0,1,0,1") (ifseqformula "20"))
                                     (builtin "One Step Simplification" (formula "82"))
                                    (rule "ifthenelse_split" (formula "82") (term "0,0,2,0,0,1,0,1"))
                                    (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                       (rule "andLeft" (formula "1"))
                                       (rule "ifthenelse_split" (formula "84") (term "0,0,1,0,1"))
                                       (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "selectOfAnonEQ" (formula "87") (term "1") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "2")) (ifInst ""  (formula "1")))
                                          (rule "selectOfAnonEQ" (formula "86") (term "0,0,0,1") (ifseqformula "31"))
                                           (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                                          (rule "ifthenelse_negated" (formula "86") (term "0,0,0"))
                                          (rule "ifthenelse_split" (formula "86") (term "0,0,0"))
                                          (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                             (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0") (ifseqformula "20"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonEQ" (formula "87") (term "0,0,0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "20"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,0") (ifseqformula "24"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0") (ifseqformula "20"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "83")))
                                             (rule "andRight" (formula "83"))
                                             (branch
                                                (rule "andRight" (formula "84"))
                                                (branch
                                                   (rule "andRight" (formula "85"))
                                                   (branch
                                                      (rule "andRight" (formula "85"))
                                                      (branch
                                                         (rule "close" (formula "83") (ifseqformula "3"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "83") (ifseqformula "3"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "83") (ifseqformula "3"))
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "85"))
                                                   (branch
                                                      (rule "andRight" (formula "85"))
                                                      (branch
                                                         (rule "close" (formula "83") (ifseqformula "3"))
                                                      )
                                                      (branch
                                                         (rule "close" (formula "83") (ifseqformula "3"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "close" (formula "83") (ifseqformula "3"))
                                                   )
                                                )
                                             )
                                             (branch
                                                (rule "andRight" (formula "84"))
                                                (branch
                                                   (rule "andRight" (formula "85"))
                                                   (branch
                                                      (rule "andRight" (formula "85"))
                                                      (branch
                                                         (rule "andRight" (formula "85"))
                                                         (branch
                                                            (rule "close" (formula "85") (ifseqformula "3"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "86"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notRight" (formula "84"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "close" (formula "61") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "86"))
                                                         (branch
                                                            (rule "close" (formula "86") (ifseqformula "3"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "87"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "close" (formula "69") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "86"))
                                                      (branch
                                                         (rule "close" (formula "86") (ifseqformula "3"))
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "87"))
                                                         (rule "notLeft" (formula "4"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notRight" (formula "86"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notRight" (formula "84"))
                                                         (rule "orRight" (formula "62"))
                                                         (rule "close" (formula "62") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "85"))
                                                   (branch
                                                      (rule "andRight" (formula "85"))
                                                      (branch
                                                         (rule "andRight" (formula "86"))
                                                         (branch
                                                            (rule "close" (formula "86") (ifseqformula "3"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "87"))
                                                            (rule "notRight" (formula "86"))
                                                            (rule "notRight" (formula "84"))
                                                            (rule "notLeft" (formula "5"))
                                                            (rule "notLeft" (formula "5"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "close" (formula "61") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "86"))
                                                         (branch
                                                            (rule "close" (formula "86") (ifseqformula "3"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "87"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "close" (formula "69") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "86"))
                                                      (branch
                                                         (rule "close" (formula "86") (ifseqformula "3"))
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "87"))
                                                         (rule "notLeft" (formula "4"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notRight" (formula "86"))
                                                         (rule "notLeft" (formula "3"))
                                                         (rule "notRight" (formula "84"))
                                                         (rule "orRight" (formula "62"))
                                                         (rule "close" (formula "62") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "3") (term "0,0") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "86")))
                                             (rule "selectOfAnonEQ" (formula "86") (term "0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "2")))
                                             (rule "ifthenelse_negated" (formula "86") (term "0"))
                                             (rule "ifthenelse_split" (formula "86") (term "0"))
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                (rule "close" (formula "87") (ifseqformula "1"))
                                             )
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                (rule "selectOfAnonEQ" (formula "86") (term "0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "82")))
                                                (rule "andRight" (formula "82"))
                                                (branch
                                                   (rule "andRight" (formula "83"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "2"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "2"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "83"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "close" (formula "84") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "notLeft" (formula "1"))
                                                               (rule "notLeft" (formula "2"))
                                                               (rule "notRight" (formula "87"))
                                                               (rule "notRight" (formula "85"))
                                                               (rule "notRight" (formula "84"))
                                                               (rule "close" (formula "86") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "close" (formula "85") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "notRight" (formula "88"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notRight" (formula "85"))
                                                               (rule "close" (formula "69") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "85"))
                                                         (branch
                                                            (rule "close" (formula "85") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notRight" (formula "88"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notRight" (formula "86"))
                                                            (rule "notRight" (formula "84"))
                                                            (rule "close" (formula "87") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "close" (formula "85") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "notRight" (formula "85"))
                                                               (rule "notRight" (formula "88"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notRight" (formula "84"))
                                                               (rule "close" (formula "87") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "close" (formula "85") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "notRight" (formula "88"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notLeft" (formula "3"))
                                                               (rule "notRight" (formula "85"))
                                                               (rule "close" (formula "69") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "85"))
                                                         (branch
                                                            (rule "close" (formula "85") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notRight" (formula "88"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notRight" (formula "86"))
                                                            (rule "notRight" (formula "84"))
                                                            (rule "close" (formula "87") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "1")))
                                          (rule "selectOfAnonEQ" (formula "87") (term "1") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "84")))
                                          (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "18"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "81")))
                                          (rule "selectOfAnonEQ" (formula "87") (term "1") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "1")))
                                          (rule "ifthenelse_negated" (formula "87") (term "1"))
                                          (rule "ifthenelse_split" (formula "87") (term "1"))
                                          (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "87") (term "0,0,0,1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectOfAnonEQ" (formula "88") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "2")))
                                             (rule "ifthenelse_negated" (formula "88") (term "1"))
                                             (rule "ifthenelse_split" (formula "88") (term "1"))
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "20"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "20"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "89") (term "1") (ifseqformula "20"))
                                                 (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "83")))
                                                (rule "closeTrue" (formula "89"))
                                             )
                                             (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonEQ" (formula "88") (term "0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "88"))
                                                (rule "orRight" (formula "88"))
                                                (rule "selectOfAnonEQ" (formula "85") (term "0,0,1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
                                                (rule "ifthenelse_negated" (formula "85") (term "0,0"))
                                                (rule "ifthenelse_split" (formula "85") (term "0,0"))
                                                (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                                   (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "24"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                                                   (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                      (rule "selectCreatedOfAnonEQ" (formula "86") (term "0,0") (ifseqformula "24"))
                                                       (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "1")))
                                                      (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "20"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")) (ifInst ""  (formula "88")))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                      (rule "selectCreatedOfAnonEQ" (formula "87") (term "0,0") (ifseqformula "24"))
                                                       (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "61")) (ifInst ""  (formula "1")))
                                                      (rule "selectOfAnonEQ" (formula "61") (term "0") (ifseqformula "20"))
                                                       (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "84")) (ifInst ""  (formula "89")))
                                                      (rule "andRight" (formula "83"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "andRight" (formula "85"))
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "3"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "83") (ifseqformula "3"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "andRight" (formula "85"))
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "3"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "83") (ifseqformula "3"))
                                                            )
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "andRight" (formula "85"))
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "4"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "4"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "83") (ifseqformula "4"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "85"))
                                                            (branch
                                                               (rule "andRight" (formula "85"))
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "4"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "83") (ifseqformula "4"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "83") (ifseqformula "4"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                                   (rule "selectOfAnonEQ" (formula "85") (term "0") (ifseqformula "23"))
                                                    (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "2")))
                                                   (rule "ifthenelse_negated" (formula "85") (term "0"))
                                                   (rule "ifthenelse_split" (formula "85") (term "0"))
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                      (rule "close" (formula "86") (ifseqformula "1"))
                                                   )
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                      (rule "selectOfAnonEQ" (formula "85") (term "0") (ifseqformula "19"))
                                                       (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "82")) (ifInst ""  (formula "90")))
                                                      (rule "andRight" (formula "82"))
                                                      (branch
                                                         (rule "andRight" (formula "83"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "83"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "3"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "3"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "3"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "3"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "86") (term "0,0,0,1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "87")))
                                             (rule "selectCreatedOfAnonEQ" (formula "87") (term "0") (ifseqformula "22"))
                                              (builtin "One Step Simplification" (formula "87"))
                                             (rule "orRight" (formula "87"))
                                             (rule "selectOfAnonEQ" (formula "84") (term "0,0,1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                             (rule "ifthenelse_negated" (formula "84") (term "0,0"))
                                             (rule "selectOfAnonEQ" (formula "87") (term "0") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "81")))
                                             (rule "ifthenelse_split" (formula "84") (term "0,0"))
                                             (branch "o_0.<created>@heapAfter_toList = TRUE TRUE"
                                                (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "89")))
                                                (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "85")))
                                                (rule "selectOfAnonEQ" (formula "85") (term "0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "82")) (ifInst ""  (formula "3")))
                                                (rule "closeTrue" (formula "85"))
                                             )
                                             (branch "o_0.<created>@heapAfter_toList = TRUE FALSE"
                                                (rule "selectOfAnonEQ" (formula "84") (term "0") (ifseqformula "22"))
                                                 (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")))
                                                (rule "ifthenelse_negated" (formula "84") (term "0"))
                                                (rule "ifthenelse_split" (formula "84") (term "0"))
                                                (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                   (rule "close" (formula "85") (ifseqformula "1"))
                                                )
                                                (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                   (rule "selectCreatedOfAnonEQ" (formula "59") (term "0") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "88")))
                                                   (rule "andRight" (formula "82"))
                                                   (branch
                                                      (rule "andRight" (formula "83"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "83"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                       (rule "ifthenelse_split" (formula "83") (term "2,0,0,1,0,1"))
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "84"))
                                          (rule "selectOfAnonEQ" (formula "86") (term "1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "86"))
                                          (rule "selectOfAnonEQ" (formula "85") (term "0,0,0,1") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "85"))
                                          (rule "ifthenelse_split" (formula "85") (term "0,0,0,1"))
                                          (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "selectOfAnonEQ" (formula "88") (term "0,0,1,0,1") (ifseqformula "31"))
                                              (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                             (rule "ifthenelse_negated" (formula "88") (term "1"))
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "87") (term "0,0,1,0,1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "85")) (ifInst ""  (formula "85")))
                                             (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0,1") (ifseqformula "21"))
                                              (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "86") (term "0,0,0,1") (ifseqformula "21"))
                                              (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "1")))
                                             (rule "selectOfAnonEQ" (formula "83") (term "0,0,1") (ifseqformula "17"))
                                              (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "80")) (ifInst ""  (formula "80")))
                                             (rule "selectCreatedOfAnonEQ" (formula "83") (term "0,0,1,0,0,0,1,0,1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "83"))
                                             (rule "selectOfAnonEQ" (formula "85") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "85"))
                                             (rule "ifthenelse_split" (formula "85") (term "1"))
                                             (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0,0,1,0,0,0,1,0,1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                                (rule "selectOfAnonEQ" (formula "2") (term "0,0,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "82")))
                                                (rule "selectOfAnonEQ" (formula "85") (term "0,0,0,0,0,1,0") (ifseqformula "19"))
                                                 (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "82")))
                                                (rule "andRight" (formula "82"))
                                                (branch
                                                   (rule "andRight" (formula "83"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                         (branch
                                                            (rule "close" (formula "82") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "close" (formula "82") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                                (branch
                                                   (rule "andRight" (formula "83"))
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "false_right" (formula "85"))
                                                            (rule "notRight" (formula "82"))
                                                            (rule "notRight" (formula "84"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "close" (formula "61") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "86"))
                                                            (rule "notRight" (formula "82"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "notLeft" (formula "4"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "close" (formula "70") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "86"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "85"))
                                                         (rule "notRight" (formula "83"))
                                                         (rule "orRight" (formula "60"))
                                                         (rule "close" (formula "60") (ifseqformula "1"))
                                                      )
                                                   )
                                                   (branch
                                                      (rule "andRight" (formula "84"))
                                                      (branch
                                                         (rule "andRight" (formula "84"))
                                                         (branch
                                                            (rule "false_right" (formula "86"))
                                                            (rule "notLeft" (formula "2"))
                                                            (rule "notRight" (formula "82"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "close" (formula "61") (ifseqformula "2"))
                                                         )
                                                         (branch
                                                            (rule "false_right" (formula "86"))
                                                            (rule "notRight" (formula "82"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "notLeft" (formula "3"))
                                                            (rule "notRight" (formula "85"))
                                                            (rule "close" (formula "70") (ifseqformula "1"))
                                                         )
                                                      )
                                                      (branch
                                                         (rule "false_right" (formula "86"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notRight" (formula "85"))
                                                         (rule "notRight" (formula "83"))
                                                         (rule "orRight" (formula "60"))
                                                         (rule "close" (formula "60") (ifseqformula "1"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "17"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "83") (term "0,0,0,1,0,0,0,1,0,1") (ifseqformula "21"))
                                                 (builtin "One Step Simplification" (formula "83"))
                                                (rule "ifthenelse_split" (formula "83") (term "0,0,0,1,0,0,0,1,0,1"))
                                                (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "selectOfAnonEQ" (formula "88") (term "1") (ifseqformula "23"))
                                                    (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                                   (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "19"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "82")))
                                                   (rule "selectOfAnonEQ" (formula "87") (term "0,0,1") (ifseqformula "23"))
                                                    (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                                   (rule "ifthenelse_negated" (formula "87") (term "0,0"))
                                                   (rule "ifthenelse_split" (formula "87") (term "0,0"))
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE TRUE"
                                                      (rule "selectOfAnonEQ" (formula "88") (term "0,0") (ifseqformula "20"))
                                                       (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "83")) (ifInst ""  (formula "3")))
                                                      (rule "closeTrue" (formula "88"))
                                                   )
                                                   (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                      (rule "selectOfAnonEQ" (formula "87") (term "0") (ifseqformula "19"))
                                                       (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "82")))
                                                      (rule "andRight" (formula "82"))
                                                      (branch
                                                         (rule "andRight" (formula "83"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "1"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "1"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "1"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "1"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "1"))
                                                            )
                                                         )
                                                      )
                                                      (branch
                                                         (rule "andRight" (formula "83"))
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch
                                                            (rule "andRight" (formula "84"))
                                                            (branch
                                                               (rule "andRight" (formula "84"))
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                               (branch
                                                                  (rule "close" (formula "82") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch
                                                               (rule "close" (formula "82") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch " ¬o_0 = null ∧ ¬o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                                   (rule "selectOfAnonEQ" (formula "87") (term "1") (ifseqformula "21"))
                                                    (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "83")))
                                                   (rule "selectOfAnonEQ" (formula "86") (term "0,0,1") (ifseqformula "21"))
                                                    (builtin "One Step Simplification" (formula "86") (ifInst ""  (formula "83")) (ifInst ""  (formula "83")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,0,1,0,0,0,1,0,1") (ifseqformula "17"))
                                                    (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")))
                                                   (rule "selectOfAnonEQ" (formula "83") (term "0,0,1") (ifseqformula "17"))
                                                    (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "80")) (ifInst ""  (formula "80")))
                                                   (rule "selectOfAnonEQ" (formula "84") (term "1") (ifseqformula "17"))
                                                    (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "80")))
                                                   (rule "closeTrue" (formula "84"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "o_0.<created>@heapAfter_withDelimiter = TRUE FALSE"
                                          (rule "ifthenelse_split" (formula "84") (term "0,0,1,0,1"))
                                          (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "selectCreatedOfAnonEQ" (formula "85") (term "0") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "85"))
                                             (rule "orRight" (formula "85"))
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "selectOfAnonEQ" (formula "88") (term "0,0,0,1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                                             (rule "ifthenelse_negated" (formula "88") (term "0,0,0"))
                                             (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,1") (ifseqformula "18"))
                                              (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")) (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
                                             (rule "closeTrue" (formula "84"))
                                          )
                                          (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "83") (term "0") (ifseqformula "16"))
                                              (builtin "One Step Simplification" (formula "83"))
                                             (rule "orRight" (formula "83"))
                                             (rule "selectOfAnonEQ" (formula "85") (term "0,0,1") (ifseqformula "28"))
                                              (builtin "One Step Simplification" (formula "85"))
                                             (rule "ifthenelse_split" (formula "85") (term "0,0,1"))
                                             (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "90") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "1")))
                                                (rule "ifthenelse_negated" (formula "90") (term "1"))
                                                (rule "ifthenelse_split" (formula "90") (term "1"))
                                                (branch "o_0.<created>@heapAfter_toList_0 = TRUE TRUE"
                                                   (rule "selectOfAnonEQ" (formula "90") (term "0,0,0,1") (ifseqformula "31"))
                                                    (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "31"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectOfAnonEQ" (formula "91") (term "1") (ifseqformula "31"))
                                                    (builtin "One Step Simplification" (formula "91") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0,1") (ifseqformula "19"))
                                                    (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "2")) (ifInst ""  (formula "86")) (ifInst ""  (formula "87")))
                                                   (rule "closeTrue" (formula "85"))
                                                )
                                                (branch "o_0.<created>@heapAfter_toList_0 = TRUE FALSE"
                                                   (rule "selectOfAnonEQ" (formula "89") (term "0,0,0,1") (ifseqformula "30"))
                                                    (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                                   (rule "selectOfAnonEQ" (formula "90") (term "0") (ifseqformula "30"))
                                                    (builtin "One Step Simplification" (formula "90") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,1") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")) (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
                                                   (rule "closeTrue" (formula "84"))
                                                )
                                             )
                                             (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList = TRUE FALSE"
                                                (rule "selectOfAnonEQ" (formula "88") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "88"))
                                                (rule "selectOfAnonEQ" (formula "87") (term "0,0,0,1") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "85")))
                                                (rule "ifthenelse_split" (formula "88") (term "1"))
                                                (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "87") (term "0,0,1") (ifseqformula "22"))
                                                    (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "1")))
                                                   (rule "selectOfAnonEQ" (formula "89") (term "0,0,0,1") (ifseqformula "22"))
                                                    (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "1")) (ifInst ""  (formula "84")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "87") (term "0,0,0") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,1") (ifseqformula "18"))
                                                    (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "1")) (ifInst ""  (formula "85")) (ifInst ""  (formula "86")))
                                                   (rule "closeTrue" (formula "84"))
                                                )
                                                (branch "¬o_0 = null ∧ ¬o_0.<created>@heapAfter_toList_0 = TRUE FALSE"
                                                   (rule "selectCreatedOfAnonEQ" (formula "87") (term "0,0,0,1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "87"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "88") (term "0,0,1") (ifseqformula "28"))
                                                    (builtin "One Step Simplification" (formula "88"))
                                                   (rule "selectOfAnonEQ" (formula "89") (term "1") (ifseqformula "28"))
                                                    (builtin "One Step Simplification" (formula "89") (ifInst ""  (formula "85")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0,1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "85"))
                                                   (rule "selectOfAnonEQ" (formula "87") (term "0,0,0,0,1") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "87") (ifInst ""  (formula "79")) (ifInst ""  (formula "83")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "82") (term "0,0,1") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "83")) (ifInst ""  (formula "84")))
                                                   (rule "selectOfAnonEQ" (formula "88") (term "0,0,0,1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "82")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0,0,1") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "82")) (ifInst ""  (formula "83")))
                                                   (rule "selectOfAnonEQ" (formula "88") (term "1") (ifseqformula "20"))
                                                    (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "82")))
                                                   (rule "selectOfAnonEQ" (formula "88") (term "1") (ifseqformula "16"))
                                                    (builtin "One Step Simplification" (formula "88") (ifInst ""  (formula "79")))
                                                   (rule "closeTrue" (formula "88"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
                  (branch "Exceptional Post (print)"
                      (builtin "One Step Simplification" (formula "71"))
                      (builtin "One Step Simplification" (formula "49"))
                     (rule "andLeft" (formula "49"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,0") (ifseqformula "49"))
                     (rule "andLeft" (formula "50"))
                     (rule "andLeft" (formula "51"))
                     (rule "andLeft" (formula "50"))
                     (rule "andLeft" (formula "52"))
                     (rule "notLeft" (formula "50"))
                     (rule "close" (formula "54") (ifseqformula "53"))
                  )
                  (branch "Pre (print)"
                      (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "54")) (ifInst ""  (formula "54")))
                     (rule "wellFormedStorePrimitive" (formula "69") (term "0,1"))
                     (rule "wellFormedCreate" (formula "69") (term "0,1"))
                     (rule "wellFormedAnonEQ" (formula "69") (term "0,1") (ifseqformula "45"))
                     (rule "wellFormedAnonEQ" (formula "69") (term "0,0,1") (ifseqformula "37"))
                     (rule "wellFormedAnonEQ" (formula "69") (term "0,0,0,1") (ifseqformula "28"))
                     (rule "wellFormedAnonEQ" (formula "69") (term "0,0,0,0,1") (ifseqformula "20"))
                     (rule "wellFormedAnonEQ" (formula "69") (term "0,0,0,0,0,1") (ifseqformula "16"))
                     (rule "replace_known_left" (formula "69") (term "1,0,0,1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "9")) (ifInst ""  (formula "15")) (ifInst ""  (formula "19")) (ifInst ""  (formula "27")) (ifInst ""  (formula "44")))
                     (rule "dismissNonSelectedField" (formula "69") (term "0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                     (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "39"))
                     (rule "leq_literals" (formula "41") (term "0"))
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "true_left" (formula "41"))
                     (rule "pullOutSelect" (formula "68") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "69") (term "0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "69"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "nnf_imp2or" (formula "41") (term "0"))
                     (rule "nnf_imp2or" (formula "13") (term "0"))
                     (rule "nnf_imp2or" (formula "25") (term "0"))
                     (rule "nnf_imp2or" (formula "34") (term "0"))
                     (rule "nnf_notAnd" (formula "41") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "41") (term "1,0,0"))
                     (rule "mul_literals" (formula "41") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "41") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0"))
                     (rule "mul_literals" (formula "41") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "41") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "41") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "41") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "41") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "41") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "41") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "41") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "41") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "25") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
                     (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "25") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
                     (rule "mul_literals" (formula "25") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "34") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "34") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                     (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                     (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "68"))
                     (rule "notRight" (formula "68"))
                     (rule "dismissNonSelectedField" (formula "1") (term "0"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_5"))
                     (rule "simplifySelectOfCreate" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")) (ifInst ""  (formula "55")))
                     (rule "replaceKnownSelect_taclet00000_46" (formula "1") (term "0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet00000_47" (formula "1") (term "0"))
                     (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "68") (ifseqformula "2"))
                  )
                  (branch "Null reference (var_8 = null)"
                      (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "55")))
                     (rule "closeTrue" (formula "69"))
                  )
               )
               (branch "Null Reference (s = null)"
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Exceptional Post (withHeader)"
                (builtin "One Step Simplification" (formula "35"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "andLeft" (formula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0") (ifseqformula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0") (ifseqformula "30"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,1,0") (ifseqformula "22"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,1,0") (ifseqformula "14"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,0,0,0,1,0") (ifseqformula "10"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "38"))
               (rule "notLeft" (formula "36"))
               (rule "close" (formula "39") (ifseqformula "38"))
            )
            (branch "Pre (withHeader)"
                (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "34")))
               (rule "andRight" (formula "47"))
               (branch "Case 1"
                  (rule "andRight" (formula "47"))
                  (branch
                     (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "32") (term "0"))
                     (rule "nnf_imp2or" (formula "7") (term "0"))
                     (rule "nnf_imp2or" (formula "27") (term "0"))
                     (rule "nnf_imp2or" (formula "19") (term "0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "7") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
                     (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
                     (rule "mul_literals" (formula "7") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "27") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0"))
                     (rule "times_zero_1" (formula "27") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "27") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                     (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "19") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
                     (rule "mul_literals" (formula "19") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "19") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
                     (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "47"))
                     (rule "replaceKnownSelect_taclet0000_35" (formula "47") (term "0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000_36" (formula "47") (term "0,0"))
                     (rule "notRight" (formula "47"))
                     (rule "close" (formula "46") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (rule "nonNull" (formula "47") (inst "i=i") (userinteraction))
                     (rule "andRight" (formula "47") (userinteraction))
                     (branch "Case 1"
                        (rule "notRight" (formula "47"))
                        (rule "close" (formula "35") (ifseqformula "1"))
                     )
                     (branch "Case 2"
                        (rule "impRight" (formula "47") (userinteraction))
                        (rule "allRight" (formula "48") (inst "sk=i_0") (userinteraction))
                        (rule "impRight" (formula "48") (userinteraction))
                        (rule "sub_literals" (formula "49") (term "2"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "greater_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "notRight" (formula "49"))
                        (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "2"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "30") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "30") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "26"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "18"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "14"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "33") (ifseqformula "38"))
                        (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                        (rule "ifEqualsNull" (formula "1"))
                        (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "19"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "15"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "26") (ifseqformula "39"))
                        (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_2"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "16"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "19") (ifseqformula "40"))
                        (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=arr_3"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "narrowSelectArrayType" (formula "1") (term "2,0") (ifseqformula "16") (ifseqformula "41"))
                        (rule "narrowSelectArrayType" (formula "1") (term "1,0") (ifseqformula "10") (ifseqformula "41"))
                        (rule "nnf_imp2or" (formula "34") (term "0"))
                        (rule "nnf_imp2or" (formula "39") (term "0"))
                        (rule "nnf_imp2or" (formula "26") (term "0"))
                        (rule "nnf_imp2or" (formula "14") (term "0"))
                        (rule "nnf_notAnd" (formula "34") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                        (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                        (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "39") (term "0,0"))
                        (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                        (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                        (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                        (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                        (rule "nnf_notAnd" (formula "26") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
                        (rule "mul_literals" (formula "26") (term "1,1,0,0"))
                        (rule "nnf_notAnd" (formula "14") (term "0,0"))
                        (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                        (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                        (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                        (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                        (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                        (rule "commute_or_2" (formula "3") (term "0,0"))
                        (rule "commute_or_2" (formula "34") (term "0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0"))
                        (rule "commute_or_2" (formula "39") (term "0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,0,1"))
                        (rule "commute_or_2" (formula "26") (term "0"))
                        (rule "commute_or_2" (formula "14") (term "0"))
                        (rule "commute_or" (formula "34") (term "0,0"))
                        (rule "commute_or_2" (formula "34") (term "0"))
                        (rule "commute_or_2" (formula "4") (term "0,0"))
                        (rule "commute_or" (formula "39") (term "0,0"))
                        (rule "commute_or_2" (formula "39") (term "0"))
                        (rule "commute_or" (formula "26") (term "0,0"))
                        (rule "commute_or_2" (formula "26") (term "0"))
                        (rule "commute_or" (formula "14") (term "0,0"))
                        (rule "commute_or_2" (formula "14") (term "0"))
                        (rule "commute_or_2" (formula "4") (term "0,0,1"))
                        (rule "commute_and" (formula "4") (term "0"))
                        (rule "ifthenelse_split" (formula "31") (term "0"))
                        (branch "result_302.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                           (rule "hideAuxiliaryEq" (formula "32"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                           (rule "hideAuxiliaryEq" (formula "32"))
                           (rule "replace_known_left" (formula "32") (term "0,0,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                           (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                           (rule "hideAuxiliaryEq" (formula "32"))
                           (rule "replace_known_left" (formula "30") (term "0,0,0") (ifseqformula "31"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "true_left" (formula "30"))
                           (rule "ifthenelse_split" (formula "23") (term "0"))
                           (branch "result_301.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "25") (term "1,0") (ifseqformula "24"))
                              (rule "hideAuxiliaryEq" (formula "24"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                              (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                              (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                              (rule "hideAuxiliaryEq" (formula "24"))
                              (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "orLeft" (formula "4"))
                              (branch " arr_1«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                 (rule "andLeft" (formula "4"))
                                 (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and" (formula "3") (term "0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " arr_2«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "ifEqualsNull" (formula "2"))
                                    (rule "commute_and" (formula "2") (term "0"))
                                    (rule "orLeft" (formula "2"))
                                    (branch " arr_3«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "cnf_rightDist" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cut_direct" (formula "38") (term "0,0,0,0"))
                                       (branch "CUT: result_303.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "true_left" (formula "39"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "cut_direct" (formula "8") (term "0,0"))
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_literals" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "cut_direct" (formula "8") (term "0,0"))
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_literals" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "cut_direct" (formula "8") (term "0,0"))
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "cut_direct" (formula "8") (term "0,0"))
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_literals" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_zero_right" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_303.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")))
                                          (rule "true_left" (formula "6"))
                                          (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "true_left" (formula "34"))
                                          (rule "cut_direct" (formula "10") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "11"))
                                             (rule "true_left" (formula "11"))
                                             (rule "cut_direct" (formula "9") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_literals" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                   (rule "qeq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "closeFalse" (formula "7"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "closeFalse" (formula "7"))
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "closeFalse" (formula "7"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "cut_direct" (formula "9") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                   (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                   (rule "expand_inInt" (formula "37"))
                                                   (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_commuteLeq" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                   (rule "qeq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList«anonHeapFunction» = null"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "38"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")))
                                       (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                       (rule "true_left" (formula "33"))
                                       (rule "cut_direct" (formula "9") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "cut_direct" (formula "19") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                (rule "andLeft" (formula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "10"))
                                                (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                (rule "add_literals" (formula "10") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "10") (term "1,0"))
                                                (rule "add_zero_right" (formula "10") (term "0"))
                                                (rule "leq_literals" (formula "10"))
                                                (rule "closeFalse" (formula "10"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                (rule "andLeft" (formula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "10"))
                                                (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                (rule "add_literals" (formula "10") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "10") (term "1,0"))
                                                (rule "add_zero_right" (formula "10") (term "0"))
                                                (rule "leq_literals" (formula "10"))
                                                (rule "closeFalse" (formula "10"))
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "cut_direct" (formula "19") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "inEqSimp_homoInEq1" (formula "36"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0"))
                                                (rule "add_zero_right" (formula "36") (term "0"))
                                                (rule "leq_literals" (formula "36"))
                                                (rule "closeFalse" (formula "36"))
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "closeFalse" (formula "6"))
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                (rule "qeq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList_0«anonHeapFunction» = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "orRight" (formula "37"))
                                    (rule "orRight" (formula "37"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "35"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                    (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")) (ifInst ""  (formula "3")))
                                    (rule "true_left" (formula "32"))
                                    (rule "cut_direct" (formula "8") (term "0"))
                                    (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "9"))
                                       (rule "true_left" (formula "9"))
                                       (rule "cut_direct" (formula "18") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "cut_direct" (formula "7") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "35"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "35"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "cut_direct" (formula "7") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "inEqSimp_homoInEq1" (formula "35"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "35") (term "1,0"))
                                             (rule "add_literals" (formula "35") (term "0"))
                                             (rule "leq_literals" (formula "35"))
                                             (rule "closeFalse" (formula "35"))
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0"))
                                             (rule "add_literals" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "cut_direct" (formula "18") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "cut_direct" (formula "7") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0"))
                                             (rule "add_literals" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "35") (term "0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "closeFalse" (formula "35"))
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "cut_direct" (formula "7") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                             (rule "andLeft" (formula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "9"))
                                             (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                             (rule "add_literals" (formula "9") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "9") (term "1,0"))
                                             (rule "add_zero_right" (formula "9") (term "0"))
                                             (rule "leq_literals" (formula "9"))
                                             (rule "closeFalse" (formula "9"))
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                             (rule "qeq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "closeFalse" (formula "5"))
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toArray«anonHeapFunction» = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "36"))
                                 (rule "orRight" (formula "36"))
                                 (rule "orRight" (formula "36"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                 (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "35")) (ifInst ""  (formula "38")))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "33")) (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "34") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "inEqSimp_homoInEq1" (formula "34"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0"))
                                          (rule "add_literals" (formula "34") (term "0"))
                                          (rule "leq_literals" (formula "34"))
                                          (rule "closeFalse" (formula "34"))
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "34") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                          (rule "andLeft" (formula "34"))
                                          (rule "inEqSimp_homoInEq1" (formula "34"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                          (rule "add_literals" (formula "34") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "34") (term "1,0"))
                                          (rule "add_zero_right" (formula "34") (term "0"))
                                          (rule "leq_literals" (formula "34"))
                                          (rule "closeFalse" (formula "34"))
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "34") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0"))
                                          (rule "add_literals" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "34") (term "0,0,1"))
                                          (rule "leq_literals" (formula "34") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "34"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                          (rule "qeq_literals" (formula "3") (term "0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "34") (term "0,0,1"))
                                          (rule "leq_literals" (formula "34") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                          (rule "qeq_literals" (formula "3") (term "0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "closeFalse" (formula "3"))
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "34") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "7"))
                                          (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                          (rule "add_literals" (formula "7") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "7") (term "1,0"))
                                          (rule "add_literals" (formula "7") (term "0"))
                                          (rule "leq_literals" (formula "7"))
                                          (rule "closeFalse" (formula "7"))
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "34") (term "0,0,1"))
                                          (rule "leq_literals" (formula "34") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "34"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "closeFalse" (formula "33"))
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "allLeft" (formula "34") (inst "t=i_0"))
                                          (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                          (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                          (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                          (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "34") (term "0,0,1"))
                                          (rule "leq_literals" (formula "34") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                          (rule "qeq_literals" (formula "34") (term "0"))
                                           (builtin "One Step Simplification" (formula "34"))
                                          (rule "closeFalse" (formula "34"))
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "result_301.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "23"))
                              (rule "hideAuxiliaryEq" (formula "23"))
                              (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "37"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "orLeft" (formula "4"))
                              (branch " arr_1«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                 (rule "andLeft" (formula "4"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and" (formula "3") (term "0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " arr_2«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "ifEqualsNull" (formula "2"))
                                    (rule "commute_and" (formula "2") (term "0"))
                                    (rule "orLeft" (formula "2"))
                                    (branch " arr_3«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "cnf_rightDist" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                       (branch "CUT: result_303.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "cut_direct" (formula "19") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "cut_direct" (formula "8") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                   (rule "expand_inInt" (formula "7"))
                                                   (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                   (rule "andLeft" (formula "7"))
                                                   (rule "inEqSimp_commuteLeq" (formula "8"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "9"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_303.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "40"))
                                           (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                          (rule "true_left" (formula "5"))
                                          (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")))
                                          (rule "true_left" (formula "6"))
                                          (rule "replace_known_left" (formula "35") (term "1") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "35"))
                                          (rule "true_left" (formula "35"))
                                          (rule "cut_direct" (formula "20") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "true_left" (formula "21"))
                                             (rule "cut_direct" (formula "9") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "10") (term "0"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "10") (term "0"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "11"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                      (rule "add_literals" (formula "11") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "11") (term "1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "0"))
                                                      (rule "leq_literals" (formula "11"))
                                                      (rule "closeFalse" (formula "11"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "cut_direct" (formula "9") (term "0,0"))
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "10") (term "0"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "8") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "9") (term "0"))
                                                   (rule "expand_inInt" (formula "9"))
                                                   (rule "replace_int_MAX" (formula "9") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "9") (term "0,1"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_commuteLeq" (formula "10"))
                                                   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "8"))
                                                   (rule "leq_literals" (formula "10") (term "0"))
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "9"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "ifthenelse_split" (formula "27") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                      (rule "hideAuxiliaryEq" (formula "28"))
                                                      (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "true_left" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "26"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "8"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "10") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "10") (term "0"))
                                                       (builtin "One Step Simplification" (formula "10"))
                                                      (rule "true_left" (formula "10"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList«anonHeapFunction» = null"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "39"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")))
                                       (rule "replace_known_right" (formula "5") (term "1") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "38")) (ifInst ""  (formula "3")))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                       (rule "true_left" (formula "34"))
                                       (rule "cut_direct" (formula "19") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "cut_direct" (formula "8") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_zero_right" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "cut_direct" (formula "8") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "26") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                   (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                   (rule "hideAuxiliaryEq" (formula "27"))
                                                   (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "25"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList_0«anonHeapFunction» = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "orRight" (formula "38"))
                                    (rule "orRight" (formula "38"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "40")))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "37"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "36"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                    (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "3")))
                                    (rule "true_left" (formula "33"))
                                    (rule "cut_direct" (formula "7") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "cut_direct" (formula "8") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "cut_direct" (formula "8") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: result_300.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "7") (term "0"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                          )
                                          (branch "CUT: result_300.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "25") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                (rule "hideAuxiliaryEq" (formula "26"))
                                                (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                (rule "hideAuxiliaryEq" (formula "25"))
                                                (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "24"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "7") (term "0"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "true_left" (formula "7"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toArray«anonHeapFunction» = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "37"))
                                 (rule "orRight" (formula "37"))
                                 (rule "orRight" (formula "37"))
                                 (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")) (ifInst ""  (formula "40")))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
                                 (rule "cut_direct" (formula "5") (term "0,0"))
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cut_direct" (formula "16") (term "0"))
                                    (branch "CUT: result_300.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                             (rule "leq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_300.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                             (rule "leq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "cut_direct" (formula "16") (term "0"))
                                    (branch "CUT: result_300.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "34"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "33") (term "0"))
                                              (builtin "One Step Simplification" (formula "33"))
                                             (rule "closeFalse" (formula "33"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                       )
                                    )
                                    (branch "CUT: result_300.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "23") (term "0"))
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                             (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                             (rule "hideAuxiliaryEq" (formula "24"))
                                             (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "true_left" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                             (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                             (rule "hideAuxiliaryEq" (formula "23"))
                                             (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "22"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "result_302.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                           (rule "hideAuxiliaryEq" (formula "31"))
                           (rule "replace_known_right" (formula "32") (term "0,0,0,0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "replace_known_right" (formula "31") (term "0,0,0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "31"))
                           (rule "replace_known_right" (formula "30") (term "0,0,0") (ifseqformula "40"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "ifthenelse_split" (formula "23") (term "0"))
                           (branch "result_301.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "25") (term "1,0") (ifseqformula "24"))
                              (rule "hideAuxiliaryEq" (formula "24"))
                              (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                              (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                              (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                              (rule "hideAuxiliaryEq" (formula "24"))
                              (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "true_left" (formula "22"))
                              (rule "orLeft" (formula "4"))
                              (branch " arr_1«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                 (rule "andLeft" (formula "4"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and" (formula "3") (term "0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " arr_2«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "ifEqualsNull" (formula "2"))
                                    (rule "commute_and" (formula "2") (term "0"))
                                    (rule "orLeft" (formula "2"))
                                    (branch " arr_3«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "cnf_rightDist" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cut_direct" (formula "24") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "25"))
                                          (rule "true_left" (formula "25"))
                                          (rule "cut_direct" (formula "13") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: result_303.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "39") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "39") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_303.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                (rule "true_left" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "40")))
                                                (rule "true_left" (formula "6"))
                                                (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "39"))
                                                      (rule "andLeft" (formula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "11"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                      (rule "add_literals" (formula "11") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "11") (term "1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "0"))
                                                      (rule "leq_literals" (formula "11"))
                                                      (rule "closeFalse" (formula "11"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: result_303.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "39"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_zero_right" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_303.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")))
                                                (rule "true_left" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "40")))
                                                (rule "true_left" (formula "6"))
                                                (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_zero_right" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "24"))
                                          (rule "cut_direct" (formula "13") (term "0,0"))
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "true_left" (formula "14"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: result_303.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_zero_right" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "39") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "38") (term "0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "closeFalse" (formula "38"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_303.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "41")))
                                                (rule "true_left" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "40")))
                                                (rule "true_left" (formula "6"))
                                                (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "13"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: result_303.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "4"))
                                                (rule "true_left" (formula "4"))
                                                (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "cut_direct" (formula "9") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "true_left" (formula "10"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "39") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "38"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "32") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                      (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "true_left" (formula "31"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                      (rule "hideAuxiliaryEq" (formula "32"))
                                                      (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "31"))
                                                      (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "33"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_303.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "43"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "true_left" (formula "1"))
                                                (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "41")))
                                                (rule "true_left" (formula "5"))
                                                (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "40")))
                                                (rule "true_left" (formula "6"))
                                                (rule "replace_known_left" (formula "36") (term "1") (ifseqformula "3"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "cut_direct" (formula "10") (term "0"))
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "11"))
                                                   (rule "true_left" (formula "11"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "11"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                      (rule "add_literals" (formula "11") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "11") (term "1,0"))
                                                      (rule "add_zero_right" (formula "11") (term "0"))
                                                      (rule "leq_literals" (formula "11"))
                                                      (rule "closeFalse" (formula "11"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "39") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "39") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "39"))
                                                      (rule "qeq_literals" (formula "7") (term "0"))
                                                       (builtin "One Step Simplification" (formula "7"))
                                                      (rule "closeFalse" (formula "7"))
                                                   )
                                                )
                                                (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "10"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "37"))
                                                      (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                      (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_commuteLeq" (formula "37"))
                                                      (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "37") (term "0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "true_left" (formula "37"))
                                                      (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "11"))
                                                      (rule "inEqSimp_homoInEq1" (formula "11"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                      (rule "add_literals" (formula "11") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "11") (term "1,0"))
                                                      (rule "add_literals" (formula "11") (term "0"))
                                                      (rule "leq_literals" (formula "11"))
                                                      (rule "closeFalse" (formula "11"))
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "34"))
                                                      (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                      (rule "expand_inInt" (formula "39"))
                                                      (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                      (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_commuteLeq" (formula "39"))
                                                      (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                      (rule "leq_literals" (formula "39") (term "0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "true_left" (formula "39"))
                                                      (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                      (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                      (rule "qeq_literals" (formula "39") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "39"))
                                                      (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                      (rule "andLeft" (formula "39"))
                                                      (rule "inEqSimp_homoInEq1" (formula "39"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                      (rule "add_literals" (formula "39") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "39") (term "1,0"))
                                                      (rule "add_literals" (formula "39") (term "0"))
                                                      (rule "leq_literals" (formula "39"))
                                                      (rule "closeFalse" (formula "39"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList«anonHeapFunction» = null"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "40"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "40")))
                                       (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")) (ifInst ""  (formula "40")))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_right" (formula "35") (term "0,0,0,0") (ifseqformula "38"))
                                        (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "3")) (ifInst ""  (formula "39")))
                                       (rule "true_left" (formula "35"))
                                       (rule "cut_direct" (formula "8") (term "0,0"))
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_literals" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0"))
                                                   (rule "leq_literals" (formula "37"))
                                                   (rule "closeFalse" (formula "37"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                   (rule "qeq_literals" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                   (rule "andLeft" (formula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "10"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "10") (term "1,0"))
                                                   (rule "add_literals" (formula "10") (term "0"))
                                                   (rule "leq_literals" (formula "10"))
                                                   (rule "closeFalse" (formula "10"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "32") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                   (rule "hideAuxiliaryEq" (formula "32"))
                                                   (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                   (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "37") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "6") (term "0"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "closeFalse" (formula "6"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList_0«anonHeapFunction» = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "orRight" (formula "39"))
                                    (rule "orRight" (formula "39"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "41"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "39")))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                    (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "37")) (ifInst ""  (formula "3")) (ifInst ""  (formula "39")))
                                    (rule "true_left" (formula "34"))
                                    (rule "cut_direct" (formula "18") (term "0"))
                                    (branch "CUT: result_300.<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "19"))
                                       (rule "true_left" (formula "19"))
                                       (rule "cut_direct" (formula "7") (term "0,0"))
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "inEqSimp_homoInEq1" (formula "36"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0"))
                                                (rule "add_literals" (formula "36") (term "0"))
                                                (rule "leq_literals" (formula "36"))
                                                (rule "closeFalse" (formula "36"))
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_literals" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_literals" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: result_300.<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "18"))
                                       (rule "cut_direct" (formula "7") (term "0,0"))
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "36") (term "0,0,1"))
                                                (rule "leq_literals" (formula "36") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "closeFalse" (formula "36"))
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_literals" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                (rule "andLeft" (formula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "9"))
                                                (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "9") (term "1,0"))
                                                (rule "add_zero_right" (formula "9") (term "0"))
                                                (rule "leq_literals" (formula "9"))
                                                (rule "closeFalse" (formula "9"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "inEqSimp_homoInEq1" (formula "36"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0"))
                                                (rule "add_literals" (formula "36") (term "0"))
                                                (rule "leq_literals" (formula "36"))
                                                (rule "closeFalse" (formula "36"))
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "31") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "32") (term "1,0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEqReverse" (formula "33") (term "0,1,1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "5") (term "0"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "closeFalse" (formula "5"))
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                                (rule "hideAuxiliaryEq" (formula "31"))
                                                (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "38"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                (rule "qeq_literals" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "inEqSimp_homoInEq1" (formula "36"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0"))
                                                (rule "add_literals" (formula "36") (term "0"))
                                                (rule "leq_literals" (formula "36"))
                                                (rule "closeFalse" (formula "36"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toArray«anonHeapFunction» = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "38"))
                                 (rule "orRight" (formula "38"))
                                 (rule "orRight" (formula "38"))
                                 (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "41")))
                                 (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0,0") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "37")) (ifInst ""  (formula "40")))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "36"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "38"))
                                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")))
                                 (rule "cut_direct" (formula "16") (term "0"))
                                 (branch "CUT: result_300.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "true_left" (formula "17"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_zero_right" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_zero_right" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                             (rule "andLeft" (formula "35"))
                                             (rule "inEqSimp_homoInEq1" (formula "35"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                             (rule "add_literals" (formula "35") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "35") (term "1,0"))
                                             (rule "add_literals" (formula "35") (term "0"))
                                             (rule "leq_literals" (formula "35"))
                                             (rule "closeFalse" (formula "35"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                             (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "34") (term "0,0,1"))
                                             (rule "leq_literals" (formula "34") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: result_300.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_subsumption0" (formula "5") (ifseqformula "35"))
                                             (rule "leq_literals" (formula "5") (term "0"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthIsAnInt" (formula "4") (term "0"))
                                          (rule "expand_inInt" (formula "4"))
                                          (rule "replace_int_MAX" (formula "4") (term "1,0"))
                                          (rule "replace_int_MIN" (formula "4") (term "0,1"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "inEqSimp_commuteLeq" (formula "5"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                          (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "7"))
                                          (rule "leq_literals" (formula "5") (term "0"))
                                           (builtin "One Step Simplification" (formula "5"))
                                          (rule "true_left" (formula "5"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "35"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "6") (term "0"))
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "35") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "7"))
                                             (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                             (rule "add_literals" (formula "7") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "7") (term "1,0"))
                                             (rule "add_literals" (formula "7") (term "0"))
                                             (rule "leq_literals" (formula "7"))
                                             (rule "closeFalse" (formula "7"))
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "29") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "30") (term "1,0,0") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "30"))
                                             (rule "applyEqReverse" (formula "31") (term "0,1,1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_left" (formula "28") (term "1") (ifseqformula "29"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "true_left" (formula "28"))
                                             (rule "allLeft" (formula "34") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                             (rule "qeq_literals" (formula "34") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "34"))
                                             (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                             (rule "andLeft" (formula "34"))
                                             (rule "inEqSimp_homoInEq1" (formula "34"))
                                             (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                             (rule "add_literals" (formula "34") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "34") (term "1,0"))
                                             (rule "add_literals" (formula "34") (term "0"))
                                             (rule "leq_literals" (formula "34"))
                                             (rule "closeFalse" (formula "34"))
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "30") (term "1,0") (ifseqformula "29"))
                                             (rule "hideAuxiliaryEq" (formula "29"))
                                             (rule "replace_known_right" (formula "29") (term "1,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "28"))
                                             (rule "allLeft" (formula "35") (inst "t=i_0"))
                                             (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                             (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                             (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                             (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "35") (term "0,0,1"))
                                             (rule "leq_literals" (formula "35") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "35"))
                                             (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "35"))
                                             (rule "leq_literals" (formula "6") (term "0"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                             (rule "qeq_literals" (formula "3") (term "0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "closeFalse" (formula "3"))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "result_301.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "24") (term "1,0") (ifseqformula "23"))
                              (rule "hideAuxiliaryEq" (formula "23"))
                              (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "orLeft" (formula "4"))
                              (branch " arr_1«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                 (rule "andLeft" (formula "4"))
                                 (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                 (rule "ifEqualsNull" (formula "3"))
                                 (rule "commute_and" (formula "3") (term "0"))
                                 (rule "orLeft" (formula "3"))
                                 (branch " arr_2«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                    (rule "andLeft" (formula "3"))
                                    (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                                    (rule "ifEqualsNull" (formula "2"))
                                    (rule "commute_and" (formula "2") (term "0"))
                                    (rule "orLeft" (formula "2"))
                                    (branch " arr_3«selectSK» = null ∧ ( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE)"
                                       (rule "andLeft" (formula "2"))
                                       (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "cnf_rightDist" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cnf_rightDist" (formula "2"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "commute_or" (formula "2"))
                                       (rule "cnf_rightDist" (formula "1"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "commute_or" (formula "1"))
                                       (rule "cut_direct" (formula "13") (term "0,0"))
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "cut_direct" (formula "41") (term "0,0,0,0"))
                                          (branch "CUT: result_303.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "true_left" (formula "42"))
                                             (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "19") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "closeFalse" (formula "36"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                         (rule "add_literals" (formula "10") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "10") (term "1,0"))
                                                         (rule "add_literals" (formula "10") (term "0"))
                                                         (rule "leq_literals" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq1" (formula "38") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "38") (term "0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "closeFalse" (formula "38"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "19") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "closeFalse" (formula "36"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "39"))
                                                         (rule "andLeft" (formula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                         (rule "add_literals" (formula "10") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "10") (term "1,0"))
                                                         (rule "add_literals" (formula "10") (term "0"))
                                                         (rule "leq_literals" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_303.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "44"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "42")))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "41")))
                                             (rule "true_left" (formula "6"))
                                             (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "cut_direct" (formula "10") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_zero_right" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "39"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_literals" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_zero_right" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_literals" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_zero_right" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_zero_right" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_literals" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "cut_direct" (formula "41") (term "0,0,0,0"))
                                          (branch "CUT: result_303.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "42"))
                                             (rule "true_left" (formula "42"))
                                             (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "40"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "true_left" (formula "4"))
                                             (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "cut_direct" (formula "9") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "true_left" (formula "10"))
                                                (rule "cut_direct" (formula "19") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_zero_right" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "39"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "38"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "10"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                         (rule "add_literals" (formula "10") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "10") (term "1,0"))
                                                         (rule "add_literals" (formula "10") (term "0"))
                                                         (rule "leq_literals" (formula "10"))
                                                         (rule "closeFalse" (formula "10"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "cut_direct" (formula "19") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "true_left" (formula "20"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "39") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "39") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "39"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "7"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                   (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                   (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                   (rule "ifthenelse_split" (formula "33") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                      (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "true_left" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0"))
                                                         (rule "add_literals" (formula "37") (term "0"))
                                                         (rule "leq_literals" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "6") (term "0"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "closeFalse" (formula "6"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                      (rule "hideAuxiliaryEq" (formula "33"))
                                                      (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "32"))
                                                      (rule "ifthenelse_split" (formula "26") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "true_left" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                         (rule "hideAuxiliaryEq" (formula "26"))
                                                         (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "25"))
                                                         (rule "lenNonNegative" (formula "33") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "33"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "6"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "10"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: result_303.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "44"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "43"))
                                              (builtin "One Step Simplification" (formula "4"))
                                             (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "42")))
                                             (rule "true_left" (formula "5"))
                                             (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")))
                                             (rule "true_left" (formula "6"))
                                             (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "37"))
                                             (rule "true_left" (formula "37"))
                                             (rule "cut_direct" (formula "10") (term "0"))
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "11"))
                                                (rule "true_left" (formula "11"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "closeFalse" (formula "36"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "closeFalse" (formula "37"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "36"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "37"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_zero_right" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "10"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: result_300.<created> = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                                (branch "CUT: result_300.<created> = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                   (rule "expand_inInt" (formula "8"))
                                                   (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                   (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                   (rule "andLeft" (formula "8"))
                                                   (rule "inEqSimp_commuteLeq" (formula "9"))
                                                   (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
                                                   (rule "polySimp_rightDist" (formula "10") (term "0,0"))
                                                   (rule "mul_literals" (formula "10") (term "0,0,0"))
                                                   (rule "polySimp_addComm1" (formula "10") (term "0"))
                                                   (rule "add_literals" (formula "10") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                                                   (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "10") (term "0"))
                                                   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
                                                   (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "11"))
                                                   (rule "leq_literals" (formula "9") (term "0"))
                                                    (builtin "One Step Simplification" (formula "9"))
                                                   (rule "true_left" (formula "9"))
                                                   (rule "ifthenelse_split" (formula "34") (term "0"))
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "36") (term "1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "35") (term "1,0,0") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,0,0,0,0,0") (ifseqformula "35"))
                                                      (rule "applyEqReverse" (formula "36") (term "0,1,1,0") (ifseqformula "35"))
                                                      (rule "hideAuxiliaryEq" (formula "35"))
                                                      (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "34"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "true_left" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                         (rule "leq_literals" (formula "9") (term "0"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "true_left" (formula "9"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "closeFalse" (formula "36"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "39"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "arrayLengthIsAnInt" (formula "37") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "37"))
                                                         (rule "replace_int_MAX" (formula "37") (term "1,0"))
                                                         (rule "replace_int_MIN" (formula "37") (term "0,1"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "inEqSimp_commuteLeq" (formula "37"))
                                                         (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "37") (term "0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "true_left" (formula "37"))
                                                         (rule "arrayLengthNotNegative" (formula "37") (term "1,1,0"))
                                                         (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "37") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "37") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "37"))
                                                         (rule "qeq_literals" (formula "7") (term "0"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                   )
                                                   (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                      (rule "hideAuxiliaryEq" (formula "34"))
                                                      (rule "replace_known_right" (formula "34") (term "1,0,0") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "34"))
                                                      (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "41"))
                                                       (builtin "One Step Simplification" (formula "33"))
                                                      (rule "ifthenelse_split" (formula "27") (term "0"))
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "30") (term "0,1,1,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0") (ifseqformula "28"))
                                                         (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "28"))
                                                         (rule "hideAuxiliaryEq" (formula "28"))
                                                         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "true_left" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "39"))
                                                         (rule "andLeft" (formula "11"))
                                                         (rule "inEqSimp_homoInEq1" (formula "11"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                                                         (rule "add_literals" (formula "11") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "11") (term "1,0"))
                                                         (rule "add_literals" (formula "11") (term "0"))
                                                         (rule "leq_literals" (formula "11"))
                                                         (rule "closeFalse" (formula "11"))
                                                      )
                                                      (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                         (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                         (rule "hideAuxiliaryEq" (formula "27"))
                                                         (rule "replace_known_right" (formula "26") (term "1") (ifseqformula "40"))
                                                          (builtin "One Step Simplification" (formula "26"))
                                                         (rule "lenNonNegative" (formula "34") (term "1,1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "34"))
                                                         (rule "arrayLengthIsAnInt" (formula "39") (term "1,1,0"))
                                                         (rule "expand_inInt" (formula "39"))
                                                         (rule "replace_int_MIN" (formula "39") (term "0,1"))
                                                         (rule "replace_int_MAX" (formula "39") (term "1,0"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_commuteLeq" (formula "39"))
                                                         (rule "inEqSimp_subsumption1" (formula "39") (ifseqformula "10"))
                                                         (rule "leq_literals" (formula "39") (term "0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "true_left" (formula "39"))
                                                         (rule "arrayLengthNotNegative" (formula "39") (term "1,1,0"))
                                                         (rule "allLeft" (formula "39") (inst "t=i_0"))
                                                         (rule "replaceKnownSelect_taclet11020000_46" (formula "39") (term "0,0,0,0"))
                                                         (rule "replace_known_left" (formula "39") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_commuteGeq" (formula "39") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (term "0") (ifseqformula "7"))
                                                         (rule "qeq_literals" (formula "39") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "39"))
                                                         (rule "inEqSimp_contradInEq1" (formula "39") (ifseqformula "11"))
                                                         (rule "andLeft" (formula "39"))
                                                         (rule "inEqSimp_homoInEq1" (formula "39"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "39") (term "0"))
                                                         (rule "add_literals" (formula "39") (term "1,1,0"))
                                                         (rule "times_zero_1" (formula "39") (term "1,0"))
                                                         (rule "add_literals" (formula "39") (term "0"))
                                                         (rule "leq_literals" (formula "39"))
                                                         (rule "closeFalse" (formula "39"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList«anonHeapFunction» = null"
                                       (rule "andLeft" (formula "2"))
                                       (rule "notLeft" (formula "2"))
                                       (rule "orRight" (formula "41"))
                                       (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "41")))
                                       (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "3")) (ifInst ""  (formula "41")))
                                       (rule "true_left" (formula "5"))
                                       (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")))
                                       (rule "true_left" (formula "36"))
                                       (rule "cut_direct" (formula "8") (term "0,0"))
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "true_left" (formula "9"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_zero_right" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_zero_right" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                                (rule "expand_inInt" (formula "7"))
                                                (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_commuteLeq" (formula "8"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "7"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "arrayLengthNotNegative" (formula "10") (term "0"))
                                                (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "10"))
                                                (rule "leq_literals" (formula "8") (term "0"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "true_left" (formula "8"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "8") (term "0"))
                                                       (builtin "One Step Simplification" (formula "8"))
                                                      (rule "true_left" (formula "8"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "cut_direct" (formula "9") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "10"))
                                             (rule "true_left" (formula "10"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "35") (term "0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "closeFalse" (formula "35"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (ifseqformula "10"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0"))
                                                      (rule "add_literals" (formula "37") (term "0"))
                                                      (rule "leq_literals" (formula "37"))
                                                      (rule "closeFalse" (formula "37"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: result_300.<created> = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "36"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "9") (term "0"))
                                                       (builtin "One Step Simplification" (formula "9"))
                                                      (rule "true_left" (formula "9"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                )
                                             )
                                             (branch "CUT: result_300.<created> = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "arrayLengthNotNegative" (formula "7") (term "0"))
                                                (rule "arrayLengthIsAnInt" (formula "8") (term "0"))
                                                (rule "expand_inInt" (formula "8"))
                                                (rule "replace_int_MIN" (formula "8") (term "0,1"))
                                                (rule "replace_int_MAX" (formula "8") (term "1,0"))
                                                (rule "andLeft" (formula "8"))
                                                (rule "inEqSimp_commuteLeq" (formula "9"))
                                                (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "7"))
                                                (rule "leq_literals" (formula "9") (term "0"))
                                                 (builtin "One Step Simplification" (formula "9"))
                                                (rule "true_left" (formula "9"))
                                                (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "8"))
                                                (rule "polySimp_rightDist" (formula "9") (term "0,0"))
                                                (rule "mul_literals" (formula "9") (term "0,0,0"))
                                                (rule "polySimp_addComm1" (formula "9") (term "0"))
                                                (rule "add_literals" (formula "9") (term "0,0"))
                                                (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                                                (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                                                (rule "polySimp_elimOne" (formula "9") (term "0"))
                                                (rule "ifthenelse_split" (formula "33") (term "0"))
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "35") (term "1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "34") (term "1,0,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,0,0,0,0,0") (ifseqformula "34"))
                                                   (rule "applyEqReverse" (formula "35") (term "0,1,1,0") (ifseqformula "34"))
                                                   (rule "hideAuxiliaryEq" (formula "34"))
                                                   (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "36"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                                (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                   (rule "hideAuxiliaryEq" (formula "33"))
                                                   (rule "replace_known_right" (formula "33") (term "1,0,0") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "replace_known_right" (formula "32") (term "1") (ifseqformula "40"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "ifthenelse_split" (formula "26") (term "0"))
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "28") (term "0,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "27"))
                                                      (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "27"))
                                                      (rule "hideAuxiliaryEq" (formula "27"))
                                                      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "true_left" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "0") (ifseqformula "6"))
                                                      (rule "qeq_literals" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "37"))
                                                      (rule "andLeft" (formula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "10"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                                                      (rule "add_literals" (formula "10") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "10") (term "1,0"))
                                                      (rule "add_literals" (formula "10") (term "0"))
                                                      (rule "leq_literals" (formula "10"))
                                                      (rule "closeFalse" (formula "10"))
                                                   )
                                                   (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                      (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                      (rule "hideAuxiliaryEq" (formula "26"))
                                                      (rule "replace_known_right" (formula "25") (term "1") (ifseqformula "39"))
                                                       (builtin "One Step Simplification" (formula "25"))
                                                      (rule "allLeft" (formula "37") (inst "t=i_0"))
                                                      (rule "replaceKnownSelect_taclet11020000_46" (formula "37") (term "0,0,0,0"))
                                                      (rule "replace_known_left" (formula "37") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_commuteGeq" (formula "37") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "37") (term "1") (ifseqformula "10"))
                                                      (rule "inEqSimp_homoInEq1" (formula "37") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "37") (term "1,0,0,1"))
                                                      (rule "add_literals" (formula "37") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "37") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "37"))
                                                      (rule "qeq_literals" (formula "6") (term "0"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "closeFalse" (formula "6"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toList_0«anonHeapFunction» = null"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "orRight" (formula "40"))
                                    (rule "orRight" (formula "40"))
                                    (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "42"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "40")))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "39"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "1"))
                                    (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "40"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "38")) (ifInst ""  (formula "39")))
                                    (rule "replace_known_right" (formula "35") (term "0,0,0,0") (ifseqformula "38"))
                                     (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "39")) (ifInst ""  (formula "3")) (ifInst ""  (formula "40")))
                                    (rule "true_left" (formula "35"))
                                    (rule "cut_direct" (formula "7") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "8"))
                                       (rule "true_left" (formula "8"))
                                       (rule "cut_direct" (formula "18") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_zero_right" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "9"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0"))
                                                   (rule "add_literals" (formula "9") (term "0"))
                                                   (rule "leq_literals" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "35"))
                                                   (rule "leq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_literals" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "9"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0"))
                                                   (rule "add_literals" (formula "9") (term "0"))
                                                   (rule "leq_literals" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "7") (term "0"))
                                                    (builtin "One Step Simplification" (formula "7"))
                                                   (rule "true_left" (formula "7"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
                                             (rule "expand_inInt" (formula "6"))
                                             (rule "replace_int_MIN" (formula "6") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "6") (term "1,0"))
                                             (rule "andLeft" (formula "6"))
                                             (rule "inEqSimp_commuteLeq" (formula "7"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "6"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "arrayLengthNotNegative" (formula "9") (term "0"))
                                             (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "9"))
                                             (rule "leq_literals" (formula "7") (term "0"))
                                              (builtin "One Step Simplification" (formula "7"))
                                             (rule "true_left" (formula "7"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "35"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "9"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0"))
                                                   (rule "add_literals" (formula "9") (term "0"))
                                                   (rule "leq_literals" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_literals" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "9"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0"))
                                                   (rule "add_zero_right" (formula "9") (term "0"))
                                                   (rule "leq_literals" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "7"))
                                       (rule "cut_direct" (formula "18") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "19"))
                                          (rule "true_left" (formula "19"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "35"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "34") (term "0"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "closeFalse" (formula "34"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "36"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0"))
                                                   (rule "add_literals" (formula "36") (term "0"))
                                                   (rule "leq_literals" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "18"))
                                          (rule "cut_direct" (formula "8") (term "0"))
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "9"))
                                             (rule "true_left" (formula "9"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "35"))
                                                   (rule "leq_literals" (formula "8") (term "0"))
                                                    (builtin "One Step Simplification" (formula "8"))
                                                   (rule "true_left" (formula "8"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "34"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "36"))
                                                   (rule "andLeft" (formula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "9"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "9") (term "0"))
                                                   (rule "add_literals" (formula "9") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "9") (term "1,0"))
                                                   (rule "add_literals" (formula "9") (term "0"))
                                                   (rule "leq_literals" (formula "9"))
                                                   (rule "closeFalse" (formula "9"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                             )
                                          )
                                          (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "arrayLengthNotNegative" (formula "6") (term "0"))
                                             (rule "arrayLengthIsAnInt" (formula "7") (term "0"))
                                             (rule "expand_inInt" (formula "7"))
                                             (rule "replace_int_MIN" (formula "7") (term "0,1"))
                                             (rule "replace_int_MAX" (formula "7") (term "1,0"))
                                             (rule "andLeft" (formula "7"))
                                             (rule "inEqSimp_commuteLeq" (formula "8"))
                                             (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "6"))
                                             (rule "leq_literals" (formula "8") (term "0"))
                                              (builtin "One Step Simplification" (formula "8"))
                                             (rule "true_left" (formula "8"))
                                             (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "7"))
                                             (rule "polySimp_rightDist" (formula "8") (term "0,0"))
                                             (rule "mul_literals" (formula "8") (term "0,0,0"))
                                             (rule "polySimp_addComm1" (formula "8") (term "0"))
                                             (rule "add_literals" (formula "8") (term "0,0"))
                                             (rule "inEqSimp_sepNegMonomial1" (formula "8"))
                                             (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                                             (rule "polySimp_elimOne" (formula "8") (term "0"))
                                             (rule "ifthenelse_split" (formula "32") (term "0"))
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "33") (term "1,0,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,1,1,0") (ifseqformula "33"))
                                                (rule "applyEqReverse" (formula "34") (term "0,0,0,0,0,0") (ifseqformula "33"))
                                                (rule "hideAuxiliaryEq" (formula "33"))
                                                (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "35") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "35"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "35") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "35"))
                                                   (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "9"))
                                                   (rule "andLeft" (formula "35"))
                                                   (rule "inEqSimp_homoInEq1" (formula "35"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                   (rule "add_literals" (formula "35") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "35") (term "1,0"))
                                                   (rule "add_literals" (formula "35") (term "0"))
                                                   (rule "leq_literals" (formula "35"))
                                                   (rule "closeFalse" (formula "35"))
                                                )
                                             )
                                             (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                                                (rule "hideAuxiliaryEq" (formula "32"))
                                                (rule "replace_known_right" (formula "32") (term "1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "ifthenelse_split" (formula "25") (term "0"))
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "27") (term "0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "26"))
                                                   (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "26"))
                                                   (rule "hideAuxiliaryEq" (formula "26"))
                                                   (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "36"))
                                                   (rule "qeq_literals" (formula "5") (term "0"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "closeFalse" (formula "5"))
                                                )
                                                (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "26") (term "0,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,1,1,0") (ifseqformula "25"))
                                                   (rule "applyEqReverse" (formula "27") (term "0,0,0,0,0,0") (ifseqformula "25"))
                                                   (rule "hideAuxiliaryEq" (formula "25"))
                                                   (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "24"))
                                                   (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                   (rule "replaceKnownSelect_taclet11020000_46" (formula "36") (term "0,0,0,0"))
                                                   (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "9"))
                                                   (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "36") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "36") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "5"))
                                                   (rule "qeq_literals" (formula "36") (term "0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "closeFalse" (formula "36"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch " ¬( result_303.<created> = TRUE ∨ result_303.<created>@anon_heap_toList«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_toList_0«anonHeapFunction» = TRUE ∨ result_303.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE) ∧ result_303[i_0]@anon_heap_toArray«anonHeapFunction» = null"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "orRight" (formula "39"))
                                 (rule "orRight" (formula "39"))
                                 (rule "orRight" (formula "39"))
                                 (rule "replace_known_right" (formula "3") (term "1,0,0,0") (ifseqformula "40"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "39")) (ifInst ""  (formula "42")))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "41"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "38")))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "37"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "39"))
                                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")))
                                 (rule "cut_direct" (formula "6") (term "0"))
                                 (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "7"))
                                                (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                                (rule "add_literals" (formula "7") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "7") (term "1,0"))
                                                (rule "add_literals" (formula "7") (term "0"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0"))
                                                (rule "add_literals" (formula "34") (term "0"))
                                                (rule "leq_literals" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0"))
                                                (rule "add_literals" (formula "34") (term "0"))
                                                (rule "leq_literals" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "cut_direct" (formula "5") (term "0,0"))
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "6"))
                                       (rule "true_left" (formula "6"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq1" (formula "33") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "33") (term "0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "closeFalse" (formula "33"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "7"))
                                                (rule "andLeft" (formula "34"))
                                                (rule "inEqSimp_homoInEq1" (formula "34"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0"))
                                                (rule "add_literals" (formula "34") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "34") (term "1,0"))
                                                (rule "add_literals" (formula "34") (term "0"))
                                                (rule "leq_literals" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                (rule "add_literals" (formula "35") (term "0,0,1"))
                                                (rule "leq_literals" (formula "35") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "35"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "5"))
                                       (rule "cut_direct" (formula "16") (term "0"))
                                       (branch "CUT: result_300.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "17"))
                                          (rule "true_left" (formula "17"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "34"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "7"))
                                                (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                                (rule "add_literals" (formula "7") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "7") (term "1,0"))
                                                (rule "add_literals" (formula "7") (term "0"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_subsumption0" (formula "6") (ifseqformula "34"))
                                                (rule "leq_literals" (formula "6") (term "0"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "33"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_zero_right" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_300.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "arrayLengthNotNegative" (formula "4") (term "0"))
                                          (rule "arrayLengthIsAnInt" (formula "5") (term "0"))
                                          (rule "expand_inInt" (formula "5"))
                                          (rule "replace_int_MIN" (formula "5") (term "0,1"))
                                          (rule "replace_int_MAX" (formula "5") (term "1,0"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_commuteLeq" (formula "6"))
                                          (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "4"))
                                          (rule "leq_literals" (formula "6") (term "0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "5"))
                                          (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                                          (rule "mul_literals" (formula "6") (term "0,0,0"))
                                          (rule "polySimp_addComm1" (formula "6") (term "0"))
                                          (rule "add_literals" (formula "6") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "6"))
                                          (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                                          (rule "polySimp_elimOne" (formula "6") (term "0"))
                                          (rule "ifthenelse_split" (formula "30") (term "0"))
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "32") (term "1,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "31") (term "1,0,0") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,1,1,0") (ifseqformula "31"))
                                             (rule "applyEqReverse" (formula "32") (term "0,0,0,0,0,0") (ifseqformula "31"))
                                             (rule "hideAuxiliaryEq" (formula "31"))
                                             (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "true_left" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "34"))
                                                (rule "qeq_literals" (formula "3") (term "0"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "closeFalse" (formula "3"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "34") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "34") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "34") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                                                (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                                                (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1"))
                                                (rule "leq_literals" (formula "34") (term "0,1"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "inEqSimp_contradInEq1" (formula "34") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "34") (term "0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "closeFalse" (formula "34"))
                                             )
                                          )
                                          (branch " result_302.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "31") (term "1,0") (ifseqformula "30"))
                                             (rule "hideAuxiliaryEq" (formula "30"))
                                             (rule "replace_known_right" (formula "30") (term "1,0,0") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "30"))
                                             (rule "replace_known_right" (formula "29") (term "1") (ifseqformula "38"))
                                              (builtin "One Step Simplification" (formula "29"))
                                             (rule "ifthenelse_split" (formula "23") (term "0"))
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "26") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "24"))
                                                (rule "applyEqReverse" (formula "26") (term "0,1,1,0") (ifseqformula "24"))
                                                (rule "hideAuxiliaryEq" (formula "24"))
                                                (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "true_left" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "35"))
                                                (rule "andLeft" (formula "7"))
                                                (rule "inEqSimp_homoInEq1" (formula "7"))
                                                (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
                                                (rule "add_literals" (formula "7") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "7") (term "1,0"))
                                                (rule "add_zero_right" (formula "7") (term "0"))
                                                (rule "leq_literals" (formula "7"))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch " result_301.<created>@anon_heap_withDelimiter«anonHeapFunction» = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "25") (term "0,1,1,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "25") (term "0,0,0,0,0,0") (ifseqformula "23"))
                                                (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "23"))
                                                (rule "hideAuxiliaryEq" (formula "23"))
                                                (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "37"))
                                                 (builtin "One Step Simplification" (formula "22"))
                                                (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                (rule "replaceKnownSelect_taclet11020000_46" (formula "35") (term "0,0,0,0"))
                                                (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "2"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "3"))
                                                (rule "qeq_literals" (formula "35") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "7"))
                                                (rule "andLeft" (formula "35"))
                                                (rule "inEqSimp_homoInEq1" (formula "35"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0"))
                                                (rule "add_literals" (formula "35") (term "0"))
                                                (rule "leq_literals" (formula "35"))
                                                (rule "closeFalse" (formula "35"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               )
               (branch
                  (rule "andRight" (formula "47"))
                  (branch
                     (rule "wellFormedAnonEQ" (formula "47") (ifseqformula "30"))
                     (rule "wellFormedAnonEQ" (formula "47") (term "0") (ifseqformula "22"))
                     (rule "wellFormedAnonEQ" (formula "47") (term "0,0") (ifseqformula "14"))
                     (rule "wellFormedAnonEQ" (formula "47") (term "0,0,0") (ifseqformula "10"))
                     (rule "replace_known_left" (formula "47") (term "1,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "3")) (ifInst ""  (formula "9")) (ifInst ""  (formula "21")) (ifInst ""  (formula "29")))
                     (rule "closeTrue" (formula "47"))
                  )
                  (branch
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (ifseqformula "30"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0") (ifseqformula "22"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0") (ifseqformula "14"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0") (ifseqformula "10"))
                     (rule "orRight" (formula "47"))
                     (rule "orRight" (formula "47"))
                     (rule "orRight" (formula "47"))
                     (rule "orRight" (formula "47"))
                     (rule "replace_known_right" (formula "31") (term "1,0,0") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "47")) (ifInst ""  (formula "51")) (ifInst ""  (formula "50")) (ifInst ""  (formula "48")))
                     (rule "closeFalse" (formula "31"))
                  )
               )
            )
            (branch "Null reference (var_1 = null)"
                (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "37")))
               (rule "closeTrue" (formula "47"))
            )
         )
         (branch "Exceptional Post (toArray)"
             (builtin "One Step Simplification" (formula "29"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "andLeft" (formula "29"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0") (ifseqformula "29"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1,0") (ifseqformula "21"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,1,0") (ifseqformula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,0,0,1,0") (ifseqformula "10"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "32"))
            (rule "notLeft" (formula "30"))
            (rule "close" (formula "34") (ifseqformula "33"))
         )
         (branch "Pre (toArray)"
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "1,1") (ifseqformula "21"))
            (rule "wellFormedAnonEQ" (formula "40") (term "0,1") (ifseqformula "21"))
            (rule "wellFormedAnonEQ" (formula "40") (term "0,0,1") (ifseqformula "14"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,1,1") (ifseqformula "14"))
            (rule "wellFormedAnonEQ" (formula "40") (term "0,0,0,1") (ifseqformula "10"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,0,1,1") (ifseqformula "10"))
            (rule "replaceKnownSelect_taclet000_21" (formula "40") (term "0,1,1,0,0,0,1,0"))
            (rule "replaceKnownSelect_taclet000_21" (formula "40") (term "0,0,0,0,1,0,0,1,0"))
            (rule "replace_known_left" (formula "40") (term "1,0,0,0,1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "3")) (ifInst ""  (formula "13")) (ifInst ""  (formula "20")))
            (rule "castedGetAny" (formula "40") (term "0,0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "0,1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "26") (term "0"))
            (rule "nnf_imp2or" (formula "18") (term "0"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "26") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
            (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
            (rule "mul_literals" (formula "26") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "18") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
            (rule "times_zero_1" (formula "18") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "mul_literals" (formula "7") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "40") (term "0,0,1,0"))
            (rule "nnf_notAnd" (formula "40") (term "0,0,0,1,0"))
            (rule "inEqSimp_notLeq" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "40") (term "1,0,0,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "0,1,0,0,1,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "40") (term "0,0,1,0,0,0,1,0"))
            (rule "add_literals" (formula "40") (term "0,0,0,1,0,0,0,1,0"))
            (rule "add_zero_left" (formula "40") (term "0,0,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "40") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "40") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_notGeq" (formula "40") (term "0,0,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "1,0,0,0,0,0,0,1,0"))
            (rule "add_zero_right" (formula "40") (term "0,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "40") (term "0,0,0,0,1,0"))
            (rule "mul_literals" (formula "40") (term "1,0,0,0,0,1,0"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "40") (term "0,0"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "commute_or_2" (formula "26") (term "0"))
            (rule "commute_or_2" (formula "18") (term "0"))
            (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "40") (term "0,1,0"))
            (rule "replaceKnownSelect_taclet000_24" (formula "40") (term "0,0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_25" (formula "40") (term "0,0,0,1,0"))
            (rule "replace_known_right" (formula "40") (term "0,0,1,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "commute_or_2" (formula "7") (term "0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "40") (term "1,0"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "replaceKnownSelect_taclet000_27" (formula "40") (term "0,1,1,0"))
            (rule "replaceKnownSelect_taclet000_26" (formula "40") (term "1,1,1,0"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "replaceKnownSelect_taclet000_27" (formula "40") (term "0,0,1,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_28" (formula "40") (term "0,0,1,1,0"))
            (rule "insert_constant_string_value" (formula "40") (term "0,0,1,0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "37")))
            (rule "insert_constant_string_value" (formula "40") (term "0,0,1,0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "insert_constant_string_value" (formula "40") (term "0,0,1,0,0,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "replaceKnownSelect_taclet000_29" (formula "40") (term "0,0,1,0,0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_30" (formula "40") (term "0,0,1,0,0,0,1,0"))
            (rule "replaceKnownSelect_taclet000_33" (formula "40") (term "0,0,0,0,0,0,0,1,0"))
            (rule "replaceKnownSelect_taclet000_31" (formula "40") (term "0,0,1,0,0,0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_34" (formula "40") (term "0,0,0,0,0,0,0,1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_32" (formula "40") (term "0,0,1,0,0,0,0,1,0"))
            (rule "castDel" (formula "40") (term "0,0,0,1,0,0,1,0"))
            (rule "castDel" (formula "40") (term "0,0,0,1,0,1,0"))
            (rule "castDel" (formula "40") (term "0,0,0,1,1,0"))
            (rule "replace_known_right" (formula "40") (term "0,1,0,0,0,1,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "31")) (ifInst ""  (formula "32")) (ifInst ""  (formula "34")) (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
            (rule "commute_or" (formula "26") (term "0,0"))
            (rule "commute_or" (formula "18") (term "0,0"))
            (rule "commute_or" (formula "7") (term "0,0"))
            (rule "commute_or_2" (formula "26") (term "0"))
            (rule "commute_or_2" (formula "18") (term "0"))
            (rule "commute_or_2" (formula "7") (term "0"))
            (rule "commute_or_2" (formula "40") (term "0,1"))
            (rule "commute_or_2" (formula "40") (term "1"))
            (rule "replace_known_left" (formula "40") (term "1") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "allRight" (formula "40") (inst "sk=i_0"))
            (rule "orRight" (formula "40"))
            (rule "orRight" (formula "40"))
            (rule "notRight" (formula "42"))
            (rule "inEqSimp_geqRight" (formula "42"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "42"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "ifthenelse_split" (formula "26") (term "0"))
            (branch "result_302.<created> = TRUE TRUE"
               (rule "applyEqReverse" (formula "28") (term "1,0") (ifseqformula "27"))
               (rule "hideAuxiliaryEq" (formula "27"))
               (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0,0") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "29") (term "0,1,1,0") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "28"))
               (rule "hideAuxiliaryEq" (formula "28"))
               (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "applyEqReverse" (formula "28") (term "0,1,1,0") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "28") (term "0,0,0,0,0,0") (ifseqformula "27"))
               (rule "hideAuxiliaryEq" (formula "27"))
               (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "ifthenelse_split" (formula "19") (term "0"))
               (branch "result_301.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                  (rule "hideAuxiliaryEq" (formula "20"))
                  (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "applyEqReverse" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "20"))
                  (rule "applyEqReverse" (formula "21") (term "0,1,1,0") (ifseqformula "20"))
                  (rule "hideAuxiliaryEq" (formula "20"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "cut_direct" (formula "5") (term "0"))
                  (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                           (rule "andLeft" (formula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "24"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "leq_literals" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_literals" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
                           (rule "andLeft" (formula "24"))
                           (rule "inEqSimp_homoInEq1" (formula "24"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
                           (rule "add_literals" (formula "24") (term "1,1,0"))
                           (rule "times_zero_1" (formula "24") (term "1,0"))
                           (rule "add_zero_right" (formula "24") (term "0"))
                           (rule "leq_literals" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                     )
                  )
                  (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_literals" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "24"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_literals" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "closeFalse" (formula "24"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "24") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                           (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "24") (term "0,0,1"))
                           (rule "leq_literals" (formula "24") (term "0,1"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "24"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "result_301.<created> = TRUE FALSE"
                  (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "19"))
                  (rule "hideAuxiliaryEq" (formula "19"))
                  (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "cut_direct" (formula "5") (term "0"))
                  (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "andLeft" (formula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_literals" (formula "25") (term "0"))
                           (rule "leq_literals" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "andLeft" (formula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_zero_right" (formula "25") (term "0"))
                           (rule "leq_literals" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "andLeft" (formula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_zero_right" (formula "25") (term "0"))
                           (rule "leq_literals" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_literals" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                  )
                  (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "andLeft" (formula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_zero_right" (formula "25") (term "0"))
                           (rule "leq_literals" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_literals" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "4") (term "0,0"))
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0,0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                           (rule "andLeft" (formula "25"))
                           (rule "inEqSimp_homoInEq1" (formula "25"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                           (rule "add_literals" (formula "25") (term "1,1,0"))
                           (rule "times_zero_1" (formula "25") (term "1,0"))
                           (rule "add_literals" (formula "25") (term "0"))
                           (rule "leq_literals" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                        (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "allLeft" (formula "25") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "25") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                           (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "25") (term "0,0,1"))
                           (rule "leq_literals" (formula "25") (term "0,1"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "25") (term "0"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "closeFalse" (formula "25"))
                        )
                     )
                  )
               )
            )
            (branch "result_302.<created> = TRUE FALSE"
               (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "26"))
               (rule "hideAuxiliaryEq" (formula "26"))
               (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "replace_known_right" (formula "27") (term "0,0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "replace_known_right" (formula "25") (term "0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "ifthenelse_split" (formula "19") (term "0"))
               (branch "result_301.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "21") (term "1,0") (ifseqformula "20"))
                  (rule "hideAuxiliaryEq" (formula "20"))
                  (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "applyEqReverse" (formula "21") (term "0,1,1,0") (ifseqformula "20"))
                  (rule "applyEqReverse" (formula "21") (term "0,0,0,0,0,0") (ifseqformula "20"))
                  (rule "hideAuxiliaryEq" (formula "20"))
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "19"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cut_direct" (formula "5") (term "0"))
                     (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: result_300.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                        (branch "CUT: result_300.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: result_300.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: result_300.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "26"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_zero_right" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "cut_direct" (formula "5") (term "0"))
                     (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: result_300.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: result_300.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                           (rule "andLeft" (formula "26"))
                           (rule "inEqSimp_homoInEq1" (formula "26"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                           (rule "add_literals" (formula "26") (term "1,1,0"))
                           (rule "times_zero_1" (formula "26") (term "1,0"))
                           (rule "add_zero_right" (formula "26") (term "0"))
                           (rule "leq_literals" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                     (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "cut_direct" (formula "15") (term "0"))
                        (branch "CUT: result_300.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "26"))
                           (rule "qeq_literals" (formula "1") (term "0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "CUT: result_300.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "allLeft" (formula "26") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "26") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "26") (term "0,0,1"))
                           (rule "add_literals" (formula "26") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "26") (term "1,0,0,1"))
                           (rule "add_literals" (formula "26") (term "0,0,1"))
                           (rule "leq_literals" (formula "26") (term "0,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "closeFalse" (formula "26"))
                        )
                     )
                  )
               )
               (branch "result_301.<created> = TRUE FALSE"
                  (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "19"))
                  (rule "hideAuxiliaryEq" (formula "19"))
                  (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "5") (term "0"))
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "27") (term "0,0,1"))
                           (rule "leq_literals" (formula "27") (term "0,1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "27"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_literals" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "5") (term "0"))
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                           (rule "add_literals" (formula "27") (term "0,0,1"))
                           (rule "leq_literals" (formula "27") (term "0,1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                           (rule "add_literals" (formula "27") (term "0,0,1"))
                           (rule "leq_literals" (formula "27") (term "0,1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                     )
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "cut_direct" (formula "15") (term "0"))
                     (branch "CUT: result_300.<created> = TRUE TRUE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "true_left" (formula "16"))
                        (rule "cut_direct" (formula "5") (term "0"))
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
                           (rule "andLeft" (formula "27"))
                           (rule "inEqSimp_homoInEq1" (formula "27"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
                           (rule "add_literals" (formula "27") (term "1,1,0"))
                           (rule "times_zero_1" (formula "27") (term "1,0"))
                           (rule "add_literals" (formula "27") (term "0"))
                           (rule "leq_literals" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                           (rule "add_literals" (formula "27") (term "0,0,1"))
                           (rule "leq_literals" (formula "27") (term "0,1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                     )
                     (branch "CUT: result_300.<created> = TRUE FALSE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "cut_direct" (formula "5") (term "0"))
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "true_left" (formula "6"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                           (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                           (rule "add_literals" (formula "27") (term "0,0,1"))
                           (rule "leq_literals" (formula "27") (term "0,1"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeFalse" (formula "27"))
                        )
                        (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "allLeft" (formula "27") (inst "t=i_0"))
                           (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "27") (term "0,0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "27"))
                           (rule "andLeft" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                           (rule "add_literals" (formula "2") (term "1,1,0"))
                           (rule "times_zero_1" (formula "2") (term "1,0"))
                           (rule "add_literals" (formula "2") (term "0"))
                           (rule "leq_literals" (formula "2"))
                           (rule "closeFalse" (formula "2"))
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (toList)"
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,1,0") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,0") (ifseqformula "9"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "23"))
         (rule "notLeft" (formula "21"))
         (rule "close" (formula "24") (ifseqformula "23"))
      )
      (branch "Pre (toList)"
          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "19")) (ifInst ""  (formula "26")) (ifInst ""  (formula "19")) (ifInst ""  (formula "26")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,1") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0,1") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1,1") (ifseqformula "9"))
         (rule "wellFormedAnonEQ" (formula "30") (term "0,0,1") (ifseqformula "13"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "0,1,0,1") (ifseqformula "9"))
         (rule "wellFormedAnonEQ" (formula "30") (term "0,0,0,1") (ifseqformula "9"))
         (rule "replaceKnownSelect_taclet00_2" (formula "30") (term "0,1,1,0,0,0,1,0"))
         (rule "replaceKnownSelect_taclet00_2" (formula "30") (term "0,0,0,0,1,0,0,1,0"))
         (rule "replace_known_left" (formula "30") (term "0,0,0,0,1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "8")) (ifInst ""  (formula "12")))
         (rule "castedGetAny" (formula "30") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "30") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "6") (term "0"))
         (rule "nnf_imp2or" (formula "17") (term "0"))
         (rule "nnf_notAnd" (formula "6") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "6") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "6") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0,0"))
         (rule "nnf_imp2or" (formula "30") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "30") (term "0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "30") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "30") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "30") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "30") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "30") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "30") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "30") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0,0,1,0"))
         (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "30") (term "0,1,1,0"))
         (rule "replaceKnownSelect_taclet00_4" (formula "30") (term "0,0,0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "30") (term "0,0,0,1,1,0"))
         (rule "replace_known_right" (formula "30") (term "0,0,1,1,0") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "30") (term "1,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "replaceKnownSelect_taclet00_18" (formula "30") (term "1,1,1,0"))
         (rule "replaceKnownSelect_taclet00_6" (formula "30") (term "0,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_20" (formula "30") (term "1,1,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "30") (term "0,1,1,0"))
         (rule "replaceKnownSelect_taclet00_6" (formula "30") (term "0,0,1,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "30") (term "0,0,1,0,1,0"))
         (rule "insert_constant_string_value" (formula "30") (term "0,0,1,0,0,1,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "7")))
         (rule "insert_constant_string_value" (formula "30") (term "0,0,1,0,0,1,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "insert_constant_string_value" (formula "30") (term "0,0,1,0,0,0,1,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "replaceKnownSelect_taclet00_9" (formula "30") (term "0,0,1,0,0,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_11" (formula "30") (term "0,0,1,0,0,0,0,1,0"))
         (rule "replaceKnownSelect_taclet00_15" (formula "30") (term "0,0,0,0,0,0,0,0,1,0"))
         (rule "replaceKnownSelect_taclet00_12" (formula "30") (term "0,0,1,0,0,0,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "30") (term "0,0,0,0,0,0,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_14" (formula "30") (term "0,0,1,0,0,0,0,0,1,0"))
         (rule "castDel" (formula "30") (term "0,0,0,1,0,0,1,0"))
         (rule "castDel" (formula "30") (term "0,0,0,1,0,0,0,1,0"))
         (rule "castDel" (formula "30") (term "0,0,0,1,0,1,0"))
         (rule "replace_known_right" (formula "30") (term "0,0,0,0,0,0,0,1,0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
         (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "7"))
         (rule "replace_known_right" (formula "30") (term "0,1,0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "17") (term "0,0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "commute_or_2" (formula "30") (term "1,1"))
         (rule "replace_known_left" (formula "30") (term "1,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "commute_or_2" (formula "30") (term "1"))
         (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "allRight" (formula "30") (inst "sk=i_0"))
         (rule "orRight" (formula "30"))
         (rule "notRight" (formula "31"))
         (rule "orRight" (formula "31"))
         (rule "inEqSimp_geqRight" (formula "32"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_leqRight" (formula "32"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "ifthenelse_split" (formula "18") (term "0"))
         (branch "result_301.<created> = TRUE TRUE"
            (rule "applyEqReverse" (formula "20") (term "1,0") (ifseqformula "19"))
            (rule "hideAuxiliaryEq" (formula "19"))
            (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "applyEqReverse" (formula "20") (term "0,0,0,0,0,0") (ifseqformula "19"))
            (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "19"))
            (rule "applyEqReverse" (formula "20") (term "0,1,1,0") (ifseqformula "19"))
            (rule "applyEqReverse" (formula "3") (term "0,0") (ifseqformula "19"))
            (rule "hideAuxiliaryEq" (formula "19"))
            (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "cut_direct" (formula "5") (term "0"))
            (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "cut_direct" (formula "14") (term "0"))
               (branch "CUT: result_300.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_literals" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
               (branch "CUT: result_300.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                     (rule "andLeft" (formula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                     (rule "andLeft" (formula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
            )
            (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "5"))
               (rule "cut_direct" (formula "14") (term "0"))
               (branch "CUT: result_300.<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "true_left" (formula "15"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                     (rule "andLeft" (formula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_zero_right" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
               (branch "CUT: result_300.<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "cut_direct" (formula "4") (term "0,0"))
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                     (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "18") (term "0,0,1"))
                     (rule "leq_literals" (formula "18") (term "0,1"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "18"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "allLeft" (formula "18") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "18") (term "0,0"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "inEqSimp_contradInEq1" (formula "18") (ifseqformula "2"))
                     (rule "andLeft" (formula "18"))
                     (rule "inEqSimp_homoInEq1" (formula "18"))
                     (rule "polySimp_pullOutFactor1b" (formula "18") (term "0"))
                     (rule "add_literals" (formula "18") (term "1,1,0"))
                     (rule "times_zero_1" (formula "18") (term "1,0"))
                     (rule "add_literals" (formula "18") (term "0"))
                     (rule "leq_literals" (formula "18"))
                     (rule "closeFalse" (formula "18"))
                  )
               )
            )
         )
         (branch "result_301.<created> = TRUE FALSE"
            (rule "applyEqReverse" (formula "19") (term "1,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "cut_direct" (formula "5") (term "0"))
            (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "cut_direct" (formula "4") (term "0,0"))
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cut_direct" (formula "14") (term "0"))
                  (branch "CUT: result_300.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                     (rule "andLeft" (formula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "19"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "1,1,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0"))
                     (rule "add_zero_right" (formula "19") (term "0"))
                     (rule "leq_literals" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
                  (branch "CUT: result_300.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                     (rule "add_literals" (formula "19") (term "0,0,1"))
                     (rule "leq_literals" (formula "19") (term "0,1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
               )
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "cut_direct" (formula "14") (term "0"))
                  (branch "CUT: result_300.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                     (rule "andLeft" (formula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "19"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "1,1,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0"))
                     (rule "add_literals" (formula "19") (term "0"))
                     (rule "leq_literals" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
                  (branch "CUT: result_300.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                     (rule "add_literals" (formula "19") (term "0,0,1"))
                     (rule "leq_literals" (formula "19") (term "0,1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
               )
            )
            (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "5"))
               (rule "cut_direct" (formula "4") (term "0,0"))
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "true_left" (formula "5"))
                  (rule "cut_direct" (formula "14") (term "0"))
                  (branch "CUT: result_300.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                     (rule "add_literals" (formula "19") (term "0,0,1"))
                     (rule "leq_literals" (formula "19") (term "0,1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
                  (branch "CUT: result_300.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                     (rule "andLeft" (formula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "19"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "1,1,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0"))
                     (rule "add_zero_right" (formula "19") (term "0"))
                     (rule "leq_literals" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
               )
               (branch "CUT: strPool( 〈'P'〉 ∘ ( 〈'u'〉 ∘ ( 〈'b'〉 ∘ ( 〈'l'〉 ∘ ( 〈'i'〉 ∘ ( 〈'c'〉 ∘ ( 〈' '〉 ∘ ( 〈'S'〉 ∘ ( 〈'i'〉 ∘ ( 〈'g'〉 ∘ ( 〈'n'〉 ∘ ( 〈'i'〉 ∘ ( 〈'n'〉 ∘ ( 〈'g'〉 ∘ ( 〈' '〉 ∘ ( 〈'K'〉 ∘ ( 〈'e'〉 ∘ 〈'y'〉))))))))))))))))).<created> = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "cut_direct" (formula "14") (term "0"))
                  (branch "CUT: result_300.<created> = TRUE TRUE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                     (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                     (rule "add_literals" (formula "19") (term "0,0,1"))
                     (rule "leq_literals" (formula "19") (term "0,1"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
                  (branch "CUT: result_300.<created> = TRUE FALSE"
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "allLeft" (formula "19") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "19") (term "0,0"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "2"))
                     (rule "andLeft" (formula "19"))
                     (rule "inEqSimp_homoInEq1" (formula "19"))
                     (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                     (rule "add_literals" (formula "19") (term "1,1,0"))
                     (rule "times_zero_1" (formula "19") (term "1,0"))
                     (rule "add_zero_right" (formula "19") (term "0"))
                     (rule "leq_literals" (formula "19"))
                     (rule "closeFalse" (formula "19"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (toList)"
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "17") (ifseqformula "16"))
   )
   (branch "Pre (toList)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")) (ifInst ""  (formula "16")) (ifInst ""  (formula "20")) (ifInst ""  (formula "16")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1") (ifseqformula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0,1") (ifseqformula "8"))
      (rule "wellFormedAnonEQ" (formula "21") (term "0,0,1") (ifseqformula "8"))
      (rule "replace_known_left" (formula "21") (term "1,0,0,1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "1")))
      (rule "castedGetAny" (formula "21") (term "0,0,1,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,0,1"))
      (rule "pullOutSelect" (formula "21") (term "0,0,0,1,0,0,1") (inst "selectSK=java_util_Collection_seq_0"))
      (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "4")))
      (rule "applyEqReverse" (formula "22") (term "0,0,0,1,0,0,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "21") (term "0,0,1"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0,0,1"))
      (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,1"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,1"))
      (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1"))
      (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "21") (term "0,1,1"))
      (rule "replaceKnownSelect_taclet0_0" (formula "21") (term "0,0,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "21") (term "0,0,0,1,1"))
      (rule "replace_known_right" (formula "21") (term "0,0,1,1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "commute_or_2" (formula "5") (term "0"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,1,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,0,1,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "insert_constant_string_value" (formula "21") (term "0,0,1,0,0,0,0,1,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,1,1"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,0,1,1"))
      (rule "castDel" (formula "21") (term "0,0,0,1,0,0,0,0,1,1"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,0,1,1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "15")) (ifInst ""  (formula "16")))
      (rule "pullOutSelect" (formula "21") (term "0,0,1,0,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,0,1,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,0,1,1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "pullOutSelect" (formula "21") (term "0,1,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
      (rule "applyEq" (formula "22") (term "0,0,1,0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,1") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,0,1,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "21") (term "1,1,1"))
      (rule "applyEq" (formula "21") (term "0,0,1,0,1,1") (ifseqformula "6"))
      (rule "replace_known_right" (formula "21") (term "0,1,0,1,1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "applyEq" (formula "21") (term "1,1,1,1") (ifseqformula "6"))
      (rule "pullOutSelect" (formula "21") (term "0,1,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,1,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "21") (term "0,0,1,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,1,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,1,1,1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "pullOutSelect" (formula "21") (term "0,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,0,1,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "21") (term "0,1,1") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "commute_or" (formula "5") (term "0,0"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "allRight" (formula "21") (inst "sk=i_0"))
      (rule "orRight" (formula "21"))
      (rule "notRight" (formula "22"))
      (rule "orRight" (formula "22"))
      (rule "inEqSimp_geqRight" (formula "23"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "23"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "commute_or_2" (formula "8") (term "0"))
      (rule "cut_direct" (formula "4") (term "0"))
      (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE TRUE"
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: result_300.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,1"))
            (rule "leq_literals" (formula "8") (term "0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "CUT: result_300.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,1"))
            (rule "leq_literals" (formula "8") (term "0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "CUT: strPool( 〈'H'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈'h'〉 ∘ ( 〈'e'〉 ∘ ( 〈'd'〉 ∘ ( 〈' '〉 ∘ ( 〈'P'〉 ∘ ( 〈'a'〉 ∘ ( 〈's'〉 ∘ ( 〈's'〉 ∘ ( 〈'w'〉 ∘ ( 〈'o'〉 ∘ ( 〈'r'〉 ∘ 〈'd'〉)))))))))))))).<created> = TRUE FALSE"
          (builtin "One Step Simplification" (formula "4"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: result_300.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "2"))
            (rule "andLeft" (formula "8"))
            (rule "inEqSimp_homoInEq1" (formula "8"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
            (rule "add_literals" (formula "8") (term "1,1,0"))
            (rule "times_zero_1" (formula "8") (term "1,0"))
            (rule "add_literals" (formula "8") (term "0"))
            (rule "leq_literals" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
         (branch "CUT: result_300.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "allLeft" (formula "8") (inst "t=i_0"))
            (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "8") (term "1") (ifseqformula "2"))
            (rule "inEqSimp_homoInEq1" (formula "8") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,1"))
            (rule "add_literals" (formula "8") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "8") (term "1,0,0,1"))
            (rule "add_literals" (formula "8") (term "0,0,1"))
            (rule "leq_literals" (formula "8") (term "0,1"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "1"))
            (rule "qeq_literals" (formula "8") (term "0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
      )
   )
)
(branch "Exceptional Post (withDelimiter)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (withDelimiter)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")))
   (rule "expand_inChar" (formula "15") (term "1"))
   (rule "replace_char_MAX" (formula "15") (term "1,0,1"))
   (rule "replace_char_MIN" (formula "15") (term "0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "4") (term "0"))
   (rule "nnf_notAnd" (formula "4") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
   (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "4") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
   (rule "mul_literals" (formula "4") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "15") (term "0"))
   (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "commute_or_2" (formula "4") (term "0"))
   (rule "commute_and" (formula "15"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "commute_or_2" (formula "4") (term "0"))
   (rule "charLiteral_to_int" (formula "15") (term "0,1"))
   (rule "leq_literals" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "inEqSimp_geqRight" (formula "15"))
   (rule "times_zero_1" (formula "1") (term "1,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1"))
   (rule "charLiteral_to_int" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "Null reference (c_7 = null)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
   (rule "closeTrue" (formula "15"))
)
)
}
