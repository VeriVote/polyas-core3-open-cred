\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 20 02:05:22 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Nov 20 02:05:22 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:generateDataForVoter(org.apache.commons.csv.CSVRecord,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:generateDataForVoter(org.apache.commons.csv.CSVRecord,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "25743")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "record_5,password_6,self_51,result_50,exc_65,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "exLeft" (formula "12") (inst "sk=i_0"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "eqSymm" (formula "19") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "16"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elementOfSingleton" (formula "19") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "15") (term "0,0,1,1,0,0,1,1,0"))
(rule "castedGetAny" (formula "15") (term "0,0,1,0"))
(rule "castedGetAny" (formula "15") (term "0,0,0,0,1,0,1,1,0"))
(rule "castedGetAny" (formula "14") (term "0"))
(rule "castedGetAny" (formula "15") (term "0,1,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12"))
(rule "assignment" (formula "19") (term "1"))
 (builtin "One Step Simplification" (formula "19"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "10"))
(rule "insert_constant_string_value" (formula "10") (term "0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "castDel" (formula "10") (term "0,0,0,0,0"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "10"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "10") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1,0"))
(rule "expand_inInt" (formula "10") (term "1,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "10") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "10") (term "1,0,1,0,0,1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "10"))
(rule "eqSymm" (formula "10"))
(rule "castedGetAny" (formula "12") (term "0,0,1,0"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "1,1,0,0"))
(rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "10"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "13") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3"))
 (builtin "One Step Simplification" (formula "13"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "insert_constant_string_value" (formula "13") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "castDel" (formula "13") (term "0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "15"))
(rule "notLeft" (formula "14"))
(rule "andLeft" (formula "13"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "13"))
(rule "exLeft" (formula "18") (inst "sk=i_1"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "18"))
(rule "exLeft" (formula "15") (inst "sk=i_2_0"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "castedGetAny" (formula "19") (term "0,0,1,0"))
(rule "castedGetAny" (formula "18") (term "0,0,1,0"))
(rule "castedGetAny" (formula "14") (term "0,0,1,0"))
(rule "castedGetAny" (formula "22") (term "0"))
(rule "castedGetAny" (formula "17") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "20"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "applyEq" (formula "33") (term "0") (ifseqformula "13"))
(rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "9"))
(rule "true_left" (formula "9"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "commute_and" (formula "26") (term "0,0"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "8"))
(rule "true_left" (formula "8"))
(rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "commute_and_2" (formula "25") (term "0,1,1,0"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "8"))
(rule "true_left" (formula "8"))
(rule "commute_and" (formula "10") (term "1,0,0"))
(rule "commute_and" (formula "9") (term "0,0,0"))
(rule "commute_and" (formula "9") (term "1,0,0"))
(rule "commute_and" (formula "10") (term "0,0,0"))
(rule "methodBodyExpand" (formula "58") (term "1") (newnames "heapBefore_generateDataForVoter,savedHeapBefore_generateDataForVoter"))
 (builtin "One Step Simplification" (formula "58"))
(rule "commute_and" (formula "17") (term "0,0"))
(rule "commute_and" (formula "16") (term "0,0"))
(rule "commute_and" (formula "12") (term "0,0"))
(rule "shift_paren_and" (formula "9") (term "0,0"))
(rule "commute_and_2" (formula "9") (term "0,0,0"))
(rule "shift_paren_and" (formula "10") (term "0,0"))
(rule "commute_and_2" (formula "10") (term "0,0,0"))
(rule "commute_and" (formula "24") (term "0,0,1,1,0"))
(rule "commute_and_2" (formula "24") (term "0,1,1,0"))
(rule "charLiteral_to_int" (formula "24") (term "1,0,0,0,1,1,0"))
(rule "lenNonNegative" (formula "22") (term "1"))
(rule "inEqSimp_commuteLeq" (formula "22"))
(rule "seqGetAlphaCast" (formula "24") (term "0"))
(rule "castedGetAny" (formula "24") (term "0"))
 (builtin "One Step Simplification" (formula "24"))
(rule "true_left" (formula "24"))
 (builtin "Use Operation Contract" (formula "59") (newnames "heapBefore_printStatus,exc_66,heapAfter_printStatus,anon_heap_printStatus") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::printStatus()].JML normal_behavior operation contract.0"))
(branch "Post (printStatus)"
    (builtin "One Step Simplification" (formula "27"))
    (builtin "One Step Simplification" (formula "61"))
   (rule "andLeft" (formula "27"))
   (rule "andLeft" (formula "28"))
   (rule "andLeft" (formula "29"))
   (rule "notLeft" (formula "29"))
   (rule "variableDeclarationFinalAssign" (formula "63") (term "1"))
   (rule "variableDeclarationFinal" (formula "63") (term "1") (newnames "voterId_4"))
   (rule "pullOutSelect" (formula "29") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "30") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "lenNonNegative" (formula "8") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "63") (term "1"))
   (rule "variableDeclarationAssign" (formula "63") (term "1"))
   (rule "variableDeclaration" (formula "63") (term "1") (newnames "var"))
   (rule "assignment" (formula "63") (term "1"))
    (builtin "One Step Simplification" (formula "63"))
   (rule "variableDeclarationAssign" (formula "63") (term "1"))
   (rule "variableDeclaration" (formula "63") (term "1") (newnames "var_1"))
   (rule "assignment_read_attribute_this" (formula "63") (term "1"))
    (builtin "One Step Simplification" (formula "63"))
   (rule "pullOutSelect" (formula "63") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_idCol_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")) (ifInst ""  (formula "3")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
   (rule "applyEqReverse" (formula "64") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
    (builtin "Use Operation Contract" (formula "63") (newnames "heapBefore_get,result_51,exc_67") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (get)"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "64"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1,0") (ifseqformula "27"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "32"))
      (rule "exLeft" (formula "30") (inst "sk=i_2"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "32"))
      (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "36"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "castedGetAny" (formula "32") (term "0"))
      (rule "castedGetAny" (formula "33") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "30"))
      (rule "assignment" (formula "71") (term "1"))
       (builtin "One Step Simplification" (formula "71"))
      (rule "blockEmpty" (formula "71") (term "1"))
      (rule "pullOutSelect" (formula "31") (term "0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "31"))
      (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "69")) (ifInst ""  (formula "4")))
      (rule "elementOfSingleton" (formula "31") (term "0,0"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "69")))
      (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "31"))
      (rule "applyEqReverse" (formula "32") (term "0,1") (ifseqformula "31"))
      (rule "hideAuxiliaryEq" (formula "31"))
      (rule "pullOutSelect" (formula "33") (term "0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "69")) (ifInst ""  (formula "4")))
      (rule "elementOfSingleton" (formula "33") (term "0,0"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "69")))
      (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "33"))
      (rule "hideAuxiliaryEq" (formula "33"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "34") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "34") (term "0,1,0,0"))
      (rule "replaceKnownSelect_taclet00_4" (formula "34") (term "0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "34") (term "0,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "34") (term "0,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "34") (term "0,1,1,0,0,0,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "34") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "34") (term "0,1,1,0,0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "34") (term "0,0,0,0,1,0,1"))
      (rule "replaceKnownSelect_taclet00_4" (formula "34") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet00_4" (formula "34") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "34") (term "0,0,0,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "34") (term "0,1,1,0,0,0,1,0"))
      (rule "expand_inInt" (formula "34") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "34") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "34") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "34") (term "0,1,1,0,0,1,0"))
      (rule "andLeft" (formula "34"))
      (rule "andLeft" (formula "34"))
      (rule "eqSymm" (formula "34"))
      (rule "castedGetAny" (formula "35") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "34") (term "0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "34") (term "0,0,0,0"))
      (rule "applyEq" (formula "35") (term "1,1,0,0,0") (ifseqformula "8"))
      (rule "commute_and" (formula "35") (term "1,0,0"))
      (rule "commute_and" (formula "34") (term "1,0,0"))
      (rule "commute_and" (formula "34") (term "0,0,0"))
      (rule "commute_and" (formula "35") (term "0,0,0"))
      (rule "shift_paren_and" (formula "34") (term "0,0"))
      (rule "commute_and_2" (formula "34") (term "0,0,0"))
      (rule "shift_paren_and" (formula "34") (term "0,0"))
      (rule "commute_and_2" (formula "34") (term "0,0,0"))
       (builtin "Use Operation Contract" (formula "70") (newnames "heapBefore_exitIfIdInvalid,exc_68,heapAfter_exitIfIdInvalid,anon_heap_exitIfIdInvalid") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::exitIfIdInvalid(java.lang.String)].JML normal_behavior operation contract.0"))
      (branch "Post (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "72"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "returnUnfold" (formula "73") (term "1") (inst "#v0=g"))
         (rule "variableDeclarationAssign" (formula "73") (term "1"))
         (rule "variableDeclaration" (formula "73") (term "1") (newnames "g"))
         (rule "lenNonNegative" (formula "19") (term "1"))
         (rule "inEqSimp_commuteLeq" (formula "19"))
         (rule "lenNonNegative" (formula "14") (term "1"))
         (rule "inEqSimp_commuteLeq" (formula "14"))
         (rule "seqGetAlphaCast" (formula "22") (term "0"))
         (rule "castedGetAny" (formula "22") (term "0"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "true_left" (formula "22"))
         (rule "seqGetAlphaCast" (formula "16") (term "0"))
         (rule "castedGetAny" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "lenNonNegative" (formula "18") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "18"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "1") (ifseqformula "1"))
         (rule "replace_known_right" (formula "27") (term "0") (ifseqformula "57"))
          (builtin "One Step Simplification" (formula "27"))
          (builtin "Use Operation Contract" (formula "77") (newnames "heapBefore_generateDataForVoter_0,result_52,exc_69,heapAfter_generateDataForVoter,anon_heap_generateDataForVoter") (contract "de.polyas.core3.open.cred.CredentialGenerator[de.polyas.core3.open.cred.CredentialGenerator::generateDataForVoter(java.lang.String,java.lang.String)].JML normal_behavior operation contract.0"))
         (branch "Post (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "79"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "andLeft" (formula "43"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,1,0") (ifseqformula "43"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,1,0") (ifseqformula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,1,0") (ifseqformula "31"))
            (rule "andLeft" (formula "44"))
            (rule "andLeft" (formula "45"))
            (rule "andLeft" (formula "44"))
            (rule "andLeft" (formula "45"))
            (rule "andLeft" (formula "46"))
            (rule "notLeft" (formula "47"))
            (rule "replace_known_right" (formula "44") (term "0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "assignment" (formula "84") (term "1"))
             (builtin "One Step Simplification" (formula "84"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "45"))
            (rule "andLeft" (formula "45"))
            (rule "notLeft" (formula "46"))
            (rule "andLeft" (formula "45"))
            (rule "notLeft" (formula "45"))
            (rule "notLeft" (formula "45"))
            (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "41"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "32"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_password_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "42"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "33"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "49") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_hashedPassword_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "43"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0") (ifseqformula "34"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_1"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "54")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0") (ifseqformula "35"))
            (rule "ifthenelse_negated" (formula "3") (term "0"))
            (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_password_1"))
            (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "55")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0") (ifseqformula "36"))
            (rule "ifthenelse_negated" (formula "2") (term "0"))
            (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_hashedPassword_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "37"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "5") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_2"))
            (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "57")))
            (rule "elementOfSingleton" (formula "5") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "57")))
            (rule "ifthenelse_negated" (formula "5") (term "0"))
            (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_password_2"))
            (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "58")))
            (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "58")))
            (rule "ifthenelse_negated" (formula "3") (term "0"))
            (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_hashedPassword_2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "notLeft" (formula "54"))
            (rule "notLeft" (formula "54"))
            (rule "pullOutSelect" (formula "55") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_RANDOM_0"))
            (rule "applyEq" (formula "58") (term "0") (ifseqformula "55"))
            (rule "simplifySelectOfAnonEQ" (formula "55") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "simplifySelectOfAnonEQ" (formula "55") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "simplifySelectOfAnonEQ" (formula "55") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "elementOfSingleton" (formula "55") (term "0,0"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "56") (term "1") (ifseqformula "55"))
            (rule "hideAuxiliaryEq" (formula "55"))
            (rule "pullOutSelect" (formula "54") (term "1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GROUP_0"))
            (rule "applyEq" (formula "58") (term "0") (ifseqformula "54"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "elementOfSingleton" (formula "54") (term "0,0"))
             (builtin "One Step Simplification" (formula "54"))
            (rule "applyEqReverse" (formula "55") (term "1") (ifseqformula "54"))
            (rule "applyEqReverse" (formula "58") (term "0") (ifseqformula "54"))
            (rule "hideAuxiliaryEq" (formula "54"))
            (rule "commute_or_2" (formula "53") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0,0"))
            (rule "commute_or_2" (formula "6") (term "0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0"))
            (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "55"))
            (rule "true_left" (formula "55"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "54"))
            (rule "andLeft" (formula "56"))
            (rule "notLeft" (formula "55"))
            (rule "notLeft" (formula "54"))
            (rule "pullOutSelect" (formula "54") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
            (rule "applyEq" (formula "58") (term "0") (ifseqformula "54"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "94")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0") (ifseqformula "49"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "54") (term "0"))
            (rule "pullOutSelect" (formula "56") (term "1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
            (rule "applyEq" (formula "60") (term "0") (ifseqformula "56"))
            (rule "simplifySelectOfAnonEQ" (formula "56") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "95")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0") (ifseqformula "49"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "56") (term "0"))
            (rule "pullOutSelect" (formula "54") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_1"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "96")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "54") (term "0"))
            (rule "pullOutSelect" (formula "57") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_1"))
            (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "97")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "57") (term "0"))
            (rule "pullOutSelect" (formula "54") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_2"))
            (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "98")))
            (rule "elementOfSingleton" (formula "54") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "98")))
            (rule "ifthenelse_negated" (formula "54") (term "0"))
            (rule "pullOutSelect" (formula "58") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_2"))
            (rule "simplifySelectOfAnonEQ" (formula "58") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "99")))
            (rule "elementOfSingleton" (formula "58") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "99")))
            (rule "ifthenelse_negated" (formula "58") (term "0"))
            (rule "commute_or_2" (formula "53"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "57"))
            (rule "true_left" (formula "57"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "60"))
            (rule "andLeft" (formula "60"))
            (rule "notLeft" (formula "60"))
            (rule "pullOutSelect" (formula "60") (term "1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
            (rule "applyEq" (formula "63") (term "0") (ifseqformula "60"))
            (rule "simplifySelectOfAnonEQ" (formula "60") (ifseqformula "52"))
             (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "65")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0") (ifseqformula "49"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "60") (term "0"))
            (rule "pullOutSelect" (formula "60") (term "1,0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_1"))
            (rule "simplifySelectOfAnonEQ" (formula "60") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "66")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0") (ifseqformula "40"))
            (rule "ifthenelse_negated" (formula "60") (term "0"))
            (rule "pullOutSelect" (formula "60") (term "1,0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_2"))
            (rule "simplifySelectOfAnonEQ" (formula "60") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "67")))
            (rule "elementOfSingleton" (formula "60") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "67")))
            (rule "ifthenelse_negated" (formula "60") (term "0"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "63"))
            (rule "true_left" (formula "63"))
            (rule "commute_or_2" (formula "56") (term "0,0"))
            (rule "methodCallReturn" (formula "106") (term "1"))
            (rule "assignment" (formula "106") (term "1"))
             (builtin "One Step Simplification" (formula "106"))
            (rule "commute_or_2" (formula "59") (term "0,0"))
            (rule "commute_or_2" (formula "62") (term "0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "101") (term "0") (ifseqformula "10"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "102"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "56") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "applyEqReverse" (formula "57") (term "1,0") (ifseqformula "56"))
            (rule "hideAuxiliaryEq" (formula "56"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "applyEqReverse" (formula "65") (term "0") (ifseqformula "56"))
            (rule "hideAuxiliaryEq" (formula "56"))
            (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "applyEqReverse" (formula "64") (term "0") (ifseqformula "55"))
            (rule "hideAuxiliaryEq" (formula "55"))
            (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "applyEqReverse" (formula "56") (term "1,0") (ifseqformula "55"))
            (rule "hideAuxiliaryEq" (formula "55"))
            (rule "replace_known_left" (formula "56") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "applyEqReverse" (formula "59") (term "1,0,0,0,0,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "58") (term "1,0,0,0,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "57") (term "1,0,0,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "59") (term "1,2,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "57") (term "1,1,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "57") (term "1,2,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "62") (term "0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "59") (term "1,0,1,0,0,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "58") (term "1,2,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "59") (term "1,0,1,0,0") (ifseqformula "56"))
            (rule "applyEqReverse" (formula "58") (term "1,0,1,0,0") (ifseqformula "56"))
            (rule "hideAuxiliaryEq" (formula "56"))
            (rule "replace_known_left" (formula "55") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "55"))
            (rule "applyEqReverse" (formula "56") (term "1,2,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "58") (term "1,0,1,0,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "58") (term "1,0,1,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "57") (term "1,0,1,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "61") (term "0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "57") (term "1,0,0,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "58") (term "1,2,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "58") (term "1,0,0,0,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "56") (term "1,1,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "56") (term "1,0,0,0") (ifseqformula "55"))
            (rule "applyEqReverse" (formula "57") (term "1,2,0") (ifseqformula "55"))
            (rule "hideAuxiliaryEq" (formula "55"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "11"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "12"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "94") (term "0") (ifseqformula "13"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "95"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "92") (term "0") (ifseqformula "14"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "93"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "92") (term "0") (ifseqformula "15"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "93"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "16"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "17"))
            (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "29"))
            (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
            (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "83"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "1") (ifseqformula "17"))
            (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "84")))
            (rule "true_left" (formula "29"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "93") (term "0") (ifseqformula "17"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "94"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "18"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "seqGetAlphaCast" (formula "56") (term "0"))
            (rule "castedGetAny" (formula "56") (term "0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "true_left" (formula "56"))
            (rule "seqGetAlphaCast" (formula "57") (term "0"))
            (rule "castedGetAny" (formula "57") (term "0"))
             (builtin "One Step Simplification" (formula "57"))
            (rule "true_left" (formula "57"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "86") (term "0") (ifseqformula "19"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "87"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "89") (term "0") (ifseqformula "20"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "90"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "21"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "90") (term "0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "91"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "23"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "95") (term "0") (ifseqformula "24"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "96"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "100") (term "0") (ifseqformula "25"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "101"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "99") (term "0") (ifseqformula "26"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "100"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "87") (term "0") (ifseqformula "27"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "88"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "90") (term "0") (ifseqformula "28"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "91"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "90") (term "0") (ifseqformula "29"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "91"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "methodCallEmpty" (formula "120") (term "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "88") (term "0") (ifseqformula "30"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "89"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_left" (formula "79") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "79"))
            (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "79"))
            (rule "hideAuxiliaryEq" (formula "79"))
            (rule "replace_known_left" (formula "77") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEqReverse" (formula "78") (term "1,0") (ifseqformula "77"))
            (rule "hideAuxiliaryEq" (formula "77"))
            (rule "replace_known_left" (formula "77") (term "0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "77"))
            (rule "hideAuxiliaryEq" (formula "77"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "84") (term "0") (ifseqformula "31"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "85"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "87") (term "0") (ifseqformula "32"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "88"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "tryEmpty" (formula "119") (term "1"))
            (rule "emptyModality" (formula "119") (term "1"))
            (rule "andRight" (formula "119"))
            (branch
               (rule "andRight" (formula "119"))
               (branch
                  (rule "andRight" (formula "119"))
                  (branch
                      (builtin "One Step Simplification" (formula "119"))
                     (rule "inEqSimp_ltToLeq" (formula "69"))
                     (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "69") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "56"))
                     (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "56") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "49"))
                     (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "49") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "46") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "51") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_gtToGeq" (formula "63") (term "0,0,0,1,1,0"))
                     (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0,1,1,0"))
                     (rule "add_literals" (formula "63") (term "0,0,0,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,1,0,0,1,1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "60"))
                     (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "60") (term "0"))
                     (rule "inEqSimp_ltToLeq" (formula "53") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "63") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "69"))
                     (rule "polySimp_mulLiterals" (formula "69") (term "0"))
                     (rule "polySimp_elimOne" (formula "69") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "56"))
                     (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                     (rule "polySimp_elimOne" (formula "56") (term "0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "49"))
                     (rule "polySimp_mulLiterals" (formula "49") (term "0"))
                     (rule "polySimp_elimOne" (formula "49") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "51") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,0,0,1,1,0"))
                     (rule "mul_literals" (formula "63") (term "1,0,0,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,1,1,0"))
                     (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,1,1,0"))
                     (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,1,1,0"))
                     (rule "mul_literals" (formula "63") (term "0,1,1,0,0,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,1,1,0"))
                     (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,1,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "60"))
                     (rule "polySimp_mulLiterals" (formula "60") (term "0"))
                     (rule "polySimp_elimOne" (formula "60") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "53") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "63") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "63") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "63") (term "1,1,0,0,0"))
                     (rule "inEqSimp_and_subsumption3" (formula "42") (term "0,0,0"))
                     (rule "leq_literals" (formula "42") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "inEqSimp_and_subsumption3" (formula "43") (term "0,0,0"))
                     (rule "leq_literals" (formula "43") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "nnf_imp2or" (formula "46") (term "0"))
                     (rule "nnf_imp2or" (formula "51") (term "0"))
                     (rule "nnf_imp2or" (formula "63") (term "1,0"))
                     (rule "nnf_imp2or" (formula "53") (term "0"))
                     (rule "nnf_imp2or" (formula "42") (term "0"))
                     (rule "nnf_imp2or" (formula "43") (term "0"))
                     (rule "nnf_imp2or" (formula "63") (term "0"))
                     (rule "nnf_notAnd" (formula "46") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "46") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "46") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "46") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "46") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "46") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "46") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "46") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "46") (term "1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "46") (term "1,0,0"))
                     (rule "mul_literals" (formula "46") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "46") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "1,0,0"))
                     (rule "mul_literals" (formula "46") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "51") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "51") (term "1,0,0"))
                     (rule "mul_literals" (formula "51") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "51") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "1,0,0"))
                     (rule "mul_literals" (formula "51") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "51") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "51") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "51") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "51") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "51") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "51") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "51") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "51") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "53") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "53") (term "1,0,0"))
                     (rule "mul_literals" (formula "53") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "53") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
                     (rule "mul_literals" (formula "53") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "53") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "53") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "53") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "53") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "53") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "53") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "53") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "42") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0"))
                     (rule "mul_literals" (formula "42") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "42") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0"))
                     (rule "mul_literals" (formula "42") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "43") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0"))
                     (rule "add_literals" (formula "43") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,1,0,0"))
                     (rule "nnf_notAnd" (formula "63") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "63") (term "1,0,0"))
                     (rule "mul_literals" (formula "63") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "63") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0"))
                     (rule "mul_literals" (formula "63") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "63") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "63") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "63") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "63") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "63") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "63") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "63") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "42") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "42") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "42") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "42") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "42") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "42") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "42") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "42") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "42") (term "1,0,0,0,0"))
                     (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "43") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,0,0,1,0,0,0"))
                     (rule "add_zero_right" (formula "43") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "43") (term "0,0,0,0"))
                     (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0,0"))
                     (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "43") (term "0,0,0,0,0,0"))
                     (rule "add_literals" (formula "43") (term "0,0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "43") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "43") (term "1,0,0,0,0"))
                     (rule "polySimp_elimOne" (formula "43") (term "1,0,0,0,0"))
                     (rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "119"))
                     (rule "replaceKnownSelect_taclet0000_8" (formula "119") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet0000_10" (formula "119") (term "0,0,1,0"))
                     (rule "replaceKnownSelect_taclet0000_9" (formula "119") (term "0,0,0,0"))
                     (rule "replace_known_right" (formula "119") (term "0,1") (ifseqformula "82"))
                      (builtin "One Step Simplification" (formula "119") (ifInst ""  (formula "81")) (ifInst ""  (formula "80")))
                     (rule "closeTrue" (formula "119"))
                  )
                  (branch
                     (rule "andRight" (formula "119"))
                     (branch
                         (builtin "One Step Simplification" (formula "119"))
                        (rule "notRight" (formula "119"))
                        (rule "inEqSimp_ltToLeq" (formula "64") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "50"))
                        (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "50") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "54") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "57"))
                        (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "57") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "70"))
                        (rule "polySimp_mulComm0" (formula "70") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "70") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "61"))
                        (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "61") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "64") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "64") (term "1,0,0,0,0,0,1,1,0"))
                        (rule "add_literals" (formula "64") (term "0,0,0,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "52") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "64") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,1,0,0,1,1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "47") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "64") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "64") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "64") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "64") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "44") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "44") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "44") (term "1,1,0,0,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "50"))
                        (rule "polySimp_mulLiterals" (formula "50") (term "0"))
                        (rule "polySimp_elimOne" (formula "50") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "54") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "54") (term "1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "54") (term "1,1,0,0,0"))
                        (rule "mul_literals" (formula "54") (term "0,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "54") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "57"))
                        (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                        (rule "polySimp_elimOne" (formula "57") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "70"))
                        (rule "polySimp_mulLiterals" (formula "70") (term "0"))
                        (rule "polySimp_elimOne" (formula "70") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "61"))
                        (rule "polySimp_mulLiterals" (formula "61") (term "0"))
                        (rule "polySimp_elimOne" (formula "61") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "64") (term "0,0,0,1,1,0"))
                        (rule "mul_literals" (formula "64") (term "1,0,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "52") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "52") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "52") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "64") (term "1,0,0,1,1,0"))
                        (rule "polySimp_mulComm0" (formula "64") (term "1,1,0,0,1,1,0"))
                        (rule "polySimp_rightDist" (formula "64") (term "1,1,0,0,1,1,0"))
                        (rule "mul_literals" (formula "64") (term "0,1,1,0,0,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "64") (term "1,1,1,0,0,1,1,0"))
                        (rule "polySimp_elimOne" (formula "64") (term "1,1,1,0,0,1,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0"))
                        (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,0"))
                        (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0"))
                        (rule "mul_literals" (formula "47") (term "0,1,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0"))
                        (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                        (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
                        (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0"))
                        (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "79"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0"))
                        (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "close" (formula "87") (ifseqformula "2"))
                     )
                     (branch
                         (builtin "One Step Simplification" (formula "119") (ifInst ""  (formula "83")))
                        (rule "closeTrue" (formula "119"))
                     )
                  )
               )
               (branch
                   (builtin "One Step Simplification" (formula "119"))
                  (rule "closeTrue" (formula "119"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "119"))
               (rule "allRight" (formula "119") (inst "sk=f_0"))
               (rule "allRight" (formula "119") (inst "sk=o_0"))
               (rule "orRight" (formula "119"))
               (rule "orRight" (formula "119"))
               (rule "eqSymm" (formula "121"))
               (rule "inEqSimp_ltToLeq" (formula "51") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_gtToGeq" (formula "63") (term "0,0,0,1,1,0"))
               (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0,1,1,0"))
               (rule "add_literals" (formula "63") (term "0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "60"))
               (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "60") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "46") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "56"))
               (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "56") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "63") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "69"))
               (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "69") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "49"))
               (rule "polySimp_mulComm0" (formula "49") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "49") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "51") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "51") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "51") (term "1,0,0,0"))
               (rule "mul_literals" (formula "51") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "51") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "51") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "42") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "42") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,0,0,1,1,0"))
               (rule "mul_literals" (formula "63") (term "1,0,0,0,1,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "60"))
               (rule "polySimp_mulLiterals" (formula "60") (term "0"))
               (rule "polySimp_elimOne" (formula "60") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "46") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "46") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "46") (term "1,0,0,0"))
               (rule "mul_literals" (formula "46") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "46") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "46") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0"))
               (rule "mul_literals" (formula "53") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "56"))
               (rule "polySimp_mulLiterals" (formula "56") (term "0"))
               (rule "polySimp_elimOne" (formula "56") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "63") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "63") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "63") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "69"))
               (rule "polySimp_mulLiterals" (formula "69") (term "0"))
               (rule "polySimp_elimOne" (formula "69") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "49"))
               (rule "polySimp_mulLiterals" (formula "49") (term "0"))
               (rule "polySimp_elimOne" (formula "49") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "43") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "43") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "63") (term "0,1,1,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,1,1,0"))
               (rule "pullOutSelect" (formula "121") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "78"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "75"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "66"))
               (rule "eqSymm" (formula "122"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "76"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "67"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "68"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "123")))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "122"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "inEqSimp_and_subsumption3" (formula "44") (term "0,0,0"))
               (rule "leq_literals" (formula "44") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "inEqSimp_and_subsumption3" (formula "45") (term "0,0,0"))
               (rule "leq_literals" (formula "45") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "45"))
               (rule "nnf_imp2or" (formula "53") (term "0"))
               (rule "nnf_imp2or" (formula "48") (term "0"))
               (rule "nnf_imp2or" (formula "55") (term "0"))
               (rule "nnf_imp2or" (formula "65") (term "0"))
               (rule "nnf_imp2or" (formula "44") (term "0"))
               (rule "nnf_imp2or" (formula "45") (term "0"))
               (rule "nnf_notAnd" (formula "53") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "53") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "53") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "53") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "53") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "53") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "53") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "53") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "53") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "53") (term "1,0,0"))
               (rule "mul_literals" (formula "53") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "53") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0"))
               (rule "mul_literals" (formula "53") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "48") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "48") (term "1,0,0"))
               (rule "times_zero_1" (formula "48") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "48") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0"))
               (rule "mul_literals" (formula "48") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "48") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "48") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "48") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "48") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "48") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "48") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "48") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "48") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "55") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "55") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "55") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "55") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "55") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "55") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "55") (term "1,0,0"))
               (rule "mul_literals" (formula "55") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "55") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0"))
               (rule "mul_literals" (formula "55") (term "1,1,0,0"))
               (rule "nnf_imp2or" (formula "65") (term "1,0"))
               (rule "nnf_notAnd" (formula "65") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "65") (term "1,0,0"))
               (rule "mul_literals" (formula "65") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "65") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "1,0,0"))
               (rule "mul_literals" (formula "65") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "65") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "65") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "65") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "65") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "65") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "65") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "65") (term "1,0,0,0"))
               (rule "nnf_notAnd" (formula "44") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "44") (term "1,0,0"))
               (rule "mul_literals" (formula "44") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "44") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "1,0,0"))
               (rule "mul_literals" (formula "44") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "45") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "45") (term "1,0,0"))
               (rule "mul_literals" (formula "45") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "45") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "1,0,0"))
               (rule "mul_literals" (formula "45") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "44") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "44") (term "0,0,0,0"))
               (rule "polySimp_rightDist" (formula "44") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "44") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "44") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "44") (term "0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "44") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "44") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "44") (term "1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "44") (term "1,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "44") (term "1,0,0,0"))
               (rule "mul_literals" (formula "44") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "44") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "44") (term "1,0,0,0"))
               (rule "mul_literals" (formula "44") (term "1,1,0,0,0"))
               (rule "nnf_notAnd" (formula "45") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "45") (term "1,0,0,0"))
               (rule "mul_literals" (formula "45") (term "1,0,0,1,0,0,0"))
               (rule "add_zero_right" (formula "45") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "45") (term "1,0,0,0"))
               (rule "mul_literals" (formula "45") (term "1,1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "45") (term "0,0,0,0"))
               (rule "polySimp_rightDist" (formula "45") (term "1,0,0,0,0,0,0"))
               (rule "mul_literals" (formula "45") (term "0,1,0,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "45") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "45") (term "0,0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "45") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "45") (term "0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "45") (term "1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "45") (term "1,0,0,0,0"))
               (rule "commute_and" (formula "121"))
               (rule "commute_or_2" (formula "53") (term "0"))
               (rule "commute_or_2" (formula "48") (term "0"))
               (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
               (rule "ifthenelse_split" (formula "32") (term "0"))
               (branch "result_52.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "34") (term "1,0") (ifseqformula "33"))
                  (rule "hideAuxiliaryEq" (formula "33"))
                  (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "34"))
                  (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "34"))
                  (rule "hideAuxiliaryEq" (formula "34"))
                  (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "32"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "27"))
                  (rule "hideAuxiliaryEq" (formula "27"))
                  (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "replace_known_left" (formula "27") (term "0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "applyEqReverse" (formula "28") (term "1,0") (ifseqformula "27"))
                  (rule "hideAuxiliaryEq" (formula "27"))
                  (rule "replace_known_left" (formula "26") (term "0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "26"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "replace_known_left" (formula "28") (term "0,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "26"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "replace_known_left" (formula "72") (term "0,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "72"))
                  (rule "true_left" (formula "72"))
                  (rule "commute_or_2" (formula "47") (term "0"))
                  (rule "commute_or" (formula "57") (term "0,0"))
                  (rule "commute_or_2" (formula "36") (term "0"))
                  (rule "commute_or_2" (formula "37") (term "0"))
                  (rule "commute_or" (formula "45") (term "0,0"))
                  (rule "commute_or" (formula "40") (term "0,0"))
                  (rule "commute_and_2" (formula "57") (term "0,1,1,0"))
                  (rule "commute_or_2" (formula "45") (term "0"))
                  (rule "commute_or_2" (formula "40") (term "0"))
                  (rule "commute_or" (formula "47") (term "0,0"))
                  (rule "commute_or_2" (formula "47") (term "0"))
                  (rule "commute_or_2" (formula "36") (term "0,0"))
                  (rule "commute_or_2" (formula "37") (term "0,0"))
                  (rule "commute_or" (formula "36") (term "0,0,0"))
                  (rule "commute_or_2" (formula "36") (term "0,0"))
                  (rule "commute_or_2" (formula "36") (term "0"))
                  (rule "commute_or" (formula "37") (term "0,0,0"))
                  (rule "commute_or_2" (formula "37") (term "0,0"))
                  (rule "commute_or_2" (formula "37") (term "0"))
                  (rule "cut_direct" (formula "113") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "114"))
                     (rule "false_right" (formula "114"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "113")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "114"))
                     (rule "notRight" (formula "114"))
                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "114"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "115") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "113")) (ifInst ""  (formula "114")))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch "result_52.<created> = TRUE FALSE"
                  (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "32"))
                  (rule "hideAuxiliaryEq" (formula "32"))
                  (rule "replace_known_right" (formula "31") (term "0,0,0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "replace_known_right" (formula "33") (term "0,0,0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "replace_known_right" (formula "32") (term "0,0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "81"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "26"))
                  (rule "hideAuxiliaryEq" (formula "26"))
                  (rule "replace_known_right" (formula "29") (term "0,0,0") (ifseqformula "80"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "80"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "applyEqReverse" (formula "29") (term "1,0") (ifseqformula "28"))
                  (rule "hideAuxiliaryEq" (formula "28"))
                  (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "79"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "replace_known_right" (formula "77") (term "0,0,0") (ifseqformula "79"))
                   (builtin "One Step Simplification" (formula "77"))
                  (rule "commute_or_2" (formula "52") (term "0"))
                  (rule "commute_or" (formula "62") (term "0,0"))
                  (rule "commute_or_2" (formula "41") (term "0"))
                  (rule "commute_or_2" (formula "42") (term "0"))
                  (rule "commute_or" (formula "50") (term "0,0"))
                  (rule "commute_or" (formula "45") (term "0,0"))
                  (rule "commute_or_2" (formula "50") (term "0"))
                  (rule "commute_or_2" (formula "45") (term "0"))
                  (rule "commute_and_2" (formula "62") (term "0,1,1,0"))
                  (rule "commute_or" (formula "52") (term "0,0"))
                  (rule "commute_or_2" (formula "52") (term "0"))
                  (rule "commute_or_2" (formula "41") (term "0,0"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or" (formula "41") (term "0,0,0"))
                  (rule "commute_or_2" (formula "41") (term "0,0"))
                  (rule "commute_or_2" (formula "41") (term "0"))
                  (rule "commute_or" (formula "42") (term "0,0,0"))
                  (rule "commute_or_2" (formula "42") (term "0,0"))
                  (rule "commute_or_2" (formula "42") (term "0"))
                  (rule "cut_direct" (formula "120") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "121"))
                     (rule "false_right" (formula "121"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "applyEqReverse" (formula "121") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "120")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "121"))
                     (rule "notRight" (formula "121"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "121")))
                     (rule "applyEqReverse" (formula "122") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "120")) (ifInst ""  (formula "121")))
                     (rule "closeFalse" (formula "2"))
                  )
               )
            )
         )
         (branch "Exceptional Post (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "43"))
             (builtin "One Step Simplification" (formula "79"))
            (rule "andLeft" (formula "43"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,0") (ifseqformula "43"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1,0") (ifseqformula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0") (ifseqformula "31"))
            (rule "andLeft" (formula "44"))
            (rule "andLeft" (formula "45"))
            (rule "andLeft" (formula "44"))
            (rule "andLeft" (formula "46"))
            (rule "notLeft" (formula "44"))
            (rule "close" (formula "48") (ifseqformula "47"))
         )
         (branch "Pre (generateDataForVoter)"
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "42")) (ifInst ""  (formula "75")) (ifInst ""  (formula "42")) (ifInst ""  (formula "75")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "1,1") (ifseqformula "40"))
            (rule "wellFormedAnonEQ" (formula "77") (term "0,0,1") (ifseqformula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "0,1,1") (ifseqformula "31"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "1,0,1") (ifseqformula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "77") (term "0,1,0,1") (ifseqformula "31"))
            (rule "wellFormedAnonEQ" (formula "77") (term "0,0,0,1") (ifseqformula "31"))
            (rule "replace_known_left" (formula "77") (term "0,0,1,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "77") (ifInst ""  (formula "1")) (ifInst ""  (formula "30")) (ifInst ""  (formula "39")) (ifInst ""  (formula "33")))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
            (rule "inEqSimp_gtToGeq" (formula "29") (term "0,0,0,1,1,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0,0,0,1,1,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,0,1,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "35"))
            (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "35") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "22"))
            (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "22") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "26"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "26") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,1,1,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,1,1,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,1,1,0"))
            (rule "mul_literals" (formula "29") (term "0,1,1,0,0,1,1,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,1,1,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0,1,1,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,0,1,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "35"))
            (rule "polySimp_mulLiterals" (formula "35") (term "0"))
            (rule "polySimp_elimOne" (formula "35") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "15"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0"))
            (rule "polySimp_elimOne" (formula "15") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "22"))
            (rule "polySimp_mulLiterals" (formula "22") (term "0"))
            (rule "polySimp_elimOne" (formula "22") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "26"))
            (rule "polySimp_mulLiterals" (formula "26") (term "0"))
            (rule "polySimp_elimOne" (formula "26") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
            (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
            (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
            (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "nnf_imp2or" (formula "29") (term "0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_imp2or" (formula "17") (term "0"))
            (rule "nnf_imp2or" (formula "19") (term "0"))
            (rule "nnf_imp2or" (formula "10") (term "0"))
            (rule "nnf_imp2or" (formula "9") (term "0"))
            (rule "nnf_notAnd" (formula "29") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "29") (term "1,0,0"))
            (rule "mul_literals" (formula "29") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0"))
            (rule "mul_literals" (formula "29") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "29") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "29") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "29") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "29") (term "1,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "17") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "19") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "1,0,0"))
            (rule "mul_literals" (formula "19") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "19") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "19") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "19") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "19") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator" (formula "77") (term "1,1"))
            (rule "pullOutSelect" (formula "77") (term "0,0,1,0,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_RANDOM_0"))
            (rule "applyEq" (formula "78") (term "1,1,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "78") (term "1,1,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "78") (term "0,0,1,0,0,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "77") (term "0,1,0,0,1,1") (ifseqformula "71"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "pullOutSelect" (formula "77") (term "1,1,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GROUP_0"))
            (rule "applyEq" (formula "78") (term "0,0,0,0,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "78") (term "1,1,0,1,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "78") (term "0,0,0,0,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "77") (term "0,0,0,1,1") (ifseqformula "72"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "commute_or_2" (formula "12") (term "0"))
            (rule "commute_or" (formula "29") (term "0,0"))
            (rule "commute_or_2" (formula "17") (term "0"))
            (rule "commute_or_2" (formula "19") (term "0"))
            (rule "commute_or_2" (formula "10") (term "0"))
            (rule "commute_or_2" (formula "9") (term "0"))
            (rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "77") (term "0,1"))
            (rule "pullOutSelect" (formula "77") (term "0,0,0,0,1") (inst "selectSK=java_math_BigInteger_ZERO_0"))
            (rule "applyEq" (formula "78") (term "1,0,1,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "78") (term "1,0,1,0,1") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "78") (term "0,0,0,0,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "77") (term "0,0,0,1") (ifseqformula "73"))
             (builtin "One Step Simplification" (formula "77"))
            (rule "pullOutSelect" (formula "77") (term "0,0,1") (inst "selectSK=java_math_BigInteger_value_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "32"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=java_math_BigInteger_value_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "9"))
            (rule "commute_and_2" (formula "31") (term "0,1,1,0"))
            (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "79") (term "0,1,1"))
            (rule "pullOutSelect" (formula "79") (term "0,0,1,0,0,1,1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
            (rule "applyEq" (formula "80") (term "1,1,1,0,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "34"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "80") (term "1,0,1,0,1,1") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
            (rule "applyEq" (formula "81") (term "0,0,0,0,0,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "35"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_1"))
            (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "36"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
            (rule "ifthenelse_negated" (formula "2") (term "0"))
            (rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "78")))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "83") (term "0"))
            (rule "insert_constant_string_value" (formula "83") (term "0,0,0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "castDel" (formula "83") (term "0,0,0,0,0,0"))
            (rule "replace_known_right" (formula "83") (term "0,0,0,0") (ifseqformula "74"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "pullOutSelect" (formula "83") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "84") (term "0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "83") (term "0,1,0") (ifseqformula "76"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "pullOutSelect" (formula "83") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "84") (term "0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "83") (term "0,0") (ifseqformula "75"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "commute_or" (formula "18") (term "0,0"))
            (rule "commute_or" (formula "23") (term "0,0"))
            (rule "commute_or" (formula "25") (term "0,0"))
            (rule "commute_or_2" (formula "16") (term "0,0"))
            (rule "commute_or_2" (formula "15") (term "0,0"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "83") (term "0,1,0,1"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "83") (term "1,1"))
             (builtin "One Step Simplification" (formula "83"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "83") (term "1,1"))
            (rule "pullOutSelect" (formula "83") (term "1,1,1,1") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
            (rule "applyEq" (formula "84") (term "0,0,0,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "38"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "85") (term "1,1,1"))
             (builtin "One Step Simplification" (formula "85"))
            (rule "commute_or_2" (formula "20") (term "0"))
            (rule "commute_or_2" (formula "25") (term "0"))
            (rule "commute_or_2" (formula "27") (term "0"))
            (rule "seqGetAlphaCast" (formula "45") (term "0"))
            (rule "castedGetAny" (formula "45") (term "0"))
             (builtin "One Step Simplification" (formula "45"))
            (rule "true_left" (formula "45"))
            (rule "cut_direct" (formula "41") (term "0"))
            (branch "CUT: result_51.<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "42"))
               (rule "true_left" (formula "42"))
               (rule "seqGetAlphaCast" (formula "44") (term "0"))
               (rule "castedGetAny" (formula "44") (term "0"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "true_left" (formula "44"))
               (rule "commute_and" (formula "85"))
               (rule "commute_or" (formula "18") (term "0,0,0"))
               (rule "commute_or" (formula "17") (term "0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0"))
               (rule "commute_or_2" (formula "17") (term "0,0"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "commute_and" (formula "37") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "37") (term "0,1,1,0"))
               (rule "ifthenelse_split" (formula "7") (term "0"))
               (branch "java.math.BigInteger.ZERO.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                  (rule "hideAuxiliaryEq" (formula "8"))
                  (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "applyEqReverse" (formula "85") (term "0,1") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "85"))
                  (rule "hideAuxiliaryEq" (formula "8"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " de.polyas.core3.open.cred.CredentialGenerator.GROUP.<created> = TRUE TRUE"
                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "83") (term "0,0,1,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "82") (term "0,0,0,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "49"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_right" (formula "81") (term "0,0,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "49")))
                     (rule "notRight" (formula "81"))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "1"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "commute_and" (formula "3") (term "0"))
                     (rule "orLeft" (formula "3"))
                     (branch " org_bouncycastle_jce_spec_ECParameterSpec_generator_1«selectSK» = null ∧ ( de.polyas.core3.open.cred.CredentialGenerator.GROUP.group.<created> = TRUE ∨ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).<created>@anon_heap_printStatus«anonHeapFunction» = TRUE)"
                        (rule "andLeft" (formula "3"))
                        (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                        (rule "ifEqualsNull" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "52"))
                        (rule "close" (formula "48") (ifseqformula "7"))
                     )
                     (branch " ¬( de.polyas.core3.open.cred.CredentialGenerator.GROUP.group.<created> = TRUE ∨ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) ∧ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).generator@anon_heap_exitIfIdInvalid«anonHeapFunction» = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "orRight" (formula "47"))
                        (rule "referencedObjectIsCreatedRight" (formula "47") (ifseqformula "52"))
                        (rule "close" (formula "47") (ifseqformula "6"))
                     )
                  )
                  (branch " de.polyas.core3.open.cred.CredentialGenerator.GROUP.<created> = TRUE FALSE"
                     (rule "referencedObjectIsCreatedRight" (formula "49") (ifseqformula "80"))
                     (rule "close" (formula "49") (ifseqformula "8"))
                  )
               )
               (branch "java.math.BigInteger.ZERO.<created> = TRUE FALSE"
                  (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "82"))
                  (rule "close" (formula "50") (ifseqformula "9"))
               )
            )
            (branch "CUT: result_51.<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "41"))
               (rule "seqGetAlphaCast" (formula "44") (term "0"))
               (rule "castedGetAny" (formula "44") (term "0"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "true_left" (formula "44"))
               (rule "commute_and" (formula "86"))
               (rule "commute_or" (formula "18") (term "0,0,0"))
               (rule "commute_or" (formula "17") (term "0,0,0"))
               (rule "commute_or_2" (formula "18") (term "0,0"))
               (rule "commute_or_2" (formula "18") (term "0"))
               (rule "commute_or_2" (formula "17") (term "0,0"))
               (rule "commute_or_2" (formula "17") (term "0"))
               (rule "commute_and" (formula "37") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "37") (term "0,1,1,0"))
               (rule "ifthenelse_split" (formula "7") (term "0"))
               (branch "java.math.BigInteger.ZERO.<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                  (rule "hideAuxiliaryEq" (formula "8"))
                  (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "applyEqReverse" (formula "86") (term "0,1") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "86"))
                  (rule "hideAuxiliaryEq" (formula "8"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " de.polyas.core3.open.cred.CredentialGenerator.GROUP.<created> = TRUE TRUE"
                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "85") (term "0,0,1,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "6"))
                     (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "6"))
                     (rule "hideAuxiliaryEq" (formula "6"))
                     (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,0,1,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "84") (term "0,0,1,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "1") (term "0,0,0,0,0") (ifseqformula "5"))
                     (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
                     (rule "hideAuxiliaryEq" (formula "5"))
                     (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "applyEqReverse" (formula "83") (term "0,0,0,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_right" (formula "82") (term "0,1,0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "51")))
                     (rule "notRight" (formula "82"))
                     (rule "ifthenelse_negated" (formula "3") (term "0"))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                     (rule "ifEqualsNull" (formula "3"))
                     (rule "commute_and" (formula "3") (term "0"))
                     (rule "orLeft" (formula "3"))
                     (branch " org_bouncycastle_jce_spec_ECParameterSpec_generator_1«selectSK» = null ∧ ( de.polyas.core3.open.cred.CredentialGenerator.GROUP.group.<created> = TRUE ∨ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).<created>@anon_heap_printStatus«anonHeapFunction» = TRUE)"
                        (rule "andLeft" (formula "3"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                        (rule "ifEqualsNull" (formula "2"))
                        (rule "replace_known_right" (formula "2") (term "1,0") (ifseqformula "51"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "referencedObjectIsCreatedRight" (formula "48") (ifseqformula "53"))
                        (rule "close" (formula "48") (ifseqformula "7"))
                     )
                     (branch " ¬( de.polyas.core3.open.cred.CredentialGenerator.GROUP.group.<created> = TRUE ∨ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).<created>@anon_heap_printStatus«anonHeapFunction» = TRUE) ∧ (de.polyas.core3.open.cred.CredentialGenerator.GROUP.group@heap).generator@anon_heap_exitIfIdInvalid«anonHeapFunction» = null"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "3"))
                        (rule "orRight" (formula "47"))
                        (rule "referencedObjectIsCreatedRight" (formula "47") (ifseqformula "53"))
                        (rule "close" (formula "47") (ifseqformula "6"))
                     )
                  )
                  (branch " de.polyas.core3.open.cred.CredentialGenerator.GROUP.<created> = TRUE FALSE"
                     (rule "referencedObjectIsCreatedRight" (formula "49") (ifseqformula "81"))
                     (rule "close" (formula "49") (ifseqformula "8"))
                  )
               )
               (branch "java.math.BigInteger.ZERO.<created> = TRUE FALSE"
                  (rule "referencedObjectIsCreatedRight" (formula "50") (ifseqformula "83"))
                  (rule "close" (formula "50") (ifseqformula "9"))
               )
            )
         )
      )
      (branch "Exceptional Post (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "36"))
          (builtin "One Step Simplification" (formula "72"))
         (rule "andLeft" (formula "36"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "1,0") (ifseqformula "36"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1,0") (ifseqformula "27"))
         (rule "andLeft" (formula "37"))
         (rule "andLeft" (formula "37"))
         (rule "notLeft" (formula "37"))
         (rule "close" (formula "39") (ifseqformula "38"))
      )
      (branch "Pre (exitIfIdInvalid)"
          (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "35")) (ifInst ""  (formula "35")))
         (rule "wellFormedAnonEQ" (formula "70") (term "0,1") (ifseqformula "27"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "70") (term "1,1") (ifseqformula "27"))
         (rule "replace_known_left" (formula "70") (term "0,0,1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "26")) (ifInst ""  (formula "29")))
         (rule "castedGetAny" (formula "70") (term "0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "25") (term "0,0,0,1,1,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,1,1,0"))
         (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "19"))
         (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "19") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "14"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "31"))
         (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "31") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "23"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "23") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "70") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
         (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0,1,1,0"))
         (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
         (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,0"))
         (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "19"))
         (rule "polySimp_mulLiterals" (formula "19") (term "0"))
         (rule "polySimp_elimOne" (formula "19") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0"))
         (rule "polySimp_elimOne" (formula "14") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "31"))
         (rule "polySimp_mulLiterals" (formula "31") (term "0"))
         (rule "polySimp_elimOne" (formula "31") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
         (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "23"))
         (rule "polySimp_mulLiterals" (formula "23") (term "0"))
         (rule "polySimp_elimOne" (formula "23") (term "0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "70") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "70") (term "1,1,0,0"))
         (rule "mul_literals" (formula "70") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "70") (term "1,1,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "70") (term "1,0"))
         (rule "polySimp_mulComm0" (formula "70") (term "1,1,0"))
         (rule "polySimp_rightDist" (formula "70") (term "1,1,0"))
         (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0"))
         (rule "mul_literals" (formula "70") (term "0,1,1,0"))
         (rule "polySimp_elimOne" (formula "70") (term "1,1,1,0"))
         (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
         (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
         (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "nnf_imp2or" (formula "16") (term "0"))
         (rule "nnf_ex2all" (formula "70"))
         (rule "nnf_imp2or" (formula "13") (term "0"))
         (rule "nnf_imp2or" (formula "18") (term "0"))
         (rule "nnf_imp2or" (formula "26") (term "1,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_imp2or" (formula "10") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "nnf_imp2or" (formula "26") (term "0"))
         (rule "nnf_notAnd" (formula "17") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
         (rule "mul_literals" (formula "17") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "13") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "13") (term "1,0,0"))
         (rule "mul_literals" (formula "13") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0"))
         (rule "mul_literals" (formula "13") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "13") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "13") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "13") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "18") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "18") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "18") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "18") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "18") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "18") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "18") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "18") (term "1,0,0"))
         (rule "mul_literals" (formula "18") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "18") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0"))
         (rule "mul_literals" (formula "18") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "26") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "26") (term "1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "26") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "1,0,0"))
         (rule "mul_literals" (formula "26") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "26") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "26") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "26") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "26") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "26") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "26") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "26") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "11") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0,0"))
         (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
         (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
         (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_and_2" (formula "26") (term "0,1,1,0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or" (formula "26") (term "0,0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "charLiteral_to_int" (formula "1") (term "1,1,0"))
         (rule "commute_or" (formula "17") (term "0,0"))
         (rule "commute_or_2" (formula "17") (term "0"))
         (rule "commute_or" (formula "13") (term "0,0"))
         (rule "commute_or_2" (formula "13") (term "0"))
         (rule "commute_or" (formula "18") (term "0,0"))
         (rule "commute_or_2" (formula "18") (term "0"))
         (rule "commute_or_2" (formula "11") (term "0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0"))
         (rule "commute_or" (formula "11") (term "0,0,0"))
         (rule "commute_or_2" (formula "11") (term "0,0"))
         (rule "commute_or_2" (formula "11") (term "0"))
         (rule "commute_or" (formula "10") (term "0,0,0"))
         (rule "commute_or_2" (formula "10") (term "0,0"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "seqGetAlphaCast" (formula "21") (term "0"))
         (rule "castedGetAny" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "seqGetAlphaCast" (formula "33") (term "0"))
         (rule "castedGetAny" (formula "33") (term "0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "cut_direct" (formula "30") (term "0"))
         (branch "CUT: result_51.<created> = TRUE TRUE"
             (builtin "One Step Simplification" (formula "31"))
            (rule "true_left" (formula "31"))
            (rule "seqGetAlphaCast" (formula "16") (term "0"))
            (rule "castedGetAny" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "seqGetAlphaCast" (formula "34") (term "0"))
            (rule "castedGetAny" (formula "34") (term "0"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "commute_and" (formula "26") (term "0,0,1,1,0"))
            (rule "commute_and_2" (formula "26") (term "0,1,1,0"))
            (rule "lenNonNegative" (formula "20") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "lenNonNegative" (formula "15") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "ex_pull_out3" (formula "28") (term "1,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,1,0"))
            (rule "commute_or" (formula "28") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0,1,0"))
            (rule "commute_or" (formula "28") (term "1,0,0,1,0"))
            (rule "ex_pull_out3" (formula "28") (term "0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0"))
            (rule "commute_or_2" (formula "28") (term "1,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
            (rule "commute_or_2" (formula "28") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "28") (term "0,0,0,0,0,0"))
            (rule "commute_and_2" (formula "28") (term "0,0"))
            (rule "lenNonNegative" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "allLeft" (formula "19") (inst "t=i_1"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "25"))
            (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "55"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "allLeft" (formula "14") (inst "t=i_2_0"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "19"))
            (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "55"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "29") (inst "t=i_2"))
            (rule "exLeft" (formula "29") (inst "sk=j_0"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "31") (term "1"))
            (rule "polySimp_addComm1" (formula "31") (term "0,1"))
            (rule "applyEq" (formula "30") (term "0,0,0,1") (ifseqformula "40"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,1") (ifseqformula "40"))
            (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,1"))
            (rule "polySimp_rightDist" (formula "31") (term "1,1"))
            (rule "mul_literals" (formula "31") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "29") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0"))
            (rule "add_literals" (formula "31") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "31") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "31") (term "0,0,1,0"))
            (rule "leq_literals" (formula "31") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0"))
            (rule "add_literals" (formula "30") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "30") (term "0,0,1,0"))
            (rule "leq_literals" (formula "30") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0"))
            (rule "leq_literals" (formula "29") (term "0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "31") (term "0,0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "30") (term "0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "allLeft" (formula "2") (inst "t=j_0"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "31"))
            (rule "qeq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "32"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,1"))
            (rule "leq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq0" (formula "30") (ifseqformula "2"))
            (rule "qeq_literals" (formula "30") (term "0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "closeFalse" (formula "30"))
         )
         (branch "CUT: result_51.<created> = TRUE FALSE"
             (builtin "One Step Simplification" (formula "30"))
            (rule "seqGetAlphaCast" (formula "16") (term "0"))
            (rule "castedGetAny" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "seqGetAlphaCast" (formula "34") (term "0"))
            (rule "castedGetAny" (formula "34") (term "0"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "commute_and" (formula "26") (term "0,0,1,1,0"))
            (rule "commute_and_2" (formula "26") (term "0,1,1,0"))
            (rule "lenNonNegative" (formula "20") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "20"))
            (rule "lenNonNegative" (formula "15") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "ex_pull_out3" (formula "28") (term "1,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,1,0"))
            (rule "commute_or" (formula "28") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0,1,0"))
            (rule "commute_or" (formula "28") (term "1,0,0,1,0"))
            (rule "ex_pull_out3" (formula "28") (term "0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0"))
            (rule "commute_or_2" (formula "28") (term "1,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
            (rule "commute_or_2" (formula "28") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "28") (term "0,0,0,0,0,0"))
            (rule "commute_and_2" (formula "28") (term "0,0"))
            (rule "lenNonNegative" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "allLeft" (formula "19") (inst "t=i_1"))
            (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
            (rule "applyEq" (formula "19") (term "0,0,0,0") (ifseqformula "25"))
            (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "56"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "allLeft" (formula "14") (inst "t=i_2_0"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "applyEq" (formula "14") (term "0,0,0,0") (ifseqformula "19"))
            (rule "replace_known_right" (formula "14") (term "0,0,0") (ifseqformula "56"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "allLeft" (formula "29") (inst "t=i_2"))
            (rule "exLeft" (formula "29") (inst "sk=j_0"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "replace_known_left" (formula "31") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "31") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "31") (term "1"))
            (rule "polySimp_addComm1" (formula "31") (term "0,1"))
            (rule "applyEq" (formula "31") (term "0,0,1,0,1") (ifseqformula "40"))
            (rule "applyEq" (formula "30") (term "0,0,0,1") (ifseqformula "40"))
            (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1"))
            (rule "polySimp_mulComm0" (formula "31") (term "1,1"))
            (rule "polySimp_rightDist" (formula "31") (term "1,1"))
            (rule "mul_literals" (formula "31") (term "0,1,1"))
            (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1"))
            (rule "polySimp_elimOne" (formula "31") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "29") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "1,0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1,0"))
            (rule "add_literals" (formula "30") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,1,0"))
            (rule "add_zero_right" (formula "30") (term "0,0,1,0"))
            (rule "leq_literals" (formula "30") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_contradInEq1" (formula "31") (term "1,0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "31") (term "0,1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0,1,0"))
            (rule "add_literals" (formula "31") (term "1,1,0,0,1,0"))
            (rule "times_zero_1" (formula "31") (term "1,0,0,1,0"))
            (rule "add_literals" (formula "31") (term "0,0,1,0"))
            (rule "leq_literals" (formula "31") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_contradInEq1" (formula "31") (term "0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "31") (term "0,0"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "38"))
            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "29") (term "0,0,0"))
            (rule "leq_literals" (formula "29") (term "0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "37"))
            (rule "qeq_literals" (formula "30") (term "0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "allLeft" (formula "2") (inst "t=j_0"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1,0"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "31"))
            (rule "qeq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "30"))
            (rule "qeq_literals" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "2"))
            (rule "andLeft" (formula "32"))
            (rule "inEqSimp_homoInEq1" (formula "32"))
            (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
            (rule "add_literals" (formula "32") (term "1,1,0"))
            (rule "times_zero_1" (formula "32") (term "1,0"))
            (rule "add_zero_right" (formula "32") (term "0"))
            (rule "leq_literals" (formula "32"))
            (rule "closeFalse" (formula "32"))
         )
      )
   )
   (branch "Exceptional Post (get)"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "64"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,0") (ifseqformula "27"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "29"))
      (rule "close" (formula "33") (ifseqformula "32"))
   )
   (branch "Pre (get)"
       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "63") (term "1,1") (ifseqformula "27"))
      (rule "wellFormedAnonEQ" (formula "63") (term "0,1") (ifseqformula "27"))
      (rule "replace_known_left" (formula "63") (term "0,0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "26")))
      (rule "castedGetAny" (formula "63") (term "0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "25") (term "0,0,0,1,1,0"))
      (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "14"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "14") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "19"))
      (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "19") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "23"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "23") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,1,0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0,1,1,0"))
      (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0"))
      (rule "polySimp_elimOne" (formula "14") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "19"))
      (rule "polySimp_mulLiterals" (formula "19") (term "0"))
      (rule "polySimp_elimOne" (formula "19") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "23"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0"))
      (rule "polySimp_elimOne" (formula "23") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
      (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,0,0"))
      (rule "mul_literals" (formula "63") (term "0,1,1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,0,0"))
      (rule "pullOutSelect" (formula "63") (term "0,0,1,0,0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
      (rule "applyEq" (formula "64") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")) (ifInst ""  (formula "5")))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
      (rule "applyEqReverse" (formula "64") (term "0,1,1,1,0,0,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "64") (term "0,0,1,0,0,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
      (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
      (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_imp2or" (formula "16") (term "0"))
      (rule "nnf_imp2or" (formula "17") (term "0"))
      (rule "nnf_imp2or" (formula "25") (term "1,0"))
      (rule "nnf_imp2or" (formula "10") (term "0"))
      (rule "nnf_imp2or" (formula "9") (term "0"))
      (rule "nnf_imp2or" (formula "25") (term "0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "16") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "16") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
      (rule "mul_literals" (formula "16") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "17") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
      (rule "mul_literals" (formula "17") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
      (rule "mul_literals" (formula "9") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "25") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
      (rule "mul_literals" (formula "25") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
      (rule "mul_literals" (formula "25") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
      (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
      (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
      (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "63") (term "1,0") (inst "i=i") (inst "i_0=i_0"))
      (rule "replaceKnownSelect_taclet20_4" (formula "63") (term "0,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "63") (term "0,0,0,0,1,0"))
      (rule "replaceKnownSelect_taclet20_4" (formula "63") (term "0,0,0,0,1,0,1,0,1,0"))
      (rule "replaceKnownSelect_taclet20_4" (formula "63") (term "0,1,1,0,0,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "63") (term "0,0,0,0,1,0,1,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet20_5" (formula "63") (term "0,1,1,0,0,0,1,0,1,0"))
      (rule "expand_inInt" (formula "63") (term "1,0,0,1,0,1,0"))
      (rule "expand_inInt" (formula "63") (term "1,0,0,1,1,0"))
      (rule "replace_int_MAX" (formula "63") (term "1,0,1,0,0,1,0,1,0"))
      (rule "replace_int_MIN" (formula "63") (term "0,1,1,0,0,1,0,1,0"))
      (rule "replace_int_MIN" (formula "63") (term "0,1,1,0,0,1,1,0"))
      (rule "replace_int_MAX" (formula "63") (term "1,0,1,0,0,1,1,0"))
      (rule "eqSymm" (formula "63") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "63") (term "0,0,1,0,1,1,0"))
      (rule "castedGetAny" (formula "63") (term "0,0,1,0,1,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,1,0,0,0,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "63") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,1,0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,0,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "63") (term "0,0,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "63") (term "1,1,0,0,1,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "63") (term "1,1,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "0,1,1,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulComm0" (formula "63") (term "1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_rightDist" (formula "63") (term "1,1,0,0,0,1,0,1,0"))
      (rule "mul_literals" (formula "63") (term "0,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "63") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "polySimp_elimOne" (formula "63") (term "1,1,1,0,0,0,1,0,1,0"))
      (rule "pullOutSelect" (formula "63") (term "0,0,0,0,1,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
      (rule "applyEq" (formula "64") (term "0,0,0,1,0,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "64") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")) (ifInst ""  (formula "5")))
      (rule "eqSymm" (formula "64") (term "0,0,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
      (rule "applyEqReverse" (formula "64") (term "0,1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "64") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "64") (term "0,0,0,1,0,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "eqSymm" (formula "63") (term "0,0,1,0"))
      (rule "replace_known_left" (formula "63") (term "0,0,1,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "63"))
      (rule "applyEq" (formula "63") (term "1,1,1,0,0,0,1,1,0") (ifseqformula "8"))
      (rule "nnf_imp2or" (formula "63") (term "0,0,1,0"))
      (rule "nnf_imp2or" (formula "63") (term "0,1,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "0,0,0,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0,0,0,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,0,0,1,0"))
      (rule "add_zero_left" (formula "63") (term "0,0,1,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "63") (term "1,1,0,0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "63") (term "1,1,0,0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "63") (term "0,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0,0,0,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "63") (term "0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,1,0,0,0,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,1,0,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "63") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,1,1,0,0,0,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,1,1,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,1,0,0,0,1,0"))
      (rule "mul_literals" (formula "63") (term "1,1,1,0,0,0,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "0,0,0,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "63") (term "1,0,0,1,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "0,1,0,0,1,0,0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "63") (term "0,0,1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,0,1,1,0"))
      (rule "add_zero_left" (formula "63") (term "0,0,1,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "63") (term "1,1,0,0,0,1,1,0"))
      (rule "polySimp_elimOne" (formula "63") (term "1,1,0,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "63") (term "0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,0,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "0,0,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,0,1,1,0"))
      (rule "nnf_notAnd" (formula "63") (term "1,0,0,1,1,0"))
      (rule "inEqSimp_notLeq" (formula "63") (term "0,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,0,1,0,0,1,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,0,1,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,1,0,0,1,1,0"))
      (rule "inEqSimp_notGeq" (formula "63") (term "1,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,0,0,1,1,0,0,1,1,0"))
      (rule "add_literals" (formula "63") (term "0,0,1,1,0,0,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,1,0,0,1,1,0"))
      (rule "mul_literals" (formula "63") (term "1,1,1,0,0,1,1,0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or_2" (formula "16") (term "0"))
      (rule "commute_or_2" (formula "17") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or" (formula "25") (term "0,0"))
      (rule "commute_and_2" (formula "25") (term "0,1,1,0"))
      (rule "commute_or_2" (formula "9") (term "0"))
      (rule "seqGetAlphaCast" (formula "20") (term "0"))
      (rule "castedGetAny" (formula "20") (term "0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "true_left" (formula "20"))
      (rule "seqGetAlphaCast" (formula "15") (term "0"))
      (rule "castedGetAny" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "commute_or" (formula "12") (term "0,0"))
      (rule "commute_or_2" (formula "12") (term "0"))
      (rule "commute_or" (formula "16") (term "0,0"))
      (rule "commute_or_2" (formula "16") (term "0"))
      (rule "commute_or" (formula "17") (term "0,0"))
      (rule "commute_or_2" (formula "17") (term "0"))
      (rule "commute_or_2" (formula "10") (term "0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0"))
      (rule "lenNonNegative" (formula "14") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "14"))
      (rule "commute_or" (formula "10") (term "0,0,0"))
      (rule "commute_or_2" (formula "10") (term "0,0"))
      (rule "commute_or_2" (formula "10") (term "0"))
      (rule "commute_or" (formula "9") (term "0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0"))
      (rule "commute_or_2" (formula "9") (term "0"))
      (rule "lenNonNegative" (formula "20") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "commute_and" (formula "27") (term "0,0,1,1,0"))
      (rule "commute_and_2" (formula "27") (term "0,1,1,0"))
      (rule "ex_pull_out3" (formula "27") (term "1,0"))
      (rule "cnf_rightDist" (formula "27") (term "0,1,0"))
      (rule "commute_or" (formula "27") (term "1,0,1,0"))
      (rule "cnf_rightDist" (formula "27") (term "0,0,1,0"))
      (rule "commute_or" (formula "27") (term "1,0,0,1,0"))
      (rule "ex_pull_out3" (formula "27") (term "0"))
      (rule "cnf_rightDist" (formula "27") (term "0,0"))
      (rule "commute_or_2" (formula "27") (term "1,0,0"))
      (rule "shift_paren_or" (formula "27") (term "0,1,0,0"))
      (rule "cnf_rightDist" (formula "27") (term "0,0,0"))
      (rule "commute_or_2" (formula "27") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "27") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "27") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "27") (term "0,1,0,0,0"))
      (rule "commute_or" (formula "27") (term "0,0,0,0,0,0"))
      (rule "commute_and_2" (formula "27") (term "0,0"))
      (rule "andRight" (formula "65"))
      (branch
         (rule "andRight" (formula "65"))
         (branch
            (rule "nnf_ex2all" (formula "65"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "allLeft" (formula "18") (inst "t=i_1"))
            (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
            (rule "applyEq" (formula "18") (term "0,0,0,0") (ifseqformula "24"))
            (rule "replace_known_right" (formula "18") (term "0,0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "allLeft" (formula "13") (inst "t=i_2_0"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
            (rule "applyEq" (formula "13") (term "0,0,0,0") (ifseqformula "18"))
            (rule "replace_known_right" (formula "13") (term "0,0,0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "allLeft" (formula "28") (inst "t=i_0"))
            (rule "exLeft" (formula "28") (inst "sk=j_0"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "replace_known_left" (formula "30") (term "0,0,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_commuteGeq" (formula "30") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "29") (term "1,0"))
            (rule "inEqSimp_commuteGeq" (formula "28") (term "1,0"))
            (rule "inEqSimp_homoInEq0" (formula "30") (term "1"))
            (rule "polySimp_addComm1" (formula "30") (term "0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "30") (term "1"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,1"))
            (rule "polySimp_rightDist" (formula "30") (term "1,1"))
            (rule "polySimp_mulLiterals" (formula "30") (term "1,1,1"))
            (rule "mul_literals" (formula "30") (term "0,1,1"))
            (rule "polySimp_elimOne" (formula "30") (term "1,1,1"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0,0") (ifseqformula "24"))
            (rule "qeq_literals" (formula "29") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0,0") (ifseqformula "24"))
            (rule "qeq_literals" (formula "30") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "24"))
            (rule "qeq_literals" (formula "28") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "inEqSimp_contradInEq1" (formula "30") (term "0") (ifseqformula "26"))
            (rule "inEqSimp_homoInEq1" (formula "30") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,0"))
            (rule "add_literals" (formula "30") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,0"))
            (rule "add_literals" (formula "30") (term "0,0,0"))
            (rule "leq_literals" (formula "30") (term "0,0"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "inEqSimp_contradInEq1" (formula "29") (term "0") (ifseqformula "26"))
            (rule "inEqSimp_homoInEq1" (formula "29") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,0"))
            (rule "add_literals" (formula "29") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "29") (term "1,0,0,0"))
            (rule "add_literals" (formula "29") (term "0,0,0"))
            (rule "leq_literals" (formula "29") (term "0,0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "inEqSimp_contradInEq1" (formula "28") (term "0") (ifseqformula "26"))
            (rule "inEqSimp_homoInEq1" (formula "28") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "28") (term "0,0,0"))
            (rule "add_literals" (formula "28") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "28") (term "1,0,0,0"))
            (rule "add_literals" (formula "28") (term "0,0,0"))
            (rule "leq_literals" (formula "28") (term "0,0"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "allLeft" (formula "1") (inst "t=i_0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "25"))
            (rule "qeq_literals" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "27") (ifseqformula "1"))
            (rule "andLeft" (formula "27"))
            (rule "inEqSimp_homoInEq1" (formula "27"))
            (rule "polySimp_pullOutFactor1b" (formula "27") (term "0"))
            (rule "add_literals" (formula "27") (term "1,1,0"))
            (rule "times_zero_1" (formula "27") (term "1,0"))
            (rule "add_zero_right" (formula "27") (term "0"))
            (rule "leq_literals" (formula "27"))
            (rule "closeFalse" (formula "27"))
         )
         (branch
            (rule "andRight" (formula "65"))
            (branch
               (rule "allRight" (formula "65") (inst "sk=i_0_0"))
               (rule "orRight" (formula "65"))
               (rule "orRight" (formula "65"))
               (rule "notRight" (formula "67"))
               (rule "orRight" (formula "67"))
               (rule "orRight" (formula "66"))
               (rule "inEqSimp_leqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "69"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "allLeft" (formula "13") (inst "t=i_0_0"))
               (rule "replace_known_left" (formula "13") (term "0,0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_commuteGeq" (formula "13") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "13") (term "1,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "13") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_contradInEq1" (formula "13") (term "0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "13") (term "0,0"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "13"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch
               (rule "allRight" (formula "65") (inst "sk=i_2"))
               (rule "orRight" (formula "65"))
               (rule "orRight" (formula "65"))
               (rule "notRight" (formula "67"))
               (rule "orRight" (formula "67"))
               (rule "orRight" (formula "66"))
               (rule "inEqSimp_leqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "69"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "69"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "1"))
               (rule "leq_literals" (formula "4") (term "0"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "true_left" (formula "4"))
               (rule "allLeft" (formula "14") (inst "t=i_2"))
               (rule "replace_known_left" (formula "14") (term "0,0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
               (rule "inEqSimp_contradInEq0" (formula "14") (term "1,0") (ifseqformula "3"))
               (rule "qeq_literals" (formula "14") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "14") (term "0,0"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "14"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
      (branch
         (rule "orRight" (formula "65"))
         (rule "referencedObjectIsCreatedRight" (formula "65") (ifseqformula "45"))
         (rule "close" (formula "65") (ifseqformula "1"))
      )
   )
   (branch "Null reference (var = null)"
       (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "60")))
      (rule "closeTrue" (formula "63"))
   )
)
(branch "Exceptional Post (printStatus)"
    (builtin "One Step Simplification" (formula "61"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "andLeft" (formula "27"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1,0") (ifseqformula "27"))
   (rule "andLeft" (formula "28"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "28"))
   (rule "notLeft" (formula "30"))
   (rule "notLeft" (formula "28"))
   (rule "close" (formula "30") (ifseqformula "29"))
)
(branch "Pre (printStatus)"
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "1")))
   (rule "inEqSimp_gtToGeq" (formula "25") (term "0,0,0,1,1,0"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0,1,1,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "19"))
   (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "19") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "14") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "23"))
   (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "23") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0,1,1,0"))
   (rule "mul_literals" (formula "25") (term "1,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "19"))
   (rule "polySimp_mulLiterals" (formula "19") (term "0"))
   (rule "polySimp_elimOne" (formula "19") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "25") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "25") (term "0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,1,1,0,0,1,1,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "14"))
   (rule "polySimp_mulLiterals" (formula "14") (term "0"))
   (rule "polySimp_elimOne" (formula "14") (term "0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "23"))
   (rule "polySimp_mulLiterals" (formula "23") (term "0"))
   (rule "polySimp_elimOne" (formula "23") (term "0"))
   (rule "inEqSimp_and_subsumption3" (formula "10") (term "0,0,0"))
   (rule "leq_literals" (formula "10") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "inEqSimp_and_subsumption3" (formula "9") (term "0,0,0"))
   (rule "leq_literals" (formula "9") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "nnf_imp2or" (formula "12") (term "0"))
   (rule "nnf_imp2or" (formula "16") (term "0"))
   (rule "nnf_imp2or" (formula "25") (term "0"))
   (rule "nnf_imp2or" (formula "17") (term "0"))
   (rule "nnf_imp2or" (formula "10") (term "0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "12") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
   (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
   (rule "mul_literals" (formula "12") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "16") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
   (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
   (rule "mul_literals" (formula "16") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "25") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
   (rule "times_zero_1" (formula "25") (term "1,0,0,1,0,0"))
   (rule "add_zero_right" (formula "25") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
   (rule "mul_literals" (formula "25") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "25") (term "1,0"))
   (rule "nnf_notAnd" (formula "17") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "17") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
   (rule "mul_literals" (formula "17") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
   (rule "mul_literals" (formula "10") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
   (rule "mul_literals" (formula "10") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "10") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "10") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
   (rule "mul_literals" (formula "10") (term "1,1,0,0,0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_rightDist" (formula "9") (term "1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "9") (term "0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "0,0,0,0,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "9") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "1,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,1,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0,0"))
   (rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "59") (inst "i=i") (inst "i_0=i_0") (inst "i_1=i_1") (inst "i_2=i_2") (inst "i_3=i_3"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "36")) (ifInst ""  (formula "37")) (ifInst ""  (formula "38")) (ifInst ""  (formula "39")) (ifInst ""  (formula "40")) (ifInst ""  (formula "41")) (ifInst ""  (formula "42")) (ifInst ""  (formula "43")) (ifInst ""  (formula "44")) (ifInst ""  (formula "45")) (ifInst ""  (formula "46")) (ifInst ""  (formula "47")) (ifInst ""  (formula "48")) (ifInst ""  (formula "49")) (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
   (rule "insert_constant_string_value" (formula "59") (term "0,0,1,0,0,0,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "insert_constant_string_value" (formula "59") (term "0,0,1,0,0,0,0,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "insert_constant_string_value" (formula "59") (term "0,0,0,0,0,0,0,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "castDel" (formula "59") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "castDel" (formula "59") (term "0,0,0,1,0,0,0,0,0,0,0"))
   (rule "castDel" (formula "59") (term "0,0,0,0,0,0,0,0,0,0,0"))
   (rule "replace_known_right" (formula "59") (term "0,1,0,0,0,0,0,0") (ifseqformula "34"))
    (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
   (rule "castedGetAny" (formula "59") (term "0,0,1,0,1,0"))
   (rule "castedGetAny" (formula "59") (term "0,1,0,1"))
   (rule "castedGetAny" (formula "59") (term "0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "59") (term "0,0,1,0,1,0,0,0,0"))
   (rule "castedGetAny" (formula "59") (term "0,1,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "59") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1,0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "59") (term "0,0,0,1"))
   (rule "applyEq" (formula "59") (term "0,0,0,0,0,0,0") (ifseqformula "11"))
   (rule "replace_known_right" (formula "59") (term "0,0,0,0,0,0") (ifseqformula "35"))
    (builtin "One Step Simplification" (formula "59"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "59") (term "0,1,1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1,0"))
   (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1"))
   (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulComm0" (formula "59") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "59") (term "0,1,1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,1,0,0,1,0,0"))
   (rule "nnf_imp2or" (formula "59") (term "0,1,0"))
   (rule "nnf_imp2or" (formula "59") (term "0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "59") (term "0,1,0,0"))
   (rule "nnf_notAnd" (formula "59") (term "0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0"))
   (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0"))
   (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0"))
   (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "59") (term "1,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "59") (term "0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,1,0"))
   (rule "mul_literals" (formula "59") (term "1,0,0,0,1,0"))
   (rule "nnf_notAnd" (formula "59") (term "0,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,1,0,0"))
   (rule "times_zero_1" (formula "59") (term "1,0,0,0,0,0,1,0,0"))
   (rule "add_literals" (formula "59") (term "0,0,0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,1,0,0"))
   (rule "mul_literals" (formula "59") (term "1,0,0,0,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,1,0,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,1,0,0"))
   (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,1,0,0"))
   (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,1,0,0"))
   (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0,0"))
   (rule "nnf_notAnd" (formula "59") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "59") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "59") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "59") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "59") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "59") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_literals" (formula "59") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "59") (term "1,0,0,0,0,0,0,0"))
   (rule "commute_or_2" (formula "12") (term "0"))
   (rule "commute_or_2" (formula "16") (term "0"))
   (rule "commute_or_2" (formula "17") (term "0"))
   (rule "commute_or" (formula "25") (term "0,0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "commute_and_2" (formula "25") (term "0,1,1,0"))
   (rule "lenNonNegative" (formula "8") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "8"))
   (rule "applyEq" (formula "8") (term "0") (ifseqformula "9"))
   (rule "seqGetAlphaCast" (formula "20") (term "0"))
   (rule "castedGetAny" (formula "20") (term "0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "true_left" (formula "20"))
   (rule "seqGetAlphaCast" (formula "15") (term "0"))
   (rule "castedGetAny" (formula "15") (term "0"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "true_left" (formula "15"))
   (rule "commute_or" (formula "12") (term "0,0"))
   (rule "commute_or_2" (formula "12") (term "0"))
   (rule "commute_or" (formula "16") (term "0,0"))
   (rule "commute_or_2" (formula "16") (term "0"))
   (rule "commute_or" (formula "17") (term "0,0"))
   (rule "commute_or_2" (formula "17") (term "0"))
   (rule "commute_or_2" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "9") (term "0,0"))
   (rule "lenNonNegative" (formula "19") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "commute_or" (formula "10") (term "0,0,0"))
   (rule "commute_or_2" (formula "10") (term "0,0"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or" (formula "9") (term "0,0,0"))
   (rule "commute_or_2" (formula "9") (term "0,0"))
   (rule "commute_or_2" (formula "9") (term "0"))
   (rule "lenNonNegative" (formula "14") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "14"))
   (rule "andRight" (formula "61"))
   (branch
      (rule "andRight" (formula "61"))
      (branch
         (rule "andRight" (formula "61"))
         (branch
            (rule "andRight" (formula "61"))
            (branch
               (rule "allRight" (formula "61") (inst "sk=i_3_0"))
               (rule "orRight" (formula "61"))
               (rule "orRight" (formula "61"))
               (rule "notRight" (formula "63"))
               (rule "inEqSimp_geqRight" (formula "63"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "63"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "commute_and" (formula "30") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "30") (term "0,1,1,0"))
               (rule "ex_pull_out3" (formula "30") (term "1,0"))
               (rule "cnf_rightDist" (formula "30") (term "0,1,0"))
               (rule "commute_or" (formula "30") (term "1,0,1,0"))
               (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
               (rule "commute_or" (formula "30") (term "1,0,0,1,0"))
               (rule "allLeft" (formula "15") (inst "t=i_3_0"))
               (rule "replace_known_left" (formula "15") (term "0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "15") (term "0,0"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "15"))
               (rule "andLeft" (formula "2"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
               (rule "add_literals" (formula "2") (term "1,1,0"))
               (rule "times_zero_1" (formula "2") (term "1,0"))
               (rule "add_zero_right" (formula "2") (term "0"))
               (rule "leq_literals" (formula "2"))
               (rule "closeFalse" (formula "2"))
            )
            (branch
               (rule "nnf_ex2all" (formula "61"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "commute_or_2" (formula "1") (term "0"))
               (rule "commute_or" (formula "1") (term "0,0"))
               (rule "commute_and" (formula "28") (term "0,0,1,1,0"))
               (rule "commute_and_2" (formula "28") (term "0,1,1,0"))
               (rule "ex_pull_out3" (formula "28") (term "1,0"))
               (rule "cnf_rightDist" (formula "28") (term "0,1,0"))
               (rule "commute_or" (formula "28") (term "1,0,1,0"))
               (rule "cnf_rightDist" (formula "28") (term "0,0,1,0"))
               (rule "commute_or" (formula "28") (term "1,0,0,1,0"))
               (rule "ex_pull_out3" (formula "28") (term "0"))
               (rule "cnf_rightDist" (formula "28") (term "0,0"))
               (rule "commute_or_2" (formula "28") (term "1,0,0"))
               (rule "shift_paren_or" (formula "28") (term "0,1,0,0"))
               (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
               (rule "commute_or_2" (formula "28") (term "1,0,0,0"))
               (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
               (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
               (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0"))
               (rule "commute_or" (formula "28") (term "0,0,0,0,0,0"))
               (rule "allLeft" (formula "1") (inst "t=i_2_0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "1"))
               (rule "andLeft" (formula "17"))
               (rule "inEqSimp_homoInEq1" (formula "17"))
               (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
               (rule "add_literals" (formula "17") (term "1,1,0"))
               (rule "times_zero_1" (formula "17") (term "1,0"))
               (rule "add_zero_right" (formula "17") (term "0"))
               (rule "leq_literals" (formula "17"))
               (rule "closeFalse" (formula "17"))
            )
         )
         (branch
            (rule "allRight" (formula "61") (inst "sk=i_1_0"))
            (rule "orRight" (formula "61"))
            (rule "orRight" (formula "61"))
            (rule "notRight" (formula "63"))
            (rule "inEqSimp_geqRight" (formula "63"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "63"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
            (rule "polySimp_elimOne" (formula "2") (term "0"))
            (rule "commute_and" (formula "30") (term "0,0,1,1,0"))
            (rule "commute_and_2" (formula "30") (term "0,1,1,0"))
            (rule "ex_pull_out3" (formula "30") (term "1,0"))
            (rule "cnf_rightDist" (formula "30") (term "0,1,0"))
            (rule "commute_or" (formula "30") (term "1,0,1,0"))
            (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
            (rule "commute_or" (formula "30") (term "1,0,0,1,0"))
            (rule "ex_pull_out3" (formula "30") (term "0"))
            (rule "cnf_rightDist" (formula "30") (term "0,0"))
            (rule "commute_or_2" (formula "30") (term "1,0,0"))
            (rule "shift_paren_or" (formula "30") (term "0,1,0,0"))
            (rule "cnf_rightDist" (formula "30") (term "0,0,0"))
            (rule "commute_or_2" (formula "30") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "30") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "30") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "30") (term "0,0,0,0,0,0"))
            (rule "allLeft" (formula "20") (inst "t=i_1_0"))
            (rule "replace_known_left" (formula "20") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "20") (term "0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
            (rule "andLeft" (formula "20"))
            (rule "inEqSimp_homoInEq1" (formula "20"))
            (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
            (rule "add_literals" (formula "20") (term "1,1,0"))
            (rule "times_zero_1" (formula "20") (term "1,0"))
            (rule "add_literals" (formula "20") (term "0"))
            (rule "leq_literals" (formula "20"))
            (rule "closeFalse" (formula "20"))
         )
      )
      (branch
         (rule "allRight" (formula "61") (inst "sk=i_0_0"))
         (rule "orRight" (formula "61"))
         (rule "orRight" (formula "61"))
         (rule "notRight" (formula "63"))
         (rule "inEqSimp_leqRight" (formula "62"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "63"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "commute_and" (formula "30") (term "0,0,1,1,0"))
         (rule "commute_and_2" (formula "30") (term "0,1,1,0"))
         (rule "ex_pull_out3" (formula "30") (term "1,0"))
         (rule "cnf_rightDist" (formula "30") (term "0,1,0"))
         (rule "commute_or" (formula "30") (term "1,0,1,0"))
         (rule "cnf_rightDist" (formula "30") (term "0,0,1,0"))
         (rule "commute_or" (formula "30") (term "1,0,0,1,0"))
         (rule "ex_pull_out3" (formula "30") (term "0"))
         (rule "cnf_rightDist" (formula "30") (term "0,0"))
         (rule "commute_or_2" (formula "30") (term "1,0,0"))
         (rule "shift_paren_or" (formula "30") (term "0,1,0,0"))
         (rule "cnf_rightDist" (formula "30") (term "0,0,0"))
         (rule "commute_or_2" (formula "30") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "30") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "30") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "30") (term "0,1,0,0,0"))
         (rule "commute_or" (formula "30") (term "0,0,0,0,0,0"))
         (rule "allLeft" (formula "21") (inst "t=i_0_0"))
         (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_commuteGeq" (formula "21") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
         (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "21") (term "0,0,1"))
         (rule "leq_literals" (formula "21") (term "0,1"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_contradInEq1" (formula "21") (ifseqformula "2"))
         (rule "qeq_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "closeFalse" (formula "21"))
      )
   )
   (branch
      (rule "nnf_ex2all" (formula "61"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "commute_or_2" (formula "1") (term "0"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_and" (formula "28") (term "0,0,1,1,0"))
      (rule "commute_and_2" (formula "28") (term "0,1,1,0"))
      (rule "ex_pull_out3" (formula "28") (term "1,0"))
      (rule "cnf_rightDist" (formula "28") (term "0,1,0"))
      (rule "commute_or" (formula "28") (term "1,0,1,0"))
      (rule "cnf_rightDist" (formula "28") (term "0,0,1,0"))
      (rule "commute_or" (formula "28") (term "1,0,0,1,0"))
      (rule "ex_pull_out3" (formula "28") (term "0"))
      (rule "cnf_rightDist" (formula "28") (term "0,0"))
      (rule "commute_or_2" (formula "28") (term "1,0,0"))
      (rule "shift_paren_or" (formula "28") (term "0,1,0,0"))
      (rule "cnf_rightDist" (formula "28") (term "0,0,0"))
      (rule "commute_or_2" (formula "28") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "28") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "28") (term "0,1,0,0,0"))
      (rule "commute_or" (formula "28") (term "0,0,0,0,0,0"))
      (rule "allLeft" (formula "1") (inst "t=i_1"))
      (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "21"))
      (rule "qeq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "23") (ifseqformula "1"))
      (rule "andLeft" (formula "23"))
      (rule "inEqSimp_homoInEq1" (formula "23"))
      (rule "polySimp_pullOutFactor1b" (formula "23") (term "0"))
      (rule "add_literals" (formula "23") (term "1,1,0"))
      (rule "times_zero_1" (formula "23") (term "1,0"))
      (rule "add_zero_right" (formula "23") (term "0"))
      (rule "leq_literals" (formula "23"))
      (rule "closeFalse" (formula "23"))
   )
)
)
}
