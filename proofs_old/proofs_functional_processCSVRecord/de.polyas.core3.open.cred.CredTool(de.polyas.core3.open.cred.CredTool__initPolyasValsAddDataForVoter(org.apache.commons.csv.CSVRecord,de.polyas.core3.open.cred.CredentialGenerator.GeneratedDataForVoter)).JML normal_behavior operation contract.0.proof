\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Nov 19 20:22:49 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Tue Nov 19 20:22:49 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:initPolyasValsAddDataForVoter(org.apache.commons.csv.CSVRecord,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:initPolyasValsAddDataForVoter(org.apache.commons.csv.CSVRecord,de.polyas.core3.open.cred.CredentialGenerator.GeneratedDataForVoter)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "644")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "record_46,dataForVoter_40,self_310,exc_394,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elementOfSingleton" (formula "13") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "7"))
(rule "true_left" (formula "7"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_initPolyasValsAddDataForVoter,savedHeapBefore_initPolyasValsAddDataForVoter"))
 (builtin "One Step Simplification" (formula "14"))
(rule "methodCallUnfoldTarget" (formula "14") (term "1") (inst "#v0=a"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "a"))
(rule "activeUseStaticFieldReadAccess" (formula "14") (term "1"))
(rule "assignment_read_static_attribute" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "methodCallUnfoldArguments" (formula "14") (term "1"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var"))
(rule "assignment" (formula "14") (term "1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "variableDeclarationAssign" (formula "14") (term "1"))
(rule "variableDeclaration" (formula "14") (term "1") (newnames "var_1"))
(rule "assignment_read_attribute" (formula "14") (term "1"))
(branch "Normal Execution (_dataForVoter_40 != null)"
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "11")))
    (builtin "One Step Simplification" (formula "15"))
   (rule "false_right" (formula "14"))
    (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_add,result_299,exc_395,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
   (branch "Post (add)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "eqSeqConcat" (formula "10"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "polySimp_addComm0" (formula "10") (term "1"))
      (rule "eqSeqSingleton" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "lenOfSeqSub" (formula "12") (term "0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0"))
      (rule "ifEqualsInteger" (formula "12"))
      (rule "equal_literals" (formula "12") (term "1,1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "getOfSeqSub" (formula "14") (term "0"))
      (rule "castDel" (formula "14") (term "2,0"))
      (rule "add_zero_left" (formula "14") (term "1,1,0"))
      (rule "leq_literals" (formula "14") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "polySimp_elimSub" (formula "14") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,0"))
      (rule "pullOutSelect" (formula "10") (term "0,0") (inst "selectSK=java_util_Collection_seq_0"))
      (rule "applyEq" (formula "14") (term "0,1,0") (ifseqformula "10"))
      (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "10"))
      (rule "applyEq" (formula "15") (term "0,1,1,0,0") (ifseqformula "10"))
      (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "10"))
      (rule "applyEq" (formula "15") (term "0,1,0") (ifseqformula "10"))
      (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "23")))
      (rule "polySimp_addComm0" (formula "14") (term "0"))
      (rule "polySimp_addComm0" (formula "15") (term "1,0,0"))
      (rule "elementOfSingleton" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEqReverse" (formula "15") (term "0,1,0") (ifseqformula "10"))
      (rule "applyEqReverse" (formula "13") (term "0,1") (ifseqformula "10"))
      (rule "applyEqReverse" (formula "11") (term "0,0") (ifseqformula "10"))
      (rule "applyEqReverse" (formula "12") (term "0,0") (ifseqformula "10"))
      (rule "applyEqReverse" (formula "14") (term "0,0,0") (ifseqformula "10"))
      (rule "applyEqReverse" (formula "15") (term "0,0,1,0,0") (ifseqformula "10"))
      (rule "hideAuxiliaryEq" (formula "10"))
      (rule "polySimp_addComm0" (formula "13") (term "0"))
      (rule "polySimp_addComm0" (formula "14") (term "1,0,0"))
      (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "10"))
      (rule "polySimp_addAssoc" (formula "13") (term "0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "13") (term "0"))
      (rule "add_literals" (formula "13") (term "1,1,0"))
      (rule "times_zero_1" (formula "13") (term "1,0"))
      (rule "add_zero_right" (formula "13") (term "0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
      (rule "polySimp_addAssoc" (formula "13") (term "1,0,0"))
      (rule "polySimp_addComm0" (formula "13") (term "0,1,0,0"))
      (rule "polySimp_pullOutFactor2b" (formula "13") (term "1,0,0"))
      (rule "add_literals" (formula "13") (term "1,1,1,0,0"))
      (rule "times_zero_1" (formula "13") (term "1,1,0,0"))
      (rule "add_literals" (formula "13") (term "1,0,0"))
      (rule "less_literals" (formula "13") (term "0,0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "applyEq" (formula "12") (term "1") (ifseqformula "10"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "methodCallUnfoldTarget" (formula "21") (term "1") (inst "#v0=a"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "a_1"))
      (rule "activeUseStaticFieldReadAccess" (formula "21") (term "1"))
      (rule "assignment_read_static_attribute" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "pullOutSelect" (formula "21") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "methodCallUnfoldArguments" (formula "21") (term "1"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_2"))
      (rule "assignment" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "variableDeclarationAssign" (formula "21") (term "1"))
      (rule "variableDeclaration" (formula "21") (term "1") (newnames "var_3"))
      (rule "assignment_read_attribute" (formula "21") (term "1"))
      (branch "Normal Execution (_dataForVoter_40 != null)"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
         (rule "false_right" (formula "21"))
         (rule "pullOutSelect" (formula "21") (term "0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredentialGenerator_GeneratedDataForVoter_publicSigningKey_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")) (ifInst ""  (formula "6")))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
          (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_add_0,result_300,exc_396,heapAfter_add_0,anon_heap_add_0") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
         (branch "Post (add)"
             (builtin "One Step Simplification" (formula "15"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "replaceKnownSelect_taclet00_0" (formula "15") (term "0,1,0,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet00_1" (formula "15") (term "0,1,0,0,1,1"))
            (rule "andLeft" (formula "15"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "eqSeqConcat" (formula "17"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "17"))
            (rule "polySimp_addComm0" (formula "17") (term "1"))
            (rule "eqSeqSingleton" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "lenOfSeqSub" (formula "19") (term "0"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0"))
            (rule "ifEqualsInteger" (formula "19"))
            (rule "equal_literals" (formula "19") (term "1,1"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "applyEq" (formula "18") (term "2,0") (ifseqformula "10"))
            (rule "lenOfSeqSubEQ" (formula "10") (term "0") (ifseqformula "18"))
            (rule "polySimp_elimSub" (formula "10") (term "1,0"))
            (rule "mul_literals" (formula "10") (term "1,1,0"))
            (rule "add_zero_right" (formula "10") (term "1,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "lenOfSeqSubEQ" (formula "21") (term "1,0,0") (ifseqformula "18"))
            (rule "polySimp_elimSub" (formula "21") (term "1,1,0,0"))
            (rule "mul_literals" (formula "21") (term "1,1,1,0,0"))
            (rule "add_zero_right" (formula "21") (term "1,1,0,0"))
            (rule "lenOfSeqSubEQ" (formula "19") (term "0") (ifseqformula "18"))
            (rule "polySimp_elimSub" (formula "19") (term "1,0"))
            (rule "times_zero_2" (formula "19") (term "1,1,0"))
            (rule "add_zero_right" (formula "19") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "17") (term "1,1") (ifseqformula "18"))
            (rule "polySimp_elimSub" (formula "17") (term "1,1,1"))
            (rule "mul_literals" (formula "17") (term "1,1,1,1"))
            (rule "add_zero_right" (formula "17") (term "1,1,1"))
            (rule "lenOfSeqSubEQ" (formula "20") (term "0,0,0") (ifseqformula "18"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0,0,0"))
            (rule "times_zero_2" (formula "20") (term "1,1,0,0,0"))
            (rule "add_zero_right" (formula "20") (term "1,0,0,0"))
            (rule "polySimp_addComm0" (formula "20") (term "0"))
            (rule "getOfSeqSub" (formula "21") (term "0"))
            (rule "castDel" (formula "21") (term "2,0"))
            (rule "add_zero_left" (formula "21") (term "1,1,0"))
            (rule "leq_literals" (formula "21") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0,0"))
            (rule "getOfSeqSubEQ" (formula "13") (term "0") (ifseqformula "18"))
            (rule "castDel" (formula "13") (term "2,0"))
            (rule "add_zero_right" (formula "13") (term "1,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,1,0,0"))
            (rule "add_zero_right" (formula "13") (term "1,1,0,0"))
            (rule "replace_known_left" (formula "13") (term "1,0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0"))
            (rule "pullOutSelect" (formula "18") (term "0,0") (inst "selectSK=java_util_Collection_seq_1"))
            (rule "applyEq" (formula "13") (term "0,1,0") (ifseqformula "18"))
            (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "18"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "18"))
            (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "18"))
            (rule "applyEq" (formula "21") (term "0,0,0") (ifseqformula "18"))
            (rule "applyEq" (formula "22") (term "0,0,1,0,0") (ifseqformula "18"))
            (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "30")))
            (rule "replaceKnownSelect_taclet00_0" (formula "18") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet00_1" (formula "18") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,1,0,0") (ifseqformula "8"))
            (rule "elementOfSingleton" (formula "18") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "applyEqReverse" (formula "20") (term "0,1") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "19") (term "0,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "13") (term "0,1,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "22") (term "0,0,1,0,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "21") (term "0,0,0") (ifseqformula "18"))
            (rule "applyEqReverse" (formula "17") (term "0,0") (ifseqformula "18"))
            (rule "hideAuxiliaryEq" (formula "18"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "22"))
            (rule "true_left" (formula "22"))
            (rule "methodCallEmpty" (formula "29") (term "1"))
            (rule "tryEmpty" (formula "29") (term "1"))
            (rule "emptyModality" (formula "29") (term "1"))
            (rule "andRight" (formula "29"))
            (branch
                (builtin "One Step Simplification" (formula "29"))
               (rule "closeTrue" (formula "29"))
            )
            (branch
                (builtin "One Step Simplification" (formula "29"))
               (rule "allRight" (formula "29") (inst "sk=f_0"))
               (rule "allRight" (formula "29") (inst "sk=o_0"))
               (rule "orRight" (formula "29"))
               (rule "orRight" (formula "29"))
               (rule "eqSymm" (formula "31"))
               (rule "polySimp_homoEq" (formula "10") (term "1"))
               (rule "mul_literals" (formula "10") (term "1,0,1"))
               (rule "add_zero_right" (formula "10") (term "0,1"))
               (rule "polySimp_homoEq" (formula "20"))
               (rule "polySimp_homoEq" (formula "17"))
               (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
               (rule "polySimp_addComm1" (formula "17") (term "0"))
               (rule "polySimp_rightDist" (formula "20") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0"))
               (rule "polySimp_elimOne" (formula "20") (term "1,1,0"))
               (rule "polySimp_mulComm0" (formula "20") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "20") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "19"))
               (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "12"))
               (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
               (rule "mul_literals" (formula "12") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
               (rule "add_literals" (formula "12") (term "0,0,0"))
               (rule "add_zero_left" (formula "12") (term "0,0"))
               (rule "polySimp_pullOutFactor2" (formula "12") (term "0"))
               (rule "add_literals" (formula "12") (term "1,0"))
               (rule "times_zero_1" (formula "12") (term "0"))
               (rule "leq_literals" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1,1,0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0,1,1,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0,1,1,0,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,0,1,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,1,0"))
               (rule "mul_literals" (formula "19") (term "0,1,0,0,1,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
               (rule "add_zero_right" (formula "10") (term "0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0,1,1,0,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,0,1,1,0,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,0,1,1,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,1,0"))
               (rule "add_literals" (formula "19") (term "0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "19") (term "0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0"))
               (rule "inEqSimp_ltToLeq" (formula "16") (term "0,1,0"))
               (rule "add_zero_right" (formula "16") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,0"))
               (rule "add_zero_right" (formula "18") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0"))
               (rule "mul_literals" (formula "18") (term "0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0"))
               (rule "add_literals" (formula "16") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "16") (term "0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0"))
               (rule "add_literals" (formula "18") (term "0,0,0,1,0"))
               (rule "add_zero_left" (formula "18") (term "0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0"))
               (rule "add_zero_right" (formula "19") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "19") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "19") (term "0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "19") (term "0,0,0"))
               (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "polySimp_sepPosMonomial" (formula "10") (term "1"))
               (rule "mul_literals" (formula "10") (term "1,1"))
               (rule "polySimp_sepPosMonomial" (formula "16"))
               (rule "polySimp_mulComm0" (formula "16") (term "1"))
               (rule "polySimp_rightDist" (formula "16") (term "1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
               (rule "mul_literals" (formula "16") (term "0,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1"))
               (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "16"))
               (rule "polySimp_addAssoc" (formula "18") (term "0"))
               (rule "polySimp_addComm1" (formula "18") (term "0,0"))
               (rule "add_literals" (formula "18") (term "0,0,0"))
               (rule "add_zero_left" (formula "18") (term "0,0"))
               (rule "polySimp_pullOutFactor2" (formula "18") (term "0"))
               (rule "add_literals" (formula "18") (term "1,0"))
               (rule "times_zero_1" (formula "18") (term "0"))
               (rule "leq_literals" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "16"))
               (rule "inEqSimp_invertInEq0" (formula "10") (term "0"))
               (rule "mul_literals" (formula "10") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "0,0"))
               (rule "inEqSimp_invertInEq0" (formula "16") (term "0,0"))
               (rule "mul_literals" (formula "16") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "16") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "16") (term "0,0,0"))
               (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "9"))
               (rule "eqSymm" (formula "29"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "commute_and" (formula "27"))
               (rule "commute_or" (formula "11"))
               (rule "inEqSimp_or_weaken1" (formula "11"))
               (rule "add_literals" (formula "11") (term "1,0"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "ifthenelse_split" (formula "13") (term "0"))
               (branch " de.polyas.core3.open.cred.CredTool.polyasVals.seq.length ≥ 0 TRUE"
                  (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "polySimp_homoEq" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,0"))
                  (rule "mul_literals" (formula "18") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "18") (term "0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
                  (rule "add_literals" (formula "18") (term "0,0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1"))
                  (rule "polySimp_rightDist" (formula "18") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1"))
                  (rule "mul_literals" (formula "18") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1"))
                  (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "18"))
                  (rule "polySimp_addAssoc" (formula "20") (term "1,0"))
                  (rule "add_literals" (formula "20") (term "0,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "13"))
                  (rule "leq_literals" (formula "11") (term "0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "true_left" (formula "11"))
                  (rule "lenNonNegative" (formula "18") (term "1,2,0"))
                  (rule "inEqSimp_commuteLeq" (formula "18"))
                  (rule "cut_direct" (formula "28") (term "0,0"))
                  (branch "CUT: o_0 = null TRUE"
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "false_right" (formula "29"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "29")))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: o_0 = null FALSE"
                      (builtin "One Step Simplification" (formula "29"))
                     (rule "notRight" (formula "29"))
                     (rule "replace_known_left" (formula "2") (term "0,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "29")) (ifInst ""  (formula "30")))
                     (rule "closeFalse" (formula "2"))
                  )
               )
               (branch " de.polyas.core3.open.cred.CredTool.polyasVals.seq.length ≥ 0 FALSE"
                  (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "polySimp_homoEq" (formula "17"))
                  (rule "mul_literals" (formula "17") (term "1,0"))
                  (rule "add_zero_right" (formula "17") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "20"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "polySimp_sepPosMonomial" (formula "18"))
                  (rule "mul_literals" (formula "18") (term "1"))
                  (rule "applyEq" (formula "20") (term "1,1,0") (ifseqformula "18"))
                  (rule "add_literals" (formula "20") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "12") (ifseqformula "1"))
                  (rule "applyEq" (formula "20") (term "1,2,0") (ifseqformula "12"))
                  (rule "add_literals" (formula "20") (term "2,0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "eqSymm" (formula "20"))
                  (rule "eqSeqEmpty" (formula "20"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "12"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                  (rule "qeq_literals" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "11"))
                  (rule "lenOfSeqSubEQ" (formula "11") (term "0") (ifseqformula "12"))
                  (rule "less_literals" (formula "11") (term "0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "equal_literals" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
            )
         )
         (branch "Exceptional Post (add)"
             (builtin "One Step Simplification" (formula "23"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replaceKnownSelect_taclet00_0" (formula "15") (term "0,1,0,0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet00_1" (formula "15") (term "0,1,0,0,1,1"))
            (rule "andLeft" (formula "15"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0") (ifseqformula "8"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "17"))
            (rule "andLeft" (formula "16"))
            (rule "andLeft" (formula "18"))
            (rule "notLeft" (formula "16"))
            (rule "close" (formula "20") (ifseqformula "19"))
         )
         (branch "Pre (add)"
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
            (rule "wellFormedAnonEQ" (formula "21") (term "0,1") (ifseqformula "8"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1") (ifseqformula "8"))
            (rule "replace_known_left" (formula "21") (term "1,0,1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
            (rule "inEqSimp_ltToLeq" (formula "12"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor2" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,0"))
            (rule "times_zero_1" (formula "12") (term "0"))
            (rule "leq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "20") (term "0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "orRight" (formula "20"))
            (rule "referencedObjectIsCreatedRight" (formula "20") (ifseqformula "15"))
            (rule "close" (formula "20") (ifseqformula "1"))
         )
         (branch "Null reference (var_2 = null)"
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
            (rule "closeTrue" (formula "21"))
         )
      )
      (branch "Null Reference (_dataForVoter_40 = null)"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Exceptional Post (add)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "8"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "notLeft" (formula "9"))
      (rule "close" (formula "13") (ifseqformula "12"))
   )
   (branch "Pre (add)"
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "referencedObjectIsCreatedRight" (formula "14") (ifseqformula "8"))
      (rule "close" (formula "14") (ifseqformula "1"))
   )
   (branch "Null reference (var = null)"
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
      (rule "closeTrue" (formula "14"))
   )
)
(branch "Null Reference (_dataForVoter_40 = null)"
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "closeFalse" (formula "1"))
)
)
}
