\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 15:00:23 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 15:00:23 CET 2020
contract=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:asHexString([B)].Non-interference contract.0
name=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:asHexString([B)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "572")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "9") (term "1,1"))
(rule "eqSymm" (formula "9") (term "0,1"))
(rule "eqSymm" (formula "3") (term "0,0,0,1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1"))
(rule "eqSymm" (formula "6") (term "0,0,0,1"))
(rule "eqSymm" (formula "6") (term "1,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "5"))
(rule "allFieldsEq" (formula "9") (term "0,1"))
(rule "assignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "assignment" (formula "6") (term "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "boxToDiamond" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "notLeft" (formula "3"))
(rule "boxToDiamond" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_asHexString,savedHeapBefore_asHexString"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_asHexString_0,savedHeapBefore_asHexString_0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "returnUnfold" (formula "6") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "s"))
(rule "returnUnfold" (formula "5") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "s_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "6") (term "1") (inst "#v0=s_1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "s_2"))
 (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_bytesToHexString,result_504,exc_664,heapAfter_bytesToHexString,anon_heap_bytesToHexString") (contract "de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils::bytesToHexString([B)].JML normal_behavior operation contract.0"))
(branch "Post (bytesToHexString)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "12")) (ifInst ""  (formula "1")) (ifInst ""  (formula "12")) (ifInst ""  (formula "2")))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "8"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "11")))
   (rule "assignment" (formula "14") (term "1"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "applyEq" (formula "10") (term "3") (ifseqformula "7"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "13") (term "1") (inst "#v0=s_2"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "s_3"))
    (builtin "Use Operation Contract" (formula "14") (newnames "heapBefore_toLowerCase,result_505,exc_665,heapAfter_toLowerCase,anon_heap_toLowerCase") (contract "java.lang.String[java.lang.String::toLowerCase()].JML normal_behavior operation contract.0"))
   (branch "Post (toLowerCase)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "18"))
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,0,0,0,1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "18"))
      (rule "notLeft" (formula "15"))
      (rule "orRight" (formula "20"))
      (rule "replace_known_right" (formula "14") (term "1,0,1") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "22")) (ifInst ""  (formula "20")))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEq" (formula "17") (term "4") (ifseqformula "13"))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "methodCallReturn" (formula "24") (term "1"))
      (rule "assignment" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "methodCallEmpty" (formula "24") (term "1"))
      (rule "tryEmpty" (formula "24") (term "1"))
      (rule "emptyModality" (formula "24") (term "1"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "notRight" (formula "24"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "19") (term "3") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
       (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_bytesToHexString_0,result_506,exc_666,heapAfter_bytesToHexString_0,anon_heap_bytesToHexString_0") (contract "de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils::bytesToHexString([B)].JML normal_behavior operation contract.0"))
      (branch "Post (bytesToHexString)"
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "31")) (ifInst ""  (formula "6")) (ifInst ""  (formula "31")) (ifInst ""  (formula "7")))
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "24"))
         (rule "andLeft" (formula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,1,0") (ifseqformula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "26"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")))
         (rule "assignment" (formula "34") (term "1"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "applyEq" (formula "26") (term "3") (ifseqformula "23"))
          (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_toLowerCase_0,result_507,exc_667,heapAfter_toLowerCase_0,anon_heap_toLowerCase_0") (contract "java.lang.String[java.lang.String::toLowerCase()].JML normal_behavior operation contract.0"))
         (branch "Post (toLowerCase)"
             (builtin "One Step Simplification" (formula "29"))
             (builtin "One Step Simplification" (formula "28"))
             (builtin "One Step Simplification" (formula "38"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "28"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,1,0") (ifseqformula "28"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,1,0") (ifseqformula "22"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "33"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "34"))
            (rule "notLeft" (formula "31"))
            (rule "orRight" (formula "36"))
            (rule "replace_known_right" (formula "30") (term "1,0,1") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "38")) (ifInst ""  (formula "36")))
            (rule "assignment" (formula "46") (term "1"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "applyEq" (formula "33") (term "4") (ifseqformula "29"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "methodCallReturn" (formula "44") (term "1"))
            (rule "assignment" (formula "44") (term "1"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "methodCallEmpty" (formula "44") (term "1"))
            (rule "tryEmpty" (formula "44") (term "1"))
            (rule "emptyModality" (formula "44") (term "1"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "notRight" (formula "44"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "37") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "35") (term "3") (ifseqformula "1"))
            (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "1"))
            (rule "cut_direct" (formula "49") (term "0"))
            (branch "CUT: newObjectsIsomorphic(〈resultAtPost_503_A〉, heapAtPre_A«anonHeapFunction», 〈resultAtPost_503_B〉, heapAtPre_B«anonHeapFunction») TRUE"
                (builtin "One Step Simplification" (formula "50"))
               (rule "impRight" (formula "50"))
               (rule "applyEq" (formula "49") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "31") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
               (rule "equalityToSeqGetAndSeqLenRight" (formula "50") (inst "iv=iv"))
               (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,1"))
               (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,1"))
               (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,1"))
               (rule "mul_literals" (formula "50") (term "0,1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0,1"))
               (rule "nnf_imp2or" (formula "50") (term "0,1"))
               (rule "nnf_notAnd" (formula "50") (term "0,0,1"))
               (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,1"))
               (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0,1"))
               (rule "add_zero_right" (formula "50") (term "0,0,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,1"))
               (rule "mul_literals" (formula "50") (term "1,0,0,0,1"))
               (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,1"))
               (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,1"))
               (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,1"))
               (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,1"))
               (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,1"))
               (rule "cut_direct" (formula "50") (term "0"))
               (branch "CUT: strContent(resultAtPost_503_B).length = strContent(resultAtPost_503_A).length TRUE"
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "allRight" (formula "51") (inst "sk=iv_0"))
                  (rule "orRight" (formula "51"))
                  (rule "orRight" (formula "51"))
                  (rule "inEqSimp_leqRight" (formula "51"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "52"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "lenNonNegative" (formula "3") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "3"))
                  (rule "lenNonNegative" (formula "4") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "4"))
                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                  (rule "seqGetAlphaCast" (formula "54") (term "1"))
                  (rule "castDel" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "seqGetAlphaCast" (formula "54") (term "0"))
                  (rule "castDel" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "Use_information_flow_contract_for_bytesToHexString_1724841292__1_" (formula "35") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "54")) (ifInst ""  (formula "54")))
                  (rule "applyEq" (formula "42") (term "2") (ifseqformula "35"))
                  (rule "applyEq" (formula "42") (term "0") (ifseqformula "35"))
                  (rule "applyEq" (formula "33") (term "1,0") (ifseqformula "35"))
                  (rule "applyEq" (formula "36") (term "2") (ifseqformula "35"))
                  (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "35"))
                  (rule "applyEq" (formula "47") (term "0") (ifseqformula "34"))
                  (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "34"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__4_" (formula "28") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "Use_information_flow_contract_for_bytesToHexString_1724841292__3_" (formula "22") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "53")) (ifInst ""  (formula "53")))
                  (rule "true_left" (formula "22"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__2_" (formula "28") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "true_left" (formula "28"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__2_" (formula "28") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "eqSymm" (formula "28") (term "0,1"))
                  (rule "eqSymm" (formula "28") (term "1,1"))
                  (rule "Class_invariant_axiom_for_java_lang_String" (formula "28") (term "1,0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "Class_invariant_axiom_for_java_lang_String" (formula "28") (term "0"))
                   (builtin "One Step Simplification" (formula "28"))
                  (rule "andLeft" (formula "28"))
                  (rule "applyEq" (formula "43") (term "3") (ifseqformula "28"))
                  (rule "applyEq" (formula "55") (term "0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "55"))
                  (rule "closeTrue" (formula "55"))
               )
               (branch "CUT: strContent(resultAtPost_503_B).length = strContent(resultAtPost_503_A).length FALSE"
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "false_right" (formula "51"))
                  (rule "lenNonNegative" (formula "50") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "lenNonNegative" (formula "51") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "Use_information_flow_contract_for_bytesToHexString_1724841292__1_" (formula "33") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "52")) (ifInst ""  (formula "52")))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "33"))
                  (rule "applyEq" (formula "46") (term "0") (ifseqformula "33"))
                  (rule "applyEq" (formula "31") (term "1,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
                  (rule "applyEq" (formula "39") (term "2") (ifseqformula "32"))
                  (rule "applyEq" (formula "33") (term "2") (ifseqformula "32"))
                  (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "32"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__4_" (formula "26") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__2_" (formula "26") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "true_left" (formula "26"))
                  (rule "Use_information_flow_contract_for_bytesToHexString_1724841292__3_" (formula "20") (ifseqformula "20"))
                   (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "51")) (ifInst ""  (formula "51")))
                  (rule "true_left" (formula "20"))
                  (rule "Use_information_flow_contract_for_toLowerCase_2107268077__2_" (formula "26") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "eqSymm" (formula "26") (term "0,1"))
                  (rule "eqSymm" (formula "26") (term "1,1"))
                  (rule "Class_invariant_axiom_for_java_lang_String" (formula "26") (term "0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "Class_invariant_axiom_for_java_lang_String" (formula "26") (term "0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "andLeft" (formula "26"))
                  (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "53"))
                  (rule "closeTrue" (formula "53"))
               )
            )
            (branch "CUT: newObjectsIsomorphic(〈resultAtPost_503_A〉, heapAtPre_A«anonHeapFunction», 〈resultAtPost_503_B〉, heapAtPre_B«anonHeapFunction») FALSE"
                (builtin "One Step Simplification" (formula "50"))
               (rule "false_right" (formula "50"))
               (rule "definitionOfNewObjectsIsomorphic" (formula "49"))
               (branch "New on Heap 1"
                  (rule "definitionOfNewOnHeap" (formula "49") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "allRight" (formula "49") (inst "sk=i_0"))
                  (rule "impRight" (formula "49"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,1"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,1"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,0"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,0"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,1,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,0,0,1,0"))
                  (rule "castDel" (formula "51") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "52") (term "0,1,0,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "45")))
                  (rule "closeTrue" (formula "52"))
               )
               (branch "New on Heap 2"
                  (rule "definitionOfNewOnHeap" (formula "49") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "allRight" (formula "49") (inst "sk=i_0"))
                  (rule "impRight" (formula "49"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,1"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,1"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,0"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,0"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,1,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,0,0,1,0"))
                  (rule "castDel" (formula "51") (term "1,1,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "52") (term "0,1,0,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "40")))
                  (rule "closeTrue" (formula "52"))
               )
               (branch "Same Types"
                  (rule "definitionOfSameTypes" (formula "49") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "allRight" (formula "49") (inst "sk=i_0"))
                  (rule "impRight" (formula "49"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,1,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0"))
                  (rule "castDel" (formula "51") (term "2,0,0"))
                  (rule "castDel" (formula "51") (term "1,0,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,1"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,1"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,1,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,0"))
                  (rule "castDel" (formula "51") (term "1,1,0"))
                  (rule "castDel" (formula "51") (term "2,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "52") (term "0,0,0,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "sameTypeTrue" (formula "52") (ifseqformula "24") (ifseqformula "37"))
                  (rule "closeTrue" (formula "52"))
               )
               (branch "Objects Isomorphic"
                  (rule "definitionOfObjectsIsomorphic" (formula "49") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "allRight" (formula "49") (inst "sk=i_0"))
                  (rule "impRight" (formula "49"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "3,1,0"))
                  (rule "castDel" (formula "51") (term "1,3,1,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,1"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,1"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,1,0"))
                  (rule "castDel" (formula "51") (term "1,1,1,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "0,0,0,0"))
                  (rule "castDel" (formula "51") (term "1,0,0,0,0"))
                  (rule "castDel" (formula "51") (term "2,0,0,0,0"))
                  (rule "getOfSeqSingleton" (formula "51") (term "3,1,1"))
                  (rule "getOfSeqSingleton" (formula "51") (term "1,1,1"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "52") (term "0,0,0,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
                  (rule "leq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "definitionOfObjectIsomorphic" (formula "50") (inst "i=i"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "allRight" (formula "50") (inst "sk=i_1"))
                  (rule "impRight" (formula "50"))
                  (rule "andLeft" (formula "1"))
                  (rule "getOfSeqSingleton" (formula "52") (term "0,0,0,1"))
                  (rule "castDel" (formula "52") (term "2,0,0,0,1"))
                  (rule "castDel" (formula "52") (term "1,0,0,0,1"))
                  (rule "getOfSeqSingleton" (formula "52") (term "0,1,1"))
                  (rule "getOfSeqSingleton" (formula "52") (term "2,1,1"))
                  (rule "getOfSeqSingleton" (formula "52") (term "0,0,1,0"))
                  (rule "castDel" (formula "52") (term "1,0,0,1,0"))
                   (builtin "One Step Simplification" (formula "52"))
                  (rule "getOfSeqSingleton" (formula "52") (term "0,1,1,0"))
                  (rule "castDel" (formula "52") (term "1,0,1,1,0"))
                   (builtin "One Step Simplification" (formula "52"))
                  (rule "getOfSeqSingleton" (formula "52") (term "0,0,0,0"))
                  (rule "castDel" (formula "52") (term "1,0,0,0,0"))
                  (rule "castDel" (formula "52") (term "2,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "mul_literals" (formula "2") (term "1,0,0"))
                  (rule "add_literals" (formula "2") (term "0,0"))
                  (rule "add_zero_left" (formula "2") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "1"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                  (rule "replace_known_left" (formula "53") (term "0,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "closeTrue" (formula "53"))
               )
            )
         )
         (branch "Exceptional Post (toLowerCase)"
             (builtin "One Step Simplification" (formula "28"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
            (rule "andLeft" (formula "28"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "1,0") (ifseqformula "28"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0") (ifseqformula "22"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "29"))
            (rule "close" (formula "33") (ifseqformula "32"))
         )
         (branch "Pre (toLowerCase)"
             (builtin "One Step Simplification" (formula "34"))
            (rule "wellFormedAnonEQ" (formula "34") (term "1") (ifseqformula "22"))
            (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "21")))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "34"))
            (rule "closeTrue" (formula "34"))
         )
         (branch "Null reference (s_3 = null)"
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "28")))
            (rule "closeTrue" (formula "34"))
         )
      )
      (branch "Exceptional Post (bytesToHexString)"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "andLeft" (formula "22"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "1,0") (ifseqformula "22"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "23"))
         (rule "close" (formula "27") (ifseqformula "26"))
      )
      (branch "Pre (bytesToHexString)"
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")) (ifInst ""  (formula "27")) (ifInst ""  (formula "7")))
         (rule "closeTrue" (formula "26"))
      )
   )
   (branch "Exceptional Post (toLowerCase)"
       (builtin "One Step Simplification" (formula "16"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,0,0,0,1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "17") (ifseqformula "16"))
   )
   (branch "Pre (toLowerCase)"
       (builtin "One Step Simplification" (formula "14"))
      (rule "wellFormedAnonEQ" (formula "14") (term "1") (ifseqformula "6"))
      (rule "replace_known_left" (formula "14") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "5")))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "14"))
      (rule "closeTrue" (formula "14"))
   )
   (branch "Null reference (s_2 = null)"
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
      (rule "closeTrue" (formula "14"))
   )
)
(branch "Exceptional Post (bytesToHexString)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (bytesToHexString)"
    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "2")))
   (rule "closeTrue" (formula "6"))
)
)
}
