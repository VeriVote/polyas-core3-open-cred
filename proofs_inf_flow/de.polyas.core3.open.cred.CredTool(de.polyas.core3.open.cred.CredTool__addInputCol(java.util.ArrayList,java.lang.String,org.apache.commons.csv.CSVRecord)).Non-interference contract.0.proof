\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 19 18:07:10 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Dec 19 18:07:10 CET 2019
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCol(java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord)].Non-interference contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCol(java.util.ArrayList,java.lang.String,org.apache.commons.csv.CSVRecord)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "7263")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "impRight" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "22"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "27"))
(rule "andLeft" (formula "18"))
(rule "notLeft" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "27"))
(rule "andLeft" (formula "27"))
(rule "notLeft" (formula "18"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "14"))
(rule "notLeft" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "exLeft" (formula "11") (inst "sk=i_0"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "exLeft" (formula "23") (inst "sk=i_1"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "23"))
(rule "eqSymm" (formula "37"))
(rule "eqSymm" (formula "16") (term "0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1"))
(rule "eqSymm" (formula "28") (term "0,0,0,1"))
(rule "eqSymm" (formula "28") (term "1,0,0,1"))
(rule "eqSymm" (formula "4"))
(rule "eqSymm" (formula "3"))
(rule "eqSymm" (formula "1"))
(rule "eqSymm" (formula "2"))
(rule "replace_known_right" (formula "9") (term "0") (ifseqformula "32"))
 (builtin "One Step Simplification" (formula "9"))
(rule "replace_known_right" (formula "8") (term "0") (ifseqformula "36"))
 (builtin "One Step Simplification" (formula "8"))
(rule "replace_known_right" (formula "10") (term "0") (ifseqformula "31"))
 (builtin "One Step Simplification" (formula "10"))
(rule "replace_known_right" (formula "22") (term "0") (ifseqformula "29"))
 (builtin "One Step Simplification" (formula "22"))
(rule "replace_known_right" (formula "20") (term "0") (ifseqformula "34"))
 (builtin "One Step Simplification" (formula "20"))
(rule "replace_known_right" (formula "21") (term "0") (ifseqformula "30"))
 (builtin "One Step Simplification" (formula "21"))
(rule "castedGetAny" (formula "13") (term "0"))
(rule "castedGetAny" (formula "25") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "12"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "12") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "24"))
(rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "24") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "11"))
(rule "inEqSimp_commuteLeq" (formula "23"))
(rule "assignment" (formula "16") (term "1"))
 (builtin "One Step Simplification" (formula "16"))
(rule "assignment" (formula "28") (term "1"))
 (builtin "One Step Simplification" (formula "28"))
(rule "applyEq" (formula "25") (term "0,0") (ifseqformula "2"))
(rule "applyEq" (formula "24") (term "0,0,1,0") (ifseqformula "2"))
(rule "inEqSimp_sepNegMonomial0" (formula "12"))
(rule "polySimp_mulLiterals" (formula "12") (term "0"))
(rule "polySimp_elimOne" (formula "12") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "24"))
(rule "polySimp_mulLiterals" (formula "24") (term "0"))
(rule "polySimp_elimOne" (formula "24") (term "0"))
(rule "equalityToSeqGetAndSeqLenRight" (formula "37") (inst "iv=iv"))
(rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "37") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1"))
(rule "pullOutSelect" (formula "37") (term "0,1,0") (inst "selectSK=java_util_Collection_seq_0"))
(rule "applyEq" (formula "38") (term "0,1,1,0,1") (ifseqformula "1"))
(rule "pullOutSelect" (formula "38") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_1"))
(rule "applyEq" (formula "39") (term "0,0,1,0,1") (ifseqformula "1"))
(rule "applyEq" (formula "39") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
(rule "boxToDiamond" (formula "18") (term "1"))
 (builtin "One Step Simplification" (formula "18"))
(rule "notLeft" (formula "18"))
(rule "boxToDiamond" (formula "29") (term "1"))
 (builtin "One Step Simplification" (formula "29"))
(rule "notLeft" (formula "29"))
(rule "nnf_imp2or" (formula "39") (term "0,1"))
(rule "nnf_notAnd" (formula "39") (term "0,0,1"))
(rule "inEqSimp_notGeq" (formula "39") (term "0,0,0,1"))
(rule "times_zero_1" (formula "39") (term "1,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "39") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "39") (term "0,0,0,1"))
(rule "mul_literals" (formula "39") (term "1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "16") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "16") (term "1,0,0,1,0"))
(rule "expand_inInt" (formula "16") (term "1,0,0,1"))
(rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "16") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "16") (term "1,0,1,0,0,1"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "16"))
(rule "eqSymm" (formula "16"))
(rule "castedGetAny" (formula "18") (term "0,0,1,0"))
(rule "castedGetAny" (formula "17") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0"))
(rule "applyEq" (formula "18") (term "0,1,0,0,1,0,0,0") (ifseqformula "16"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "17") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "18") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "17") (term "0"))
(rule "nnf_imp2or" (formula "18") (term "0"))
(rule "nnf_notAnd" (formula "17") (term "0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0"))
(rule "nnf_notAnd" (formula "17") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0"))
(rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0"))
(rule "mul_literals" (formula "17") (term "1,0,0,0,0"))
(rule "nnf_notAnd" (formula "17") (term "1,0,0"))
(rule "inEqSimp_notLeq" (formula "17") (term "0,1,0,0"))
(rule "mul_literals" (formula "17") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "17") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,1,0,0"))
(rule "mul_literals" (formula "17") (term "1,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "17") (term "1,1,0,0"))
(rule "mul_literals" (formula "17") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "17") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0,0"))
(rule "mul_literals" (formula "17") (term "1,1,1,0,0"))
(rule "nnf_notAnd" (formula "18") (term "0,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "18") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "18") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "18") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "18") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,0"))
(rule "nnf_notAnd" (formula "18") (term "1,0,0"))
(rule "inEqSimp_notLeq" (formula "18") (term "0,1,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "18") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "18") (term "1,1,0,0"))
(rule "mul_literals" (formula "18") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "18") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0,0"))
(rule "mul_literals" (formula "18") (term "1,1,1,0,0"))
(rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "29") (inst "i=i") (inst "i_0=i_0"))
(rule "expand_inInt" (formula "29") (term "1,0,0,1,0"))
(rule "expand_inInt" (formula "29") (term "1,0,0,1"))
(rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0,1,0"))
(rule "replace_int_MIN" (formula "29") (term "0,1,1,0,0,1"))
(rule "replace_int_MAX" (formula "29") (term "1,0,1,0,0,1"))
(rule "andLeft" (formula "29"))
(rule "andLeft" (formula "29"))
(rule "eqSymm" (formula "29"))
(rule "castedGetAny" (formula "31") (term "0,0,1,0"))
(rule "castedGetAny" (formula "30") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "30") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "30") (term "1,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "30") (term "0,0,0,0"))
(rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "5"))
(rule "applyEq" (formula "30") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "30") (term "0,0,0,1,0") (ifseqformula "4"))
(rule "applyEq" (formula "31") (term "0,0,0,1,0") (ifseqformula "5"))
(rule "applyEq" (formula "29") (term "0,0") (ifseqformula "5"))
(rule "eqSymm" (formula "29"))
(rule "applyEq" (formula "29") (term "0,0") (ifseqformula "4"))
(rule "eqSymm" (formula "29"))
(rule "applyEq" (formula "30") (term "0,1,0,0,1,0,0,0") (ifseqformula "16"))
(rule "inEqSimp_sepPosMonomial0" (formula "29") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "29") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "29") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "29") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "29") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "29") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "30") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "30") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "30") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "30") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "30") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "30") (term "1,1,1,0,0,0"))
(rule "nnf_imp2or" (formula "29") (term "0"))
(rule "nnf_imp2or" (formula "30") (term "0"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "19"))
(rule "true_left" (formula "19"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "30"))
(rule "true_left" (formula "30"))
(rule "nnf_notAnd" (formula "28") (term "0,0"))
(rule "nnf_notAnd" (formula "29") (term "0,0"))
(rule "nnf_notAnd" (formula "28") (term "1,0,0"))
(rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,1,0,0"))
(rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
(rule "nnf_notAnd" (formula "28") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "28") (term "0,0,0"))
(rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
(rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
(rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
(rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
(rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "28") (term "1,0,0"))
(rule "inEqSimp_notGeq" (formula "28") (term "1,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,1,1,0,0"))
(rule "add_literals" (formula "28") (term "0,0,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,1,1,0,0"))
(rule "inEqSimp_notLeq" (formula "28") (term "0,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,0,0,1,0,0"))
(rule "add_literals" (formula "28") (term "0,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,1,0,0"))
(rule "mul_literals" (formula "28") (term "1,0,1,0,0"))
(rule "commute_or_2" (formula "17") (term "0,0"))
(rule "commute_or_2" (formula "18") (term "0,0"))
(rule "methodBodyExpand" (formula "29") (term "1") (newnames "heapBefore_addInputCol,savedHeapBefore_addInputCol"))
 (builtin "One Step Simplification" (formula "29"))
(rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_addInputCol_0,savedHeapBefore_addInputCol_0"))
 (builtin "One Step Simplification" (formula "28"))
(rule "commute_or" (formula "17") (term "1,0,0,0"))
(rule "commute_or" (formula "18") (term "1,0,0,0"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
(rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "6"))
(rule "true_left" (formula "6"))
(rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "6"))
(rule "true_left" (formula "6"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
(rule "andLeft" (formula "5"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "applyEq" (formula "6") (term "0,0,1,0,0,1,0,0") (ifseqformula "7"))
(rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "5"))
(rule "true_left" (formula "5"))
(rule "shift_paren_or" (formula "17") (term "0,0,0"))
(rule "commute_or_2" (formula "17") (term "0"))
(rule "commute_or_2" (formula "17") (term "0,0"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
(rule "andLeft" (formula "3"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "applyEq" (formula "4") (term "0,0,1,0,0,1,0,0") (ifseqformula "5"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "3"))
(rule "true_left" (formula "3"))
(rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "3"))
(rule "true_left" (formula "3"))
(rule "shift_paren_or" (formula "18") (term "0,0,0"))
(rule "commute_or_2" (formula "18") (term "0"))
(rule "commute_or_2" (formula "18") (term "0,0"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
(rule "andLeft" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "applyEq" (formula "5") (term "0,0,1,0,0,1,0,0") (ifseqformula "6"))
(rule "applyEq" (formula "4") (term "0,0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "commute_or_2" (formula "17") (term "0,0,0"))
(rule "seqGetAlphaCast" (formula "15") (term "0"))
(rule "castedGetAny" (formula "15") (term "0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "true_left" (formula "15"))
(rule "commute_or_2" (formula "18") (term "0,0,0"))
(rule "seqGetAlphaCast" (formula "27") (term "0"))
(rule "castedGetAny" (formula "27") (term "0"))
 (builtin "One Step Simplification" (formula "27"))
(rule "true_left" (formula "27"))
(rule "lenNonNegative" (formula "14") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "2") (inst "iv=iv"))
(rule "andLeft" (formula "2"))
(rule "applyEq" (formula "3") (term "0,1,1,0,0") (ifseqformula "4"))
(rule "applyEq" (formula "2") (term "0,0") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "applyEq" (formula "2") (term "0,0,1,0") (ifseqformula "3"))
 (builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "lenNonNegative" (formula "39") (term "1,0"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "lenNonNegative" (formula "40") (term "0,0"))
(rule "inEqSimp_commuteLeq" (formula "1"))
(rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
(rule "andLeft" (formula "3"))
(rule "applyEq" (formula "4") (term "0,1,1,0,0") (ifseqformula "5"))
(rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "4"))
(rule "true_left" (formula "4"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
 (builtin "One Step Simplification" (formula "3"))
(rule "true_left" (formula "3"))
(rule "commute_or" (formula "20") (term "0,0,0,0"))
(rule "commute_or" (formula "21") (term "0,0,0,0"))
(rule "commute_or_2" (formula "20") (term "0,0,0"))
(rule "inEqSimp_or_subsumption1" (formula "20") (term "0,0,0"))
(rule "qeq_literals" (formula "20") (term "0,1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "20"))
(rule "commute_or_2" (formula "21") (term "0,0,0"))
(rule "inEqSimp_or_subsumption1" (formula "21") (term "0,0,0"))
(rule "qeq_literals" (formula "21") (term "0,1,0,0,0,0"))
 (builtin "One Step Simplification" (formula "21"))
(rule "lenNonNegative" (formula "19") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
(rule "methodCallUnfoldArguments" (formula "32") (term "1"))
(rule "variableDeclarationAssign" (formula "32") (term "1"))
(rule "variableDeclaration" (formula "32") (term "1") (newnames "var"))
(rule "assignment" (formula "32") (term "1"))
 (builtin "One Step Simplification" (formula "32"))
(rule "variableDeclarationAssign" (formula "32") (term "1"))
(rule "variableDeclaration" (formula "32") (term "1") (newnames "var_1"))
(rule "methodCallUnfoldArguments" (formula "31") (term "1"))
(rule "variableDeclarationAssign" (formula "31") (term "1"))
(rule "variableDeclaration" (formula "31") (term "1") (newnames "var_2"))
(rule "assignment" (formula "31") (term "1"))
 (builtin "One Step Simplification" (formula "31"))
(rule "variableDeclarationAssign" (formula "31") (term "1"))
(rule "variableDeclaration" (formula "31") (term "1") (newnames "var_3"))
 (builtin "Use Operation Contract" (formula "32") (newnames "heapBefore_get,result_804,exc_1063") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (get)"
    (builtin "One Step Simplification" (formula "33"))
    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "40")) (ifInst ""  (formula "9")) (ifInst ""  (formula "40")) (ifInst ""  (formula "13")))
    (builtin "One Step Simplification" (formula "32"))
    (builtin "One Step Simplification" (formula "36"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "35"))
   (rule "notLeft" (formula "35"))
   (rule "exLeft" (formula "36") (inst "sk=i_2"))
   (rule "andLeft" (formula "36"))
   (rule "andLeft" (formula "36"))
   (rule "exLeft" (formula "34") (inst "sk=i_3"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "34"))
   (rule "andLeft" (formula "36"))
   (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "43"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "castedGetAny" (formula "41") (term "0"))
   (rule "castedGetAny" (formula "36") (term "0"))
   (rule "castedGetAny" (formula "37") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "40"))
   (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "40") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "35"))
   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "35") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "39"))
   (rule "inEqSimp_commuteLeq" (formula "34"))
   (rule "assignment" (formula "45") (term "1"))
    (builtin "One Step Simplification" (formula "45"))
   (rule "applyEq" (formula "38") (term "5") (ifseqformula "32"))
   (rule "inEqSimp_sepNegMonomial0" (formula "40"))
   (rule "polySimp_mulLiterals" (formula "40") (term "0"))
   (rule "polySimp_elimOne" (formula "40") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "35"))
   (rule "polySimp_mulLiterals" (formula "35") (term "0"))
   (rule "polySimp_elimOne" (formula "35") (term "0"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "42") (inst "i=i") (inst "i_0=i_0"))
   (rule "expand_inInt" (formula "42") (term "1,0,0,1,0"))
   (rule "expand_inInt" (formula "42") (term "1,0,0,1"))
   (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1,0"))
   (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1,0"))
   (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1"))
   (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1"))
   (rule "andLeft" (formula "42"))
   (rule "andLeft" (formula "42"))
   (rule "eqSymm" (formula "42"))
   (rule "castedGetAny" (formula "43") (term "0,0,1,0"))
   (rule "castedGetAny" (formula "42") (term "0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "42") (term "0,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "42") (term "1,1,0,0"))
   (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0") (ifseqformula "19"))
   (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "42") (term "0"))
   (rule "nnf_imp2or" (formula "43") (term "0"))
   (rule "nnf_notAnd" (formula "42") (term "0,0"))
   (rule "nnf_notAnd" (formula "43") (term "0,0"))
   (rule "nnf_notAnd" (formula "42") (term "0,0,0"))
   (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "42") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0"))
   (rule "mul_literals" (formula "42") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "42") (term "1,0,0"))
   (rule "inEqSimp_notGeq" (formula "42") (term "1,1,0,0"))
   (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "42") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,1,0,0"))
   (rule "mul_literals" (formula "42") (term "1,1,1,0,0"))
   (rule "inEqSimp_notLeq" (formula "42") (term "0,1,0,0"))
   (rule "mul_literals" (formula "42") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1,0,0"))
   (rule "mul_literals" (formula "42") (term "1,0,1,0,0"))
   (rule "nnf_notAnd" (formula "43") (term "1,0,0"))
   (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0"))
   (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0"))
   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0"))
   (rule "mul_literals" (formula "43") (term "1,0,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0"))
   (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0"))
   (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0"))
   (rule "mul_literals" (formula "43") (term "1,1,1,0,0"))
   (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
   (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
   (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
   (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
   (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
   (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
   (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
   (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
   (rule "commute_or_2" (formula "42") (term "0,0"))
   (rule "commute_or_2" (formula "43") (term "0,0"))
   (rule "shift_paren_or" (formula "42") (term "0,0,0"))
   (rule "commute_or_2" (formula "42") (term "0"))
   (rule "commute_or_2" (formula "42") (term "0,0"))
   (rule "commute_or_2" (formula "42") (term "0,0,0"))
   (rule "commute_or_2" (formula "42") (term "0,0"))
   (rule "shift_paren_or" (formula "43") (term "0,0,0"))
   (rule "commute_or_2" (formula "43") (term "0"))
   (rule "commute_or_2" (formula "43") (term "0,0"))
   (rule "commute_or_2" (formula "43") (term "0,0,0"))
   (rule "commute_or_2" (formula "43") (term "0,0"))
   (rule "commute_or" (formula "42") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "42") (term "0,0,0"))
   (rule "inEqSimp_or_subsumption1" (formula "42") (term "0,0,0"))
   (rule "qeq_literals" (formula "42") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "20")))
   (rule "true_left" (formula "42"))
   (rule "commute_or" (formula "42") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "42") (term "0,0,0"))
   (rule "inEqSimp_or_subsumption1" (formula "42") (term "0,0,0"))
   (rule "qeq_literals" (formula "42") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "21")))
   (rule "true_left" (formula "42"))
    (builtin "Use Operation Contract" (formula "43") (newnames "heapBefore_get_0,result_805,exc_1064") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (get)"
       (builtin "One Step Simplification" (formula "46"))
       (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "49")) (ifInst ""  (formula "22")) (ifInst ""  (formula "49")) (ifInst ""  (formula "26")))
       (builtin "One Step Simplification" (formula "43"))
       (builtin "One Step Simplification" (formula "42"))
      (rule "andLeft" (formula "44"))
      (rule "andLeft" (formula "42"))
      (rule "andLeft" (formula "43"))
      (rule "andLeft" (formula "42"))
      (rule "andLeft" (formula "43"))
      (rule "andLeft" (formula "44"))
      (rule "notLeft" (formula "44"))
      (rule "exLeft" (formula "46") (inst "sk=i_4"))
      (rule "andLeft" (formula "46"))
      (rule "andLeft" (formula "46"))
      (rule "exLeft" (formula "43") (inst "sk=i_5"))
      (rule "andLeft" (formula "43"))
      (rule "andLeft" (formula "44"))
      (rule "andLeft" (formula "43"))
      (rule "replace_known_right" (formula "42") (term "0") (ifseqformula "53"))
       (builtin "One Step Simplification" (formula "42"))
      (rule "castedGetAny" (formula "51") (term "0"))
      (rule "castedGetAny" (formula "46") (term "0"))
      (rule "castedGetAny" (formula "45") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "50"))
      (rule "polySimp_mulComm0" (formula "50") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "50") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "44"))
      (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "44") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "49"))
      (rule "inEqSimp_commuteLeq" (formula "43"))
      (rule "assignment" (formula "55") (term "1"))
       (builtin "One Step Simplification" (formula "55"))
      (rule "applyEq" (formula "50") (term "0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "44") (term "0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "48") (term "5") (ifseqformula "47"))
      (rule "inEqSimp_sepNegMonomial0" (formula "50"))
      (rule "polySimp_mulLiterals" (formula "50") (term "0"))
      (rule "polySimp_elimOne" (formula "50") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "44"))
      (rule "polySimp_mulLiterals" (formula "44") (term "0"))
      (rule "polySimp_elimOne" (formula "44") (term "0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "52") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "52") (term "1,0,0,1,0"))
      (rule "expand_inInt" (formula "52") (term "1,0,0,1"))
      (rule "replace_int_MIN" (formula "52") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "52") (term "1,0,1,0,0,1,0"))
      (rule "replace_int_MIN" (formula "52") (term "0,1,1,0,0,1"))
      (rule "replace_int_MAX" (formula "52") (term "1,0,1,0,0,1"))
      (rule "andLeft" (formula "52"))
      (rule "andLeft" (formula "52"))
      (rule "eqSymm" (formula "52"))
      (rule "castedGetAny" (formula "54") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "53") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "54") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "53") (term "1,1,0,0"))
      (rule "applyEq" (formula "52") (term "0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "54") (term "0,0,0,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "52") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "52") (term "0,0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "53") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "53") (term "0,1,0,0,1,0,0,0") (ifseqformula "19"))
      (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "52") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "52") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "52") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "52") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "52") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "53") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "52") (term "0"))
      (rule "nnf_imp2or" (formula "53") (term "0"))
      (rule "nnf_notAnd" (formula "52") (term "0,0"))
      (rule "nnf_notAnd" (formula "53") (term "0,0"))
      (rule "nnf_notAnd" (formula "52") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "52") (term "0,1,0,0"))
      (rule "mul_literals" (formula "52") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "52") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "0,1,0,0"))
      (rule "mul_literals" (formula "52") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "52") (term "1,1,0,0"))
      (rule "mul_literals" (formula "52") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "52") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "1,1,0,0"))
      (rule "mul_literals" (formula "52") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "52") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "52") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "52") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "52") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "52") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "52") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "52") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "52") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "52") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "52") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "52") (term "0,0,0,0"))
      (rule "mul_literals" (formula "52") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "52") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "52") (term "0,0,0,0"))
      (rule "mul_literals" (formula "52") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "53") (term "0,0,0"))
      (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "53") (term "1,0,0,0,0,0,0"))
      (rule "add_literals" (formula "53") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0,0"))
      (rule "mul_literals" (formula "53") (term "1,0,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "53") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,0"))
      (rule "nnf_notAnd" (formula "53") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "53") (term "0,1,0,0"))
      (rule "mul_literals" (formula "53") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "53") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "0,1,0,0"))
      (rule "mul_literals" (formula "53") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "53") (term "1,1,0,0"))
      (rule "mul_literals" (formula "53") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "53") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,1,0,0"))
      (rule "mul_literals" (formula "53") (term "1,1,1,0,0"))
       (builtin "Use Operation Contract" (formula "57") (newnames "heapBefore_add,result_806,exc_1065,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
      (branch "Post (add)"
          (builtin "One Step Simplification" (formula "56"))
          (builtin "One Step Simplification" (formula "61"))
          (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "59")) (ifInst ""  (formula "9")) (ifInst ""  (formula "59")) (ifInst ""  (formula "33")))
          (builtin "One Step Simplification" (formula "55"))
         (rule "andLeft" (formula "55"))
         (rule "andLeft" (formula "56"))
         (rule "andLeft" (formula "57"))
         (rule "andLeft" (formula "57"))
         (rule "applyEq" (formula "59") (term "5") (ifseqformula "56"))
         (rule "pullOutSelect" (formula "57") (term "0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "55"))
          (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "73")) (ifInst ""  (formula "12")))
         (rule "eqSymm" (formula "58"))
         (rule "applyEqReverse" (formula "57") (term "1") (ifseqformula "58"))
         (rule "hideAuxiliaryEq" (formula "58"))
         (rule "elementOfSingleton" (formula "57") (term "0,0"))
          (builtin "One Step Simplification" (formula "57"))
         (rule "eqSymm" (formula "57"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "60"))
         (rule "true_left" (formula "60"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "58"))
         (rule "true_left" (formula "58"))
         (rule "commute_or_2" (formula "52") (term "0,0"))
         (rule "commute_or_2" (formula "53") (term "0,0"))
         (rule "seqGetAlphaCast" (formula "41") (term "0"))
         (rule "castedGetAny" (formula "41") (term "0"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "true_left" (formula "41"))
         (rule "seqGetAlphaCast" (formula "36") (term "0"))
         (rule "castedGetAny" (formula "36") (term "0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "true_left" (formula "36"))
         (rule "seqGetAlphaCast" (formula "37") (term "0"))
         (rule "castedGetAny" (formula "37") (term "0"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "true_left" (formula "37"))
         (rule "commute_or" (formula "52") (term "1,0,0,0"))
         (rule "commute_or" (formula "53") (term "1,0,0,0"))
         (rule "shift_paren_or" (formula "52") (term "0,0,0"))
         (rule "commute_or_2" (formula "52") (term "0"))
         (rule "commute_or_2" (formula "52") (term "0,0"))
         (rule "commute_or_2" (formula "52") (term "0,0,0"))
         (rule "shift_paren_or" (formula "53") (term "0,0,0"))
         (rule "commute_or_2" (formula "53") (term "0"))
         (rule "commute_or_2" (formula "53") (term "0,0"))
         (rule "commute_or_2" (formula "53") (term "0,0,0"))
          (builtin "Use Operation Contract" (formula "61") (newnames "heapBefore_add_0,result_807,exc_1066,heapAfter_add_0,anon_heap_add_0") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
         (branch "Post (add)"
             (builtin "One Step Simplification" (formula "65"))
             (builtin "One Step Simplification" (formula "61"))
             (builtin "One Step Simplification" (formula "60"))
             (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "63")) (ifInst ""  (formula "22")) (ifInst ""  (formula "63")) (ifInst ""  (formula "42")))
            (rule "andLeft" (formula "60"))
            (rule "andLeft" (formula "61"))
            (rule "andLeft" (formula "62"))
            (rule "andLeft" (formula "62"))
            (rule "applyEq" (formula "62") (term "0,1") (ifseqformula "5"))
            (rule "applyEq" (formula "64") (term "5") (ifseqformula "61"))
            (rule "pullOutSelect" (formula "62") (term "0") (inst "selectSK=java_util_Collection_seq_3"))
            (rule "simplifySelectOfAnonEQ" (formula "62") (ifseqformula "60"))
             (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "76")) (ifInst ""  (formula "25")))
            (rule "eqSymm" (formula "63"))
            (rule "applyEqReverse" (formula "62") (term "1") (ifseqformula "63"))
            (rule "hideAuxiliaryEq" (formula "63"))
            (rule "elementOfSingleton" (formula "62") (term "0,0"))
             (builtin "One Step Simplification" (formula "62"))
            (rule "eqSymm" (formula "62"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "65"))
            (rule "true_left" (formula "65"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "63"))
            (rule "true_left" (formula "63"))
            (rule "commute_or" (formula "52") (term "0,0,0,0"))
            (rule "commute_or" (formula "53") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "52") (term "0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "52") (term "0,0,0"))
            (rule "qeq_literals" (formula "52") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "52"))
            (rule "commute_or_2" (formula "52") (term "0,0,0"))
            (rule "inEqSimp_or_subsumption1" (formula "52") (term "0,0,0"))
            (rule "qeq_literals" (formula "52") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "52"))
            (rule "methodCallEmpty" (formula "65") (term "1"))
            (rule "methodCallEmpty" (formula "64") (term "1"))
            (rule "tryEmpty" (formula "65") (term "1"))
            (rule "tryEmpty" (formula "64") (term "1"))
            (rule "emptyModality" (formula "65") (term "1"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "notRight" (formula "65"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
            (rule "replaceKnownSelect_taclet000_3" (formula "7") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet000_4" (formula "7") (term "0"))
            (rule "applyEqReverse" (formula "76") (term "0,1,1,0,1") (ifseqformula "7"))
            (rule "applyEqReverse" (formula "76") (term "0,1,0") (ifseqformula "7"))
            (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "7"))
            (rule "hideAuxiliaryEq" (formula "7"))
            (rule "eqSymm" (formula "75") (term "1,0,1"))
            (rule "eqSymm" (formula "75") (term "0"))
            (rule "lenOfSeqConcat" (formula "5") (term "0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "polySimp_addComm0" (formula "5") (term "0"))
            (rule "lenOfSeqConcat" (formula "75") (term "0,0"))
             (builtin "One Step Simplification" (formula "75"))
            (rule "polySimp_homoEq" (formula "75") (term "0"))
            (rule "polySimp_mulComm0" (formula "75") (term "1,0,0"))
            (rule "polySimp_addComm0" (formula "75") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "75") (term "1,0,0"))
            (rule "mul_literals" (formula "75") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "75") (term "0,0"))
            (rule "polySimp_addComm0" (formula "75") (term "0,0,0"))
            (rule "applyEq" (formula "73") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "75") (term "0,0,1,0,1") (ifseqformula "57"))
            (rule "polySimp_sepNegMonomial" (formula "75") (term "0"))
            (rule "polySimp_mulLiterals" (formula "75") (term "0,0"))
            (rule "polySimp_elimOne" (formula "75") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5"))
            (rule "mul_literals" (formula "5") (term "1"))
            (rule "getOfSeqConcatEQ" (formula "75") (term "0,1,0,1") (ifseqformula "57"))
            (rule "polySimp_elimSub" (formula "75") (term "1,2,0,1,0,1"))
            (rule "polySimp_addComm0" (formula "75") (term "1,2,0,1,0,1"))
            (rule "getOfSeqSingleton" (formula "75") (term "2,0,1,0,1"))
            (rule "castDel" (formula "75") (term "1,2,0,1,0,1"))
            (rule "castDel" (formula "75") (term "2,2,0,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "75") (term "0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,0,0,1,0,1"))
            (rule "polySimp_sepPosMonomial" (formula "75") (term "0,2,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "75") (term "1,0,2,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "75") (term "1,0,2,0,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "75") (term "0,0,1,0,1"))
            (rule "polySimp_mulComm0" (formula "75") (term "1,0,0,1,0,1"))
            (rule "polySimp_rightDist" (formula "75") (term "1,0,0,1,0,1"))
            (rule "mul_literals" (formula "75") (term "0,1,0,0,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "75") (term "1,1,0,0,1,0,1"))
            (rule "polySimp_elimOne" (formula "75") (term "1,1,0,0,1,0,1"))
            (rule "emptyModality" (formula "66") (term "1"))
             (builtin "One Step Simplification" (formula "66"))
            (rule "notRight" (formula "66"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "73") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "1"))
            (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "3"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "9") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_7" (formula "9") (term "0"))
            (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "9"))
            (rule "applyEqReverse" (formula "77") (term "0,1,1,0,0,1") (ifseqformula "9"))
            (rule "applyEqReverse" (formula "77") (term "0,1,1,0") (ifseqformula "9"))
            (rule "applyEqReverse" (formula "77") (term "0,1,1,0,1") (ifseqformula "9"))
            (rule "hideAuxiliaryEq" (formula "9"))
            (rule "polySimp_homoEq" (formula "76") (term "0"))
            (rule "polySimp_addComm1" (formula "76") (term "0,0"))
            (rule "lenOfSeqConcat" (formula "7") (term "0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "polySimp_addComm0" (formula "7") (term "0"))
            (rule "lenOfSeqConcat" (formula "76") (term "1,1,0,0,1"))
             (builtin "One Step Simplification" (formula "76"))
            (rule "polySimp_addComm0" (formula "76") (term "1,1,0,0,1"))
            (rule "lenOfSeqConcat" (formula "76") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "76"))
            (rule "polySimp_addComm0" (formula "76") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "76") (term "0,0"))
            (rule "polySimp_addComm1" (formula "76") (term "0,0,0"))
            (rule "add_literals" (formula "76") (term "0,0,0,0"))
            (rule "add_zero_left" (formula "76") (term "0,0,0"))
            (rule "polySimp_pullOutFactor2" (formula "76") (term "0,0"))
            (rule "add_literals" (formula "76") (term "1,0,0"))
            (rule "times_zero_1" (formula "76") (term "0,0"))
             (builtin "One Step Simplification" (formula "76"))
            (rule "allRight" (formula "76") (inst "sk=iv_0"))
            (rule "orRight" (formula "76"))
            (rule "orRight" (formula "76"))
            (rule "eqSymm" (formula "78") (term "0,2,0"))
            (rule "inEqSimp_leqRight" (formula "76"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "77"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq0" (formula "78") (term "0,0"))
            (rule "polySimp_addComm1" (formula "78") (term "0,0,0"))
            (rule "applyEq" (formula "78") (term "0,1") (ifseqformula "66"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "77") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0"))
            (rule "mul_literals" (formula "77") (term "0,1,0,0"))
            (rule "polySimp_elimOne" (formula "77") (term "1,1,0,0"))
            (rule "getOfSeqConcatEQ" (formula "77") (term "1") (ifseqformula "65"))
            (rule "eqSymm" (formula "77"))
            (rule "polySimp_elimSub" (formula "77") (term "1,2,0"))
            (rule "getOfSeqSingleton" (formula "77") (term "2,0"))
            (rule "castDel" (formula "77") (term "2,2,0"))
            (rule "castDel" (formula "77") (term "1,2,0"))
            (rule "inEqSimp_ltToLeq" (formula "77") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "77") (term "0,0,0"))
            (rule "polySimp_sepNegMonomial" (formula "77") (term "0,2,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "0,0,2,0"))
            (rule "polySimp_elimOne" (formula "77") (term "0,0,2,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "77") (term "0,0"))
            (rule "polySimp_mulLiterals" (formula "77") (term "0,0,0"))
            (rule "polySimp_elimOne" (formula "77") (term "0,0,0"))
            (rule "seqGetAlphaCast" (formula "51") (term "0"))
            (rule "castedGetAny" (formula "51") (term "0"))
             (builtin "One Step Simplification" (formula "51"))
            (rule "true_left" (formula "51"))
            (rule "seqGetAlphaCast" (formula "56") (term "0"))
            (rule "castedGetAny" (formula "56") (term "0"))
             (builtin "One Step Simplification" (formula "56"))
            (rule "true_left" (formula "56"))
            (rule "seqGetAlphaCast" (formula "50") (term "0"))
            (rule "castedGetAny" (formula "50") (term "0"))
             (builtin "One Step Simplification" (formula "50"))
            (rule "true_left" (formula "50"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "60") (inst "iv=iv"))
            (rule "andLeft" (formula "60"))
            (rule "lenOfSeqConcat" (formula "61") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "61"))
            (rule "polySimp_addComm0" (formula "61") (term "1,1,0,0"))
            (rule "lenOfSeqConcat" (formula "60") (term "0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "polySimp_homoEq" (formula "60"))
            (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
            (rule "polySimp_addComm0" (formula "60") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "60") (term "1,0"))
            (rule "mul_literals" (formula "60") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "60") (term "0"))
            (rule "polySimp_addComm0" (formula "60") (term "0,0"))
            (rule "lenOfSeqConcatEQ" (formula "60") (term "1,0,0") (ifseqformula "62"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "polySimp_addComm0" (formula "60") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "60") (term "0,0"))
            (rule "add_literals" (formula "60") (term "0,0,0"))
            (rule "add_zero_left" (formula "60") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "60") (term "0"))
            (rule "add_literals" (formula "60") (term "1,0"))
            (rule "times_zero_1" (formula "60") (term "0"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "true_left" (formula "60"))
            (rule "inEqSimp_ltToLeq" (formula "60") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "60") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "60") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "60") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "60") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "60") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "60") (term "0,0,0"))
            (rule "applyEq" (formula "60") (term "0,0,1,0") (ifseqformula "61"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "true_left" (formula "60"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "65") (inst "iv=iv"))
            (rule "andLeft" (formula "65"))
            (rule "lenOfSeqConcat" (formula "66") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "66"))
            (rule "polySimp_addComm0" (formula "66") (term "1,1,0,0"))
            (rule "lenOfSeqConcat" (formula "65") (term "0"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "polySimp_homoEq" (formula "65"))
            (rule "polySimp_mulComm0" (formula "65") (term "1,0"))
            (rule "polySimp_addComm0" (formula "65") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "65") (term "1,0"))
            (rule "mul_literals" (formula "65") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "65") (term "0"))
            (rule "polySimp_addComm0" (formula "65") (term "0,0"))
            (rule "lenOfSeqConcatEQ" (formula "65") (term "1,0,0") (ifseqformula "67"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "polySimp_addComm0" (formula "65") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "65") (term "0,0"))
            (rule "add_literals" (formula "65") (term "0,0,0"))
            (rule "add_zero_left" (formula "65") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "65") (term "0"))
            (rule "add_literals" (formula "65") (term "1,0"))
            (rule "times_zero_1" (formula "65") (term "0"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "true_left" (formula "65"))
            (rule "inEqSimp_ltToLeq" (formula "65") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "65") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "65") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "65") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "65") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "65") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "65") (term "0,0,0"))
            (rule "applyEq" (formula "65") (term "0,0,1,0") (ifseqformula "66"))
             (builtin "One Step Simplification" (formula "65"))
            (rule "true_left" (formula "65"))
            (rule "lenNonNegative" (formula "9") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "9"))
            (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "9"))
            (rule "leq_literals" (formula "10") (term "0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "ifthenelse_split" (formula "77") (term "1"))
            (branch " vals_17_A.seq@heapAtPre_A<<anonHeapFunction>>.length >= 1 + iv_0 TRUE"
                (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "78"))
            )
            (branch " vals_17_A.seq@heapAtPre_A<<anonHeapFunction>>.length >= 1 + iv_0 FALSE"
               (rule "replace_known_right" (formula "78") (term "0,0") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "78"))
               (rule "inEqSimp_geqRight" (formula "77"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
               (rule "replace_known_left" (formula "79") (term "0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "2")))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq1" (formula "3"))
               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
               (rule "add_literals" (formula "3") (term "1,0"))
               (rule "times_zero_1" (formula "3") (term "0"))
               (rule "leq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "10") (term "0") (ifseqformula "2"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "24") (inst "t=i_4"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "56"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "70"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "24") (inst "t=i_2"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "46"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "72"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "25") (inst "t=i_5"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
               (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "51"))
               (rule "replace_known_right" (formula "25") (term "0,0,0,0") (ifseqformula "67"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "allLeft" (formula "24") (inst "t=i_5"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "50"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "70"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "24") (inst "t=i_3"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "41"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "72"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "24") (inst "t=i_0"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "22"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "72"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "allLeft" (formula "25") (inst "t=i_3"))
               (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
               (rule "applyEq" (formula "25") (term "0,0,0,0,0") (ifseqformula "42"))
               (rule "replace_known_right" (formula "25") (term "0,0,0,0") (ifseqformula "68"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "allLeft" (formula "24") (inst "t=i_1"))
               (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
               (rule "applyEq" (formula "24") (term "0,0,0,0,0") (ifseqformula "35"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0") (ifseqformula "70"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "true_left" (formula "24"))
               (rule "Use_information_flow_contract_for_add_857115291_0000_5" (formula "65") (ifseqformula "60"))
               (rule "replaceKnownSelect_taclet000_3" (formula "65") (term "1,1,1"))
               (rule "replaceKnownSelect_taclet0000_6" (formula "65") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet000_4" (formula "65") (term "1,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_7" (formula "65") (term "0,1,1"))
               (rule "replace_known_left" (formula "65") (term "0,0,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "77")))
               (rule "true_left" (formula "65"))
               (rule "Use_information_flow_contract_for_add_857115291_000_2" (formula "65") (ifseqformula "60"))
               (rule "replaceKnownSelect_taclet000_3" (formula "65") (term "1,1,1"))
               (rule "replaceKnownSelect_taclet0000_6" (formula "65") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet000_4" (formula "65") (term "1,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0000_7" (formula "65") (term "0,1,1"))
               (rule "replace_known_right" (formula "65") (term "1,0,1") (ifseqformula "77"))
                (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "67")) (ifInst ""  (formula "68")) (ifInst ""  (formula "9")))
               (rule "true_left" (formula "65"))
               (rule "Use_information_flow_contract_for_add_857115291_000_2" (formula "60") (ifseqformula "60"))
                (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "68")) (ifInst ""  (formula "68")))
               (rule "true_left" (formula "60"))
               (rule "Use_information_flow_contract_for_get_1066055272_00_1" (formula "42") (inst "i#69=i#69") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "72")) (ifInst ""  (formula "72")))
               (rule "true_left" (formula "42"))
               (rule "Use_information_flow_contract_for_add_857115291_000_2" (formula "65") (ifseqformula "65"))
                (builtin "One Step Simplification" (formula "65") (ifInst ""  (formula "67")) (ifInst ""  (formula "67")))
               (rule "true_left" (formula "65"))
               (rule "Use_information_flow_contract_for_get_1066055272_0_0" (formula "52") (inst "i#33=i#33") (ifseqformula "42"))
               (rule "replace_known_left" (formula "52") (term "0,0,0,1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "70")) (ifInst ""  (formula "72")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")) (ifInst ""  (formula "77")))
               (rule "notLeft" (formula "52"))
               (rule "castedGetAny" (formula "66") (term "0,1,0,0,1"))
               (rule "castedGetAny" (formula "66") (term "0,1,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,0"))
               (rule "applyEq" (formula "66") (term "0,0,1,0,0,1,0,0,0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "66") (term "0,0,1,0,0,0") (ifseqformula "10"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,1"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,1"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,1"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,0"))
               (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "66") (term "1,0") (inst "i=i") (inst "i_0=i_0"))
               (rule "expand_inInt" (formula "66") (term "1,0,0,1,1,0"))
               (rule "expand_inInt" (formula "66") (term "1,0,0,1,0,1,0"))
               (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1,1,0"))
               (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1,1,0"))
               (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1,0,1,0"))
               (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1,0,1,0"))
               (rule "eqSymm" (formula "66") (term "0,0,1,0"))
               (rule "castedGetAny" (formula "66") (term "0,0,1,0,1,1,0"))
               (rule "castedGetAny" (formula "66") (term "0,0,1,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,1,0,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,1,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,1,0,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0,1,1,0"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0,1,0,1,0"))
               (rule "applyEq" (formula "66") (term "0,0,1,0,0,1,0,0,0,1,1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "66") (term "0,0,0,0,1,0") (ifseqformula "11"))
               (rule "eqSymm" (formula "66") (term "0,0,1,0"))
               (rule "applyEq" (formula "66") (term "0,0,1,0,0,1,0,0,0,1,0,1,0") (ifseqformula "10"))
               (rule "applyEq" (formula "66") (term "0,0,0,1,0,1,0,1,0") (ifseqformula "10"))
               (rule "applyEq" (formula "66") (term "0,0,0,1,0,1,1,0") (ifseqformula "11"))
               (rule "applyEq" (formula "66") (term "0,0,0,0,1,0") (ifseqformula "10"))
               (rule "eqSymm" (formula "66") (term "0,0,1,0"))
               (rule "replace_known_left" (formula "66") (term "0,0,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "66"))
               (rule "applyEq" (formula "66") (term "0,1,0,0,1,0,0,0,1,1,0") (ifseqformula "23"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,1,1,0"))
               (rule "nnf_imp2or" (formula "66") (term "0,0,1,0"))
               (rule "nnf_imp2or" (formula "66") (term "0,1,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,1,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0,0,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,1,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0,0,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,1,1,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,1,1,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0,0,1,0"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0,0,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,0,1,0"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0,0,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "1,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0,1,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,1,1,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,1,1,0,0,1,1,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0,1,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,1,0,0,1,1,0"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,1,1,0"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0,1,1,0"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0,1,1,0"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,1,1,0"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0,1,1,0"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0,1,1,0"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0,1,1,0"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0,1,1,0"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0,1,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0,1,1,0"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,1,1,0"))
               (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "66") (term "1,1") (inst "i=i") (inst "i_0=i_0"))
               (rule "expand_inInt" (formula "66") (term "1,0,0,1,1,1"))
               (rule "expand_inInt" (formula "66") (term "1,0,0,1,0,1,1"))
               (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1,1,1"))
               (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1,1,1"))
               (rule "replace_int_MAX" (formula "66") (term "1,0,1,0,0,1,0,1,1"))
               (rule "replace_int_MIN" (formula "66") (term "0,1,1,0,0,1,0,1,1"))
               (rule "eqSymm" (formula "66") (term "0,0,1,1"))
               (rule "replace_known_left" (formula "66") (term "0,0,1,1") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "66"))
               (rule "castedGetAny" (formula "66") (term "0,0,1,0,1,1,1"))
               (rule "castedGetAny" (formula "66") (term "0,0,1,0,0,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,1,1,1"))
               (rule "inEqSimp_ltToLeq" (formula "66") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0,0,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0,1,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "1,1,0,0,0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "66") (term "0,0,0,0,1,1,1"))
               (rule "applyEq" (formula "66") (term "0,1,0,0,1,0,0,0,1,1,1") (ifseqformula "23"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,0,0,0,1,1,1"))
               (rule "polySimp_mulComm0" (formula "66") (term "1,1,0,0,0,1,1,1"))
               (rule "polySimp_rightDist" (formula "66") (term "1,1,0,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "0,1,1,0,0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,1,0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,1,0,0,0,1,1,1"))
               (rule "nnf_imp2or" (formula "66") (term "0,0,1,1"))
               (rule "nnf_imp2or" (formula "66") (term "0,1,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,1,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "1,0,0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0,0,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,1,1,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,1,1,0,0,0,1,1"))
               (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0,0,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,1,0,0,0,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,0,1,1"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0,0,1,1"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0,0,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,0,1,1"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0,0,1,1"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0,0,1,1"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0,0,1,1"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,0,0,1,1"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0,0,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0,0,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,0,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "1,0,0,1,1,1"))
               (rule "inEqSimp_notLeq" (formula "66") (term "0,1,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,1,0,0,1,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "0,1,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,1,0,0,1,1,1"))
               (rule "inEqSimp_notGeq" (formula "66") (term "1,1,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,1,1,0,0,1,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,1,1,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "1,1,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "1,1,1,0,0,1,1,1"))
               (rule "nnf_notAnd" (formula "66") (term "0,0,0,1,1,1"))
               (rule "inEqSimp_notGeq" (formula "66") (term "0,0,0,0,1,1,1"))
               (rule "times_zero_1" (formula "66") (term "1,0,0,0,0,0,0,1,1,1"))
               (rule "add_zero_right" (formula "66") (term "0,0,0,0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "66") (term "0,0,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "1,0,0,0,0,1,1,1"))
               (rule "inEqSimp_notLeq" (formula "66") (term "1,0,0,0,1,1,1"))
               (rule "polySimp_rightDist" (formula "66") (term "1,0,0,1,0,0,0,1,1,1"))
               (rule "mul_literals" (formula "66") (term "0,1,0,0,1,0,0,0,1,1,1"))
               (rule "polySimp_addAssoc" (formula "66") (term "0,0,1,0,0,0,1,1,1"))
               (rule "add_literals" (formula "66") (term "0,0,0,1,0,0,0,1,1,1"))
               (rule "add_zero_left" (formula "66") (term "0,0,1,0,0,0,1,1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "66") (term "1,0,0,0,1,1,1"))
               (rule "polySimp_mulLiterals" (formula "66") (term "1,1,0,0,0,1,1,1"))
               (rule "polySimp_elimOne" (formula "66") (term "1,1,0,0,0,1,1,1"))
               (rule "andRight" (formula "66"))
               (branch
                  (rule "andRight" (formula "66"))
                  (branch
                     (rule "nnf_ex2all" (formula "66"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0"))
                     (rule "commute_or" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "1") (inst "t=i_4"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "57"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                     (rule "allLeft" (formula "2") (inst "t=i_5"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "52"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                     (rule "allLeft" (formula "3") (inst "t=i_1"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "38"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (term "0") (ifseqformula "51"))
                     (rule "qeq_literals" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "37"))
                     (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
                     (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "3") (term "0,0,1"))
                     (rule "leq_literals" (formula "3") (term "0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "58"))
                     (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                     (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "leq_literals" (formula "1") (term "0,1"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq0" (formula "52") (ifseqformula "2"))
                     (rule "andLeft" (formula "52"))
                     (rule "inEqSimp_homoInEq1" (formula "52"))
                     (rule "polySimp_pullOutFactor1b" (formula "52") (term "0"))
                     (rule "add_literals" (formula "52") (term "1,1,0"))
                     (rule "times_zero_1" (formula "52") (term "1,0"))
                     (rule "add_zero_right" (formula "52") (term "0"))
                     (rule "leq_literals" (formula "52"))
                     (rule "closeFalse" (formula "52"))
                  )
                  (branch
                     (rule "andRight" (formula "66"))
                     (branch
                        (rule "allRight" (formula "66") (inst "sk=i_0_0"))
                        (rule "orRight" (formula "66"))
                        (rule "notRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "69"))
                        (rule "inEqSimp_geqRight" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "68"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "allLeft" (formula "28") (inst "t=i_0_0"))
                        (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "3"))
                        (rule "andLeft" (formula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "28"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "leq_literals" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                     (branch
                        (rule "allRight" (formula "66") (inst "sk=i_6"))
                        (rule "orRight" (formula "66"))
                        (rule "notRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "69"))
                        (rule "inEqSimp_geqRight" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "68"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "allLeft" (formula "29") (inst "t=i_6"))
                        (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "29") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "29") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                        (rule "add_literals" (formula "29") (term "0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,1"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "29"))
                        (rule "leq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                  )
               )
               (branch
                  (rule "andRight" (formula "66"))
                  (branch
                     (rule "nnf_ex2all" (formula "66"))
                     (rule "nnf_notAnd" (formula "1") (term "0"))
                     (rule "nnf_notAnd" (formula "1") (term "0,0"))
                     (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                     (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                     (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                     (rule "commute_or_2" (formula "1") (term "0"))
                     (rule "commute_or" (formula "1") (term "0,0"))
                     (rule "allLeft" (formula "1") (inst "t=i_2"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "47"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
                     (rule "allLeft" (formula "2") (inst "t=i_3"))
                     (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
                     (rule "allLeft" (formula "3") (inst "t=i_0"))
                     (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_commuteGeq" (formula "3") (term "1"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "47"))
                     (rule "qeq_literals" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "43"))
                     (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "2") (term "0,0,1"))
                     (rule "leq_literals" (formula "2") (term "0,1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_contradInEq1" (formula "3") (term "0") (ifseqformula "23"))
                     (rule "qeq_literals" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "inEqSimp_contradInEq0" (formula "48") (ifseqformula "1"))
                     (rule "andLeft" (formula "48"))
                     (rule "inEqSimp_homoInEq1" (formula "48"))
                     (rule "polySimp_pullOutFactor1b" (formula "48") (term "0"))
                     (rule "add_literals" (formula "48") (term "1,1,0"))
                     (rule "times_zero_1" (formula "48") (term "1,0"))
                     (rule "add_zero_right" (formula "48") (term "0"))
                     (rule "leq_literals" (formula "48"))
                     (rule "closeFalse" (formula "48"))
                  )
                  (branch
                     (rule "andRight" (formula "66"))
                     (branch
                        (rule "allRight" (formula "66") (inst "sk=i_0_0"))
                        (rule "orRight" (formula "66"))
                        (rule "notRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "69"))
                        (rule "inEqSimp_geqRight" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "68"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "allLeft" (formula "28") (inst "t=i_0_0"))
                        (rule "replace_known_left" (formula "28") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (term "0,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "28") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq0" (formula "28") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "28") (term "0,0"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "inEqSimp_contradInEq1" (formula "28") (ifseqformula "3"))
                        (rule "andLeft" (formula "28"))
                        (rule "inEqSimp_homoInEq1" (formula "28"))
                        (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
                        (rule "add_literals" (formula "28") (term "1,1,0"))
                        (rule "times_zero_1" (formula "28") (term "1,0"))
                        (rule "add_zero_right" (formula "28") (term "0"))
                        (rule "leq_literals" (formula "28"))
                        (rule "closeFalse" (formula "28"))
                     )
                     (branch
                        (rule "allRight" (formula "66") (inst "sk=i_6"))
                        (rule "orRight" (formula "66"))
                        (rule "notRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "67"))
                        (rule "orRight" (formula "69"))
                        (rule "inEqSimp_geqRight" (formula "68"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "68"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_geqRight" (formula "70"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
                        (rule "leq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "allLeft" (formula "29") (inst "t=i_6"))
                        (rule "replace_known_left" (formula "29") (term "0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_commuteGeq" (formula "29") (term "1"))
                        (rule "inEqSimp_contradInEq0" (formula "29") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "29") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_contradInEq1" (formula "29") (term "1") (ifseqformula "3"))
                        (rule "inEqSimp_homoInEq1" (formula "29") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "29") (term "0,0,1"))
                        (rule "add_literals" (formula "29") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "29") (term "1,0,0,1"))
                        (rule "add_literals" (formula "29") (term "0,0,1"))
                        (rule "leq_literals" (formula "29") (term "0,1"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "29"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
            )
         )
         (branch "Exceptional Post (add)"
             (builtin "One Step Simplification" (formula "63"))
             (builtin "One Step Simplification" (formula "60"))
            (rule "andLeft" (formula "60"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "1,0") (ifseqformula "60"))
            (rule "andLeft" (formula "61"))
            (rule "andLeft" (formula "62"))
            (rule "andLeft" (formula "61"))
            (rule "andLeft" (formula "63"))
            (rule "notLeft" (formula "61"))
            (rule "close" (formula "65") (ifseqformula "64"))
         )
         (branch "Pre (add)"
             (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "59")) (ifInst ""  (formula "22")) (ifInst ""  (formula "59")) (ifInst ""  (formula "42")))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "61"))
            (rule "closeTrue" (formula "61"))
         )
         (branch "Null reference (var_2 = null)"
             (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "68")))
            (rule "closeTrue" (formula "61"))
         )
      )
      (branch "Exceptional Post (add)"
          (builtin "One Step Simplification" (formula "55"))
          (builtin "One Step Simplification" (formula "59"))
         (rule "andLeft" (formula "55"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "1,0") (ifseqformula "55"))
         (rule "andLeft" (formula "56"))
         (rule "andLeft" (formula "56"))
         (rule "andLeft" (formula "58"))
         (rule "notLeft" (formula "56"))
         (rule "close" (formula "59") (ifseqformula "58"))
      )
      (branch "Pre (add)"
          (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "55")) (ifInst ""  (formula "9")) (ifInst ""  (formula "55")) (ifInst ""  (formula "33")))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "57"))
         (rule "closeTrue" (formula "57"))
      )
      (branch "Null reference (var = null)"
          (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "65")))
         (rule "closeTrue" (formula "57"))
      )
   )
   (branch "Exceptional Post (get)"
       (builtin "One Step Simplification" (formula "42"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "andLeft" (formula "42"))
      (rule "andLeft" (formula "43"))
      (rule "andLeft" (formula "42"))
      (rule "andLeft" (formula "44"))
      (rule "notLeft" (formula "42"))
      (rule "close" (formula "46") (ifseqformula "45"))
   )
   (branch "Pre (get)"
       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "46")) (ifInst ""  (formula "22")) (ifInst ""  (formula "46")) (ifInst ""  (formula "26")))
      (rule "castedGetAny" (formula "43") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
      (rule "applyEq" (formula "43") (term "0,0,1,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "6"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "43") (term "1") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "43") (term "1,0,0,1,1"))
      (rule "expand_inInt" (formula "43") (term "1,0,0,1,0,1"))
      (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,1"))
      (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,1"))
      (rule "replace_int_MIN" (formula "43") (term "0,1,1,0,0,1,0,1"))
      (rule "replace_int_MAX" (formula "43") (term "1,0,1,0,0,1,0,1"))
      (rule "eqSymm" (formula "43") (term "0,0,1"))
      (rule "castedGetAny" (formula "43") (term "0,0,1,0,1,1"))
      (rule "castedGetAny" (formula "43") (term "0,0,1,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0,1,0,1"))
      (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,0,0,0,1,1") (ifseqformula "7"))
      (rule "applyEq" (formula "43") (term "0,0,0,0,1") (ifseqformula "7"))
      (rule "eqSymm" (formula "43") (term "0,0,1"))
      (rule "applyEq" (formula "43") (term "0,0,0,1,0,1,0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,0,0,0,1,0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "43") (term "0,0,0,1,0,1,1") (ifseqformula "7"))
      (rule "applyEq" (formula "43") (term "0,0,0,0,1") (ifseqformula "6"))
      (rule "eqSymm" (formula "43") (term "0,0,1"))
      (rule "replace_known_left" (formula "43") (term "0,0,1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "43"))
      (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0,1,1") (ifseqformula "19"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,1,1"))
      (rule "nnf_imp2or" (formula "43") (term "0,0,1"))
      (rule "nnf_imp2or" (formula "43") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "43") (term "0,0,0,1"))
      (rule "nnf_notAnd" (formula "43") (term "0,0,1,1"))
      (rule "nnf_notAnd" (formula "43") (term "0,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,0,1"))
      (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0,0,1"))
      (rule "add_literals" (formula "43") (term "0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,0,1"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,0,1"))
      (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "43") (term "1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0,0,1"))
      (rule "add_literals" (formula "43") (term "0,0,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "1,1,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "43") (term "1,0,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "43") (term "0,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0,1,1"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0,1,1"))
      (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0,1,1"))
      (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0,1,1"))
      (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,0,1,1"))
      (rule "nnf_notAnd" (formula "43") (term "1,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0,1,1"))
      (rule "add_literals" (formula "43") (term "0,0,1,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "1,1,1,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "43") (term "1,0,1,0,0,1,1"))
       (builtin "Use Operation Contract" (formula "44") (newnames "heapBefore_add,result_806,exc_1065,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
      (branch "Post (add)"
          (builtin "One Step Simplification" (formula "43"))
          (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "46")) (ifInst ""  (formula "9")) (ifInst ""  (formula "46")) (ifInst ""  (formula "33")))
          (builtin "One Step Simplification" (formula "44"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "andLeft" (formula "43"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "applyEq" (formula "47") (term "5") (ifseqformula "44"))
         (rule "eqSeqConcat" (formula "45"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "polySimp_addComm0" (formula "45") (term "1"))
         (rule "eqSeqSingleton" (formula "47"))
         (rule "andLeft" (formula "47"))
         (rule "lenOfSeqSub" (formula "47") (term "0"))
         (rule "polySimp_elimSub" (formula "47") (term "1,0"))
         (rule "polySimp_addComm0" (formula "47") (term "1,0"))
         (rule "ifEqualsInteger" (formula "47"))
         (rule "equal_literals" (formula "47") (term "1,1"))
          (builtin "One Step Simplification" (formula "47"))
         (rule "andLeft" (formula "47"))
         (rule "polySimp_homoEq" (formula "48"))
         (rule "polySimp_mulComm0" (formula "48") (term "1,0"))
         (rule "polySimp_rightDist" (formula "48") (term "1,0"))
         (rule "polySimp_mulAssoc" (formula "48") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "48") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "0,1,0"))
         (rule "polySimp_elimOne" (formula "48") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "48") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "47"))
         (rule "polySimp_mulComm0" (formula "47") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "47") (term "0"))
         (rule "apply_eq_monomials" (formula "48") (term "1,0") (ifseqformula "45"))
         (rule "polySimp_rightDist" (formula "48") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "1,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "48") (term "1,0"))
         (rule "add_literals" (formula "48") (term "1,1,1,0"))
         (rule "times_zero_1" (formula "48") (term "1,1,0"))
         (rule "add_zero_right" (formula "48") (term "1,0"))
         (rule "polySimp_rightDist" (formula "48") (term "1,0"))
         (rule "mul_literals" (formula "48") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "48") (term "0"))
         (rule "polySimp_addComm1" (formula "48") (term "0,0"))
         (rule "add_literals" (formula "48") (term "0,0,0"))
         (rule "add_zero_left" (formula "48") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "48") (term "0"))
         (rule "add_literals" (formula "48") (term "1,0"))
         (rule "times_zero_1" (formula "48") (term "0"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "true_left" (formula "48"))
         (rule "apply_eq_monomials" (formula "47") (term "1,0") (ifseqformula "45"))
         (rule "polySimp_rightDist" (formula "47") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0"))
         (rule "polySimp_pullOutFactor0b" (formula "47") (term "1,0"))
         (rule "add_literals" (formula "47") (term "1,1,1,0"))
         (rule "times_zero_1" (formula "47") (term "1,1,0"))
         (rule "add_zero_right" (formula "47") (term "1,0"))
         (rule "polySimp_rightDist" (formula "47") (term "1,0"))
         (rule "mul_literals" (formula "47") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "47") (term "0"))
         (rule "polySimp_addComm1" (formula "47") (term "0,0"))
         (rule "add_literals" (formula "47") (term "0,0,0"))
         (rule "add_zero_left" (formula "47") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "47") (term "0"))
         (rule "add_literals" (formula "47") (term "1,0"))
         (rule "times_zero_1" (formula "47") (term "0"))
         (rule "leq_literals" (formula "47"))
         (rule "true_left" (formula "47"))
         (rule "getOfSeqSub" (formula "47") (term "0"))
         (rule "castDel" (formula "47") (term "2,0"))
         (rule "add_zero_left" (formula "47") (term "1,1,0"))
         (rule "leq_literals" (formula "47") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "47"))
         (rule "polySimp_elimSub" (formula "47") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "47") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "47") (term "0,0"))
         (rule "add_zero_right" (formula "47") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0"))
         (rule "polySimp_mulAssoc" (formula "47") (term "0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "47") (term "0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "47") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "47") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "47") (term "0,0,0"))
         (rule "apply_eq_monomials" (formula "47") (term "1,0,0,0") (ifseqformula "45"))
         (rule "polySimp_rightDist" (formula "47") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "47") (term "1,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "47") (term "1,0,1,0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "47") (term "1,0,0,0"))
         (rule "add_literals" (formula "47") (term "1,1,1,0,0,0"))
         (rule "times_zero_1" (formula "47") (term "1,1,0,0,0"))
         (rule "add_zero_right" (formula "47") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "47") (term "1,0,0,0"))
         (rule "mul_literals" (formula "47") (term "0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "47") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "47") (term "0,0,0,0"))
         (rule "add_literals" (formula "47") (term "0,0,0,0,0"))
         (rule "add_zero_left" (formula "47") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "47") (term "0,0,0"))
         (rule "add_literals" (formula "47") (term "1,0,0,0"))
         (rule "times_zero_1" (formula "47") (term "0,0,0"))
         (rule "leq_literals" (formula "47") (term "0,0"))
          (builtin "One Step Simplification" (formula "47"))
         (rule "pullOutSelect" (formula "45") (term "0,0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "45"))
         (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "45"))
         (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "43"))
          (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "62")) (ifInst ""  (formula "12")))
         (rule "polySimp_homoEq" (formula "46"))
         (rule "polySimp_addComm1" (formula "46") (term "0"))
         (rule "elementOfSingleton" (formula "45") (term "0,0"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "applyEqReverse" (formula "48") (term "0,0") (ifseqformula "45"))
         (rule "applyEqReverse" (formula "47") (term "0,0") (ifseqformula "45"))
         (rule "applyEqReverse" (formula "46") (term "0,0,1,0,0") (ifseqformula "45"))
         (rule "hideAuxiliaryEq" (formula "45"))
         (rule "polySimp_sepPosMonomial" (formula "45"))
         (rule "polySimp_mulComm0" (formula "45") (term "1"))
         (rule "polySimp_rightDist" (formula "45") (term "1"))
         (rule "mul_literals" (formula "45") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "45") (term "1,1"))
         (rule "polySimp_elimOne" (formula "45") (term "1,1"))
         (rule "applyEq" (formula "46") (term "2,0") (ifseqformula "45"))
         (rule "lenOfSeqSubEQ" (formula "45") (term "0") (ifseqformula "46"))
         (rule "polySimp_elimSub" (formula "45") (term "1,0"))
         (rule "times_zero_2" (formula "45") (term "1,1,0"))
         (rule "add_zero_right" (formula "45") (term "1,0"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "polySimp_homoEq" (formula "45") (term "1"))
         (rule "times_zero_2" (formula "45") (term "1,0,1"))
         (rule "add_zero_right" (formula "45") (term "0,1"))
         (rule "lenOfSeqSubEQ" (formula "47") (term "1,0") (ifseqformula "46"))
         (rule "polySimp_elimSub" (formula "47") (term "1,1,0"))
         (rule "mul_literals" (formula "47") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "47") (term "1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "45") (term "0"))
         (rule "add_zero_right" (formula "45") (term "0,0"))
         (rule "polySimp_rightDist" (formula "45") (term "1,0,0"))
         (rule "mul_literals" (formula "45") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "45") (term "0,0"))
         (rule "add_literals" (formula "45") (term "0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "47") (term "0,1,0"))
         (rule "add_zero_right" (formula "47") (term "0,0,1,0"))
         (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0"))
         (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0"))
         (rule "add_literals" (formula "47") (term "0,0,0,1,0"))
         (rule "polySimp_sepPosMonomial" (formula "45") (term "1"))
         (rule "mul_literals" (formula "45") (term "1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "45") (term "0"))
         (rule "polySimp_mulLiterals" (formula "45") (term "0,0"))
         (rule "polySimp_elimOne" (formula "45") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "47") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "47") (term "0,0,1,0"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "50"))
         (rule "true_left" (formula "50"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "48"))
         (rule "true_left" (formula "48"))
         (rule "seqGetAlphaCast" (formula "41") (term "0"))
         (rule "castedGetAny" (formula "41") (term "0"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "true_left" (formula "41"))
         (rule "seqGetAlphaCast" (formula "36") (term "0"))
         (rule "castedGetAny" (formula "36") (term "0"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "true_left" (formula "36"))
         (rule "seqGetAlphaCast" (formula "37") (term "0"))
         (rule "castedGetAny" (formula "37") (term "0"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "true_left" (formula "37"))
         (rule "commute_or" (formula "45"))
         (rule "inEqSimp_or_weaken1" (formula "45"))
         (rule "add_literals" (formula "45") (term "1,0"))
          (builtin "One Step Simplification" (formula "45"))
         (rule "methodCallEmpty" (formula "51") (term "1"))
         (rule "tryEmpty" (formula "51") (term "1"))
         (rule "emptyModality" (formula "51") (term "1"))
          (builtin "One Step Simplification" (formula "51"))
         (rule "notRight" (formula "51"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEqRigid" (formula "7") (term "0,0") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet020_2" (formula "7") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet020_3" (formula "7") (term "0"))
         (rule "applyEqReverse" (formula "62") (term "0,1,0") (ifseqformula "7"))
         (rule "applyEqReverse" (formula "62") (term "0,1,1,0,1") (ifseqformula "7"))
         (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "7"))
         (rule "hideAuxiliaryEq" (formula "7"))
         (rule "eqSymm" (formula "61") (term "0"))
         (rule "eqSymm" (formula "61") (term "1,0,1"))
         (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "47"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "andRight" (formula "51"))
         (branch
            (rule "nnf_ex2all" (formula "51"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "ifthenelse_split" (formula "49") (term "1,0"))
            (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 TRUE"
               (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "49"))
               (rule "leq_literals" (formula "47") (term "0"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "true_left" (formula "47"))
               (rule "allLeft" (formula "1") (inst "t=i_1"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "32"))
               (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
               (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "31") (ifseqformula "1"))
               (rule "qeq_literals" (formula "31") (term "0"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "closeFalse" (formula "31"))
            )
            (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 FALSE"
               (rule "inEqSimp_geqRight" (formula "51"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "48") (ifseqformula "1"))
               (rule "applyEq" (formula "49") (term "0") (ifseqformula "48"))
               (rule "qeq_literals" (formula "49"))
               (rule "true_left" (formula "49"))
               (rule "applyEq" (formula "49") (term "1,2,0") (ifseqformula "48"))
               (rule "add_literals" (formula "49") (term "2,0"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "eqSymm" (formula "49"))
               (rule "eqSeqEmpty" (formula "49"))
               (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "48"))
               (rule "eqSymm" (formula "61") (term "0"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "48"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "allLeft" (formula "1") (inst "t=i_1"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_commuteGeq" (formula "1") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "31"))
               (rule "qeq_literals" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "1"))
               (rule "andLeft" (formula "32"))
               (rule "inEqSimp_homoInEq1" (formula "32"))
               (rule "polySimp_pullOutFactor1b" (formula "32") (term "0"))
               (rule "add_literals" (formula "32") (term "1,1,0"))
               (rule "times_zero_1" (formula "32") (term "1,0"))
               (rule "add_zero_right" (formula "32") (term "0"))
               (rule "leq_literals" (formula "32"))
               (rule "closeFalse" (formula "32"))
            )
         )
         (branch
            (rule "andRight" (formula "51"))
            (branch
               (rule "allRight" (formula "51") (inst "sk=i_0_0"))
               (rule "orRight" (formula "51"))
               (rule "orRight" (formula "51"))
               (rule "notRight" (formula "53"))
               (rule "orRight" (formula "53"))
               (rule "orRight" (formula "52"))
               (rule "inEqSimp_geqRight" (formula "54"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "55"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "55"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "55"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "ifthenelse_split" (formula "52") (term "1,0"))
               (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 TRUE"
                  (rule "inEqSimp_subsumption1" (formula "50") (ifseqformula "52"))
                  (rule "leq_literals" (formula "50") (term "0"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "true_left" (formula "50"))
                  (rule "allLeft" (formula "25") (inst "t=i_0_0"))
                  (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "25") (term "1,0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "25") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "25") (term "0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (ifseqformula "2"))
                  (rule "andLeft" (formula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "25"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                  (rule "add_literals" (formula "25") (term "1,1,0"))
                  (rule "times_zero_1" (formula "25") (term "1,0"))
                  (rule "add_zero_right" (formula "25") (term "0"))
                  (rule "leq_literals" (formula "25"))
                  (rule "closeFalse" (formula "25"))
               )
               (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 FALSE"
                  (rule "inEqSimp_geqRight" (formula "54"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "51") (ifseqformula "1"))
                  (rule "applyEq" (formula "53") (term "1,2,0") (ifseqformula "51"))
                  (rule "add_literals" (formula "53") (term "2,0"))
                   (builtin "One Step Simplification" (formula "53"))
                  (rule "eqSymm" (formula "53"))
                  (rule "eqSeqEmpty" (formula "53"))
                  (rule "applyEq" (formula "52") (term "0") (ifseqformula "51"))
                  (rule "qeq_literals" (formula "52"))
                  (rule "true_left" (formula "52"))
                  (rule "applyEq" (formula "64") (term "0,0") (ifseqformula "51"))
                  (rule "eqSymm" (formula "64") (term "0"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "51"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "allLeft" (formula "25") (inst "t=i_0_0"))
                  (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "25") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                  (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                  (rule "add_literals" (formula "25") (term "0,0,1"))
                  (rule "leq_literals" (formula "25") (term "0,1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "25"))
                  (rule "leq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "24"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch
               (rule "allRight" (formula "51") (inst "sk=i_4"))
               (rule "orRight" (formula "51"))
               (rule "orRight" (formula "51"))
               (rule "notRight" (formula "53"))
               (rule "orRight" (formula "53"))
               (rule "orRight" (formula "52"))
               (rule "inEqSimp_geqRight" (formula "54"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_leqRight" (formula "55"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "55"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "55"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4"))
               (rule "mul_literals" (formula "4") (term "1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "3"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
               (rule "leq_literals" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "ifthenelse_split" (formula "52") (term "1,0"))
               (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 TRUE"
                  (rule "inEqSimp_subsumption1" (formula "50") (ifseqformula "52"))
                  (rule "leq_literals" (formula "50") (term "0"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "true_left" (formula "50"))
                  (rule "allLeft" (formula "26") (inst "t=i_4"))
                  (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "26") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq0" (formula "26") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "26") (term "0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                  (rule "andLeft" (formula "26"))
                  (rule "inEqSimp_homoInEq1" (formula "26"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                  (rule "add_literals" (formula "26") (term "1,1,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0"))
                  (rule "add_zero_right" (formula "26") (term "0"))
                  (rule "leq_literals" (formula "26"))
                  (rule "closeFalse" (formula "26"))
               )
               (branch " vals_17_A.seq@anon_heap_add<<anonHeapFunction>>.length >= 2 FALSE"
                  (rule "inEqSimp_geqRight" (formula "54"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_antiSymm" (formula "51") (ifseqformula "1"))
                  (rule "applyEq" (formula "53") (term "1,2,0") (ifseqformula "51"))
                  (rule "add_literals" (formula "53") (term "2,0"))
                   (builtin "One Step Simplification" (formula "53"))
                  (rule "eqSymm" (formula "53"))
                  (rule "eqSeqEmpty" (formula "53"))
                  (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "51"))
                  (rule "eqSymm" (formula "65") (term "0"))
                  (rule "applyEq" (formula "52") (term "0") (ifseqformula "51"))
                  (rule "qeq_literals" (formula "52"))
                  (rule "true_left" (formula "52"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "51"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "allLeft" (formula "26") (inst "t=i_4"))
                  (rule "replace_known_left" (formula "26") (term "0,0,0,0") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_commuteGeq" (formula "26") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (term "0,0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "26") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq0" (formula "26") (term "0") (ifseqformula "3"))
                  (rule "qeq_literals" (formula "26") (term "0,0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "inEqSimp_contradInEq1" (formula "26") (ifseqformula "2"))
                  (rule "andLeft" (formula "26"))
                  (rule "inEqSimp_homoInEq1" (formula "26"))
                  (rule "polySimp_pullOutFactor1b" (formula "26") (term "0"))
                  (rule "add_literals" (formula "26") (term "1,1,0"))
                  (rule "times_zero_1" (formula "26") (term "1,0"))
                  (rule "add_zero_right" (formula "26") (term "0"))
                  (rule "leq_literals" (formula "26"))
                  (rule "closeFalse" (formula "26"))
               )
            )
         )
      )
      (branch "Exceptional Post (add)"
          (builtin "One Step Simplification" (formula "46"))
          (builtin "One Step Simplification" (formula "43"))
         (rule "andLeft" (formula "43"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,0") (ifseqformula "43"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "46"))
         (rule "notLeft" (formula "44"))
         (rule "close" (formula "47") (ifseqformula "46"))
      )
      (branch "Pre (add)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "42")) (ifInst ""  (formula "9")) (ifInst ""  (formula "42")) (ifInst ""  (formula "33")))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
         (rule "closeTrue" (formula "44"))
      )
      (branch "Null reference (var = null)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "52")))
         (rule "closeTrue" (formula "44"))
      )
   )
   (branch "Null reference (_r_17_B = null)"
       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "45")))
      (rule "closeTrue" (formula "43"))
   )
)
(branch "Exceptional Post (get)"
    (builtin "One Step Simplification" (formula "34"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "32"))
   (rule "andLeft" (formula "34"))
   (rule "notLeft" (formula "32"))
   (rule "close" (formula "35") (ifseqformula "34"))
)
(branch "Pre (get)"
    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "36")) (ifInst ""  (formula "9")) (ifInst ""  (formula "36")) (ifInst ""  (formula "13")))
   (rule "castedGetAny" (formula "32") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0"))
   (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "32") (term "1") (inst "i=i") (inst "i_0=i_0"))
   (rule "expand_inInt" (formula "32") (term "1,0,0,1,0,1"))
   (rule "expand_inInt" (formula "32") (term "1,0,0,1,1"))
   (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1,0,1"))
   (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1,0,1"))
   (rule "replace_int_MAX" (formula "32") (term "1,0,1,0,0,1,1"))
   (rule "replace_int_MIN" (formula "32") (term "0,1,1,0,0,1,1"))
   (rule "eqSymm" (formula "32") (term "0,0,1"))
   (rule "replace_known_left" (formula "32") (term "0,0,1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "castedGetAny" (formula "32") (term "0,0,1,0,1,1"))
   (rule "castedGetAny" (formula "32") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "32") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "0,0,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "32") (term "1,1,0,0,1,1"))
   (rule "applyEq" (formula "32") (term "0,1,0,0,1,0,0,0,1,1") (ifseqformula "19"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "32") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "32") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "0,1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "32") (term "1,1,1,0,0,0,1,1"))
   (rule "nnf_imp2or" (formula "32") (term "0,0,1"))
   (rule "nnf_imp2or" (formula "32") (term "0,1,1"))
   (rule "nnf_notAnd" (formula "32") (term "0,0,0,1"))
   (rule "nnf_notAnd" (formula "32") (term "0,0,1,1"))
   (rule "nnf_notAnd" (formula "32") (term "1,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "32") (term "0,1,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "1,0,1,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "32") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,0,1"))
   (rule "add_literals" (formula "32") (term "0,0,1,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "1,1,1,0,0,0,1"))
   (rule "nnf_notAnd" (formula "32") (term "0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,0,1"))
   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,0,1"))
   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,0,1"))
   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,0,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,0,0,0,1"))
   (rule "nnf_notAnd" (formula "32") (term "1,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "32") (term "0,1,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "1,0,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "32") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,1,1,0,0,1,1"))
   (rule "add_literals" (formula "32") (term "0,0,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "1,1,1,0,0,1,1"))
   (rule "nnf_notAnd" (formula "32") (term "0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "32") (term "0,0,0,0,1,1"))
   (rule "times_zero_1" (formula "32") (term "1,0,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "32") (term "0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "1,0,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "32") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "32") (term "0,1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "32") (term "0,0,1,0,0,0,1,1"))
   (rule "add_literals" (formula "32") (term "0,0,0,1,0,0,0,1,1"))
   (rule "add_zero_left" (formula "32") (term "0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,1"))
    (builtin "Use Operation Contract" (formula "31") (newnames "heapBefore_get_0,result_805,exc_1064") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (get)"
       (builtin "One Step Simplification" (formula "33"))
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "35"))
       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "38")) (ifInst ""  (formula "22")) (ifInst ""  (formula "38")) (ifInst ""  (formula "26")))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "35"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "34"))
      (rule "notLeft" (formula "34"))
      (rule "exLeft" (formula "36") (inst "sk=i_2"))
      (rule "andLeft" (formula "36"))
      (rule "andLeft" (formula "36"))
      (rule "exLeft" (formula "33") (inst "sk=i_3"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "34"))
      (rule "andLeft" (formula "33"))
      (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "43"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "castedGetAny" (formula "41") (term "0"))
      (rule "castedGetAny" (formula "35") (term "0"))
      (rule "castedGetAny" (formula "36") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "40"))
      (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "40") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "34"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "34") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "39"))
      (rule "inEqSimp_commuteLeq" (formula "33"))
      (rule "assignment" (formula "44") (term "1"))
       (builtin "One Step Simplification" (formula "44"))
      (rule "applyEq" (formula "40") (term "0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "38") (term "5") (ifseqformula "37"))
      (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "6"))
      (rule "inEqSimp_sepNegMonomial0" (formula "40"))
      (rule "polySimp_mulLiterals" (formula "40") (term "0"))
      (rule "polySimp_elimOne" (formula "40") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "34"))
      (rule "polySimp_mulLiterals" (formula "34") (term "0"))
      (rule "polySimp_elimOne" (formula "34") (term "0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "42") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "42") (term "1,0,0,1"))
      (rule "expand_inInt" (formula "42") (term "1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1"))
      (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1"))
      (rule "replace_int_MIN" (formula "42") (term "0,1,1,0,0,1,0"))
      (rule "replace_int_MAX" (formula "42") (term "1,0,1,0,0,1,0"))
      (rule "andLeft" (formula "42"))
      (rule "andLeft" (formula "42"))
      (rule "eqSymm" (formula "42"))
      (rule "castedGetAny" (formula "44") (term "0,0,1,0"))
      (rule "castedGetAny" (formula "43") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "44") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "44") (term "0,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "43") (term "0,0,0,0"))
      (rule "applyEq" (formula "44") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "42") (term "0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "43") (term "0,0,0,1,0") (ifseqformula "6"))
      (rule "applyEq" (formula "44") (term "0,0,0,1,0") (ifseqformula "7"))
      (rule "applyEq" (formula "43") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "42") (term "0,0") (ifseqformula "7"))
      (rule "applyEq" (formula "43") (term "0,1,0,0,1,0,0,0") (ifseqformula "19"))
      (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "42") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "42") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "42") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "42") (term "1,1,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "42") (term "0"))
      (rule "nnf_imp2or" (formula "43") (term "0"))
      (rule "nnf_notAnd" (formula "42") (term "0,0"))
      (rule "nnf_notAnd" (formula "43") (term "0,0"))
      (rule "nnf_notAnd" (formula "42") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "42") (term "0,1,0,0"))
      (rule "mul_literals" (formula "42") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "42") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "0,1,0,0"))
      (rule "mul_literals" (formula "42") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "42") (term "1,1,0,0"))
      (rule "mul_literals" (formula "42") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "42") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "1,1,0,0"))
      (rule "mul_literals" (formula "42") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "42") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "42") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "42") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "42") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "42") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "42") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "42") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "42") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "42") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "42") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "42") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "42") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "42") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "42") (term "0,0,0,0"))
      (rule "mul_literals" (formula "42") (term "1,0,0,0,0"))
      (rule "replace_known_left" (formula "46") (term "0,1") (ifseqformula "42"))
       (builtin "One Step Simplification" (formula "46"))
      (rule "nnf_notAnd" (formula "43") (term "1,0,0"))
      (rule "inEqSimp_notLeq" (formula "43") (term "0,1,0,0"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,1,0,0"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "0,1,0,0"))
      (rule "mul_literals" (formula "43") (term "1,0,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "43") (term "1,1,0,0"))
      (rule "mul_literals" (formula "43") (term "1,0,0,1,1,0,0"))
      (rule "add_literals" (formula "43") (term "0,0,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,1,0,0"))
      (rule "mul_literals" (formula "43") (term "1,1,1,0,0"))
      (rule "nnf_notAnd" (formula "43") (term "0,0,0"))
      (rule "inEqSimp_notLeq" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "43") (term "1,0,0,1,0,0,0"))
      (rule "mul_literals" (formula "43") (term "0,1,0,0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "43") (term "0,0,1,0,0,0"))
      (rule "add_literals" (formula "43") (term "0,0,0,1,0,0,0"))
      (rule "add_zero_left" (formula "43") (term "0,0,1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "43") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "43") (term "1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "43") (term "1,1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "43") (term "0,0,0,0"))
      (rule "times_zero_1" (formula "43") (term "1,0,0,0,0,0,0"))
      (rule "add_zero_right" (formula "43") (term "0,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "0,0,0,0"))
      (rule "mul_literals" (formula "43") (term "1,0,0,0,0"))
      (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "43"))
       (builtin "One Step Simplification" (formula "46"))
      (rule "nnf_ex2all" (formula "46"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "commute_or_2" (formula "43") (term "0,0"))
      (rule "commute_or_2" (formula "1") (term "0"))
      (rule "commute_or_2" (formula "44") (term "0,0"))
      (rule "commute_or" (formula "1") (term "0,0"))
      (rule "commute_or" (formula "43") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "44") (term "0,0,0"))
      (rule "commute_or_2" (formula "44") (term "0"))
      (rule "commute_or_2" (formula "44") (term "0,0"))
      (rule "commute_or_2" (formula "44") (term "0,0,0"))
      (rule "commute_or_2" (formula "44") (term "0,0"))
      (rule "shift_paren_or" (formula "43") (term "0,0,0"))
      (rule "commute_or_2" (formula "43") (term "0"))
      (rule "commute_or_2" (formula "43") (term "0,0"))
      (rule "commute_or_2" (formula "43") (term "0,0,0"))
      (rule "commute_or" (formula "44") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "44") (term "0,0,0"))
      (rule "inEqSimp_or_subsumption1" (formula "44") (term "0,0,0"))
      (rule "qeq_literals" (formula "44") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "22")))
      (rule "true_left" (formula "44"))
      (rule "commute_or" (formula "43") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "43") (term "0,0,0"))
      (rule "inEqSimp_or_subsumption1" (formula "43") (term "0,0,0"))
      (rule "qeq_literals" (formula "43") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "21")))
      (rule "true_left" (formula "43"))
       (builtin "Use Operation Contract" (formula "44") (newnames "heapBefore_add,result_806,exc_1065,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
      (branch "Post (add)"
          (builtin "One Step Simplification" (formula "44"))
          (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "47")) (ifInst ""  (formula "23")) (ifInst ""  (formula "47")) (ifInst ""  (formula "33")))
          (builtin "One Step Simplification" (formula "45"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "andLeft" (formula "44"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "46"))
         (rule "andLeft" (formula "46"))
         (rule "applyEq" (formula "46") (term "0,1") (ifseqformula "6"))
         (rule "applyEq" (formula "48") (term "5") (ifseqformula "45"))
         (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=java_util_Collection_seq_2"))
         (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "58")) (ifInst ""  (formula "26")))
         (rule "eqSymm" (formula "47"))
         (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "47"))
         (rule "hideAuxiliaryEq" (formula "47"))
         (rule "elementOfSingleton" (formula "46") (term "0,0"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "eqSymm" (formula "46"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "49"))
         (rule "true_left" (formula "49"))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "47"))
         (rule "true_left" (formula "47"))
         (rule "methodCallEmpty" (formula "49") (term "1"))
         (rule "tryEmpty" (formula "49") (term "1"))
         (rule "emptyModality" (formula "49") (term "1"))
          (builtin "One Step Simplification" (formula "49"))
         (rule "notRight" (formula "49"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "7") (term "0,0") (ifseqformula "3"))
         (rule "replaceKnownSelect_taclet002_2" (formula "7") (term "0"))
         (rule "replaceKnownAuxiliaryConstant_taclet002_3" (formula "7") (term "0"))
         (rule "applyEqReverse" (formula "60") (term "0,1,1,0,0,1") (ifseqformula "7"))
         (rule "applyEqReverse" (formula "5") (term "0,0") (ifseqformula "7"))
         (rule "applyEqReverse" (formula "60") (term "0,0,0") (ifseqformula "7"))
         (rule "applyEqReverse" (formula "60") (term "0,0,1,0,1") (ifseqformula "7"))
         (rule "hideAuxiliaryEq" (formula "7"))
         (rule "lenOfSeqConcat" (formula "59") (term "1,1,0,0,1"))
          (builtin "One Step Simplification" (formula "59"))
         (rule "polySimp_addComm0" (formula "59") (term "1,1,0,0,1"))
         (rule "lenOfSeqConcat" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "polySimp_addComm0" (formula "5") (term "0"))
         (rule "lenOfSeqConcat" (formula "59") (term "0,0"))
          (builtin "One Step Simplification" (formula "59"))
         (rule "polySimp_homoEq" (formula "59") (term "0"))
         (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
         (rule "polySimp_addComm0" (formula "59") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "59") (term "1,0,0"))
         (rule "mul_literals" (formula "59") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "59") (term "0,0"))
         (rule "polySimp_addComm0" (formula "59") (term "0,0,0"))
         (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "55") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "59") (term "0,0,1,0,1") (ifseqformula "48"))
         (rule "polySimp_sepNegMonomial" (formula "59") (term "0"))
         (rule "polySimp_mulLiterals" (formula "59") (term "0,0"))
         (rule "polySimp_elimOne" (formula "59") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5"))
         (rule "mul_literals" (formula "5") (term "1"))
         (rule "getOfSeqConcatEQ" (formula "59") (term "0,1,0,1") (ifseqformula "48"))
         (rule "polySimp_elimSub" (formula "59") (term "1,2,0,1,0,1"))
         (rule "polySimp_addComm0" (formula "59") (term "1,2,0,1,0,1"))
         (rule "getOfSeqSingleton" (formula "59") (term "2,0,1,0,1"))
         (rule "castDel" (formula "59") (term "2,2,0,1,0,1"))
         (rule "castDel" (formula "59") (term "1,2,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "59") (term "0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,0,0,1,0,1"))
         (rule "polySimp_sepPosMonomial" (formula "59") (term "0,2,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "59") (term "1,0,2,0,1,0,1"))
         (rule "polySimp_elimOne" (formula "59") (term "1,0,2,0,1,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "0,0,1,0,1"))
         (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,1,0,1"))
         (rule "polySimp_rightDist" (formula "59") (term "1,0,0,1,0,1"))
         (rule "mul_literals" (formula "59") (term "0,1,0,0,1,0,1"))
         (rule "polySimp_mulLiterals" (formula "59") (term "1,1,0,0,1,0,1"))
         (rule "polySimp_elimOne" (formula "59") (term "1,1,0,0,1,0,1"))
         (rule "seqGetAlphaCast" (formula "38") (term "0"))
         (rule "castedGetAny" (formula "38") (term "0"))
          (builtin "One Step Simplification" (formula "38"))
         (rule "true_left" (formula "38"))
         (rule "seqGetAlphaCast" (formula "39") (term "0"))
         (rule "castedGetAny" (formula "39") (term "0"))
          (builtin "One Step Simplification" (formula "39"))
         (rule "true_left" (formula "39"))
         (rule "seqGetAlphaCast" (formula "44") (term "0"))
         (rule "castedGetAny" (formula "44") (term "0"))
          (builtin "One Step Simplification" (formula "44"))
         (rule "true_left" (formula "44"))
         (rule "allLeft" (formula "4") (inst "t=i_0"))
         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_commuteGeq" (formula "4") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "19"))
         (rule "qeq_literals" (formula "4") (term "0,0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "4"))
         (rule "andLeft" (formula "21"))
         (rule "inEqSimp_homoInEq1" (formula "21"))
         (rule "polySimp_pullOutFactor1b" (formula "21") (term "0"))
         (rule "add_literals" (formula "21") (term "1,1,0"))
         (rule "times_zero_1" (formula "21") (term "1,0"))
         (rule "add_zero_right" (formula "21") (term "0"))
         (rule "leq_literals" (formula "21"))
         (rule "closeFalse" (formula "21"))
      )
      (branch "Exceptional Post (add)"
          (builtin "One Step Simplification" (formula "44"))
          (builtin "One Step Simplification" (formula "46"))
         (rule "andLeft" (formula "44"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "1,0") (ifseqformula "44"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "45"))
         (rule "andLeft" (formula "47"))
         (rule "notLeft" (formula "45"))
         (rule "close" (formula "48") (ifseqformula "47"))
      )
      (branch "Pre (add)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "43")) (ifInst ""  (formula "23")) (ifInst ""  (formula "43")) (ifInst ""  (formula "33")))
         (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "44"))
         (rule "closeTrue" (formula "44"))
      )
      (branch "Null reference (var_2 = null)"
          (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "50")))
         (rule "closeTrue" (formula "44"))
      )
   )
   (branch "Exceptional Post (get)"
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "32"))
      (rule "andLeft" (formula "34"))
      (rule "notLeft" (formula "32"))
      (rule "close" (formula "36") (ifseqformula "35"))
   )
   (branch "Pre (get)"
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "34")) (ifInst ""  (formula "22")) (ifInst ""  (formula "34")) (ifInst ""  (formula "26")))
      (rule "castedGetAny" (formula "31") (term "0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0"))
      (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "31") (term "0,0,1,0,0") (ifseqformula "6"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0"))
      (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0"))
      (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "31") (term "1") (inst "i=i") (inst "i_0=i_0"))
      (rule "expand_inInt" (formula "31") (term "1,0,0,1,1"))
      (rule "expand_inInt" (formula "31") (term "1,0,0,1,0,1"))
      (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1,1"))
      (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1,1"))
      (rule "replace_int_MIN" (formula "31") (term "0,1,1,0,0,1,0,1"))
      (rule "replace_int_MAX" (formula "31") (term "1,0,1,0,0,1,0,1"))
      (rule "eqSymm" (formula "31") (term "0,0,1"))
      (rule "castedGetAny" (formula "31") (term "0,0,1,0,1,0,1"))
      (rule "castedGetAny" (formula "31") (term "0,0,1,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_ltToLeq" (formula "31") (term "1,0,0,0,1,0,1"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,1,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,1,1"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "1,1,0,0,1,0,1"))
      (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0,1,0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "31") (term "0,0,1,0,0,1,0,0,0,1,1") (ifseqformula "7"))
      (rule "applyEq" (formula "31") (term "0,1,0,0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "31") (term "0,0,0,0,1") (ifseqformula "7"))
      (rule "replace_known_left" (formula "31") (term "0,0,1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "applyEq" (formula "31") (term "0,0,0,1,0,0,1") (ifseqformula "6"))
      (rule "applyEq" (formula "31") (term "0,0,0,1,0,1,1") (ifseqformula "7"))
      (rule "applyEq" (formula "31") (term "0,1,0,0,1,0,0,0,1,1") (ifseqformula "19"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulComm0" (formula "31") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "31") (term "1,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "0,1,1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,1,0,0,0,1,1"))
      (rule "nnf_imp2or" (formula "31") (term "0,0,1"))
      (rule "nnf_imp2or" (formula "31") (term "0,1,1"))
      (rule "nnf_notAnd" (formula "31") (term "0,0,0,1"))
      (rule "nnf_notAnd" (formula "31") (term "0,0,1,1"))
      (rule "nnf_notAnd" (formula "31") (term "1,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,0,1"))
      (rule "add_literals" (formula "31") (term "0,0,1,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "1,1,1,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,0,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "1,0,1,0,0,0,1"))
      (rule "nnf_notAnd" (formula "31") (term "0,0,0,0,1"))
      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,0,1"))
      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,0,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,0,1"))
      (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,0,1"))
      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,0,1"))
      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,0,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,0,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,0,0,0,1"))
      (rule "nnf_notAnd" (formula "31") (term "1,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "31") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,0,1,0,0,1,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "0,1,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "1,0,1,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "31") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,1,1,0,0,1,1"))
      (rule "add_literals" (formula "31") (term "0,0,1,1,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "1,1,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "1,1,1,0,0,1,1"))
      (rule "nnf_notAnd" (formula "31") (term "0,0,0,1,1"))
      (rule "inEqSimp_notLeq" (formula "31") (term "1,0,0,0,1,1"))
      (rule "polySimp_rightDist" (formula "31") (term "1,0,0,1,0,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "0,1,0,0,1,0,0,0,1,1"))
      (rule "polySimp_addAssoc" (formula "31") (term "0,0,1,0,0,0,1,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,1,0,0,0,1,1"))
      (rule "add_zero_left" (formula "31") (term "0,0,1,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "31") (term "1,0,0,0,1,1"))
      (rule "polySimp_mulLiterals" (formula "31") (term "1,1,0,0,0,1,1"))
      (rule "polySimp_elimOne" (formula "31") (term "1,1,0,0,0,1,1"))
      (rule "inEqSimp_notGeq" (formula "31") (term "0,0,0,0,1,1"))
      (rule "times_zero_1" (formula "31") (term "1,0,0,0,0,0,0,1,1"))
      (rule "add_literals" (formula "31") (term "0,0,0,0,0,0,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "31") (term "0,0,0,0,1,1"))
      (rule "mul_literals" (formula "31") (term "1,0,0,0,0,1,1"))
      (rule "andRight" (formula "32"))
      (branch
         (rule "nnf_ex2all" (formula "32"))
         (rule "nnf_notAnd" (formula "1") (term "0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
         (rule "mul_literals" (formula "1") (term "1,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0"))
         (rule "commute_or" (formula "1") (term "0,0"))
         (rule "andRight" (formula "32"))
         (branch
            (rule "nnf_ex2all" (formula "32"))
            (rule "nnf_notAnd" (formula "1") (term "0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
            (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
            (rule "mul_literals" (formula "1") (term "1,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0"))
            (rule "commute_or" (formula "1") (term "0,0"))
            (rule "allLeft" (formula "2") (inst "t=i_0"))
            (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_commuteGeq" (formula "2") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "2") (term "1") (ifseqformula "20"))
            (rule "inEqSimp_homoInEq1" (formula "2") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0,1"))
            (rule "add_literals" (formula "2") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "2") (term "1,0,0,1"))
            (rule "add_literals" (formula "2") (term "0,0,1"))
            (rule "leq_literals" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "18"))
            (rule "qeq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
         (branch
            (rule "andRight" (formula "32"))
            (branch
               (rule "allRight" (formula "32") (inst "sk=i_0_0"))
               (rule "orRight" (formula "32"))
               (rule "notRight" (formula "33"))
               (rule "orRight" (formula "33"))
               (rule "orRight" (formula "33"))
               (rule "orRight" (formula "35"))
               (rule "inEqSimp_geqRight" (formula "34"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "34"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "36"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "36"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "allLeft" (formula "5") (inst "t=i_0"))
               (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "23"))
               (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "5") (term "0,0,1"))
               (rule "leq_literals" (formula "5") (term "0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "5"))
               (rule "qeq_literals" (formula "21") (term "0"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "closeFalse" (formula "21"))
            )
            (branch
               (rule "allRight" (formula "32") (inst "sk=i_2"))
               (rule "orRight" (formula "32"))
               (rule "notRight" (formula "33"))
               (rule "orRight" (formula "33"))
               (rule "orRight" (formula "33"))
               (rule "orRight" (formula "35"))
               (rule "inEqSimp_geqRight" (formula "34"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "34"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_leqRight" (formula "36"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_geqRight" (formula "36"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "2"))
               (rule "mul_literals" (formula "2") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
               (rule "leq_literals" (formula "2") (term "0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "allLeft" (formula "5") (inst "t=i_0"))
               (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_commuteGeq" (formula "5") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "5") (term "1") (ifseqformula "23"))
               (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
               (rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,1"))
               (rule "add_literals" (formula "5") (term "1,1,0,0,1"))
               (rule "times_zero_1" (formula "5") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "5") (term "0,0,1"))
               (rule "leq_literals" (formula "5") (term "0,1"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "21"))
               (rule "qeq_literals" (formula "5") (term "0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
         )
      )
      (branch
         (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "32"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "false_right" (formula "31"))
         (rule "andRight" (formula "31"))
         (branch
            (rule "allRight" (formula "31") (inst "sk=i_0_0"))
            (rule "orRight" (formula "31"))
            (rule "notRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "34"))
            (rule "inEqSimp_leqRight" (formula "32"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "24") (inst "t=i_0_0"))
            (rule "replace_known_left" (formula "24") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_commuteGeq" (formula "24") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "24") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "24") (term "0,0"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "2"))
            (rule "andLeft" (formula "24"))
            (rule "inEqSimp_homoInEq1" (formula "24"))
            (rule "polySimp_pullOutFactor1b" (formula "24") (term "0"))
            (rule "add_literals" (formula "24") (term "1,1,0"))
            (rule "times_zero_1" (formula "24") (term "1,0"))
            (rule "add_literals" (formula "24") (term "0"))
            (rule "leq_literals" (formula "24"))
            (rule "closeFalse" (formula "24"))
         )
         (branch
            (rule "allRight" (formula "31") (inst "sk=i_2"))
            (rule "orRight" (formula "31"))
            (rule "notRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "34"))
            (rule "inEqSimp_leqRight" (formula "32"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_leqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_geqRight" (formula "35"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "2"))
            (rule "mul_literals" (formula "2") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "4"))
            (rule "leq_literals" (formula "2") (term "0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "25") (inst "t=i_2"))
            (rule "replace_known_left" (formula "25") (term "0,0,0,0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "25") (term "1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "25") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_contradInEq1" (formula "25") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "25") (term "0,0"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "25"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_homoInEq1" (formula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,1,0"))
            (rule "times_zero_1" (formula "2") (term "1,0"))
            (rule "add_literals" (formula "2") (term "0"))
            (rule "leq_literals" (formula "2"))
            (rule "closeFalse" (formula "2"))
         )
      )
   )
   (branch "Null reference (_r_17_B = null)"
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "33")))
      (rule "closeTrue" (formula "31"))
   )
)
(branch "Null reference (_r_17_A = null)"
    (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "35")))
   (rule "closeTrue" (formula "32"))
)
)
}
