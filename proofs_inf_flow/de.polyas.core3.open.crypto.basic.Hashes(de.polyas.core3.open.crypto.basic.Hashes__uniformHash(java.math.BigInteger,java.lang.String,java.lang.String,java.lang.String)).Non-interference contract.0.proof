\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 14:59:21 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 14:59:21 CET 2020
contract=de.polyas.core3.open.crypto.basic.Hashes[de.polyas.core3.open.crypto.basic.Hashes\\:\\:uniformHash(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String)].Non-interference contract.0
name=de.polyas.core3.open.crypto.basic.Hashes[de.polyas.core3.open.crypto.basic.Hashes\\:\\:uniformHash(java.math.BigInteger,java.lang.String,java.lang.String,java.lang.String)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "7325")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "21"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "4"))
(rule "eqSymm" (formula "25"))
(rule "eqSymm" (formula "2"))
(rule "eqSymm" (formula "1"))
(rule "eqSymm" (formula "22") (term "1,0,0,1"))
(rule "eqSymm" (formula "22") (term "0,0,0,1"))
(rule "eqSymm" (formula "12") (term "1,0,0,1"))
(rule "eqSymm" (formula "12") (term "0,0,0,1"))
(rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
 (builtin "One Step Simplification" (formula "14"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "23"))
 (builtin "One Step Simplification" (formula "4"))
(rule "inEqSimp_ltToLeq" (formula "20"))
(rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "20") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "10"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "10") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "19"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "assignment" (formula "22") (term "1"))
 (builtin "One Step Simplification" (formula "22"))
(rule "assignment" (formula "12") (term "1"))
 (builtin "One Step Simplification" (formula "12"))
(rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
(rule "applyEqRigid" (formula "19") (term "1,0,0") (ifseqformula "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "10"))
(rule "polySimp_mulLiterals" (formula "10") (term "0"))
(rule "polySimp_elimOne" (formula "10") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "19"))
(rule "polySimp_mulLiterals" (formula "19") (term "0"))
(rule "polySimp_elimOne" (formula "19") (term "0"))
(rule "eqSeqDef" (formula "2") (inst "iv=iv"))
(rule "andLeft" (formula "2"))
(rule "getOfSeqDef" (formula "3") (term "0,1,0"))
(rule "castDel" (formula "3") (term "2,0,1,0"))
(rule "castDel" (formula "3") (term "1,0,1,0"))
(rule "add_zero_right" (formula "3") (term "0,2,1,1,0,1,0"))
(rule "polySimp_elimSub" (formula "3") (term "1,1,0,0,1,0"))
(rule "times_zero_2" (formula "3") (term "1,1,1,0,0,1,0"))
(rule "add_zero_right" (formula "3") (term "1,1,0,0,1,0"))
(rule "getOfSeqDef" (formula "3") (term "1,1,0"))
(rule "castDel" (formula "3") (term "2,1,1,0"))
(rule "castDel" (formula "3") (term "1,1,1,0"))
(rule "add_zero_right" (formula "3") (term "0,2,1,1,1,1,0"))
(rule "polySimp_elimSub" (formula "3") (term "1,1,0,1,1,0"))
(rule "times_zero_2" (formula "3") (term "1,1,1,0,1,1,0"))
(rule "add_zero_right" (formula "3") (term "1,1,0,1,1,0"))
(rule "lenOfSeqDef" (formula "2") (term "0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_elimSub" (formula "2") (term "1,1"))
(rule "times_zero_2" (formula "2") (term "1,1,1"))
(rule "add_zero_right" (formula "2") (term "1,1"))
(rule "lenOfSeqDef" (formula "3") (term "1,1,0,0"))
(rule "polySimp_elimSub" (formula "3") (term "1,1,1,0,0"))
(rule "times_zero_2" (formula "3") (term "1,1,1,1,0,0"))
(rule "add_zero_right" (formula "3") (term "1,1,1,0,0"))
(rule "lenOfSeqDef" (formula "2") (term "0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_elimSub" (formula "2") (term "1,1"))
(rule "times_zero_2" (formula "2") (term "1,1,1"))
(rule "add_zero_right" (formula "2") (term "1,1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
(rule "eqSymm" (formula "3") (term "1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0,1,1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,1,0"))
(rule "eqSymm" (formula "3") (term "1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,1,0"))
(rule "applyEqRigid" (formula "3") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
(rule "eqSymm" (formula "3") (term "1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
(rule "applyEqRigid" (formula "3") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,1,0"))
(rule "eqSymm" (formula "3") (term "1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,1,1,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,1,1,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,1,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
(rule "eqSymm" (formula "2"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1"))
(rule "applyEq" (formula "3") (term "0,1,0,0,1,0,0") (ifseqformula "2"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0"))
(rule "pullOutSelect" (formula "25") (term "1") (inst "selectSK=java_math_BigInteger_value_0"))
(rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_math_BigInteger_value_1"))
(rule "boxToDiamond" (formula "24") (term "1"))
 (builtin "One Step Simplification" (formula "24"))
(rule "notLeft" (formula "24"))
(rule "boxToDiamond" (formula "15") (term "1"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "nnf_imp2or" (formula "5") (term "0"))
(rule "nnf_notAnd" (formula "5") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "20"))
(rule "andLeft" (formula "20"))
(rule "notLeft" (formula "20"))
(rule "Static_class_invariant_axiom_for_java_math_BigInteger" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "22"))
(rule "nonNull" (formula "22") (inst "i=i"))
(rule "sub_literals" (formula "22") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "22"))
(rule "greater_literals" (formula "22") (term "0,1"))
 (builtin "One Step Simplification" (formula "22"))
(rule "andLeft" (formula "22"))
(rule "notLeft" (formula "22"))
(rule "narrowSelectArrayType" (formula "22") (term "0,0,1,0") (ifseqformula "15") (ifseqformula "23"))
(rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "22") (term "1,1,0,0"))
(rule "mul_literals" (formula "22") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "22") (term "0"))
(rule "nnf_notAnd" (formula "22") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "22") (term "0,0,0"))
(rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "22") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
(rule "mul_literals" (formula "22") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "22") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0"))
(rule "add_literals" (formula "22") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "22") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "22") (term "1,1,0,0"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_crypto_basic_Hashes" (formula "14"))
(rule "nonNull" (formula "14") (inst "i=i"))
(rule "greater_literals" (formula "14") (term "0,1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "sub_literals" (formula "14") (term "2,1,0,1"))
 (builtin "One Step Simplification" (formula "14"))
(rule "andLeft" (formula "14"))
(rule "notLeft" (formula "14"))
(rule "narrowSelectArrayType" (formula "14") (term "0,0,1,0") (ifseqformula "6") (ifseqformula "23"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0"))
(rule "nnf_imp2or" (formula "14") (term "0"))
(rule "nnf_notAnd" (formula "14") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "14") (term "0,0,0"))
(rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "14") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
(rule "mul_literals" (formula "14") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "14") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or_2" (formula "22") (term "0"))
(rule "commute_or_2" (formula "14") (term "0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or" (formula "22") (term "0,0"))
(rule "commute_or" (formula "14") (term "0,0"))
(rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_uniformHash,savedHeapBefore_uniformHash"))
 (builtin "One Step Simplification" (formula "28"))
(rule "methodBodyExpand" (formula "27") (term "1") (newnames "heapBefore_uniformHash_0,savedHeapBefore_uniformHash_0"))
 (builtin "One Step Simplification" (formula "27"))
(rule "returnUnfold" (formula "28") (term "1") (inst "#v0=b"))
(rule "variableDeclarationAssign" (formula "28") (term "1"))
(rule "variableDeclaration" (formula "28") (term "1") (newnames "b_7"))
(rule "eval_order_array_access4" (formula "28") (term "1") (inst "#v0=b_arr"))
(rule "variableDeclarationAssign" (formula "28") (term "1"))
(rule "variableDeclaration" (formula "28") (term "1") (newnames "b_arr"))
(rule "activeUseStaticFieldReadAccess" (formula "28") (term "1"))
(rule "assignment_read_static_attribute" (formula "28") (term "1"))
 (builtin "One Step Simplification" (formula "28"))
(rule "eval_order_array_access5" (formula "28") (term "1") (inst "#v1=x") (inst "#ar1=b_arr_1"))
(rule "variableDeclarationAssign" (formula "28") (term "1"))
(rule "variableDeclaration" (formula "28") (term "1") (newnames "b_arr_1"))
(rule "assignment" (formula "28") (term "1"))
 (builtin "One Step Simplification" (formula "28"))
(rule "variableDeclarationAssign" (formula "28") (term "1"))
(rule "variableDeclaration" (formula "28") (term "1") (newnames "x"))
(rule "returnUnfold" (formula "27") (term "1") (inst "#v0=b"))
(rule "variableDeclarationAssign" (formula "27") (term "1"))
(rule "variableDeclaration" (formula "27") (term "1") (newnames "b_8"))
(rule "eval_order_array_access4" (formula "27") (term "1") (inst "#v0=b_arr"))
(rule "variableDeclarationAssign" (formula "27") (term "1"))
(rule "variableDeclaration" (formula "27") (term "1") (newnames "b_arr_2"))
(rule "activeUseStaticFieldReadAccess" (formula "27") (term "1"))
(rule "assignment_read_static_attribute" (formula "27") (term "1"))
 (builtin "One Step Simplification" (formula "27"))
(rule "eval_order_array_access5" (formula "27") (term "1") (inst "#v1=x") (inst "#ar1=b_arr_3"))
(rule "variableDeclarationAssign" (formula "27") (term "1"))
(rule "variableDeclaration" (formula "27") (term "1") (newnames "b_arr_3"))
(rule "assignment" (formula "27") (term "1"))
 (builtin "One Step Simplification" (formula "27"))
(rule "variableDeclarationAssign" (formula "27") (term "1"))
(rule "variableDeclaration" (formula "27") (term "1") (newnames "x_1"))
(rule "ifthenelse_to_or_left" (formula "5") (term "0,0,0"))
(rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0"))
(rule "nnf_notAnd" (formula "5") (term "0,1,1,0,0,0"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,1,1,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,1,1,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "1,0,0,1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,1,1,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,1,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,1,1,0,0,0"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,1,1,0,0,0"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,1,1,0,0,0"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or" (formula "5") (term "1,1,0"))
(rule "commute_or_2" (formula "5") (term "0,1,0"))
(rule "commute_or_2" (formula "5") (term "0,1,1,0"))
(rule "commute_or" (formula "5") (term "0,0,1,0"))
(rule "arrayLengthNotNegative" (formula "13") (term "0"))
(rule "arrayLengthIsAnInt" (formula "14") (term "0"))
(rule "expand_inInt" (formula "14"))
(rule "replace_int_MAX" (formula "14") (term "1,0"))
(rule "replace_int_MIN" (formula "14") (term "0,1"))
(rule "andLeft" (formula "14"))
(rule "inEqSimp_commuteLeq" (formula "15"))
(rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "13"))
(rule "leq_literals" (formula "15") (term "0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "true_left" (formula "15"))
(rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "14"))
(rule "polySimp_rightDist" (formula "15") (term "0,0"))
(rule "mul_literals" (formula "15") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "15") (term "0"))
(rule "add_literals" (formula "15") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "15"))
(rule "polySimp_mulLiterals" (formula "15") (term "0"))
(rule "polySimp_elimOne" (formula "15") (term "0"))
(rule "arrayLengthNotNegative" (formula "24") (term "0"))
(rule "arrayLengthIsAnInt" (formula "25") (term "0"))
(rule "expand_inInt" (formula "25"))
(rule "replace_int_MIN" (formula "25") (term "0,1"))
(rule "replace_int_MAX" (formula "25") (term "1,0"))
(rule "andLeft" (formula "25"))
(rule "inEqSimp_commuteLeq" (formula "26"))
(rule "inEqSimp_subsumption1" (formula "26") (ifseqformula "24"))
(rule "leq_literals" (formula "26") (term "0"))
 (builtin "One Step Simplification" (formula "26"))
(rule "true_left" (formula "26"))
(rule "inEqSimp_exactShadow3" (formula "26") (ifseqformula "25"))
(rule "polySimp_rightDist" (formula "26") (term "0,0"))
(rule "mul_literals" (formula "26") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "26") (term "0"))
(rule "add_literals" (formula "26") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "26"))
(rule "polySimp_mulLiterals" (formula "26") (term "0"))
(rule "polySimp_elimOne" (formula "26") (term "0"))
(rule "postincrement_assignment" (formula "33") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "33") (term "1"))
(rule "variableDeclaration" (formula "33") (term "1") (newnames "x_2"))
(rule "activeUseStaticFieldReadAccess" (formula "33") (term "1"))
(rule "assignment_read_static_attribute" (formula "33") (term "1"))
 (builtin "One Step Simplification" (formula "33"))
(rule "activeUseStaticFieldWriteAccess" (formula "33") (term "1") (inst "#v0=x_3"))
(rule "variableDeclarationAssign" (formula "33") (term "1"))
(rule "variableDeclaration" (formula "33") (term "1") (newnames "x_3"))
(rule "applyEqRigid" (formula "33") (term "0,1,0") (ifseqformula "3"))
(rule "commute_or" (formula "5") (term "0,0,1,1,0"))
(rule "postincrement_assignment" (formula "32") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "32") (term "1"))
(rule "variableDeclaration" (formula "32") (term "1") (newnames "x_4"))
(rule "activeUseStaticFieldReadAccess" (formula "32") (term "1"))
(rule "assignment_read_static_attribute" (formula "32") (term "1"))
 (builtin "One Step Simplification" (formula "32"))
(rule "activeUseStaticFieldWriteAccess" (formula "32") (term "1") (inst "#v0=x_5"))
(rule "variableDeclarationAssign" (formula "32") (term "1"))
(rule "variableDeclaration" (formula "32") (term "1") (newnames "x_5"))
(rule "cnf_rightDist" (formula "5") (term "1,1,0"))
(rule "commute_or" (formula "5") (term "1,1,1,0"))
(rule "cnf_rightDist" (formula "5") (term "0"))
(rule "distr_forallAnd" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "commute_or" (formula "6") (term "0"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or_2" (formula "6") (term "0,1,0"))
(rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0,1,0"))
(rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
(rule "qeq_literals" (formula "6") (term "1,0,0,1,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "commute_or_2" (formula "6") (term "0"))
(rule "shift_paren_or" (formula "5") (term "0,0"))
(rule "shift_paren_or" (formula "6") (term "0,0"))
(rule "shift_paren_or" (formula "5") (term "0,0,0"))
(rule "shift_paren_or" (formula "6") (term "0,0,0"))
(rule "commute_or" (formula "5") (term "0,0,0,0"))
 (builtin "One Step Simplification" (formula "5"))
(rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
(rule "commute_or" (formula "6") (term "0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "6"))
(rule "compound_int_cast_expression" (formula "34") (term "1") (inst "#v=x_4"))
(rule "variableDeclarationAssign" (formula "34") (term "1"))
(rule "variableDeclaration" (formula "34") (term "1") (newnames "x_6"))
(rule "compound_int_cast_expression" (formula "33") (term "1") (inst "#v=x_6"))
(rule "variableDeclarationAssign" (formula "33") (term "1"))
(rule "variableDeclaration" (formula "33") (term "1") (newnames "x_7"))
(rule "remove_parentheses_right" (formula "34") (term "1"))
(rule "remove_parentheses_right" (formula "33") (term "1"))
(rule "compound_addition_1" (formula "34") (term "1") (inst "#v=x_7"))
(rule "variableDeclarationAssign" (formula "34") (term "1"))
(rule "variableDeclaration" (formula "34") (term "1") (newnames "x_8"))
(rule "activeUseStaticFieldReadAccess" (formula "34") (term "1"))
(rule "assignment_read_static_attribute" (formula "34") (term "1"))
 (builtin "One Step Simplification" (formula "34"))
(rule "applyEq" (formula "34") (term "0,1,0") (ifseqformula "3"))
(rule "compound_addition_1" (formula "33") (term "1") (inst "#v=x_8"))
(rule "variableDeclarationAssign" (formula "33") (term "1"))
(rule "variableDeclaration" (formula "33") (term "1") (newnames "x_9"))
(rule "activeUseStaticFieldReadAccess" (formula "33") (term "1"))
(rule "assignment_read_static_attribute" (formula "33") (term "1"))
 (builtin "One Step Simplification" (formula "33"))
(rule "assignmentAdditionInt" (formula "34") (term "1"))
 (builtin "One Step Simplification" (formula "34"))
(rule "translateJavaAddInt" (formula "34") (term "0,1,0"))
(rule "expand_addJint" (formula "34") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "34") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "34") (term "0,1,0"))
(rule "replace_int_MIN" (formula "34") (term "0,0,1,0"))
(rule "replace_int_RANGE" (formula "34") (term "1,1,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "34") (term "0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "34") (term "0,1,0,1,0"))
(rule "add_literals" (formula "34") (term "0,0,1,0,1,0"))
(rule "polyMod_pullOut" (formula "34") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "34") (term "1,0,1,0,1,0"))
(rule "mul_literals" (formula "34") (term "1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "34") (term "0,1,0,1,0"))
(rule "add_literals" (formula "34") (term "0,0,1,0,1,0"))
(rule "assignmentAdditionInt" (formula "33") (term "1"))
 (builtin "One Step Simplification" (formula "33"))
(rule "translateJavaAddInt" (formula "33") (term "0,1,0"))
(rule "expand_addJint" (formula "33") (term "0,1,0"))
(rule "polySimp_addComm0" (formula "33") (term "0,0,1,0"))
(rule "expand_moduloInteger" (formula "33") (term "0,1,0"))
(rule "replace_int_RANGE" (formula "33") (term "1,1,0,1,0"))
(rule "replace_int_MIN" (formula "33") (term "0,0,1,0"))
(rule "replace_int_HALFRANGE" (formula "33") (term "0,0,1,0,1,0"))
(rule "polySimp_addAssoc" (formula "33") (term "0,1,0,1,0"))
(rule "add_literals" (formula "33") (term "0,0,1,0,1,0"))
(rule "polyMod_pullOut" (formula "33") (term "1,0,1,0") (inst "polyDivCoeff=Z(1(#))"))
(rule "polySimp_mulLiterals" (formula "33") (term "1,0,1,0,1,0"))
(rule "mul_literals" (formula "33") (term "1,0,1,0,1,0"))
(rule "polySimp_addComm1" (formula "33") (term "0,1,0,1,0"))
(rule "add_literals" (formula "33") (term "0,0,1,0,1,0"))
(rule "widening_identity_cast_5" (formula "34") (term "1"))
(rule "assignment" (formula "34") (term "1"))
 (builtin "One Step Simplification" (formula "34"))
(rule "assignment_write_static_attribute" (formula "34") (term "1"))
 (builtin "One Step Simplification" (formula "34"))
(rule "assignment" (formula "34") (term "1"))
 (builtin "One Step Simplification" (formula "34"))
(rule "assignment_array2" (formula "34") (term "1"))
(branch "Normal Execution (b_arr_1 != null)"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "30")))
   (rule "orRight" (formula "34"))
   (rule "dismissNonSelectedField" (formula "36") (term "0,1,0"))
   (rule "inEqSimp_ltRight" (formula "35"))
   (rule "times_zero_1" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_leqRight" (formula "34"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "ifthenelse_to_or_left" (formula "5") (term "0,0,0,0"))
   (rule "eqSymm" (formula "5") (term "1,1,0,0,0,0"))
   (rule "eqSymm" (formula "5") (term "1,0,0,0,0,0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0,0,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0"))
   (rule "commute_or" (formula "5") (term "0,0,0"))
   (rule "commute_or_2" (formula "5") (term "0,0"))
   (rule "commute_or_2" (formula "5") (term "0"))
   (rule "commute_or" (formula "5") (term "1,1,0"))
   (rule "widening_identity_cast_5" (formula "33") (term "1"))
   (rule "assignment" (formula "33") (term "1"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "assignment_write_static_attribute" (formula "33") (term "1"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "assignment" (formula "33") (term "1"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "assignment_array2" (formula "33") (term "1"))
   (branch "Normal Execution (b_arr_3 != null)"
       (builtin "One Step Simplification" (formula "34"))
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "29")))
      (rule "orRight" (formula "33"))
      (rule "dismissNonSelectedField" (formula "35") (term "0,1,0"))
      (rule "inEqSimp_ltRight" (formula "34"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "33"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "cnf_rightDist" (formula "5") (term "1,1,0"))
      (rule "cnf_rightDist" (formula "5") (term "0"))
      (rule "distr_forallAnd" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "6") (term "0"))
      (rule "shift_paren_or" (formula "5") (term "0"))
      (rule "commute_or_2" (formula "5") (term "0,0"))
      (rule "commute_or" (formula "6") (term "1,1,0"))
      (rule "commute_or_2" (formula "5") (term "0,0,0"))
      (rule "cnf_rightDist" (formula "6") (term "0"))
      (rule "distr_forallAnd" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or_2" (formula "6") (term "0"))
      (rule "shift_paren_or" (formula "7") (term "0"))
      (rule "commute_or_2" (formula "6") (term "0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0"))
      (rule "methodCallReturn" (formula "36") (term "1"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "shift_paren_or" (formula "6") (term "0,0,0"))
      (rule "commute_or" (formula "6") (term "0,0,0,0"))
      (rule "inEqSimp_or_tautInEq1" (formula "6") (term "0,0,0"))
      (rule "add_zero_right" (formula "6") (term "1,1,0,0,0"))
      (rule "qeq_literals" (formula "6") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "methodCallReturn" (formula "34") (term "1"))
      (rule "assignment" (formula "34") (term "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0,0") (ifseqformula "8"))
      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0,0") (ifseqformula "21"))
      (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "methodCallEmpty" (formula "37") (term "1"))
      (rule "methodCallEmpty" (formula "36") (term "1"))
      (rule "tryEmpty" (formula "37") (term "1"))
      (rule "tryEmpty" (formula "36") (term "1"))
      (rule "emptyModality" (formula "37") (term "1"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "notRight" (formula "37"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "3"))
      (rule "simplifySelectOfStoreEQ" (formula "4") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "4"))
      (rule "hideAuxiliaryEq" (formula "4"))
      (rule "eqSymm" (formula "2"))
      (rule "mod_axiom" (formula "3") (term "1,3,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,3,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "3,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,3,0"))
      (rule "add_literals" (formula "3") (term "0,0,3,0"))
      (rule "emptyModality" (formula "38") (term "1"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "notRight" (formula "38"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "3"))
      (rule "simplifySelectOfStoreEQ" (formula "7") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "applyEqReverse" (formula "43") (term "1") (ifseqformula "7"))
      (rule "hideAuxiliaryEq" (formula "7"))
      (rule "eqSymm" (formula "2"))
      (rule "mod_axiom" (formula "3") (term "1,3,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1,3,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "3,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0,3,0"))
      (rule "add_literals" (formula "3") (term "0,0,3,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,0") (ifseqformula "25"))
      (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "40"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "cut_direct" (formula "11") (term "0,1,1,0"))
      (branch "CUT: de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_A«anonHeapFunction».length ≥ 1 TRUE"
          (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_left" (formula "9") (term "0,1,1,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_left" (formula "8") (term "0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "replace_known_left" (formula "10") (term "0,1,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_subsumption1" (formula "20") (ifseqformula "11"))
         (rule "leq_literals" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "commute_or_2" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "commute_or_2" (formula "10") (term "0"))
         (rule "inEqSimp_or_tautInEq1" (formula "10") (term "0,0"))
         (rule "inEqSimp_homoInEq1" (formula "10") (term "1,0,0"))
         (rule "polySimp_pullOutFactor1" (formula "10") (term "0,1,0,0"))
         (rule "add_literals" (formula "10") (term "1,0,1,0,0"))
         (rule "times_zero_1" (formula "10") (term "0,1,0,0"))
         (rule "leq_literals" (formula "10") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "commute_or_2" (formula "9") (term "0,0"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0") (ifseqformula "12"))
         (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "div_axiom" (formula "6") (term "0,1,3,0") (inst "quotient=quotient_0"))
         (rule "qeq_literals" (formula "6") (term "0,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "equal_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "mul_literals" (formula "6") (term "1,1,1"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "polySimp_addAssoc" (formula "8") (term "0,1"))
         (rule "add_literals" (formula "8") (term "0,0,1"))
         (rule "polySimp_addComm1" (formula "8") (term "1"))
         (rule "add_literals" (formula "8") (term "0,1"))
         (rule "inEqSimp_homoInEq0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "inEqSimp_homoInEq1" (formula "8"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,0"))
         (rule "polySimp_addComm1" (formula "8") (term "0"))
         (rule "applyEqRigid" (formula "9") (term "0,1,3,0") (ifseqformula "6"))
         (rule "polySimp_addComm1" (formula "9") (term "3,0"))
         (rule "applyEq" (formula "3") (term "0,1,3,0") (ifseqformula "6"))
         (rule "polySimp_addComm1" (formula "3") (term "3,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7"))
         (rule "polySimp_mulComm0" (formula "7") (term "1"))
         (rule "polySimp_rightDist" (formula "7") (term "1"))
         (rule "mul_literals" (formula "7") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8"))
         (rule "polySimp_mulComm0" (formula "8") (term "1"))
         (rule "polySimp_rightDist" (formula "8") (term "1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1"))
         (rule "inEqSimp_exactShadow3" (formula "7") (ifseqformula "24"))
         (rule "polySimp_rightDist" (formula "7") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
         (rule "mul_literals" (formula "7") (term "0,0,0"))
         (rule "polySimp_addComm1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "0,0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "elimGcdLeq_antec" (formula "7") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,1,0"))
         (rule "neg_literal" (formula "7") (term "0,0,0,0,0,1,0"))
         (rule "leq_literals" (formula "7") (term "0,0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0"))
         (rule "polySimp_addLiterals" (formula "7") (term "0,0,0,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "qeq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_exactShadow3" (formula "23") (ifseqformula "9"))
         (rule "times_zero_1" (formula "23") (term "0,0"))
         (rule "add_zero_left" (formula "23") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23"))
         (rule "mul_literals" (formula "23") (term "1"))
         (rule "elimGcdGeq_antec" (formula "23") (inst "elimGcdRightDiv=Z(neglit(1(#)))") (inst "elimGcdLeftDiv=quotient_0") (inst "elimGcd=Z(6(9(2(7(6(9(4(9(2(4(#)))))))))))"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,0,1,0"))
         (rule "leq_literals" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0,0"))
         (rule "polySimp_addLiterals" (formula "23") (term "0,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,0"))
         (rule "polySimp_pullOutFactor0b" (formula "23") (term "0,0"))
         (rule "add_literals" (formula "23") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0"))
         (rule "leq_literals" (formula "23") (term "0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "7"))
         (rule "applyEqRigid" (formula "8") (term "0,1,1") (ifseqformula "23"))
         (rule "mul_literals" (formula "8") (term "1,1"))
         (rule "add_literals" (formula "8") (term "1"))
         (rule "applyEq" (formula "9") (term "0,1,1") (ifseqformula "23"))
         (rule "mul_literals" (formula "9") (term "1,1"))
         (rule "add_literals" (formula "9") (term "1"))
         (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "22"))
         (rule "qeq_literals" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "22"))
         (rule "leq_literals" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "applyEqRigid" (formula "3") (term "0,1,0,3,0") (ifseqformula "21"))
         (rule "mul_literals" (formula "3") (term "1,0,3,0"))
         (rule "add_literals" (formula "3") (term "0,3,0"))
         (rule "applyEqRigid" (formula "8") (term "0,1,0,3,0") (ifseqformula "21"))
         (rule "mul_literals" (formula "8") (term "1,0,3,0"))
         (rule "add_literals" (formula "8") (term "0,3,0"))
         (rule "applyEq" (formula "6") (term "1") (ifseqformula "21"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "22"))
         (rule "leq_literals" (formula "7") (term "0"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "cut_direct" (formula "31") (term "0"))
         (branch "CUT: s3_9_B = null TRUE"
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "cut_direct" (formula "30") (term "0"))
            (branch "CUT: s2_17_B = null TRUE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "cut_direct" (formula "29") (term "0"))
               (branch "CUT: s1_17_B = null TRUE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "43"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "times_zero_2" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "times_zero_2" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: s1_17_B = null FALSE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "mul_literals" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
            )
            (branch "CUT: s2_17_B = null FALSE"
                (builtin "One Step Simplification" (formula "30"))
               (rule "cut_direct" (formula "29") (term "0"))
               (branch "CUT: s1_17_B = null TRUE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "mul_literals" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: s1_17_B = null FALSE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
            )
         )
         (branch "CUT: s3_9_B = null FALSE"
             (builtin "One Step Simplification" (formula "31"))
            (rule "cut_direct" (formula "30") (term "0"))
            (branch "CUT: s2_17_B = null TRUE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "cut_direct" (formula "29") (term "0"))
               (branch "CUT: s1_17_B = null TRUE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "times_zero_2" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: s1_17_B = null FALSE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "45"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "times_zero_2" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
            )
            (branch "CUT: s2_17_B = null FALSE"
                (builtin "One Step Simplification" (formula "30"))
               (rule "cut_direct" (formula "29") (term "0"))
               (branch "CUT: s1_17_B = null TRUE"
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "26") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "46"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_literals" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEq" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "times_zero_2" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: s1_17_B = null FALSE"
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "cut_direct" (formula "15") (term "0"))
                  (branch "CUT: s1_17_A = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption0" (formula "23") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23") (term "0"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "38") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "25") (ifseqformula "10"))
                              (rule "andLeft" (formula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0"))
                              (rule "add_literals" (formula "25") (term "1,1,0"))
                              (rule "times_zero_1" (formula "25") (term "1,0"))
                              (rule "add_literals" (formula "25") (term "0"))
                              (rule "leq_literals" (formula "25"))
                              (rule "closeFalse" (formula "25"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "37") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
                  (branch "CUT: s1_17_A = null FALSE"
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "cut_direct" (formula "16") (term "0"))
                     (branch "CUT: s2_17_A = null TRUE"
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "true_left" (formula "17"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "9"))
                              (rule "applyEq" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "0") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0,0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "25"))
                              (rule "andLeft" (formula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "10"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                              (rule "add_literals" (formula "10") (term "1,1,0"))
                              (rule "times_zero_1" (formula "10") (term "1,0"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "leq_literals" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "39") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "49"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                     (branch "CUT: s2_17_A = null FALSE"
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "cut_direct" (formula "17") (term "0"))
                        (branch "CUT: s3_9_A = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "true_left" (formula "18"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "13") (term "1,1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "applyEqRigid" (formula "38") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "36") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "48"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEqRigid" (formula "26") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "26"))
                              (rule "times_zero_2" (formula "26") (term "1,0"))
                              (rule "add_zero_right" (formula "26") (term "0"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "CUT: s3_9_A = null FALSE"
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "ifthenelse_split" (formula "9") (term "0"))
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 TRUE"
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "10"))
                              (rule "applyEq" (formula "37") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "37") (term "1,1,0") (ifseqformula "9"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "12") (term "1,1,1,0") (ifseqformula "9"))
                              (rule "applyEqRigid" (formula "10") (term "1,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "applyEqRigid" (formula "35") (term "0") (ifseqformula "9"))
                              (rule "inEqSimp_subsumption1" (formula "34") (ifseqformula "11"))
                              (rule "leq_literals" (formula "34") (term "0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "true_left" (formula "34"))
                              (rule "inEqSimp_or_tautInEq3" (formula "12") (term "0"))
                              (rule "inEqSimp_homoInEq1" (formula "12") (term "1,0"))
                              (rule "polySimp_pullOutFactor1" (formula "12") (term "0,1,0"))
                              (rule "add_literals" (formula "12") (term "1,0,1,0"))
                              (rule "times_zero_1" (formula "12") (term "0,1,0"))
                              (rule "leq_literals" (formula "12") (term "1,0"))
                               (builtin "One Step Simplification" (formula "12"))
                              (rule "true_left" (formula "12"))
                              (rule "allLeft" (formula "25") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "25") (term "1"))
                              (rule "applyEq" (formula "25") (term "0,0,0,0") (ifseqformula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "25") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "inEqSimp_contradInEq1" (formula "25") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "25") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0,1"))
                              (rule "add_literals" (formula "25") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "25") (term "1,0,0,1"))
                              (rule "add_literals" (formula "25") (term "0,0,1"))
                              (rule "leq_literals" (formula "25") (term "0,1"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notLeft" (formula "25"))
                              (rule "allLeft" (formula "34") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
                              (rule "applyEq" (formula "34") (term "0,0,0,0") (ifseqformula "4"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1,0") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "34") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "inEqSimp_contradInEq1" (formula "34") (term "1") (ifseqformula "24"))
                              (rule "inEqSimp_homoInEq1" (formula "34") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "34") (term "0,0,1"))
                              (rule "add_literals" (formula "34") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "34") (term "1,0,0,1"))
                              (rule "add_literals" (formula "34") (term "0,0,1"))
                              (rule "leq_literals" (formula "34") (term "0,1"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "notLeft" (formula "34"))
                              (rule "allLeft" (formula "10") (inst "t=int::select(heapAtPre_A<<anonHeapFunction>>,
            null,
            de.polyas.core3.open.crypto.basic.Hashes::$currentIndex)"))
                              (rule "inEqSimp_commuteGeq" (formula "10") (term "1,0"))
                              (rule "applyEq" (formula "10") (term "1,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "4"))
                              (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "50"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (term "1") (ifseqformula "25"))
                              (rule "inEqSimp_homoInEq1" (formula "10") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0,1"))
                              (rule "add_literals" (formula "10") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "10") (term "1,0,0,1"))
                              (rule "add_literals" (formula "10") (term "0,0,1"))
                              (rule "leq_literals" (formula "10") (term "0,1"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "21"))
                              (rule "qeq_literals" (formula "10") (term "0"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "closeFalse" (formula "10"))
                           )
                           (branch " de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_B«anonHeapFunction».length ≥ 1 FALSE"
                              (rule "eqSymm" (formula "9"))
                              (rule "inEqSimp_geqRight" (formula "39"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "23") (term "0") (ifseqformula "10"))
                              (rule "leq_literals" (formula "23"))
                              (rule "true_left" (formula "23"))
                              (rule "applyEqRigid" (formula "11") (term "1,1,0,0,0") (ifseqformula "10"))
                              (rule "applyEq" (formula "25") (term "0") (ifseqformula "10"))
                              (rule "inEqSimp_homoInEq1" (formula "25"))
                              (rule "mul_literals" (formula "25") (term "1,0"))
                              (rule "add_zero_right" (formula "25") (term "0"))
                              (rule "applyEqRigid" (formula "13") (term "1,1,0,0") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "12") (term "0") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "CUT: de.polyas.core3.open.crypto.basic.Hashes.VALUES@heapAtPre_A«anonHeapFunction».length ≥ 1 FALSE"
          (builtin "One Step Simplification" (formula "11"))
         (rule "replace_known_right" (formula "9") (term "0,1,1,0,0") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_right" (formula "10") (term "0,1,1,0") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "37"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_geqRight" (formula "37"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_subsumption0" (formula "21") (ifseqformula "1"))
         (rule "leq_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "true_left" (formula "21"))
         (rule "inEqSimp_antiSymm" (formula "20") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "1,1,1,0,0,0") (ifseqformula "20"))
         (rule "add_zero_right" (formula "11") (term "1,1,0,0,0"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "20"))
         (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "20"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "11") (term "1,1,0,0,0") (ifseqformula "19"))
         (rule "applyEq" (formula "20") (term "0") (ifseqformula "19"))
         (rule "qeq_literals" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "applyEq" (formula "22") (term "0") (ifseqformula "19"))
         (rule "inEqSimp_homoInEq1" (formula "22"))
         (rule "times_zero_2" (formula "22") (term "1,0"))
         (rule "add_zero_right" (formula "22") (term "0"))
         (rule "applyEqRigid" (formula "9") (term "1,1,0,0,0,0") (ifseqformula "19"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22"))
         (rule "mul_literals" (formula "22") (term "1"))
         (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "22"))
         (rule "qeq_literals" (formula "18") (term "0"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "closeFalse" (formula "18"))
      )
   )
   (branch "Null Reference (b_arr_3 = null)"
       (builtin "One Step Simplification" (formula "34"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (b_arr_3 != null, but x_1 Out of Bounds!)"
       (builtin "One Step Simplification" (formula "34"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "18"))
      (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
      (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0"))
      (rule "leq_literals" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "1"))
      (rule "qeq_literals" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "closeFalse" (formula "14"))
   )
)
(branch "Null Reference (b_arr_1 = null)"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (b_arr_1 != null, but x Out of Bounds!)"
    (builtin "One Step Simplification" (formula "35"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "28"))
   (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
   (rule "qeq_literals" (formula "1") (term "0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
