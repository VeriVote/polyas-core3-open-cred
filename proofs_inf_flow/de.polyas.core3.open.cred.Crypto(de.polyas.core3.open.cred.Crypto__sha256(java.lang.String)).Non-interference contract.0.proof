\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 19 18:03:09 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Dec 19 18:03:09 CET 2019
contract=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:sha256(java.lang.String)].Non-interference contract.0
name=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:sha256(java.lang.String)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "1261")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "8"))
(rule "eqSymm" (formula "11") (term "1"))
(rule "eqSymm" (formula "4") (term "0,0,0,1"))
(rule "eqSymm" (formula "4") (term "1,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "6"))
(rule "assignment" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "boxToDiamond" (formula "4") (term "1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "boxToDiamond" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "3"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "commute_and" (formula "14"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_sha256,savedHeapBefore_sha256"))
 (builtin "One Step Simplification" (formula "11"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_sha256_0,savedHeapBefore_sha256_0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "returnUnfold" (formula "11") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "s"))
(rule "returnUnfold" (formula "10") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "s_1"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "10") (term "1"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "var_1"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "11") (term "1") (inst "#v0=m"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "m"))
(rule "activeUseStaticFieldReadAccess" (formula "11") (term "1"))
(rule "assignment_read_static_attribute" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "10") (term "1") (inst "#v0=m"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "m_1"))
(rule "activeUseStaticFieldReadAccess" (formula "10") (term "1"))
(rule "assignment_read_static_attribute" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "11") (term "1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var_2"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "var_3"))
 (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_getBytes,result_394,exc_522,heapAfter_getBytes,anon_heap_getBytes") (contract "java.lang.String[java.lang.String::getBytes()].JML normal_behavior operation contract.0"))
(branch "Post (getBytes)"
    (builtin "One Step Simplification" (formula "15"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "9"))
   (rule "replace_known_right" (formula "8") (term "0,1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "14")))
   (rule "assignment" (formula "21") (term "1"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "applyEq" (formula "11") (term "4") (ifseqformula "7"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "18") (term "1"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_4"))
   (rule "assignment" (formula "18") (term "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "var_5"))
    (builtin "Use Operation Contract" (formula "19") (newnames "heapBefore_digest,result_395,exc_523,heapAfter_digest,anon_heap_digest") (contract "java.security.MessageDigest[java.security.MessageDigest::digest([B)].JML normal_behavior operation contract.0"))
   (branch "Post (digest)"
       (builtin "One Step Simplification" (formula "13"))
       (builtin "One Step Simplification" (formula "12"))
       (builtin "One Step Simplification" (formula "23"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "14") (term "1,1") (ifseqformula "6"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,0,0,0,1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "14"))
      (rule "notLeft" (formula "17"))
      (rule "notLeft" (formula "14"))
      (rule "orRight" (formula "21"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "8")))
      (rule "true_left" (formula "20"))
      (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
      (rule "assignment" (formula "31") (term "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "blockEmpty" (formula "31") (term "1"))
      (rule "applyEq" (formula "17") (term "5") (ifseqformula "16"))
      (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "18"))
      (rule "true_left" (formula "18"))
      (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "15"))
      (rule "true_left" (formula "15"))
       (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_getBytes_0,result_396,exc_524,heapAfter_getBytes_0,anon_heap_getBytes_0") (contract "java.lang.String[java.lang.String::getBytes()].JML normal_behavior operation contract.0"))
      (branch "Post (getBytes)"
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")))
          (builtin "One Step Simplification" (formula "20"))
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,1,0") (ifseqformula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "21"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "21"))
         (rule "notLeft" (formula "24"))
         (rule "notLeft" (formula "21"))
         (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "27")))
         (rule "assignment" (formula "38") (term "1"))
          (builtin "One Step Simplification" (formula "38"))
         (rule "applyEq" (formula "24") (term "4") (ifseqformula "23"))
         (rule "Class_invariant_axiom_for_java_lang_String" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "Class_invariant_axiom_for_java_lang_String" (formula "22"))
         (rule "true_left" (formula "22"))
          (builtin "Use Operation Contract" (formula "37") (newnames "heapBefore_asHexString,result_397,exc_525,heapAfter_asHexString,anon_heap_asHexString") (contract "de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils::asHexString([B)].JML normal_behavior operation contract.0"))
         (branch "Post (asHexString)"
             (builtin "One Step Simplification" (formula "41"))
             (builtin "One Step Simplification" (formula "26"))
             (builtin "One Step Simplification" (formula "25"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "32")) (ifInst ""  (formula "32")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1") (ifseqformula "6"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0,0,0,1,1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0,0,0,0,1,1") (ifseqformula "6"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,1,0") (ifseqformula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,1,0") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,1,0") (ifseqformula "6"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "29"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "notLeft" (formula "27"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "39")) (ifInst ""  (formula "13")))
            (rule "true_left" (formula "31"))
            (rule "replace_known_right" (formula "26") (term "0,0,0,1") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "34")) (ifInst ""  (formula "32")) (ifInst ""  (formula "33")))
            (rule "assignment" (formula "48") (term "1"))
             (builtin "One Step Simplification" (formula "48"))
            (rule "blockEmpty" (formula "48") (term "1"))
            (rule "applyEq" (formula "29") (term "3") (ifseqformula "28"))
            (rule "methodCallReturn" (formula "48") (term "1"))
            (rule "assignment" (formula "48") (term "1"))
             (builtin "One Step Simplification" (formula "48"))
            (rule "methodCallEmpty" (formula "48") (term "1"))
            (rule "tryEmpty" (formula "48") (term "1"))
            (rule "emptyModality" (formula "48") (term "1"))
             (builtin "One Step Simplification" (formula "48"))
            (rule "notRight" (formula "48"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "32") (term "2") (ifseqformula "1"))
            (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "37") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "36") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "29") (term "1,0") (ifseqformula "1"))
             (builtin "Use Operation Contract" (formula "50") (newnames "heapBefore_digest_0,result_398,exc_526,heapAfter_digest_0,anon_heap_digest_0") (contract "java.security.MessageDigest[java.security.MessageDigest::digest([B)].JML normal_behavior operation contract.0"))
            (branch "Post (digest)"
                (builtin "One Step Simplification" (formula "36"))
                (builtin "One Step Simplification" (formula "54"))
                (builtin "One Step Simplification" (formula "35"))
                (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "1,1") (ifseqformula "22"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
               (rule "andLeft" (formula "37"))
               (rule "andLeft" (formula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,1,0") (ifseqformula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,1,0") (ifseqformula "22"))
               (rule "andLeft" (formula "39"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "38"))
               (rule "andLeft" (formula "40"))
               (rule "andLeft" (formula "38"))
               (rule "notLeft" (formula "41"))
               (rule "notLeft" (formula "38"))
               (rule "orRight" (formula "44"))
               (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "23")))
               (rule "true_left" (formula "43"))
               (rule "replace_known_right" (formula "37") (term "1,0,1") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "45")) (ifInst ""  (formula "43")))
               (rule "assignment" (formula "62") (term "1"))
                (builtin "One Step Simplification" (formula "62"))
               (rule "blockEmpty" (formula "62") (term "1"))
               (rule "applyEq" (formula "40") (term "5") (ifseqformula "36"))
               (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "41"))
               (rule "true_left" (formula "41"))
               (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "39"))
               (rule "true_left" (formula "39"))
                (builtin "Use Operation Contract" (formula "60") (newnames "heapBefore_asHexString_0,result_399,exc_527,heapAfter_asHexString_0,anon_heap_asHexString_0") (contract "de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils::asHexString([B)].JML normal_behavior operation contract.0"))
               (branch "Post (asHexString)"
                   (builtin "One Step Simplification" (formula "44") (ifInst ""  (formula "47")) (ifInst ""  (formula "47")))
                   (builtin "One Step Simplification" (formula "43"))
                   (builtin "One Step Simplification" (formula "42"))
                   (builtin "One Step Simplification" (formula "64"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,1") (ifseqformula "22"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0,0,1,1") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0,0,0,1,1") (ifseqformula "22"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "1,1,0") (ifseqformula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,1,1,0") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,1,0") (ifseqformula "22"))
                  (rule "andLeft" (formula "43"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "43"))
                  (rule "andLeft" (formula "44"))
                  (rule "notLeft" (formula "45"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "44"))
                  (rule "notLeft" (formula "44"))
                  (rule "notLeft" (formula "44"))
                  (rule "orRight" (formula "49"))
                  (rule "orRight" (formula "49"))
                  (rule "replace_known_left" (formula "48") (term "1") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                  (rule "true_left" (formula "48"))
                  (rule "replace_known_right" (formula "43") (term "1,0,0,1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "51")) (ifInst ""  (formula "48")) (ifInst ""  (formula "50")))
                  (rule "assignment" (formula "71") (term "1"))
                   (builtin "One Step Simplification" (formula "71"))
                  (rule "blockEmpty" (formula "71") (term "1"))
                  (rule "applyEq" (formula "46") (term "3") (ifseqformula "45"))
                  (rule "methodCallReturn" (formula "71") (term "1"))
                  (rule "assignment" (formula "71") (term "1"))
                   (builtin "One Step Simplification" (formula "71"))
                  (rule "methodCallEmpty" (formula "71") (term "1"))
                  (rule "tryEmpty" (formula "71") (term "1"))
                  (rule "emptyModality" (formula "71") (term "1"))
                   (builtin "One Step Simplification" (formula "71"))
                  (rule "notRight" (formula "71"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "46") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "53") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "54") (term "0") (ifseqformula "1"))
                  (rule "applyEq" (formula "49") (term "2") (ifseqformula "1"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "70") (term "0") (ifseqformula "9"))
                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "71"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cut_direct" (formula "77") (term "0"))
                  (branch "CUT: strContent(resultAtPost_393_B) = strContent(resultAtPost_393_A) TRUE"
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "definitionOfNewObjectsIsomorphic" (formula "78"))
                     (branch "New on Heap 1"
                        (rule "definitionOfNewOnHeap" (formula "78") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "allRight" (formula "78") (inst "sk=i_0"))
                        (rule "impRight" (formula "78"))
                        (rule "andLeft" (formula "1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,1"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,1"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,0"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,0"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,0,0,1,0"))
                        (rule "castDel" (formula "80") (term "1,1,0,0,1,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "81") (term "0,0,0,0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "63")))
                        (rule "closeTrue" (formula "81"))
                     )
                     (branch "New on Heap 2"
                        (rule "definitionOfNewOnHeap" (formula "78") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "allRight" (formula "78") (inst "sk=i_0"))
                        (rule "impRight" (formula "78"))
                        (rule "andLeft" (formula "1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,1"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,1"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,0"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,0"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,0,0,1,0"))
                        (rule "castDel" (formula "80") (term "1,1,0,0,1,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "81") (term "0,0,0,0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "56")))
                        (rule "closeTrue" (formula "81"))
                     )
                     (branch "Same Types"
                        (rule "definitionOfSameTypes" (formula "78") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "allRight" (formula "78") (inst "sk=i_0"))
                        (rule "impRight" (formula "78"))
                        (rule "andLeft" (formula "1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0"))
                        (rule "castDel" (formula "80") (term "1,0,0"))
                        (rule "castDel" (formula "80") (term "2,0,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,1,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,0"))
                        (rule "castDel" (formula "80") (term "1,1,0"))
                        (rule "castDel" (formula "80") (term "2,1,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,1,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,1"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,1"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "81") (term "0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                        (rule "sameTypeTrue" (formula "81") (ifseqformula "38") (ifseqformula "52"))
                        (rule "closeTrue" (formula "81"))
                     )
                     (branch "Objects Isomorphic"
                        (rule "definitionOfObjectsIsomorphic" (formula "78") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "78"))
                        (rule "allRight" (formula "78") (inst "sk=i_0"))
                        (rule "impRight" (formula "78"))
                        (rule "andLeft" (formula "1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,1,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "3,1,0"))
                        (rule "castDel" (formula "80") (term "1,3,1,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "1,1,0"))
                        (rule "castDel" (formula "80") (term "1,1,1,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,1"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,1"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,1"))
                        (rule "getOfSeqSingleton" (formula "80") (term "0,0,0,0"))
                        (rule "castDel" (formula "80") (term "2,0,0,0,0"))
                        (rule "castDel" (formula "80") (term "1,0,0,0,0"))
                        (rule "getOfSeqSingleton" (formula "80") (term "3,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "81") (term "0,1,1,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "definitionOfObjectIsomorphic" (formula "79") (inst "i=i"))
                         (builtin "One Step Simplification" (formula "79"))
                        (rule "allRight" (formula "79") (inst "sk=i_1"))
                        (rule "impRight" (formula "79"))
                        (rule "andLeft" (formula "1"))
                        (rule "getOfSeqSingleton" (formula "81") (term "2,1,1"))
                        (rule "getOfSeqSingleton" (formula "81") (term "0,1,1,0"))
                        (rule "castDel" (formula "81") (term "1,0,1,1,0"))
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "getOfSeqSingleton" (formula "81") (term "0,0,0,1"))
                        (rule "castDel" (formula "81") (term "1,0,0,0,1"))
                        (rule "castDel" (formula "81") (term "2,0,0,0,1"))
                        (rule "getOfSeqSingleton" (formula "81") (term "0,0,0,0"))
                        (rule "castDel" (formula "81") (term "2,0,0,0,0"))
                        (rule "castDel" (formula "81") (term "1,0,0,0,0"))
                        (rule "getOfSeqSingleton" (formula "81") (term "0,0,1,0"))
                        (rule "castDel" (formula "81") (term "1,0,0,1,0"))
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "getOfSeqSingleton" (formula "81") (term "0,1,1"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1,0,0"))
                        (rule "add_literals" (formula "2") (term "0,0"))
                        (rule "add_zero_left" (formula "2") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "82") (term "0,0,0,0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                        (rule "closeTrue" (formula "82"))
                     )
                  )
                  (branch "CUT: strContent(resultAtPost_393_B) = strContent(resultAtPost_393_A) FALSE"
                      (builtin "One Step Simplification" (formula "78"))
                     (rule "false_right" (formula "78"))
                     (rule "equalityToSeqGetAndSeqLenRight" (formula "77") (inst "iv=iv"))
                     (rule "inEqSimp_ltToLeq" (formula "77") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "77") (term "1,0,0,1,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "77") (term "0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "1,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "77") (term "1,1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "77") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "77") (term "0,1,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "77") (term "1,1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "77") (term "1,1,1,0,0,1"))
                     (rule "nnf_imp2or" (formula "77") (term "0,1"))
                     (rule "nnf_notAnd" (formula "77") (term "0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "77") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "77") (term "1,0,0,0,0,0,1"))
                     (rule "add_zero_right" (formula "77") (term "0,0,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "77") (term "0,0,0,1"))
                     (rule "mul_literals" (formula "77") (term "1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "77") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "77") (term "1,0,0,1,0,0,1"))
                     (rule "mul_literals" (formula "77") (term "0,1,0,0,1,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "77") (term "0,0,1,0,0,1"))
                     (rule "add_literals" (formula "77") (term "0,0,0,1,0,0,1"))
                     (rule "add_zero_left" (formula "77") (term "0,0,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "77") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "77") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "77") (term "1,1,0,0,1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "72") (term "0") (ifseqformula "8"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "73"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "71") (term "0") (ifseqformula "11"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "72"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "76") (term "0") (ifseqformula "10"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "77"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "cut_direct" (formula "80") (term "0"))
                     (branch "CUT: strContent(resultAtPost_393_B).length = strContent(resultAtPost_393_A).length TRUE"
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "allRight" (formula "81") (inst "sk=iv_0"))
                        (rule "orRight" (formula "81"))
                        (rule "orRight" (formula "81"))
                        (rule "inEqSimp_leqRight" (formula "81"))
                        (rule "mul_literals" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "82"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "1") (term "0"))
                        (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "lenNonNegative" (formula "3") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "3"))
                        (rule "lenNonNegative" (formula "4") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "4"))
                        (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                        (rule "seqGetAlphaCast" (formula "84") (term "0"))
                        (rule "castDel" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "seqGetAlphaCast" (formula "84") (term "1"))
                        (rule "castDel" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "Use_information_flow_contract_for_asHexString_1063021898_0000_3" (formula "57") (ifseqformula "43"))
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "66")) (ifInst ""  (formula "75")))
                        (rule "andLeft" (formula "57"))
                        (rule "allFieldsEq" (formula "58") (term "0"))
                        (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "57"))
                        (rule "applyEq" (formula "54") (term "1,0") (ifseqformula "57"))
                        (rule "applyEq" (formula "64") (term "0") (ifseqformula "57"))
                        (rule "applyEq" (formula "59") (term "2") (ifseqformula "57"))
                        (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "57"))
                        (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "57"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "56"))
                        (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "55"))
                        (rule "applyEq" (formula "83") (term "0,0,0") (ifseqformula "55"))
                         (builtin "One Step Simplification" (formula "83"))
                        (rule "closeTrue" (formula "83"))
                     )
                     (branch "CUT: strContent(resultAtPost_393_B).length = strContent(resultAtPost_393_A).length FALSE"
                         (builtin "One Step Simplification" (formula "81"))
                        (rule "false_right" (formula "81"))
                        (rule "lenNonNegative" (formula "80") (term "1"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "lenNonNegative" (formula "81") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "1"))
                        (rule "Use_information_flow_contract_for_asHexString_1063021898_0000_3" (formula "55") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "64")) (ifInst ""  (formula "73")))
                        (rule "andLeft" (formula "55"))
                        (rule "allFieldsEq" (formula "56") (term "0"))
                        (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "55"))
                        (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "54"))
                        (rule "applyEq" (formula "1") (term "0,0,0") (ifseqformula "54"))
                        (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "55") (term "2") (ifseqformula "53"))
                        (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "53"))
                        (rule "applyEq" (formula "60") (term "0") (ifseqformula "53"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "53"))
                        (rule "applyEq" (formula "54") (term "0,0,1") (ifseqformula "53"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "true_left" (formula "54"))
                        (rule "applyEq" (formula "80") (term "0,0,0") (ifseqformula "53"))
                         (builtin "One Step Simplification" (formula "80"))
                        (rule "closeTrue" (formula "80"))
                     )
                  )
               )
               (branch "Exceptional Post (asHexString)"
                   (builtin "One Step Simplification" (formula "62"))
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0,0,1,1") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "42") (term "0,0,0,0,0,0,1,1") (ifseqformula "22"))
                  (rule "andLeft" (formula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "1,0") (ifseqformula "42"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,1,0") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,0,1,0") (ifseqformula "22"))
                  (rule "andLeft" (formula "43"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "43"))
                  (rule "andLeft" (formula "45"))
                  (rule "notLeft" (formula "43"))
                  (rule "close" (formula "47") (ifseqformula "46"))
               )
               (branch "Pre (asHexString)"
                   (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
                  (rule "wellFormedAnonEQ" (formula "60") (term "0") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "1") (ifseqformula "35"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,1") (ifseqformula "22"))
                  (rule "replace_known_left" (formula "60") (term "1,0") (ifseqformula "34"))
                   (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "40")) (ifInst ""  (formula "41")) (ifInst ""  (formula "42")) (ifInst ""  (formula "37")))
                  (rule "closeTrue" (formula "60"))
               )
            )
            (branch "Exceptional Post (digest)"
                (builtin "One Step Simplification" (formula "52"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "35") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
               (rule "andLeft" (formula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "1,0") (ifseqformula "35"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "36") (term "0,1,0") (ifseqformula "22"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "36"))
               (rule "andLeft" (formula "38"))
               (rule "notLeft" (formula "36"))
               (rule "close" (formula "39") (ifseqformula "38"))
            )
            (branch "Pre (digest)"
                (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "39")) (ifInst ""  (formula "39")))
               (rule "wellFormedAnonEQ" (formula "50") (term "0,1") (ifseqformula "22"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "50") (term "1,1") (ifseqformula "22"))
               (rule "replace_known_left" (formula "50") (term "1,0,1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "6")) (ifInst ""  (formula "38")) (ifInst ""  (formula "23")))
               (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "50"))
               (rule "closeTrue" (formula "50"))
            )
            (branch "Null reference (var_4 = null)"
                (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "46")))
               (rule "closeTrue" (formula "50"))
            )
         )
         (branch "Exceptional Post (asHexString)"
             (builtin "One Step Simplification" (formula "39"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0,0,0,1,1") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,0,0,0,0,1,1") (ifseqformula "6"))
            (rule "andLeft" (formula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "1,0") (ifseqformula "25"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,1,0") (ifseqformula "12"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "26") (term "0,0,1,0") (ifseqformula "6"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "28"))
            (rule "notLeft" (formula "26"))
            (rule "close" (formula "29") (ifseqformula "28"))
         )
         (branch "Pre (asHexString)"
             (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "1") (ifseqformula "12"))
            (rule "wellFormedAnonEQ" (formula "37") (term "0") (ifseqformula "12"))
            (rule "wellFormedAnonEQ" (formula "37") (term "0,0") (ifseqformula "6"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "37") (term "0,1") (ifseqformula "6"))
            (rule "replace_known_left" (formula "37") (term "1,1") (ifseqformula "13"))
             (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "26")) (ifInst ""  (formula "27")))
            (rule "closeTrue" (formula "37"))
         )
      )
      (branch "Exceptional Post (getBytes)"
          (builtin "One Step Simplification" (formula "19"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "andLeft" (formula "19"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "andLeft" (formula "22"))
         (rule "notLeft" (formula "20"))
         (rule "close" (formula "23") (ifseqformula "22"))
      )
      (branch "Pre (getBytes)"
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "3")))
         (rule "Class_invariant_axiom_for_java_lang_String" (formula "28"))
         (rule "closeTrue" (formula "28"))
      )
      (branch "Null reference (_input_9_B = null)"
          (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "30")))
         (rule "closeTrue" (formula "28"))
      )
   )
   (branch "Exceptional Post (digest)"
       (builtin "One Step Simplification" (formula "21"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "12") (term "0,0,0,0,0,1,1") (ifseqformula "6"))
      (rule "andLeft" (formula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "0,1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "15"))
      (rule "notLeft" (formula "13"))
      (rule "close" (formula "16") (ifseqformula "15"))
   )
   (branch "Pre (digest)"
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "1,1") (ifseqformula "6"))
      (rule "wellFormedAnonEQ" (formula "19") (term "0,1") (ifseqformula "6"))
      (rule "replace_known_left" (formula "19") (term "1,0,1") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "11")) (ifInst ""  (formula "8")))
      (rule "Class_invariant_axiom_for_java_security_MessageDigest" (formula "19"))
      (rule "closeTrue" (formula "19"))
   )
   (branch "Null reference (var_2 = null)"
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "17")))
      (rule "closeTrue" (formula "19"))
   )
)
(branch "Exceptional Post (getBytes)"
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "andLeft" (formula "6"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (getBytes)"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
(branch "Null reference (_input_9_A = null)"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
   (rule "closeTrue" (formula "11"))
)
)
}
