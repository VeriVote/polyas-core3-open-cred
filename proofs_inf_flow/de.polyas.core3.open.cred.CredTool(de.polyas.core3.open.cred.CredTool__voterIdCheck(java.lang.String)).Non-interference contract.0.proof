\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 10 00:48:56 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Mon Feb 10 00:48:56 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:voterIdCheck(java.lang.String)].Non-interference contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:voterIdCheck(java.lang.String)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "803")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "2"))
(rule "exLeft" (formula "11") (inst "sk=i_0"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "exLeft" (formula "5") (inst "sk=i_1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "eqSymm" (formula "21"))
(rule "eqSymm" (formula "16") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,1"))
(rule "eqSymm" (formula "16") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "8") (term "0,0,0,0,1"))
(rule "replace_known_right" (formula "12") (term "0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "12"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "19"))
 (builtin "One Step Simplification" (formula "4"))
(rule "castedGetAny" (formula "15") (term "0"))
(rule "castedGetAny" (formula "7") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "14"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "14") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_gtToGeq" (formula "15"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "13"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "16") (term "1"))
 (builtin "One Step Simplification" (formula "16"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepNegMonomial0" (formula "14"))
(rule "polySimp_mulLiterals" (formula "14") (term "0"))
(rule "polySimp_elimOne" (formula "14") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15"))
(rule "polySimp_mulComm0" (formula "15") (term "1"))
(rule "polySimp_rightDist" (formula "15") (term "1"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
(rule "mul_literals" (formula "15") (term "0,1"))
(rule "polySimp_elimOne" (formula "15") (term "1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1"))
(rule "polySimp_rightDist" (formula "7") (term "1"))
(rule "mul_literals" (formula "7") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
(rule "polySimp_elimOne" (formula "7") (term "1,1"))
(rule "boxToDiamond" (formula "16") (term "1"))
 (builtin "One Step Simplification" (formula "16"))
(rule "notLeft" (formula "16"))
(rule "boxToDiamond" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "notLeft" (formula "8"))
(rule "charLiteral_to_int" (formula "14") (term "1,1"))
(rule "add_literals" (formula "14") (term "1"))
(rule "charLiteral_to_int" (formula "7") (term "1,1"))
(rule "add_literals" (formula "7") (term "1"))
(rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_voterIdCheck,savedHeapBefore_voterIdCheck"))
 (builtin "One Step Simplification" (formula "16"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_voterIdCheck_0,savedHeapBefore_voterIdCheck_0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "returnUnfold" (formula "16") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x"))
(rule "returnUnfold" (formula "15") (term "1") (inst "#v0=x"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
(rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "16") (term "1"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
(rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_2"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_3"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "16") (term "1") (inst "#v0=s"))
(rule "variableDeclaration" (formula "16") (term "1") (newnames "s"))
 (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_trim,result_786,exc_1045,heapAfter_trim,anon_heap_trim") (contract "java.lang.String[java.lang.String::trim()].stringTrim.0#java.lang.String[java.lang.String::trim()].stringTrim2.0"))
(branch "Post (trim)"
    (builtin "One Step Simplification" (formula "16"))
    (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "8")))
    (builtin "One Step Simplification" (formula "17"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "true_left" (formula "18"))
   (rule "andLeft" (formula "16"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,1,0") (ifseqformula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "andLeft" (formula "19"))
   (rule "notLeft" (formula "19"))
   (rule "replace_known_left" (formula "20") (term "1,0,0,1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "17")))
   (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "castedGetAny" (formula "20") (term "0,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0,0"))
   (rule "assignment" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "applyEq" (formula "21") (term "4") (ifseqformula "17"))
   (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "20") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "20") (term "1,1,0,0"))
   (rule "mul_literals" (formula "20") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "20") (term "1,1,1,0,0"))
   (rule "commute_or" (formula "18"))
   (rule "charLiteral_to_int" (formula "20") (term "1,1,1,0,0"))
   (rule "add_literals" (formula "20") (term "1,1,0,0"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "23") (term "1") (inst "#v0=s"))
   (rule "variableDeclaration" (formula "23") (term "1") (newnames "s_1"))
    (builtin "Use Operation Contract" (formula "24") (newnames "heapBefore_isEmpty,result_787,exc_1046,heapAfter_isEmpty,anon_heap_isEmpty") (contract "java.lang.String[java.lang.String::isEmpty()].stringIsEmptyNormal.0"))
   (branch "Post (isEmpty)"
       (builtin "One Step Simplification" (formula "28"))
       (builtin "One Step Simplification" (formula "25"))
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "eqSeqEmpty" (formula "25") (term "1"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "applyEq" (formula "26") (term "4") (ifseqformula "24"))
      (rule "compound_assignment_1_new" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "methodCallReturn" (formula "30") (term "1"))
      (rule "assignment" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "methodCallEmpty" (formula "30") (term "1"))
      (rule "tryEmpty" (formula "30") (term "1"))
      (rule "emptyModality" (formula "30") (term "1"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "notRight" (formula "30"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "3"))
      (rule "applyEq" (formula "35") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
       (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_trim_0,result_788,exc_1047,heapAfter_trim_0,anon_heap_trim_0") (contract "java.lang.String[java.lang.String::trim()].stringTrim.0#java.lang.String[java.lang.String::trim()].stringTrim2.0"))
      (branch "Post (trim)"
          (builtin "One Step Simplification" (formula "37"))
          (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "5")))
          (builtin "One Step Simplification" (formula "34"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "35"))
         (rule "andLeft" (formula "33"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "1,1,0") (ifseqformula "33"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "andLeft" (formula "36"))
         (rule "notLeft" (formula "36"))
         (rule "replace_known_right" (formula "37") (term "0,0,0,0,1") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "36")) (ifInst ""  (formula "34")))
         (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "castedGetAny" (formula "37") (term "0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "37") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_gtToGeq" (formula "37") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "36"))
         (rule "inEqSimp_commuteLeq" (formula "37") (term "0,0,0,0"))
         (rule "assignment" (formula "41") (term "1"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "applyEq" (formula "38") (term "4") (ifseqformula "34"))
         (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0"))
         (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0"))
         (rule "mul_literals" (formula "37") (term "0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0"))
         (rule "commute_or" (formula "35"))
         (rule "charLiteral_to_int" (formula "37") (term "1,1,1,0,0"))
         (rule "add_literals" (formula "37") (term "1,1,0,0"))
         (rule "lenNonNegative" (formula "17") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "17"))
         (rule "lenNonNegative" (formula "10") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "10"))
         (rule "seqGetAlphaCast" (formula "20") (term "0"))
         (rule "castedGetAny" (formula "20") (term "0"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "true_left" (formula "20"))
         (rule "seqGetAlphaCast" (formula "12") (term "0"))
         (rule "castedGetAny" (formula "12") (term "0"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "true_left" (formula "12"))
          (builtin "Use Operation Contract" (formula "43") (newnames "heapBefore_isEmpty_0,result_789,exc_1048,heapAfter_isEmpty_0,anon_heap_isEmpty_0") (contract "java.lang.String[java.lang.String::isEmpty()].stringIsEmptyNormal.0"))
         (branch "Post (isEmpty)"
             (builtin "One Step Simplification" (formula "47"))
             (builtin "One Step Simplification" (formula "42"))
             (builtin "One Step Simplification" (formula "43"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "andLeft" (formula "42"))
            (rule "andLeft" (formula "43"))
            (rule "andLeft" (formula "44"))
            (rule "eqSeqEmpty" (formula "44") (term "1"))
            (rule "assignment" (formula "49") (term "1"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "applyEq" (formula "45") (term "4") (ifseqformula "43"))
            (rule "compound_assignment_1_new" (formula "49") (term "1"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "methodCallReturn" (formula "49") (term "1"))
            (rule "assignment" (formula "49") (term "1"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "methodCallEmpty" (formula "49") (term "1"))
            (rule "tryEmpty" (formula "49") (term "1"))
            (rule "emptyModality" (formula "49") (term "1"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "notRight" (formula "49"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "3"))
            (rule "applyEq" (formula "53") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "1"))
            (rule "ifthenelse_split" (formula "6") (term "0"))
            (branch "result_787 = TRUE TRUE"
               (rule "eqSymm" (formula "7"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "notLeft" (formula "7"))
               (rule "replace_known_left" (formula "35") (term "0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "applyEq" (formula "36") (term "3") (ifseqformula "6"))
               (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "35"))
               (rule "qeq_literals" (formula "30") (term "1"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "notLeft" (formula "30"))
               (rule "apply_eq_boolean" (formula "58") (term "0") (ifseqformula "51"))
               (rule "eqSymm" (formula "58"))
                (builtin "One Step Simplification" (formula "58"))
               (rule "notRight" (formula "58"))
               (rule "applyEq" (formula "30") (term "1") (ifseqformula "35"))
               (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "notLeft" (formula "3"))
               (rule "replace_known_right" (formula "46") (term "0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "notLeft" (formula "46"))
               (rule "apply_eq_boolean" (formula "46") (term "3") (ifseqformula "49"))
               (rule "nnf_ex2all" (formula "50"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "cut_direct" (formula "42") (term "1"))
               (branch "CUT: strContent(result_788).length ≥ 1 TRUE"
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "true_left" (formula "43"))
                  (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "42"))
                  (rule "mul_literals" (formula "49") (term "1,0,0"))
                  (rule "add_zero_right" (formula "49") (term "0,0"))
                  (rule "leq_literals" (formula "49") (term "0"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "false_right" (formula "49"))
                  (rule "lenNonNegative" (formula "41") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "41"))
                  (rule "inEqSimp_subsumption1" (formula "41") (ifseqformula "43"))
                  (rule "leq_literals" (formula "41") (term "0"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "true_left" (formula "41"))
                  (rule "allLeft" (formula "1") (inst "t=i_0"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1,0") (ifseqformula "25"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                  (rule "leq_literals" (formula "1") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "23"))
                  (rule "qeq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "26") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "26") (term "0"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "closeFalse" (formula "26"))
               )
               (branch "CUT: strContent(result_788).length ≥ 1 FALSE"
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "notLeft" (formula "42"))
                  (rule "inEqSimp_geqRight" (formula "49"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "50"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "1"))
                  (rule "times_zero_1" (formula "50") (term "1,0,0"))
                  (rule "add_literals" (formula "50") (term "0,0"))
                  (rule "qeq_literals" (formula "50") (term "0"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "false_right" (formula "50"))
                  (rule "nnf_ex2all" (formula "49"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "lenNonNegative" (formula "43") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "43"))
                  (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "43"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
            )
            (branch "result_787 = TRUE FALSE"
               (rule "eqSymm" (formula "6"))
               (rule "replace_known_right" (formula "35") (term "0") (ifseqformula "51"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "notLeft" (formula "35"))
               (rule "apply_eq_boolean" (formula "35") (term "3") (ifseqformula "51"))
               (rule "applyEq" (formula "58") (term "0") (ifseqformula "6"))
               (rule "eqSymm" (formula "58"))
               (rule "apply_eq_boolean" (formula "2") (term "1") (ifseqformula "58"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "47"))
               (rule "applyEq" (formula "42") (term "0,1") (ifseqformula "47"))
               (rule "qeq_literals" (formula "42") (term "1"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "notLeft" (formula "42"))
               (rule "applyEq" (formula "41") (term "1") (ifseqformula "46"))
               (rule "applyEq" (formula "46") (term "3") (ifseqformula "2"))
               (rule "nnf_ex2all" (formula "48"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
               (rule "add_literals" (formula "1") (term "0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "cut_direct" (formula "31") (term "1"))
               (branch "CUT: strContent(result_786).length ≥ 1 TRUE"
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "inEqSimp_contradEq7" (formula "49") (ifseqformula "31"))
                  (rule "times_zero_1" (formula "49") (term "1,0,0"))
                  (rule "add_zero_right" (formula "49") (term "0,0"))
                  (rule "leq_literals" (formula "49") (term "0"))
                   (builtin "One Step Simplification" (formula "49"))
                  (rule "false_right" (formula "49"))
                  (rule "lenNonNegative" (formula "30") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "30"))
                  (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "32"))
                  (rule "leq_literals" (formula "30") (term "0"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "allLeft" (formula "1") (inst "t=i_1"))
                  (rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "18"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "15"))
                  (rule "qeq_literals" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "CUT: strContent(result_786).length ≥ 1 FALSE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "notLeft" (formula "31"))
                  (rule "inEqSimp_geqRight" (formula "49"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "50"))
                  (rule "add_zero_right" (formula "1") (term "1"))
                  (rule "inEqSimp_contradEq3" (formula "50") (ifseqformula "1"))
                  (rule "mul_literals" (formula "50") (term "1,0,0"))
                  (rule "add_zero_right" (formula "50") (term "0,0"))
                  (rule "qeq_literals" (formula "50") (term "0"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "false_right" (formula "50"))
                  (rule "nnf_ex2all" (formula "49"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
                  (rule "add_literals" (formula "1") (term "0,0,1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
                  (rule "mul_literals" (formula "1") (term "1,1,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "lenNonNegative" (formula "32") (term "1"))
                  (rule "inEqSimp_commuteLeq" (formula "32"))
                  (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "32") (term "0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "closeFalse" (formula "32"))
               )
            )
         )
         (branch "Exceptional Post (isEmpty)"
             (builtin "One Step Simplification" (formula "42"))
             (builtin "One Step Simplification" (formula "45"))
            (rule "andLeft" (formula "42"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "1,0") (ifseqformula "42"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "43") (term "0,1,0") (ifseqformula "35"))
            (rule "andLeft" (formula "43"))
            (rule "andLeft" (formula "43"))
            (rule "andLeft" (formula "45"))
            (rule "notLeft" (formula "43"))
            (rule "close" (formula "46") (ifseqformula "45"))
         )
         (branch "Pre (isEmpty)"
             (builtin "One Step Simplification" (formula "43"))
            (rule "wellFormedAnonEQ" (formula "43") (ifseqformula "35"))
            (rule "replace_known_left" (formula "43") (term "0") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "34")))
            (rule "closeTrue" (formula "43"))
         )
         (branch "Null reference (s_1 = null)"
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "41")))
            (rule "closeTrue" (formula "43"))
         )
      )
      (branch "Exceptional Post (trim)"
          (builtin "One Step Simplification" (formula "33"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "andLeft" (formula "33"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "34") (term "1,0") (ifseqformula "33"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "34"))
         (rule "andLeft" (formula "36"))
         (rule "notLeft" (formula "34"))
         (rule "andLeft" (formula "35"))
         (rule "close" (formula "38") (ifseqformula "36"))
      )
      (branch "Pre (trim)"
          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "33"))
      )
      (branch "Null reference (_voterId_81_A = null)"
          (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "36")))
         (rule "closeTrue" (formula "33"))
      )
   )
   (branch "Exceptional Post (isEmpty)"
       (builtin "One Step Simplification" (formula "23"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "andLeft" (formula "23"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "1,0") (ifseqformula "23"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0") (ifseqformula "16"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "24"))
      (rule "close" (formula "27") (ifseqformula "26"))
   )
   (branch "Pre (isEmpty)"
       (builtin "One Step Simplification" (formula "24"))
      (rule "wellFormedAnonEQ" (formula "24") (ifseqformula "16"))
      (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "8")))
      (rule "closeTrue" (formula "24"))
   )
   (branch "Null reference (s = null)"
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "22")))
      (rule "closeTrue" (formula "24"))
   )
)
(branch "Exceptional Post (trim)"
    (builtin "One Step Simplification" (formula "18"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "andLeft" (formula "16"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "1,0") (ifseqformula "16"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "18"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "19"))
   (rule "notLeft" (formula "17"))
   (rule "close" (formula "21") (ifseqformula "19"))
)
(branch "Pre (trim)"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "8")))
   (rule "closeTrue" (formula "16"))
)
(branch "Null reference (_voterId_81_B = null)"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")))
   (rule "closeTrue" (formula "16"))
)
)
}
