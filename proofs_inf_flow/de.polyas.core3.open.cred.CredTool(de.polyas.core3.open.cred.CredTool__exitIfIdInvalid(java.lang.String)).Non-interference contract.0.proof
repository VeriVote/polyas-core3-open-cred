\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Feb 09 23:40:41 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Sun Feb 09 23:40:41 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:exitIfIdInvalid(java.lang.String)].Non-interference contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:exitIfIdInvalid(java.lang.String)].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "2978")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "3"))
(rule "exLeft" (formula "12") (inst "sk=j_0"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "exLeft" (formula "6") (inst "sk=j_1"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "eqSymm" (formula "22"))
(rule "eqSymm" (formula "1"))
(rule "eqSymm" (formula "17") (term "0,0,0,1"))
(rule "eqSymm" (formula "17") (term "1,0,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "5"))
(rule "replace_known_right" (formula "13") (term "0") (ifseqformula "21"))
 (builtin "One Step Simplification" (formula "13"))
(rule "castedGetAny" (formula "16") (term "0"))
(rule "castedGetAny" (formula "8") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "15"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "15") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "7"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "7") (term "0"))
(rule "inEqSimp_gtToGeq" (formula "16"))
(rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "8"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "14"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "assignment" (formula "17") (term "1"))
 (builtin "One Step Simplification" (formula "17"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inEqSimp_sepNegMonomial0" (formula "15"))
(rule "polySimp_mulLiterals" (formula "15") (term "0"))
(rule "polySimp_elimOne" (formula "15") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "7"))
(rule "polySimp_mulLiterals" (formula "7") (term "0"))
(rule "polySimp_elimOne" (formula "7") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "16"))
(rule "polySimp_mulComm0" (formula "16") (term "1"))
(rule "polySimp_rightDist" (formula "16") (term "1"))
(rule "mul_literals" (formula "16") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "16") (term "1,1"))
(rule "polySimp_elimOne" (formula "16") (term "1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "8"))
(rule "polySimp_mulComm0" (formula "8") (term "1"))
(rule "polySimp_rightDist" (formula "8") (term "1"))
(rule "mul_literals" (formula "8") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
(rule "polySimp_elimOne" (formula "8") (term "1,1"))
(rule "equalityToSeqGetAndSeqLenRight" (formula "22") (inst "iv=iv"))
(rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
(rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
(rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
(rule "pullOutSelect" (formula "22") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_0"))
(rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
(rule "applyEq" (formula "23") (term "0,0,1,0,1") (ifseqformula "1"))
(rule "eqSymm" (formula "23") (term "0"))
(rule "eqSymm" (formula "23") (term "1,0,1"))
(rule "pullOutSelect" (formula "1") (term "1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
(rule "pullOutSelect" (formula "24") (term "1,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_1"))
(rule "applyEq" (formula "25") (term "1,0,0,1,0,1") (ifseqformula "1"))
(rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=java_util_Collection_seq_1"))
(rule "applyEqReverse" (formula "26") (term "0,1,0") (ifseqformula "4"))
(rule "applyEqReverse" (formula "26") (term "0,1,1,0,1") (ifseqformula "4"))
(rule "applyEqReverse" (formula "26") (term "0,1,1,1,0,0,1") (ifseqformula "4"))
(rule "hideAuxiliaryEq" (formula "4"))
(rule "pullOutSelect" (formula "25") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_2"))
(rule "applyEq" (formula "26") (term "0,0,1,0,1") (ifseqformula "1"))
(rule "boxToDiamond" (formula "21") (term "1"))
 (builtin "One Step Simplification" (formula "21"))
(rule "notLeft" (formula "21"))
(rule "boxToDiamond" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "notLeft" (formula "13"))
(rule "nnf_imp2or" (formula "26") (term "0,1"))
(rule "nnf_notAnd" (formula "26") (term "0,0,1"))
(rule "inEqSimp_notLeq" (formula "26") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "26") (term "1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "26") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "26") (term "0,0,1,0,0,1"))
(rule "add_literals" (formula "26") (term "0,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "26") (term "0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "26") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "26") (term "0,0,0,1"))
(rule "times_zero_1" (formula "26") (term "1,0,0,0,0,0,1"))
(rule "add_literals" (formula "26") (term "0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0,1"))
(rule "mul_literals" (formula "26") (term "1,0,0,0,1"))
(rule "charLiteral_to_int" (formula "19") (term "1,1"))
(rule "add_literals" (formula "19") (term "1"))
(rule "charLiteral_to_int" (formula "12") (term "1,1"))
(rule "add_literals" (formula "12") (term "1"))
(rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_exitIfIdInvalid,savedHeapBefore_exitIfIdInvalid"))
 (builtin "One Step Simplification" (formula "21"))
(rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_exitIfIdInvalid_0,savedHeapBefore_exitIfIdInvalid_0"))
 (builtin "One Step Simplification" (formula "20"))
(rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "x"))
(rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "x_1"))
 (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore_voterIdCheck,result_1799,exc_2381,heapAfter_voterIdCheck,anon_heap_voterIdCheck") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::voterIdCheck(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (voterIdCheck)"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")) (ifInst ""  (formula "13")) (ifInst ""  (formula "29")) (ifInst ""  (formula "16")))
    (builtin "One Step Simplification" (formula "25"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "23"))
   (rule "exLeft" (formula "25") (inst "sk=i_0"))
   (rule "andLeft" (formula "25"))
   (rule "andLeft" (formula "25"))
   (rule "castedGetAny" (formula "27") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "26"))
   (rule "polySimp_mulComm0" (formula "26") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "26") (term "0"))
   (rule "inEqSimp_gtToGeq" (formula "27"))
   (rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "25"))
   (rule "assignment" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "applyEq" (formula "29") (term "0,1,0") (ifseqformula "23"))
   (rule "applyEq" (formula "24") (term "5") (ifseqformula "22"))
   (rule "applyEq" (formula "24") (term "4") (ifseqformula "23"))
   (rule "inEqSimp_sepNegMonomial0" (formula "26"))
   (rule "polySimp_mulLiterals" (formula "26") (term "0"))
   (rule "polySimp_elimOne" (formula "26") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "27"))
   (rule "polySimp_mulComm0" (formula "27") (term "1"))
   (rule "polySimp_rightDist" (formula "27") (term "1"))
   (rule "mul_literals" (formula "27") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "27") (term "1,1"))
   (rule "polySimp_elimOne" (formula "27") (term "1,1"))
   (rule "compound_assignment_1_new" (formula "29") (term "1"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "charLiteral_to_int" (formula "27") (term "1,1"))
   (rule "add_literals" (formula "27") (term "1"))
   (rule "ifUnfold" (formula "28") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_2"))
   (rule "compound_assignment_2" (formula "28") (term "1") (inst "#v=x_3"))
   (rule "variableDeclarationAssign" (formula "28") (term "1"))
   (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_3"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
   (rule "andLeft" (formula "5"))
   (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
   (rule "applyEqRigid" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "applyEqRigid" (formula "5") (term "0,0") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
    (builtin "Use Operation Contract" (formula "28") (newnames "heapBefore_voterIdCheck_0,result_1800,exc_2382,heapAfter_voterIdCheck_0,anon_heap_voterIdCheck_0") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::voterIdCheck(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (voterIdCheck)"
       (builtin "One Step Simplification" (formula "32"))
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "30"))
       (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "36")) (ifInst ""  (formula "6")) (ifInst ""  (formula "36")) (ifInst ""  (formula "9")))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "exLeft" (formula "33") (inst "sk=i_1"))
      (rule "andLeft" (formula "33"))
      (rule "andLeft" (formula "33"))
      (rule "castedGetAny" (formula "35") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "34"))
      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "34") (term "0"))
      (rule "inEqSimp_gtToGeq" (formula "35"))
      (rule "polySimp_mulComm0" (formula "35") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "33"))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "applyEq" (formula "32") (term "5") (ifseqformula "30"))
      (rule "applyEq" (formula "36") (term "0,1,0") (ifseqformula "31"))
      (rule "applyEq" (formula "32") (term "4") (ifseqformula "31"))
      (rule "inEqSimp_sepNegMonomial0" (formula "34"))
      (rule "polySimp_mulLiterals" (formula "34") (term "0"))
      (rule "polySimp_elimOne" (formula "34") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "35"))
      (rule "polySimp_mulComm0" (formula "35") (term "1"))
      (rule "polySimp_rightDist" (formula "35") (term "1"))
      (rule "mul_literals" (formula "35") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "35") (term "1,1"))
      (rule "polySimp_elimOne" (formula "35") (term "1,1"))
      (rule "compound_assignment_1_new" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "charLiteral_to_int" (formula "35") (term "1,1"))
      (rule "add_literals" (formula "35") (term "1"))
      (rule "lenNonNegative" (formula "18") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "18"))
      (rule "lenNonNegative" (formula "11") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "11"))
      (rule "seqGetAlphaCast" (formula "21") (term "0"))
      (rule "castedGetAny" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "true_left" (formula "21"))
      (rule "seqGetAlphaCast" (formula "13") (term "0"))
      (rule "castedGetAny" (formula "13") (term "0"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
      (rule "andLeft" (formula "4"))
      (rule "applyEq" (formula "5") (term "0,1,1,0,0") (ifseqformula "6"))
      (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "lenNonNegative" (formula "44") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "lenNonNegative" (formula "45") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
      (rule "andLeft" (formula "3"))
      (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "ifSplit" (formula "41"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "42"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "42"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "methodCallEmpty" (formula "41") (term "1"))
         (rule "tryEmpty" (formula "41") (term "1"))
         (rule "emptyModality" (formula "41") (term "1"))
          (builtin "One Step Simplification" (formula "41"))
         (rule "notRight" (formula "41"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "3"))
         (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "28"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
         (rule "hideAuxiliaryEq" (formula "8"))
         (rule "applyEq" (formula "30") (term "0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "8") (term "0,0") (ifseqformula "3"))
         (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "applyEq" (formula "44") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "30") (term "3") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "8") (term "2,0") (ifseqformula "9"))
         (rule "seqGetAlphaCast" (formula "33") (term "0"))
         (rule "castedGetAny" (formula "33") (term "0"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "18"))
         (rule "ifSplit" (formula "43"))
         (branch "if x_2 true"
             (builtin "One Step Simplification" (formula "44"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "true_left" (formula "1"))
            (rule "methodCallEmpty" (formula "43") (term "1"))
            (rule "tryEmpty" (formula "43") (term "1"))
            (rule "emptyModality" (formula "43") (term "1"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "notRight" (formula "43"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "applyEq" (formula "10") (term "0,0") (ifseqformula "3"))
            (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "10"))
            (rule "hideAuxiliaryEq" (formula "10"))
            (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "3"))
            (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "applyEq" (formula "45") (term "0") (ifseqformula "1"))
            (rule "applyEq" (formula "41") (term "3") (ifseqformula "1"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "1"))
            (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "41") (term "0") (ifseqformula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1") (ifseqformula "13"))
            (rule "ifthenelse_split" (formula "10") (term "0"))
            (branch " ¬ de.polyas.core3.open.cred.CredTool.polyasVals@heapAtPre_B«anonHeapFunction» = null ∧ ¬ de.polyas.core3.open.cred.CredTool.polyasVals.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
               (rule "andLeft" (formula "10"))
               (rule "notLeft" (formula "11"))
               (rule "notLeft" (formula "10"))
               (rule "referencedObjectIsCreatedRight" (formula "47") (ifseqformula "46"))
               (rule "close" (formula "47") (ifseqformula "22"))
            )
            (branch " ¬ de.polyas.core3.open.cred.CredTool.polyasVals@heapAtPre_B«anonHeapFunction» = null ∧ ¬ de.polyas.core3.open.cred.CredTool.polyasVals.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
               (rule "applyEqReverse" (formula "8") (term "0,0") (ifseqformula "10"))
               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,0,1") (ifseqformula "10"))
               (rule "applyEqReverse" (formula "51") (term "0,1,0") (ifseqformula "10"))
               (rule "applyEqReverse" (formula "51") (term "0,1,1,0,1") (ifseqformula "10"))
               (rule "hideAuxiliaryEq" (formula "10"))
               (rule "eqSymm" (formula "50") (term "0"))
               (rule "eqSymm" (formula "50") (term "1,0,1"))
               (rule "seqGetAlphaCast" (formula "44") (term "0"))
               (rule "castedGetAny" (formula "44") (term "0"))
                (builtin "One Step Simplification" (formula "44"))
               (rule "true_left" (formula "44"))
               (rule "ifthenelse_split" (formula "9") (term "0"))
               (branch " ¬ de.polyas.core3.open.cred.CredTool.polyasVals@heapAtPre_A«anonHeapFunction» = null ∧ ¬ de.polyas.core3.open.cred.CredTool.polyasVals.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
                  (rule "andLeft" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "notLeft" (formula "9"))
                  (rule "referencedObjectIsCreatedRight" (formula "45") (ifseqformula "46"))
                  (rule "close" (formula "45") (ifseqformula "13"))
               )
               (branch " ¬ de.polyas.core3.open.cred.CredTool.polyasVals@heapAtPre_A«anonHeapFunction» = null ∧ ¬ de.polyas.core3.open.cred.CredTool.polyasVals.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
                  (rule "applyEqReverse" (formula "51") (term "0,1,1,0,1") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "applyEqReverse" (formula "7") (term "0,0") (ifseqformula "9"))
                  (rule "applyEqReverse" (formula "50") (term "0,1") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "closeTrue" (formula "50"))
               )
            )
         )
      )
   )
   (branch "Exceptional Post (voterIdCheck)"
       (builtin "One Step Simplification" (formula "29"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "andLeft" (formula "29"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "30") (term "1,0") (ifseqformula "29"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "30"))
      (rule "close" (formula "33") (ifseqformula "32"))
   )
   (branch "Pre (voterIdCheck)"
       (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "32")) (ifInst ""  (formula "6")) (ifInst ""  (formula "32")) (ifInst ""  (formula "9")))
      (rule "castedGetAny" (formula "28") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "28") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "28") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "28") (term "1,1,0"))
      (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0"))
      (rule "mul_literals" (formula "28") (term "0,1,1,0"))
      (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0"))
      (rule "nnf_ex2all" (formula "28"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "charLiteral_to_int" (formula "1") (term "1,1,0"))
      (rule "lenNonNegative" (formula "19") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "19"))
      (rule "lenNonNegative" (formula "12") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "seqGetAlphaCast" (formula "22") (term "0"))
      (rule "castedGetAny" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "seqGetAlphaCast" (formula "14") (term "0"))
      (rule "castedGetAny" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
      (rule "andLeft" (formula "5"))
      (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "lenNonNegative" (formula "36") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "lenNonNegative" (formula "37") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "4") (inst "iv=iv"))
      (rule "andLeft" (formula "4"))
      (rule "applyEq" (formula "4") (term "0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "applyEq" (formula "4") (term "0,0,1,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "ifSplit" (formula "33"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "34"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "34"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "methodCallEmpty" (formula "33") (term "1"))
         (rule "tryEmpty" (formula "33") (term "1"))
         (rule "emptyModality" (formula "33") (term "1"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "notRight" (formula "33"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "eqSymm" (formula "2"))
         (rule "applyEqRigid" (formula "10") (term "0,0") (ifseqformula "3"))
         (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "applyEq" (formula "32") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "9") (term "0,0") (ifseqformula "3"))
         (rule "simplifySelectOfAnonEQ" (formula "9") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "applyEqReverse" (formula "10") (term "1,1,0") (ifseqformula "9"))
         (rule "applyEqReverse" (formula "10") (term "1,2,0") (ifseqformula "9"))
         (rule "applyEqReverse" (formula "10") (term "1,0,0,1,0,0") (ifseqformula "9"))
         (rule "applyEqReverse" (formula "10") (term "0,0,0,0,0") (ifseqformula "9"))
         (rule "hideAuxiliaryEq" (formula "9"))
         (rule "applyEq" (formula "36") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "31") (term "3") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "9") (term "2,0") (ifseqformula "10"))
         (rule "seqGetAlphaCast" (formula "34") (term "0"))
         (rule "castedGetAny" (formula "34") (term "0"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,0") (ifseqformula "19"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1") (ifseqformula "12"))
         (rule "allLeft" (formula "6") (inst "t=j_1"))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "0,0") (ifseqformula "18"))
         (rule "qeq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq1" (formula "6") (term "0") (ifseqformula "20"))
         (rule "inEqSimp_homoInEq1" (formula "6") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0"))
         (rule "leq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "6"))
         (rule "qeq_literals" (formula "21") (term "0"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "closeFalse" (formula "21"))
      )
   )
)
(branch "Exceptional Post (voterIdCheck)"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "andLeft" (formula "21"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,0") (ifseqformula "21"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "24"))
   (rule "notLeft" (formula "22"))
   (rule "close" (formula "25") (ifseqformula "24"))
)
(branch "Pre (voterIdCheck)"
    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "13")) (ifInst ""  (formula "25")) (ifInst ""  (formula "16")))
   (rule "castedGetAny" (formula "21") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "21") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0"))
   (rule "polySimp_mulComm0" (formula "21") (term "1,1,0"))
   (rule "polySimp_rightDist" (formula "21") (term "1,1,0"))
   (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0"))
   (rule "mul_literals" (formula "21") (term "0,1,1,0"))
   (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0"))
   (rule "nnf_ex2all" (formula "21"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "charLiteral_to_int" (formula "1") (term "1,1,0"))
   (rule "ifUnfold" (formula "21") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_2"))
   (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_3"))
   (rule "variableDeclarationAssign" (formula "21") (term "1"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_3"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
   (rule "andLeft" (formula "6"))
   (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
   (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "applyEqRigid" (formula "6") (term "0,0,1,0,0,1,0,0") (ifseqformula "7"))
   (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "true_left" (formula "6"))
   (rule "lenNonNegative" (formula "19") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "19"))
   (rule "lenNonNegative" (formula "12") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "12"))
   (rule "seqGetAlphaCast" (formula "22") (term "0"))
   (rule "castedGetAny" (formula "22") (term "0"))
    (builtin "One Step Simplification" (formula "22"))
   (rule "true_left" (formula "22"))
    (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_voterIdCheck_0,result_1800,exc_2382,heapAfter_voterIdCheck_0,anon_heap_voterIdCheck_0") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::voterIdCheck(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (voterIdCheck)"
       (builtin "One Step Simplification" (formula "25"))
       (builtin "One Step Simplification" (formula "24"))
       (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "30")) (ifInst ""  (formula "7")) (ifInst ""  (formula "30")) (ifInst ""  (formula "10")))
       (builtin "One Step Simplification" (formula "27"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "26"))
      (rule "exLeft" (formula "28") (inst "sk=i_0"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "28"))
      (rule "castedGetAny" (formula "30") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "29"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "29") (term "0"))
      (rule "inEqSimp_gtToGeq" (formula "30"))
      (rule "polySimp_mulComm0" (formula "30") (term "1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "28"))
      (rule "assignment" (formula "31") (term "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "26"))
      (rule "applyEq" (formula "27") (term "5") (ifseqformula "25"))
      (rule "applyEq" (formula "27") (term "4") (ifseqformula "26"))
      (rule "inEqSimp_sepNegMonomial0" (formula "29"))
      (rule "polySimp_mulLiterals" (formula "29") (term "0"))
      (rule "polySimp_elimOne" (formula "29") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "30"))
      (rule "polySimp_mulComm0" (formula "30") (term "1"))
      (rule "polySimp_rightDist" (formula "30") (term "1"))
      (rule "mul_literals" (formula "30") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
      (rule "polySimp_elimOne" (formula "30") (term "1,1"))
      (rule "compound_assignment_1_new" (formula "31") (term "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "charLiteral_to_int" (formula "30") (term "1,1"))
      (rule "add_literals" (formula "30") (term "1"))
      (rule "seqGetAlphaCast" (formula "14") (term "0"))
      (rule "castedGetAny" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
      (rule "andLeft" (formula "5"))
      (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "lenNonNegative" (formula "36") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "3") (inst "iv=iv"))
      (rule "andLeft" (formula "3"))
      (rule "applyEq" (formula "3") (term "0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEq" (formula "3") (term "0,1,1,0,0") (ifseqformula "4"))
      (rule "applyEq" (formula "3") (term "0,0,1,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "lenNonNegative" (formula "37") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "allLeft" (formula "3") (inst "t=j_0"))
      (rule "inEqSimp_commuteGeq" (formula "3") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "25"))
      (rule "qeq_literals" (formula "3") (term "0,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_contradInEq1" (formula "3") (term "1") (ifseqformula "24"))
      (rule "inEqSimp_homoInEq1" (formula "3") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,1"))
      (rule "add_literals" (formula "3") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "3") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "3") (term "0,0,1"))
      (rule "leq_literals" (formula "3") (term "0,1"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "22"))
      (rule "qeq_literals" (formula "3") (term "0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "closeFalse" (formula "3"))
   )
   (branch "Exceptional Post (voterIdCheck)"
       (builtin "One Step Simplification" (formula "25"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,0") (ifseqformula "24"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "25"))
      (rule "notLeft" (formula "25"))
      (rule "close" (formula "28") (ifseqformula "27"))
   )
   (branch "Pre (voterIdCheck)"
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")) (ifInst ""  (formula "7")) (ifInst ""  (formula "26")) (ifInst ""  (formula "10")))
      (rule "castedGetAny" (formula "23") (term "0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "23") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,1,0"))
      (rule "polySimp_rightDist" (formula "23") (term "1,1,0"))
      (rule "mul_literals" (formula "23") (term "0,1,1,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0"))
      (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0"))
      (rule "nnf_ex2all" (formula "23"))
      (rule "nnf_notAnd" (formula "1") (term "0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
      (rule "nnf_notAnd" (formula "1") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
      (rule "charLiteral_to_int" (formula "1") (term "1,1,0"))
      (rule "seqGetAlphaCast" (formula "15") (term "0"))
      (rule "castedGetAny" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
      (rule "andLeft" (formula "6"))
      (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "lenNonNegative" (formula "28") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "lenNonNegative" (formula "29") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "1"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "5") (inst "iv=iv"))
      (rule "andLeft" (formula "5"))
      (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "allLeft" (formula "4") (inst "t=j_0"))
      (rule "inEqSimp_commuteGeq" (formula "4") (term "1,0"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "1") (ifseqformula "26"))
      (rule "qeq_literals" (formula "4") (term "0,1"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "4") (term "0") (ifseqformula "23"))
      (rule "qeq_literals" (formula "4") (term "0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "25"))
      (rule "andLeft" (formula "4"))
      (rule "inEqSimp_homoInEq1" (formula "4"))
      (rule "polySimp_pullOutFactor1b" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0"))
      (rule "add_literals" (formula "4") (term "0"))
      (rule "leq_literals" (formula "4"))
      (rule "closeFalse" (formula "4"))
   )
)
)
}
