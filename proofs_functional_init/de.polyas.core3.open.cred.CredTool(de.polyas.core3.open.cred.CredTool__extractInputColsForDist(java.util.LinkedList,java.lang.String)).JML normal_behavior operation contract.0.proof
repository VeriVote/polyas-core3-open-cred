\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 10 17:02:27 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src/main";

\proofObligation "#Proof Obligation Settings
#Mon Feb 10 17:02:27 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:extractInputColsForDist(java.util.LinkedList,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:extractInputColsForDist(java.util.LinkedList,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "84007")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "cols,id,result,exc,heapAtPre,o,f") (proofscript))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "7"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0,0,0,1"))
(rule "castedGetAny" (formula "5") (term "0,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "commute_or" (formula "6"))
(rule "commute_and" (formula "5") (term "0,0"))
(rule "methodBodyExpand" (formula "16") (term "1") (newnames "heapBefore_extractInputColsForDist,savedHeapBefore_extractInputColsForDist,_colsBefore_extractInputColsForDist,_idBefore_extractInputColsForDist"))
 (builtin "One Step Simplification" (formula "16"))
(rule "variableDeclarationFinalAssign" (formula "16") (term "1"))
(rule "variableDeclarationFinal" (formula "16") (term "1") (newnames "result_1"))
 (builtin "Use Operation Contract" (formula "16") (newnames "heapBefore_ArrayList,self,exc_0,heapAfter_ArrayList,anon_heap_ArrayList") (contract "java.util.ArrayList[java.util.ArrayList::ArrayList()].JML normal_behavior operation contract.0"))
(branch "Post (ArrayList)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "9"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "9"))
   (rule "notLeft" (formula "12"))
   (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "assignment" (formula "26") (term "1"))
    (builtin "One Step Simplification" (formula "26"))
   (rule "variableDeclarationFinalAssign" (formula "26") (term "1"))
   (rule "variableDeclarationFinal" (formula "26") (term "1") (newnames "it"))
   (rule "pullOutSelect" (formula "11") (term "0,0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "17")) (ifInst ""  (formula "16")))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "11") (term "0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
   (rule "true_left" (formula "13"))
    (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_iterator,result_0,exc_1,heapAfter_iterator,anon_heap_iterator") (contract "java.util.LinkedList[java.util.Collection::iterator()].JML normal_behavior operation contract.0"))
   (branch "Post (iterator)"
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "8"))
      (rule "andLeft" (formula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,1,0") (ifseqformula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "22"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "20"))
      (rule "notLeft" (formula "19"))
      (rule "orRight" (formula "22"))
      (rule "replace_known_right" (formula "16") (term "0,0,1") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "24")) (ifInst ""  (formula "23")))
      (rule "assignment" (formula "36") (term "1"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=java_util_Iterator_index_0"))
      (rule "simplifySelectOfAnonEQ" (formula "17") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "25")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "17") (term "0,0,0") (ifseqformula "8"))
      (rule "replace_known_right" (formula "17") (term "1,0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "23")))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "17") (term "0"))
      (rule "pullOutSelect" (formula "18") (term "1") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "18") (term "0,0,0") (ifseqformula "8"))
      (rule "simplifySelectOfAnonEQ" (formula "19") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "25")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "19") (term "0,0,0") (ifseqformula "8"))
      (rule "replace_known_right" (formula "19") (term "1,0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "23")))
      (rule "hideAuxiliaryEq" (formula "19"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "18") (term "1"))
      (rule "replace_known_left" (formula "18") (term "0,0,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=java_util_Collection_seq_2"))
      (rule "simplifySelectOfAnonEQ" (formula "18") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "36")) (ifInst ""  (formula "2")))
      (rule "hideAuxiliaryEq" (formula "18"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_8" (formula "18") (term "0"))
      (rule "eqSymm" (formula "18"))
      (rule "Class_invariant_axiom_for_java_util_LinkedList" (formula "20"))
      (rule "true_left" (formula "20"))
       (builtin "Loop Invariant" (formula "35") (newnames "variant,b,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f"))
      (branch "Invariant Initially Valid"
          (builtin "One Step Simplification" (formula "35") (proofscript))
         (rule "wellFormedAnonEQ" (formula "35") (term "1") (ifseqformula "15"))
         (rule "wellFormedAnonEQ" (formula "35") (term "0,1") (ifseqformula "8"))
         (rule "replaceKnownSelect_taclet00_4" (formula "35") (term "1,1,0,0"))
         (rule "replaceKnownSelect_taclet00_5" (formula "35") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "14")))
         (rule "castedGetAny" (formula "35") (term "0,0,1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "35") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1"))
         (rule "pullOutSelect" (formula "35") (term "0,0,0,1,0,1") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "applyEq" (formula "36") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
         (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "9"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
         (rule "applyEqReverse" (formula "36") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "36") (term "0,0,0,1,0,1") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "applyEq" (formula "35") (term "1,1,1,0,0,1") (ifseqformula "11"))
         (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
         (rule "nnf_imp2or" (formula "5") (term "0"))
         (rule "nnf_imp2or" (formula "35") (term "0,1"))
         (rule "nnf_notAnd" (formula "5") (term "0,0"))
         (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,0"))
         (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
         (rule "nnf_notAnd" (formula "35") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "35") (term "1,0,0,1"))
         (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0,1"))
         (rule "add_literals" (formula "35") (term "0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "35") (term "0,1,0,0,1"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "35"))
         (rule "replaceKnownSelect_taclet00_2" (formula "35") (term "0,1"))
         (rule "replaceKnownSelect_taclet00_2" (formula "35") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "35") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "35") (term "1,0"))
         (rule "replaceKnownSelect_taclet00_5" (formula "35") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "35") (term "0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "35") (term "1"))
         (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "17"))
         (rule "qeq_literals" (formula "35") (term "0"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "inEqSimp_geqRight" (formula "35"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "19"))
         (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "commute_or" (formula "6") (term "0,0"))
         (rule "commute_or_2" (formula "6") (term "0"))
         (rule "cut_direct" (formula "7") (term "0"))
         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) TRUE"
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "33") (term "0") (ifseqformula "7"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
            (rule "andLeft" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "lenNonNegative" (formula "12") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "lenNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) FALSE"
             (builtin "One Step Simplification" (formula "7"))
            (rule "applyEq" (formula "22") (term "0") (ifseqformula "7"))
            (rule "applyEq" (formula "34") (term "0") (ifseqformula "7"))
            (rule "lenNonNegative" (formula "12") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "applyEq" (formula "12") (term "0") (ifseqformula "13"))
            (rule "qeq_literals" (formula "12"))
            (rule "true_left" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
            (rule "andLeft" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,0,0") (ifseqformula "21"))
            (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "lenNonNegative" (formula "1") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
            (rule "qeq_literals" (formula "1") (term "0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "Body Preserves Invariant"
          (builtin "One Step Simplification" (formula "22"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "andLeft" (formula "22"))
         (rule "impRight" (formula "38"))
         (rule "andLeft" (formula "23"))
         (rule "eqSymm" (formula "40") (term "1,0,0,1,0,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "40") (term "0,1,1,1,0,1"))
         (rule "polySimp_elimSub" (formula "40") (term "0,1,1,1,0"))
         (rule "polySimp_addComm0" (formula "40") (term "0,1,1,1,0,1"))
         (rule "polySimp_addComm0" (formula "40") (term "0,1,1,1,0"))
         (rule "castedGetAny" (formula "25") (term "0,0,1,0"))
         (rule "castedGetAny" (formula "40") (term "0,0,1,0,1,0,0,1,1,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "40") (term "0,0,0,1,0,0,1,1,0,1"))
         (rule "pullOutSelect" (formula "40") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")))
         (rule "replaceKnownSelect_taclet100_9" (formula "25") (term "1"))
         (rule "replaceKnownSelect_taclet00_4" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "10"))
         (rule "simplifySelectOfAnon" (formula "25"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "29")))
         (rule "replaceKnownSelect_taclet00_5" (formula "25") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "25") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0,0") (ifseqformula "17"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,1,0,0") (ifseqformula "10"))
         (rule "replace_known_left" (formula "25") (term "1,0,1,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
         (rule "replace_known_left" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "polySimp_addComm0" (formula "41") (term "0,1,1,1,0"))
         (rule "pullOutSelect" (formula "41") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Iterator_index_1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
         (rule "replaceKnownSelect_taclet00_2" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "1") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "11"))
         (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "19")))
         (rule "polySimp_addComm0" (formula "42") (term "0,1,1,1,0"))
         (rule "variableDeclarationAssign" (formula "3") (term "1"))
         (rule "variableDeclarationAssign" (formula "42") (term "1"))
         (rule "variableDeclaration" (formula "3") (term "1") (newnames "b_1"))
         (rule "variableDeclaration" (formula "42") (term "1") (newnames "exc_2"))
         (rule "assignment" (formula "42") (term "1"))
          (builtin "One Step Simplification" (formula "42"))
         (rule "variableDeclaration" (formula "42") (term "1") (newnames "thrownExc"))
         (rule "blockThrow" (formula "42") (term "1,0,0,1"))
         (rule "elementOfUnion" (formula "26") (term "0,0"))
         (rule "elementOfSingleton" (formula "26") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "elementOfSingleton" (formula "26") (term "0,0"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "hideAuxiliaryEq" (formula "26"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "2") (term "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "41") (term "0,1,0,1,1,1,0,0"))
         (rule "eqSymm" (formula "2") (term "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "40") (term "0,0,0,1,1,1,0,0"))
         (rule "elementOfUnion" (formula "40") (term "0,0,0,0,1,0,1,1,0,1"))
         (rule "elementOfSingleton" (formula "40") (term "0,0,0,0,0,1,0,1,1,0,1"))
         (rule "elementOfSingleton" (formula "40") (term "1,0,0,0,0,1,0,1,1,0,1"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
         (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
         (rule "true_left" (formula "1"))
         (rule "pullOutSelect" (formula "24") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_4"))
         (rule "simplifySelectOfAnon" (formula "24"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "16"))
         (rule "replaceKnownSelect_taclet100_14" (formula "25") (term "0,0,0,1,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,1,0,0") (ifseqformula "9"))
         (rule "replace_known_left" (formula "24") (term "1,0,0,1,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")))
         (rule "elementOfUnion" (formula "24") (term "0,0"))
         (rule "elementOfSingleton" (formula "24") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "elementOfSingleton" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "hideAuxiliaryEq" (formula "24"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_15" (formula "24") (term "0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_15" (formula "24") (term "0,0,0,1,0"))
         (rule "boxToDiamond" (formula "1") (term "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "22"))
         (rule "replaceKnownSelect_taclet100_11" (formula "22") (term "0,1"))
         (rule "replaceKnownSelect_taclet100_11" (formula "22") (term "1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "22") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "22") (term "1,0"))
         (rule "replaceKnownSelect_taclet100_10" (formula "22") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "22") (term "0,1,1"))
         (rule "andLeft" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "23"))
         (rule "commute_and" (formula "24") (term "0,0"))
         (rule "lenNonNegative" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "lenNonNegative" (formula "12") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "12"))
         (rule "ifUnfold" (formula "42") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "42") (term "1") (newnames "x"))
          (builtin "Use Operation Contract" (formula "27") (newnames "heapBefore_hasNext,result_2,exc_3") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "28"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "replaceKnownSelect_taclet100_11" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet100_10" (formula "27") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "27") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "assignment" (formula "30") (term "1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "29"))
            (rule "replaceKnownSelect_taclet100_11" (formula "29") (term "1,0"))
            (rule "replaceKnownSelect_taclet100_11" (formula "29") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "29") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "29") (term "0,1"))
            (rule "replaceKnownSelect_taclet100_10" (formula "29") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "29") (term "0,1,1"))
            (rule "andLeft" (formula "29"))
            (rule "inEqSimp_commuteLeq" (formula "30"))
            (rule "inEqSimp_commuteLeq" (formula "29"))
            (rule "methodCallEmpty" (formula "29") (term "1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "emptyModality" (formula "29") (term "1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "notRight" (formula "29"))
            (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
            (rule "andLeft" (formula "21"))
            (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
            (rule "commute_and" (formula "22") (term "0,0"))
             (builtin "Use Operation Contract" (formula "46") (newnames "heapBefore_hasNext_0,result_3,exc_4") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
            (branch "Post (hasNext)"
                (builtin "One Step Simplification" (formula "32"))
               (rule "replaceKnownSelect_taclet100_11" (formula "32") (term "0,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "32") (term "0,1,0,0,1"))
               (rule "replaceKnownSelect_taclet100_10" (formula "32") (term "0,1,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "32") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "33"))
               (rule "andLeft" (formula "33"))
               (rule "replace_known_left" (formula "33") (term "1") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "assignment" (formula "49") (term "1"))
                (builtin "One Step Simplification" (formula "49"))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "34"))
               (rule "replaceKnownSelect_taclet100_11" (formula "34") (term "1,0"))
               (rule "replaceKnownSelect_taclet100_11" (formula "34") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "34") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "34") (term "0,1"))
               (rule "replaceKnownSelect_taclet100_10" (formula "34") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "34") (term "0,1,1"))
               (rule "andLeft" (formula "34"))
               (rule "inEqSimp_commuteLeq" (formula "34"))
               (rule "inEqSimp_commuteLeq" (formula "34"))
               (rule "lenNonNegative" (formula "28") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "28"))
               (rule "lenNonNegative" (formula "30") (term "1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "30"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "0,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "2"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1") (ifseqformula "3"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifSplit" (formula "56"))
               (branch "if x true"
                   (builtin "One Step Simplification" (formula "57"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "56") (term "1"))
                  (rule "variableDeclaration" (formula "56") (term "1") (newnames "next"))
                  (rule "compound_reference_cast_expression" (formula "56") (term "1") (inst "#v=o"))
                  (rule "variableDeclarationAssign" (formula "56") (term "1"))
                  (rule "variableDeclaration" (formula "56") (term "1") (newnames "o"))
                   (builtin "Use Operation Contract" (formula "56") (newnames "heapBefore_next,result_4,exc_5,heapAfter_next,anon_heap_next") (contract "java.util.Iterator[java.util.Iterator::next()].JML normal_behavior operation contract.0"))
                  (branch "Post (next)"
                      (builtin "One Step Simplification" (formula "43"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "1,0,1,1,0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "1,0,1,1,0,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                     (rule "andLeft" (formula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,1,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,1,0") (ifseqformula "24"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,1,0") (ifseqformula "16"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "46"))
                     (rule "andLeft" (formula "46"))
                     (rule "andLeft" (formula "47"))
                     (rule "andLeft" (formula "48"))
                     (rule "andLeft" (formula "49"))
                     (rule "andLeft" (formula "50"))
                     (rule "eqSymm" (formula "46") (term "1"))
                     (rule "eqSymm" (formula "49") (term "0"))
                     (rule "eqSymm" (formula "50") (term "0"))
                     (rule "polySimp_addComm0" (formula "48") (term "1,1"))
                     (rule "castedGetAny" (formula "46") (term "0,1"))
                     (rule "assignment" (formula "66") (term "1"))
                      (builtin "One Step Simplification" (formula "66"))
                     (rule "pullOutSelect" (formula "46") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "55")))
                     (rule "replaceKnownSelect_taclet100_10" (formula "46") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "46") (term "2,0"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "51") (term "0,0,0"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "47") (term "0,0,1"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "49") (term "0,1,0"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "50") (term "0,0,0"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "48") (term "0,1,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,1,0,0") (ifseqformula "24"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,0,1,0,0") (ifseqformula "16"))
                     (rule "replace_known_left" (formula "46") (term "1,0,0,1,0,0") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "53")) (ifInst ""  (formula "54")))
                     (rule "elementOfSingleton" (formula "46") (term "0,0"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "hideAuxiliaryEq" (formula "46"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "48") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "47") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "46") (term "0,1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "46") (term "0,0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "50") (term "0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "49") (term "0,0,0"))
                     (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "notLeft" (formula "47"))
                     (rule "replace_known_left" (formula "47") (term "0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "39"))
                      (builtin "One Step Simplification" (formula "46"))
                     (rule "replace_known_right" (formula "45") (term "0") (ifseqformula "51"))
                      (builtin "One Step Simplification" (formula "45"))
                     (rule "replace_known_right" (formula "48") (term "1") (ifseqformula "51"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "notLeft" (formula "48"))
                     (rule "replace_known_right" (formula "48") (term "0") (ifseqformula "50"))
                      (builtin "One Step Simplification" (formula "48"))
                     (rule "true_left" (formula "48"))
                     (rule "pullOutSelect" (formula "47") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                     (rule "simplifySelectOfAnonEQ" (formula "47") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "54")))
                     (rule "replaceKnownSelect_taclet100_11" (formula "47") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "47") (term "2,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,1,0,0") (ifseqformula "24"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "47") (term "0,0,0,1,0,0") (ifseqformula "16"))
                     (rule "replace_known_right" (formula "47") (term "0,0,0,0,1,0,0") (ifseqformula "52"))
                      (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "53")) (ifInst ""  (formula "25")))
                     (rule "elementOfSingleton" (formula "47") (term "0,0"))
                      (builtin "One Step Simplification" (formula "47"))
                     (rule "hideAuxiliaryEq" (formula "47"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "47") (term "0"))
                     (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "48"))
                     (rule "replaceKnownSelect_taclet0000100_18" (formula "48") (term "0,1"))
                     (rule "replaceKnownSelect_taclet0000100_18" (formula "48") (term "1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "48") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "48") (term "1,0"))
                     (rule "replaceKnownSelect_taclet0000100_16" (formula "48") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "48") (term "0,1,1"))
                     (rule "andLeft" (formula "48"))
                     (rule "inEqSimp_commuteLeq" (formula "48"))
                     (rule "inEqSimp_commuteLeq" (formula "49"))
                     (rule "commute_or_2" (formula "45") (term "0"))
                     (rule "reference_type_cast" (formula "66") (term "1"))
                     (branch "Normal Execution (o instanceof String)"
                         (builtin "One Step Simplification" (formula "67"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                        (rule "ifUnfold" (formula "67") (term "1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "x_1"))
                        (rule "compound_assignment_2" (formula "67") (term "1") (inst "#v=x_2"))
                        (rule "variableDeclarationAssign" (formula "67") (term "1"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "x_2"))
                         (builtin "Use Operation Contract" (formula "67") (newnames "heapBefore_equals,result_5,exc_6,heapAfter_equals,anon_heap_equals") (contract "java.lang.String[java.lang.String::equals(java.lang.Object)].stringEqualsNormal.0"))
                        (branch "Post (equals)"
                            (builtin "One Step Simplification" (formula "69"))
                            (builtin "One Step Simplification" (formula "52"))
                           (rule "castDel" (formula "52") (term "0,1,1,1,0,1,1"))
                           (rule "andLeft" (formula "52"))
                           (rule "andLeft" (formula "53"))
                           (rule "andLeft" (formula "54"))
                           (rule "eqSymm" (formula "54") (term "1,1"))
                           (rule "assignment" (formula "71") (term "1"))
                            (builtin "One Step Simplification" (formula "71"))
                           (rule "compound_assignment_1_new" (formula "71") (term "1"))
                            (builtin "One Step Simplification" (formula "71"))
                           (rule "seqGetAlphaCast" (formula "47") (term "0"))
                           (rule "castedGetAny" (formula "47") (term "0"))
                            (builtin "One Step Simplification" (formula "47"))
                           (rule "true_left" (formula "47"))
                           (rule "ifSplit" (formula "71"))
                           (branch "if x_1 true"
                               (builtin "One Step Simplification" (formula "72"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "replace_known_right" (formula "54") (term "0") (ifseqformula "55"))
                               (builtin "One Step Simplification" (formula "54"))
                              (rule "notLeft" (formula "54"))
                               (builtin "Use Operation Contract" (formula "72") (newnames "heapBefore_add,result_6,exc_7,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
                              (branch "Post (add)"
                                  (builtin "One Step Simplification" (formula "74"))
                                  (builtin "One Step Simplification" (formula "55"))
                                 (rule "andLeft" (formula "55"))
                                 (rule "andLeft" (formula "56"))
                                 (rule "andLeft" (formula "57"))
                                 (rule "andLeft" (formula "57"))
                                 (rule "eqSymm" (formula "57"))
                                 (rule "pullOutSelect" (formula "57") (term "1") (inst "selectSK=java_util_Collection_seq_5"))
                                 (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "55"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "68")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,1,0,0") (ifseqformula "52"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,1,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "57") (term "1,0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "67")))
                                 (rule "elementOfSingleton" (formula "57") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "hideAuxiliaryEq" (formula "57"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "57") (term "1"))
                                 (rule "pullOutSelect" (formula "57") (term "0,0") (inst "selectSK=java_util_Collection_seq_6"))
                                 (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "52"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "68")))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,0,0,0") (ifseqformula "17"))
                                 (rule "eqSymm" (formula "58"))
                                 (rule "replace_known_right" (formula "57") (term "0,0,0,0,0,0,0") (ifseqformula "67"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "18")))
                                 (rule "simplifySelectOfAnonEQ" (formula "57") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "68")))
                                 (rule "replaceKnownSelect_taclet100_14" (formula "57") (term "2,0"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet100_15" (formula "57") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,1,0,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "57") (term "0,0,0,1,0,0") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "57") (term "1,0,0,0,1,0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "67")))
                                 (rule "elementOfSingleton" (formula "57") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "hideAuxiliaryEq" (formula "57"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00000000100_24" (formula "57") (term "0,1"))
                                 (rule "eqSeqConcat" (formula "57"))
                                  (builtin "One Step Simplification" (formula "57"))
                                 (rule "andLeft" (formula "57"))
                                 (rule "andLeft" (formula "57"))
                                 (rule "polySimp_addComm0" (formula "57") (term "1"))
                                 (rule "eqSeqSingleton" (formula "59"))
                                 (rule "andLeft" (formula "59"))
                                 (rule "lenOfSeqSub" (formula "59") (term "0"))
                                 (rule "polySimp_elimSub" (formula "59") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "59") (term "1,0"))
                                 (rule "ifEqualsInteger" (formula "59"))
                                 (rule "equal_literals" (formula "59") (term "1,1"))
                                  (builtin "One Step Simplification" (formula "59"))
                                 (rule "andLeft" (formula "59"))
                                 (rule "getOfSeqSub" (formula "61") (term "0"))
                                 (rule "castDel" (formula "61") (term "2,0"))
                                 (rule "leq_literals" (formula "61") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "61"))
                                 (rule "add_zero_left" (formula "61") (term "1,1,0"))
                                 (rule "polySimp_elimSub" (formula "61") (term "1,0,0"))
                                 (rule "polySimp_addComm0" (formula "61") (term "1,0,0"))
                                 (rule "getOfSeqSubEQ" (formula "38") (term "0,0,1,0") (ifseqformula "58"))
                                 (rule "add_zero_right" (formula "38") (term "1,1,0,0,1,0"))
                                 (rule "polySimp_elimSub" (formula "38") (term "1,1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                 (rule "add_zero_right" (formula "38") (term "1,1,0,0,0,1,0"))
                                 (rule "ifEqualsNull" (formula "38") (term "0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,0,1,0"))
                                 (rule "inEqSimp_commuteLeq" (formula "38") (term "0,0,0,1,0,1,0"))
                                 (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "62"))
                                 (rule "true_left" (formula "62"))
                                 (rule "tryEmpty" (formula "80") (term "1"))
                                 (rule "commute_and_2" (formula "38") (term "0,0,1,0"))
                                 (rule "commute_and" (formula "38") (term "0,0,0,1,0"))
                                 (rule "commute_and_2" (formula "38") (term "0,0,1,0"))
                                 (rule "methodCallEmpty" (formula "80") (term "1"))
                                 (rule "emptyModality" (formula "80") (term "1"))
                                  (builtin "One Step Simplification" (formula "80"))
                                 (rule "andRight" (formula "80") (proofscript))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "80"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "80"))
                                       (branch
                                          (rule "andRight" (formula "80"))
                                          (branch
                                             (rule "andRight" (formula "62"))
                                             (branch
                                                (rule "notRight" (formula "62"))
                                                (rule "polySimp_homoEq" (formula "61"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "61") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "61") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0"))
                                                (rule "add_zero_right" (formula "62") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "62") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "62") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "60"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "60") (term "0"))
                                                (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "60"))
                                                 (builtin "One Step Simplification" (formula "62"))
                                                (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "41"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "62") (term "1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "63") (term "0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "30"))
                                                (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "applyEq" (formula "34") (term "0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "47") (term "0") (ifseqformula "46"))
                                                (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "57") (term "0,1,0") (ifseqformula "55"))
                                                (rule "polySimp_pullOutFactor1" (formula "57") (term "0"))
                                                (rule "add_literals" (formula "57") (term "1,0"))
                                                (rule "times_zero_1" (formula "57") (term "0"))
                                                (rule "leq_literals" (formula "57"))
                                                (rule "true_left" (formula "57"))
                                                (rule "applyEq" (formula "48") (term "1") (ifseqformula "46"))
                                                (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "applyEq" (formula "56") (term "0,1,0") (ifseqformula "54"))
                                                (rule "polySimp_pullOutFactor1" (formula "56") (term "0"))
                                                (rule "add_literals" (formula "56") (term "1,0"))
                                                (rule "times_zero_1" (formula "56") (term "0"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                (rule "mul_literals" (formula "45") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "46"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                                (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                                (rule "add_literals" (formula "57") (term "0,0"))
                                                (rule "leq_literals" (formula "57") (term "0"))
                                                 (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "46"))
                                                (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0"))
                                                (rule "qeq_literals" (formula "33") (term "0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "44") (term "0"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "nnf_imp2or" (formula "34") (term "0"))
                                                (rule "nnf_imp2or" (formula "12") (term "0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                                (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                                                (rule "nnf_notOr" (formula "34") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                                (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "34") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "1,0,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "34") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "1,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "34") (term "1,1,0"))
                                                 (builtin "One Step Simplification" (formula "34"))
                                                (rule "nnf_notAnd" (formula "34") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "34") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "34") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "34") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,1,0"))
                                                (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "70"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "1"))
                                                (rule "pullOutSelect" (formula "70") (term "0,0") (inst "selectSK=java_util_Iterator_index_3"))
                                                (rule "applyEq" (formula "71") (term "1,1") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "27")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "replaceKnownSelect_taclet0000100_18" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "27"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "58")))
                                                (rule "applyEqReverse" (formula "71") (term "1,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "70") (term "1,1") (ifseqformula "43"))
                                                (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "43"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "70") (term "0"))
                                                (rule "mul_literals" (formula "70") (term "1,0"))
                                                (rule "inEqSimp_subsumption1" (formula "70") (term "0") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "70") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "inEqSimp_geqRight" (formula "70"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "48"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "27"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "20"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "59")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                                (rule "replaceKnownSelect_taclet0000100_16" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "41"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "27"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "20"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "59"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "28")))
                                                (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "29"))
                                                (rule "inEqSimp_contradInEq0" (formula "45") (ifseqformula "1"))
                                                (rule "andLeft" (formula "45"))
                                                (rule "inEqSimp_homoInEq1" (formula "45"))
                                                (rule "polySimp_pullOutFactor1b" (formula "45") (term "0"))
                                                (rule "add_literals" (formula "45") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "45") (term "1,0"))
                                                (rule "add_literals" (formula "45") (term "0"))
                                                (rule "leq_literals" (formula "45"))
                                                (rule "closeFalse" (formula "45"))
                                             )
                                             (branch
                                                (rule "polySimp_homoEq" (formula "60"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "60") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "60") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0"))
                                                (rule "add_zero_right" (formula "61") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "61") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "40"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "59"))
                                                (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "59") (term "0"))
                                                (rule "replace_known_left" (formula "61") (term "0,0") (ifseqformula "59"))
                                                 (builtin "One Step Simplification" (formula "61"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "applyEq" (formula "49") (term "1") (ifseqformula "47"))
                                                (rule "applyEq" (formula "39") (term "0,1,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "56"))
                                                (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                                (rule "add_literals" (formula "59") (term "1,0"))
                                                (rule "times_zero_1" (formula "59") (term "0"))
                                                 (builtin "One Step Simplification" (formula "59"))
                                                (rule "true_left" (formula "59"))
                                                (rule "applyEq" (formula "62") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "49") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "applyEq" (formula "47") (term "0") (ifseqformula "46"))
                                                (rule "applyEq" (formula "57") (term "0,1,0") (ifseqformula "55"))
                                                (rule "polySimp_pullOutFactor1" (formula "57") (term "0"))
                                                (rule "add_literals" (formula "57") (term "1,0"))
                                                (rule "times_zero_1" (formula "57") (term "0"))
                                                (rule "leq_literals" (formula "57"))
                                                (rule "true_left" (formula "57"))
                                                (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "27"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                                (rule "mul_literals" (formula "44") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "45"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                                (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                                (rule "add_literals" (formula "57") (term "0,0"))
                                                (rule "leq_literals" (formula "57") (term "0"))
                                                 (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                                                (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "32") (term "0,0"))
                                                (rule "qeq_literals" (formula "32") (term "0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "53") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1"))
                                                (rule "nnf_imp2or" (formula "11") (term "0"))
                                                (rule "nnf_imp2or" (formula "33") (term "0"))
                                                (rule "nnf_imp2or" (formula "53") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                                (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                                (rule "nnf_notOr" (formula "33") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                                (rule "mul_literals" (formula "33") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "53") (term "0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "53") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "53") (term "1,0,0,0,0,0,1"))
                                                (rule "add_zero_right" (formula "53") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "53") (term "1,0,0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "53") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "53") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "53") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "53") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "53") (term "1,1,0,0,1"))
                                                (rule "nnf_notAnd" (formula "33") (term "1,1,0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "33") (term "1,0,1,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "33") (term "1,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "33") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "33") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "33") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "33") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "33") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "33") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "33") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,1,0"))
                                                (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "70"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "1"))
                                                (rule "pullOutSelect" (formula "70") (term "0,0") (inst "selectSK=java_util_Iterator_index_3"))
                                                (rule "applyEq" (formula "71") (term "1,1") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "46"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "26"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "58")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "replaceKnownSelect_taclet0000100_18" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "58"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "26")))
                                                (rule "applyEqReverse" (formula "71") (term "1,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "70") (term "1,1") (ifseqformula "42"))
                                                (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "42"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "70") (term "0"))
                                                (rule "mul_literals" (formula "70") (term "1,0"))
                                                (rule "inEqSimp_subsumption1" (formula "70") (term "0") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "70") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "inEqSimp_geqRight" (formula "70"))
                                                (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                (rule "pullOutSelect" (formula "1") (term "0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,1,0,0") (ifseqformula "59"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "27")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "60")))
                                                (rule "replaceKnownSelect_taclet0000100_16" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")) (ifInst ""  (formula "27")))
                                                (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "28"))
                                                (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "44"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq1" (formula "1"))
                                                (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                (rule "add_literals" (formula "1") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "1") (term "1,0"))
                                                (rule "add_literals" (formula "1") (term "0"))
                                                (rule "leq_literals" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                          )
                                          (branch
                                             (rule "andRight" (formula "62"))
                                             (branch
                                                (rule "notRight" (formula "62"))
                                                (rule "polySimp_homoEq" (formula "61"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "61") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "61") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "61") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0"))
                                                (rule "add_zero_right" (formula "62") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "62") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "62") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "62") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "60"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "60") (term "0"))
                                                (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "60"))
                                                 (builtin "One Step Simplification" (formula "62"))
                                                (rule "inEqSimp_ltToLeq" (formula "41"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "41") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "applyEq" (formula "41") (term "0,0,1,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "62") (term "1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                                (rule "qeq_literals" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                                                (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "57") (term "0,1,0") (ifseqformula "54"))
                                                (rule "polySimp_pullOutFactor1" (formula "57") (term "0"))
                                                (rule "add_literals" (formula "57") (term "1,0"))
                                                (rule "times_zero_1" (formula "57") (term "0"))
                                                 (builtin "One Step Simplification" (formula "57"))
                                                (rule "true_left" (formula "57"))
                                                (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "46") (term "0") (ifseqformula "45"))
                                                (rule "applyEq" (formula "56") (term "0,1,0") (ifseqformula "54"))
                                                (rule "polySimp_pullOutFactor1" (formula "56") (term "0"))
                                                (rule "add_literals" (formula "56") (term "1,0"))
                                                (rule "times_zero_1" (formula "56") (term "0"))
                                                (rule "leq_literals" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "applyEq" (formula "44") (term "0,0") (ifseqformula "28"))
                                                (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "28"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                (rule "mul_literals" (formula "45") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "46"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                                (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                                (rule "add_literals" (formula "57") (term "0,0"))
                                                (rule "leq_literals" (formula "57") (term "0"))
                                                 (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "46"))
                                                (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                                (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "33") (term "0,0"))
                                                (rule "qeq_literals" (formula "33") (term "0"))
                                                 (builtin "One Step Simplification" (formula "33"))
                                                (rule "true_left" (formula "33"))
                                                (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "32"))
                                                (rule "leq_literals" (formula "44") (term "0"))
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "true_left" (formula "44"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "70") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "70") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "70") (term "1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0,0,1"))
                                                (rule "mul_literals" (formula "70") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "70") (term "1,1,1,0,0,1"))
                                                (rule "pullOutSelect" (formula "70") (term "0,1,1,0,1") (inst "selectSK=java_util_Collection_seq_7"))
                                                (rule "applyEq" (formula "71") (term "0,1,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "1") (term "0,0"))
                                                (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "61"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "replaceKnownSelect_taclet100_9" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,0,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "70") (term "0,1,1,0,1") (ifseqformula "28"))
                                                (rule "applyEq" (formula "70") (term "0,1,0") (ifseqformula "28"))
                                                (rule "pullOutSelect" (formula "70") (term "0,0,1,0,1") (inst "selectSK=java_util_Iterator_seq_1"))
                                                (rule "applyEq" (formula "71") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "71") (term "0,0,0") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                                (rule "eqSymm" (formula "71") (term "1,0,1"))
                                                (rule "eqSymm" (formula "71") (term "0"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,1,0,0") (ifseqformula "58"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "27")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "replaceKnownSelect_taclet0000100_16" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "27")))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,0,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "eqSymm" (formula "70") (term "1,0,1"))
                                                (rule "eqSymm" (formula "70") (term "0"))
                                                (rule "applyEq" (formula "70") (term "0,1,1,1,0,0,1") (ifseqformula "28"))
                                                (rule "applyEq" (formula "70") (term "0,0,1,0,1") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "applyEq" (formula "70") (term "0,0") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "closeTrue" (formula "70"))
                                             )
                                             (branch
                                                (rule "polySimp_homoEq" (formula "60"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "60") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "60") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "60") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "60") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "40"))
                                                (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "40") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0"))
                                                (rule "add_zero_right" (formula "61") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "61") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "59"))
                                                (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "59") (term "0"))
                                                (rule "replace_known_left" (formula "61") (term "0,0") (ifseqformula "59"))
                                                 (builtin "One Step Simplification" (formula "61"))
                                                (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                                (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                                (rule "qeq_literals" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "applyEq" (formula "49") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "62") (term "0,0") (ifseqformula "29"))
                                                (rule "applyEq" (formula "47") (term "0") (ifseqformula "46"))
                                                (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "28"))
                                                (rule "true_left" (formula "28"))
                                                (rule "applyEq" (formula "37") (term "0,1,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "56") (term "0,1,0") (ifseqformula "54"))
                                                (rule "polySimp_pullOutFactor1" (formula "56") (term "0"))
                                                (rule "add_literals" (formula "56") (term "1,0"))
                                                (rule "times_zero_1" (formula "56") (term "0"))
                                                (rule "leq_literals" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "applyEq" (formula "56") (term "0,1,0") (ifseqformula "54"))
                                                (rule "polySimp_pullOutFactor1" (formula "56") (term "0"))
                                                (rule "add_literals" (formula "56") (term "1,0"))
                                                (rule "times_zero_1" (formula "56") (term "0"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "applyEq" (formula "33") (term "0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                                 (builtin "One Step Simplification" (formula "27"))
                                                (rule "true_left" (formula "27"))
                                                (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "46") (term "1") (ifseqformula "44"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                                (rule "mul_literals" (formula "45") (term "1"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "0"))
                                                (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "45"))
                                                (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                                (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                                (rule "add_literals" (formula "57") (term "0,0"))
                                                (rule "leq_literals" (formula "57") (term "0"))
                                                 (builtin "One Step Simplification" (formula "57"))
                                                (rule "false_right" (formula "57"))
                                                (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                                                (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                                (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                                (rule "add_literals" (formula "32") (term "0,0"))
                                                (rule "qeq_literals" (formula "32") (term "0"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                                                (rule "leq_literals" (formula "43") (term "0"))
                                                 (builtin "One Step Simplification" (formula "43"))
                                                (rule "true_left" (formula "43"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "53") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "70") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "70") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "70") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "70") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "70") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "70") (term "1,1,0,0,1"))
                                                (rule "mul_literals" (formula "70") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "70") (term "1,1,1,0,0,1"))
                                                (rule "pullOutSelect" (formula "70") (term "0,0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                                                (rule "applyEq" (formula "71") (term "0,0,1,0,1") (ifseqformula "1"))
                                                (rule "applyEq" (formula "71") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "46"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "eqSymm" (formula "71") (term "0"))
                                                (rule "eqSymm" (formula "71") (term "1,0,1"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "26")))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                                (rule "replaceKnownSelect_taclet0000100_16" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "26")))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,0,1") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "applyEq" (formula "70") (term "0,1,1,1,0,0,1") (ifseqformula "27"))
                                                (rule "applyEq" (formula "70") (term "0,1,0") (ifseqformula "27"))
                                                (rule "applyEq" (formula "70") (term "0,1,1,0,1") (ifseqformula "27"))
                                                (rule "pullOutSelect" (formula "70") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_7"))
                                                (rule "applyEq" (formula "71") (term "0,0,1,0,1") (ifseqformula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "46"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "eqSymm" (formula "71") (term "0"))
                                                (rule "eqSymm" (formula "71") (term "1,0,1"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "eqSymm" (formula "1") (term "0,0"))
                                                (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "70"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "18"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                                (rule "replaceKnownSelect_taclet100_9" (formula "1") (term "2,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "1") (term "2,0"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "25"))
                                                (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "18"))
                                                (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "71") (term "0,1,1,0,1") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "eqSymm" (formula "70") (term "0"))
                                                (rule "eqSymm" (formula "70") (term "1,0,1"))
                                                (rule "applyEq" (formula "70") (term "0,0,0") (ifseqformula "27"))
                                                 (builtin "One Step Simplification" (formula "70"))
                                                (rule "allRight" (formula "70") (inst "sk=iv_0"))
                                                (rule "impRight" (formula "70"))
                                                (rule "andLeft" (formula "1"))
                                                (rule "inEqSimp_homoInEq0" (formula "2"))
                                                (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                (rule "applyEq" (formula "72") (term "0,0") (ifseqformula "29"))
                                                 (builtin "One Step Simplification" (formula "72"))
                                                (rule "closeTrue" (formula "72"))
                                             )
                                          )
                                       )
                                       (branch "Case 2"
                                          (rule "andRight" (formula "62"))
                                          (branch
                                             (rule "allRight" (formula "80") (inst "sk=i_0") (proofscript))
                                             (rule "impRight" (formula "80") (proofscript))
                                             (rule "cut" (inst "cutFormula=  seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>,
                     self,
                     java.util.Collection::$seq))
= i_0") (proofscript))
                                             (branch "CUT: seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0 TRUE"
                                                (rule "ifthenelse_split" (formula "63") (term "0") (proofscript))
                                                (branch "lt(Z(0(#)), add(mul(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), Z(neglit(1(#)))), seqLen(Seq::select(anon_heap_add<<anonHeapFunction>>, self, java.util.Collection::$seq)))) TRUE"
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "83") (term "0,0,0") (proofscript))
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "2") (term "0,1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "83") (term "0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "2") (term "0,1,1"))
                                                   (rule "notRight" (formula "65"))
                                                   (rule "notRight" (formula "83"))
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "polySimp_homoEq" (formula "65"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "65") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "65") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "66"))
                                                   (rule "add_zero_right" (formula "66") (term "0"))
                                                   (rule "polySimp_rightDist" (formula "66") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "66") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "66") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "66") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "66") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "66") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "64"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "64") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "45") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "62"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                                   (rule "mul_literals" (formula "5") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                                   (rule "add_literals" (formula "5") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "5") (term "0,0"))
                                                   (rule "applyEq" (formula "41") (term "0,0") (ifseqformula "35"))
                                                   (rule "applyEq" (formula "45") (term "0,0,1,0") (ifseqformula "35"))
                                                   (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "applyEq" (formula "53") (term "0") (ifseqformula "52"))
                                                   (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "33"))
                                                   (rule "true_left" (formula "33"))
                                                   (rule "applyEq" (formula "40") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "63") (term "1") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                   (rule "qeq_literals" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "applyEq" (formula "60") (term "0,1,0") (ifseqformula "58"))
                                                   (rule "polySimp_pullOutFactor1" (formula "60") (term "0"))
                                                   (rule "add_literals" (formula "60") (term "1,0"))
                                                   (rule "times_zero_1" (formula "60") (term "0"))
                                                    (builtin "One Step Simplification" (formula "60"))
                                                   (rule "true_left" (formula "60"))
                                                   (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "50") (term "1") (ifseqformula "48"))
                                                   (rule "applyEq" (formula "62") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                                   (rule "add_literals" (formula "59") (term "1,0"))
                                                   (rule "times_zero_1" (formula "59") (term "0"))
                                                   (rule "leq_literals" (formula "59"))
                                                   (rule "true_left" (formula "59"))
                                                   (rule "applyEq" (formula "58") (term "2,0") (ifseqformula "3"))
                                                   (rule "lenOfSeqSubEQ" (formula "57") (term "1,1") (ifseqformula "58"))
                                                   (rule "polySimp_homoEq" (formula "57"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "57") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "5") (term "0,1,0") (ifseqformula "58"))
                                                   (rule "polySimp_elimSub" (formula "5") (term "1,0,1,0"))
                                                   (rule "times_zero_2" (formula "5") (term "1,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "38") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "58"))
                                                   (rule "polySimp_elimSub" (formula "38") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "1,1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "58"))
                                                   (rule "polySimp_elimSub" (formula "38") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "1,1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "3") (term "0") (ifseqformula "58"))
                                                   (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "eqSymm" (formula "3") (term "1"))
                                                   (rule "lenOfSeqSubEQ" (formula "38") (term "0,1,0,0,0,0,0") (ifseqformula "58"))
                                                   (rule "polySimp_elimSub" (formula "38") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "1,1,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "38") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "57") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
                                                   (rule "add_zero_right" (formula "3") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_sepPosMonomial" (formula "57"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "57") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "57") (term "1,1"))
                                                   (rule "mul_literals" (formula "57") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "57") (term "1,1"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                                   (rule "mul_literals" (formula "5") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,0,0,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0,1,0"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                                   (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "40") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "48"))
                                                   (rule "mul_literals" (formula "48") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "3") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                                   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "5") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_contradEq7" (formula "60") (ifseqformula "49"))
                                                   (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "60") (term "0,0"))
                                                   (rule "add_literals" (formula "60") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "60") (term "1,0,0"))
                                                   (rule "add_literals" (formula "60") (term "0,0"))
                                                   (rule "leq_literals" (formula "60") (term "0"))
                                                    (builtin "One Step Simplification" (formula "60"))
                                                   (rule "false_right" (formula "60"))
                                                   (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "49"))
                                                   (rule "inEqSimp_homoInEq0" (formula "37") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                                                   (rule "add_literals" (formula "37") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "37") (term "0,0"))
                                                   (rule "qeq_literals" (formula "37") (term "0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "true_left" (formula "37"))
                                                   (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "36"))
                                                   (rule "leq_literals" (formula "47") (term "0"))
                                                    (builtin "One Step Simplification" (formula "47"))
                                                   (rule "true_left" (formula "47"))
                                                   (rule "nnf_imp2or" (formula "16") (term "0"))
                                                   (rule "nnf_imp2or" (formula "37") (term "0"))
                                                   (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                                                   (rule "nnf_notOr" (formula "37") (term "1,0"))
                                                   (rule "nnf_notAnd" (formula "37") (term "1,1,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "37") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0"))
                                                   (rule "commute_or" (formula "3"))
                                                   (rule "inEqSimp_or_weaken1" (formula "3"))
                                                   (rule "add_literals" (formula "3") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or" (formula "36") (term "0,0"))
                                                   (rule "commute_or" (formula "36") (term "1,1,0"))
                                                   (rule "commute_or" (formula "15") (term "0,0"))
                                                   (rule "commute_or_2" (formula "15") (term "0"))
                                                   (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                                   (rule "cut_direct" (formula "18") (term "0"))
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "true_left" (formula "19"))
                                                      (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "18"))
                                                      (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "69"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                      (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "16"))
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "true_left" (formula "17"))
                                                      (rule "applyEq" (formula "68") (term "0") (ifseqformula "18"))
                                                      (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "35") (term "0"))
                                                         (rule "distr_forallAnd" (formula "35"))
                                                         (rule "andLeft" (formula "35"))
                                                         (rule "commute_or" (formula "36") (term "0"))
                                                         (rule "shift_paren_or" (formula "35") (term "0"))
                                                         (rule "commute_or_2" (formula "35") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "commute_or" (formula "36") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                         (rule "commute_or" (formula "35") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "cnf_rightDist" (formula "36") (term "0"))
                                                         (rule "distr_forallAnd" (formula "36"))
                                                         (rule "andLeft" (formula "36"))
                                                         (rule "commute_or_2" (formula "37") (term "0"))
                                                         (rule "shift_paren_or" (formula "36") (term "0"))
                                                         (rule "commute_or_2" (formula "36") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                         (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                         (rule "commute_or" (formula "36") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                         (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                         (rule "castedGetAny" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                         (rule "castDel" (formula "54") (term "0"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                         (rule "eqSymm" (formula "53"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                         (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "ifthenelse_split" (formula "52") (term "0"))
                                                         (branch "geq(i_0, Z(1(#))) TRUE"
                                                            (rule "polySimp_homoEq" (formula "53"))
                                                            (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                            (rule "mul_literals" (formula "53") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                            (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "53"))
                                                            (rule "polySimp_addAssoc" (formula "35") (term "1,1,0"))
                                                            (rule "add_literals" (formula "35") (term "0,1,1,0"))
                                                            (rule "add_zero_left" (formula "35") (term "1,1,0"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "4"))
                                                            (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                            (rule "add_literals" (formula "4") (term "1,0"))
                                                            (rule "times_zero_1" (formula "4") (term "0"))
                                                            (rule "leq_literals" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                            (rule "leq_literals" (formula "3") (term "0"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                            (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                            (rule "close" (formula "55") (ifseqformula "3"))
                                                         )
                                                         (branch "geq(i_0, Z(1(#))) FALSE"
                                                            (rule "polySimp_homoEq" (formula "52"))
                                                            (rule "mul_literals" (formula "52") (term "1,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "mul_literals" (formula "53") (term "1"))
                                                            (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0"))
                                                            (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "5"))
                                                            (rule "mul_literals" (formula "5") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                            (rule "add_literals" (formula "5") (term "0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0"))
                                                            (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                            (rule "qeq_literals" (formula "5"))
                                                            (rule "true_left" (formula "5"))
                                                            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                                                            (rule "applyEqRigid" (formula "52") (term "2,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "52"))
                                                            (rule "eqSymm" (formula "52"))
                                                            (rule "eqSeqEmpty" (formula "52"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                            (rule "add_literals" (formula "34") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "34") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "34"))
                                                            (rule "true_left" (formula "34"))
                                                            (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                            (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "true_left" (formula "5"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                            (rule "close" (formula "54") (ifseqformula "3"))
                                                         )
                                                      )
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "42"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                         (rule "cnf_rightDist" (formula "35") (term "0"))
                                                         (rule "distr_forallAnd" (formula "35"))
                                                         (rule "andLeft" (formula "35"))
                                                         (rule "commute_or" (formula "36") (term "0"))
                                                         (rule "shift_paren_or" (formula "35") (term "0"))
                                                         (rule "commute_or_2" (formula "35") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "commute_or" (formula "36") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                         (rule "commute_or" (formula "35") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "cnf_rightDist" (formula "36") (term "0"))
                                                         (rule "distr_forallAnd" (formula "36"))
                                                         (rule "andLeft" (formula "36"))
                                                         (rule "commute_or_2" (formula "37") (term "0"))
                                                         (rule "shift_paren_or" (formula "36") (term "0"))
                                                         (rule "commute_or_2" (formula "36") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                         (rule "add_zero_right" (formula "36") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                         (rule "commute_or" (formula "36") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                         (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                         (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "true_left" (formula "36"))
                                                         (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                         (rule "castedGetAny" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                         (rule "castDel" (formula "54") (term "0"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                         (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                         (rule "eqSymm" (formula "53"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                         (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "ifthenelse_split" (formula "52") (term "0"))
                                                         (branch "geq(i_0, Z(1(#))) TRUE"
                                                            (rule "polySimp_homoEq" (formula "53"))
                                                            (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                            (rule "mul_literals" (formula "53") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "4"))
                                                            (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                            (rule "add_literals" (formula "4") (term "1,0"))
                                                            (rule "times_zero_1" (formula "4") (term "0"))
                                                            (rule "leq_literals" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,0"))
                                                            (rule "add_zero_left" (formula "34") (term "1,1,0"))
                                                            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                            (rule "leq_literals" (formula "3") (term "0"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                            (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                            (rule "close" (formula "56") (ifseqformula "3"))
                                                         )
                                                         (branch "geq(i_0, Z(1(#))) FALSE"
                                                            (rule "polySimp_homoEq" (formula "52"))
                                                            (rule "times_zero_2" (formula "52") (term "1,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "mul_literals" (formula "53") (term "1"))
                                                            (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0"))
                                                            (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "5"))
                                                            (rule "mul_literals" (formula "5") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                            (rule "add_literals" (formula "5") (term "0,0"))
                                                            (rule "add_zero_left" (formula "5") (term "0"))
                                                            (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "4"))
                                                            (rule "applyEq" (formula "54") (term "2,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "eqSymm" (formula "54"))
                                                            (rule "eqSeqEmpty" (formula "54"))
                                                            (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "4"))
                                                            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                            (rule "add_literals" (formula "34") (term "1,1,0"))
                                                            (rule "qeq_literals" (formula "34") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "34"))
                                                            (rule "true_left" (formula "34"))
                                                            (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                            (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "true_left" (formula "5"))
                                                            (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                            (rule "eqSymm" (formula "2"))
                                                            (rule "close" (formula "55") (ifseqformula "2"))
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "cut_direct" (formula "17") (term "0"))
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                                          (builtin "One Step Simplification" (formula "18"))
                                                         (rule "true_left" (formula "18"))
                                                         (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "17"))
                                                         (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "70"))
                                                          (builtin "One Step Simplification" (formula "19"))
                                                         (rule "applyEq" (formula "70") (term "0") (ifseqformula "19"))
                                                         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                         (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                            (rule "cnf_rightDist" (formula "35") (term "0"))
                                                            (rule "distr_forallAnd" (formula "35"))
                                                            (rule "andLeft" (formula "35"))
                                                            (rule "commute_or" (formula "36") (term "0"))
                                                            (rule "shift_paren_or" (formula "35") (term "0"))
                                                            (rule "commute_or_2" (formula "35") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "commute_or" (formula "36") (term "0,1,0"))
                                                            (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                            (rule "commute_or" (formula "35") (term "0,0,0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "cnf_rightDist" (formula "36") (term "0"))
                                                            (rule "distr_forallAnd" (formula "36"))
                                                            (rule "andLeft" (formula "36"))
                                                            (rule "commute_or_2" (formula "37") (term "0"))
                                                            (rule "shift_paren_or" (formula "36") (term "0"))
                                                            (rule "commute_or_2" (formula "36") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                                            (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                            (rule "commute_or" (formula "36") (term "0,0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                            (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                            (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                            (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                            (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                            (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                            (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "ifthenelse_split" (formula "52") (term "0"))
                                                            (branch "geq(i_0, Z(1(#))) TRUE"
                                                               (rule "polySimp_homoEq" (formula "53"))
                                                               (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                               (rule "mul_literals" (formula "53") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4"))
                                                               (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                               (rule "add_literals" (formula "4") (term "1,0"))
                                                               (rule "times_zero_1" (formula "4") (term "0"))
                                                               (rule "leq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,0"))
                                                               (rule "add_zero_left" (formula "34") (term "1,1,0"))
                                                               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                               (rule "leq_literals" (formula "3") (term "0"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "eqSymm" (formula "2"))
                                                               (rule "close" (formula "56") (ifseqformula "2"))
                                                            )
                                                            (branch "geq(i_0, Z(1(#))) FALSE"
                                                               (rule "polySimp_homoEq" (formula "52"))
                                                               (rule "mul_literals" (formula "52") (term "1,0"))
                                                               (rule "add_zero_right" (formula "52") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "mul_literals" (formula "53") (term "1"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "5"))
                                                               (rule "mul_literals" (formula "5") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                               (rule "add_literals" (formula "5") (term "0,0"))
                                                               (rule "add_zero_left" (formula "5") (term "0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "35") (term "1,1,0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "applyEqRigid" (formula "54") (term "1,0") (ifseqformula "3"))
                                                               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEqRigid" (formula "52") (term "2,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "52"))
                                                               (rule "eqSymm" (formula "52"))
                                                               (rule "eqSeqEmpty" (formula "52"))
                                                               (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                               (rule "add_literals" (formula "34") (term "1,1,0"))
                                                               (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "34"))
                                                               (rule "true_left" (formula "34"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                               (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                               (rule "close" (formula "55") (ifseqformula "3"))
                                                            )
                                                         )
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                             (builtin "One Step Simplification" (formula "42"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                            (rule "cnf_rightDist" (formula "35") (term "0"))
                                                            (rule "distr_forallAnd" (formula "35"))
                                                            (rule "andLeft" (formula "35"))
                                                            (rule "commute_or" (formula "36") (term "0"))
                                                            (rule "shift_paren_or" (formula "35") (term "0"))
                                                            (rule "commute_or_2" (formula "35") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "commute_or" (formula "36") (term "0,1,0"))
                                                            (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                            (rule "commute_or" (formula "35") (term "0,0,0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "cnf_rightDist" (formula "36") (term "0"))
                                                            (rule "distr_forallAnd" (formula "36"))
                                                            (rule "andLeft" (formula "36"))
                                                            (rule "commute_or_2" (formula "37") (term "0"))
                                                            (rule "shift_paren_or" (formula "36") (term "0"))
                                                            (rule "commute_or_2" (formula "36") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                            (rule "add_zero_right" (formula "36") (term "1,1,0,0,0"))
                                                            (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                            (rule "commute_or" (formula "36") (term "0,0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                            (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                            (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                            (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                            (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                            (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "true_left" (formula "36"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                            (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                            (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "ifthenelse_split" (formula "52") (term "0"))
                                                            (branch "geq(i_0, Z(1(#))) TRUE"
                                                               (rule "polySimp_homoEq" (formula "53"))
                                                               (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                               (rule "mul_literals" (formula "53") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4"))
                                                               (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                               (rule "add_literals" (formula "4") (term "1,0"))
                                                               (rule "times_zero_1" (formula "4") (term "0"))
                                                               (rule "leq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,0"))
                                                               (rule "add_zero_left" (formula "34") (term "1,1,0"))
                                                               (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                               (rule "leq_literals" (formula "3") (term "0"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                               (rule "close" (formula "57") (ifseqformula "3"))
                                                            )
                                                            (branch "geq(i_0, Z(1(#))) FALSE"
                                                               (rule "polySimp_homoEq" (formula "52"))
                                                               (rule "times_zero_2" (formula "52") (term "1,0"))
                                                               (rule "add_zero_right" (formula "52") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "mul_literals" (formula "53") (term "1"))
                                                               (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                               (rule "add_literals" (formula "36") (term "1,1,0"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "5"))
                                                               (rule "mul_literals" (formula "5") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                               (rule "add_literals" (formula "5") (term "0,0"))
                                                               (rule "add_zero_left" (formula "5") (term "0"))
                                                               (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "4"))
                                                               (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "4"))
                                                               (rule "applyEqRigid" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "qeq_literals" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "applyEqRigid" (formula "52") (term "2,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "52"))
                                                               (rule "eqSymm" (formula "52"))
                                                               (rule "eqSeqEmpty" (formula "52"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                               (rule "add_literals" (formula "34") (term "1,1,0"))
                                                               (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "34"))
                                                               (rule "true_left" (formula "34"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                               (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "eqSymm" (formula "2"))
                                                               (rule "close" (formula "56") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                                          (builtin "One Step Simplification" (formula "17"))
                                                         (rule "cut_direct" (formula "19") (term "1"))
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                             (builtin "One Step Simplification" (formula "20"))
                                                            (rule "true_left" (formula "20"))
                                                            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                            (rule "applyEq" (formula "70") (term "0") (ifseqformula "18"))
                                                            (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                            (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                               (rule "castedGetAny" (formula "1") (term "0"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "35") (term "0"))
                                                               (rule "distr_forallAnd" (formula "35"))
                                                               (rule "andLeft" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                               (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "cnf_rightDist" (formula "36") (term "0"))
                                                               (rule "distr_forallAnd" (formula "36"))
                                                               (rule "andLeft" (formula "36"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                               (rule "castedGetAny" (formula "43") (term "0"))
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                               (rule "castDel" (formula "54") (term "0"))
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "true_left" (formula "54"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "4") (term "0"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                                  (rule "leq_literals" (formula "3") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "57") (ifseqformula "3"))
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "times_zero_2" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "5"))
                                                                  (rule "mul_literals" (formula "5") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                                  (rule "add_literals" (formula "5") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "5") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEq" (formula "54") (term "2,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "eqSymm" (formula "54"))
                                                                  (rule "eqSeqEmpty" (formula "54"))
                                                                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                  (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "eqSymm" (formula "2"))
                                                                  (rule "close" (formula "56") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                                (builtin "One Step Simplification" (formula "42"))
                                                               (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                               (rule "castedGetAny" (formula "1") (term "0"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "35") (term "0"))
                                                               (rule "distr_forallAnd" (formula "35"))
                                                               (rule "andLeft" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                               (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "cnf_rightDist" (formula "36") (term "0"))
                                                               (rule "distr_forallAnd" (formula "36"))
                                                               (rule "andLeft" (formula "36"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                               (rule "castedGetAny" (formula "43") (term "0"))
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                               (rule "castDel" (formula "54") (term "0"))
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "true_left" (formula "54"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "4") (term "0"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                                  (rule "leq_literals" (formula "3") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "58") (ifseqformula "3"))
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "5"))
                                                                  (rule "mul_literals" (formula "5") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                                  (rule "add_literals" (formula "5") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "5") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "55") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "4"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEq" (formula "53") (term "2,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "53"))
                                                                  (rule "eqSymm" (formula "53"))
                                                                  (rule "eqSeqEmpty" (formula "53"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                  (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "eqSymm" (formula "2"))
                                                                  (rule "close" (formula "57") (ifseqformula "2"))
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                             (builtin "One Step Simplification" (formula "19"))
                                                            (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                            (rule "applyEq" (formula "71") (term "0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "55") (term "0") (ifseqformula "18"))
                                                            (rule "eqSymm" (formula "55"))
                                                            (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                            (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                               (rule "castedGetAny" (formula "1") (term "0"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "35") (term "0"))
                                                               (rule "distr_forallAnd" (formula "35"))
                                                               (rule "andLeft" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                               (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "cnf_rightDist" (formula "36") (term "0"))
                                                               (rule "distr_forallAnd" (formula "36"))
                                                               (rule "andLeft" (formula "36"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                               (rule "add_zero_right" (formula "36") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                               (rule "castedGetAny" (formula "43") (term "0"))
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                               (rule "castDel" (formula "54") (term "0"))
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "true_left" (formula "54"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "4") (term "0"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "1,1,0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                                  (rule "leq_literals" (formula "3") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "58") (ifseqformula "3"))
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "5"))
                                                                  (rule "mul_literals" (formula "5") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                                  (rule "add_literals" (formula "5") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "5") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "54") (term "2,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "54"))
                                                                  (rule "eqSymm" (formula "54"))
                                                                  (rule "eqSeqEmpty" (formula "54"))
                                                                  (rule "applyEqRigid" (formula "55") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                  (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "57") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                                (builtin "One Step Simplification" (formula "42"))
                                                               (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                               (rule "castedGetAny" (formula "1") (term "0"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "cnf_rightDist" (formula "35") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "35") (term "0"))
                                                               (rule "distr_forallAnd" (formula "35"))
                                                               (rule "andLeft" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "commute_or" (formula "36") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "35") (term "0,0"))
                                                               (rule "commute_or" (formula "35") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "35"))
                                                               (rule "cnf_rightDist" (formula "36") (term "0"))
                                                               (rule "distr_forallAnd" (formula "36"))
                                                               (rule "andLeft" (formula "36"))
                                                               (rule "commute_or_2" (formula "37") (term "0"))
                                                               (rule "shift_paren_or" (formula "36") (term "0"))
                                                               (rule "commute_or_2" (formula "36") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "36") (term "0,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "36") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                               (rule "commute_or" (formula "36") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "36") (term "0,0"))
                                                               (rule "polySimp_addAssoc" (formula "36") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "0,1,1,0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "36") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "36") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "36") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "36") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "36") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "36"))
                                                               (rule "true_left" (formula "36"))
                                                               (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                               (rule "castedGetAny" (formula "43") (term "0"))
                                                                (builtin "One Step Simplification" (formula "43"))
                                                               (rule "true_left" (formula "43"))
                                                               (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                               (rule "castDel" (formula "54") (term "0"))
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "true_left" (formula "54"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "times_zero_2" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "4") (term "0"))
                                                                  (rule "leq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "51"))
                                                                  (rule "leq_literals" (formula "3") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "59") (ifseqformula "3"))
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "5"))
                                                                  (rule "mul_literals" (formula "5") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                                  (rule "add_literals" (formula "5") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "5") (term "0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEqRigid" (formula "2") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "52") (term "2,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "52"))
                                                                  (rule "eqSymm" (formula "52"))
                                                                  (rule "eqSeqEmpty" (formula "52"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "34") (term "0"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0"))
                                                                  (rule "qeq_literals" (formula "34") (term "1,0"))
                                                                   (builtin "One Step Simplification" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                  (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "58") (ifseqformula "3"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "lt(Z(0(#)), add(mul(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), Z(neglit(1(#)))), seqLen(Seq::select(anon_heap_add<<anonHeapFunction>>, self, java.util.Collection::$seq)))) FALSE"
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "83") (term "0,0,0"))
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "2") (term "0,1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "83") (term "0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "2") (term "0,1,1"))
                                                   (rule "notRight" (formula "65"))
                                                   (rule "notRight" (formula "83"))
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "polySimp_homoEq" (formula "65"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "65") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "65") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "67"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "0"))
                                                   (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "46"))
                                                   (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "46") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "65"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "65") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "6"))
                                                   (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "6") (term "0"))
                                                   (rule "applyEq" (formula "35") (term "0,0,1,0,0,0,0,0") (ifseqformula "36"))
                                                   (rule "applyEq" (formula "42") (term "0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "56") (term "1") (ifseqformula "54"))
                                                   (rule "applyEq" (formula "67") (term "1") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "56") (term "0,0") (ifseqformula "36"))
                                                   (rule "applyEq" (formula "64") (term "2,0") (ifseqformula "4"))
                                                   (rule "lenOfSeqSubEQ" (formula "44") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "44") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "44") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "43") (term "0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "43") (term "1,0"))
                                                   (rule "times_zero_2" (formula "43") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "43") (term "1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "44") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "44") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "44") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "44") (term "0,1,0,0,0,0,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "44") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "44") (term "1,1,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "44") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "65") (term "1,0,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "65") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "65") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "65") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "65") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "1") (term "0,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "1,1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "66") (term "1,0,0") (ifseqformula "64"))
                                                   (rule "polySimp_elimSub" (formula "66") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "66") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "66") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "66") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "63") (term "1,1") (ifseqformula "64"))
                                                   (rule "polySimp_homoEq" (formula "63"))
                                                   (rule "polySimp_elimSub" (formula "63") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "63") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "63") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "63") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "4") (term "0") (ifseqformula "63"))
                                                   (rule "polySimp_elimSub" (formula "4") (term "1,0"))
                                                   (rule "mul_literals" (formula "4") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "eqSymm" (formula "4") (term "1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0"))
                                                   (rule "add_zero_right" (formula "43") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "44") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "64") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "64") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "65") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "65") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "4") (term "0"))
                                                   (rule "add_zero_right" (formula "4") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                                   (rule "applyEq" (formula "68") (term "0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "53") (term "0,0") (ifseqformula "36"))
                                                   (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "35"))
                                                   (rule "applyEq" (formula "44") (term "0,0,1,0") (ifseqformula "35"))
                                                   (rule "applyEq" (formula "34") (term "0,0,1,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "34"))
                                                   (rule "true_left" (formula "34"))
                                                   (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
                                                   (rule "qeq_literals" (formula "26"))
                                                   (rule "true_left" (formula "26"))
                                                   (rule "applyEq" (formula "51") (term "0") (ifseqformula "50"))
                                                   (rule "applyEqRigid" (formula "40") (term "0,0,1,1,0,1,0") (ifseqformula "62"))
                                                   (rule "castDel" (formula "40") (term "0,1,1,0,1,0"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "polySimp_sepPosMonomial" (formula "61"))
                                                   (rule "polySimp_mulComm0" (formula "61") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "61") (term "1"))
                                                   (rule "mul_literals" (formula "61") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "61") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "61") (term "1,1"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "61"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "CUT: seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0 FALSE"
                                                (rule "replaceKnownSelect_taclet00000000100_20" (formula "82") (term "0,0,0"))
                                                (rule "replaceKnownSelect_taclet00000000100_20" (formula "1") (term "0,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "82") (term "0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "1") (term "0,1,1"))
                                                (rule "notRight" (formula "64"))
                                                (rule "notRight" (formula "82"))
                                                (rule "andLeft" (formula "3"))
                                                (rule "polySimp_homoEq" (formula "64"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "64") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "64") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "64") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "64") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "64") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "44"))
                                                (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "44") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "63"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "63") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "65") (term "0,0"))
                                                (rule "add_zero_right" (formula "65") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "65") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "65") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "65") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "65") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "65") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "65") (term "0,0,0"))
                                                (rule "replace_known_left" (formula "65") (term "0,0") (ifseqformula "63"))
                                                 (builtin "One Step Simplification" (formula "65"))
                                                (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "4"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                (rule "applyEq" (formula "44") (term "0,1,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                (rule "qeq_literals" (formula "24"))
                                                (rule "true_left" (formula "24"))
                                                (rule "applyEq" (formula "39") (term "0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "38") (term "0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "33"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "51") (term "1") (ifseqformula "49"))
                                                (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "58"))
                                                (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                                (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                                (rule "add_literals" (formula "4") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "4") (term "0,0"))
                                                (rule "applyEq" (formula "31") (term "0,0,1,0,0,0,0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "60") (term "0,1,0") (ifseqformula "58"))
                                                (rule "polySimp_pullOutFactor1" (formula "60") (term "0"))
                                                (rule "add_literals" (formula "60") (term "1,0"))
                                                (rule "times_zero_1" (formula "60") (term "0"))
                                                (rule "leq_literals" (formula "60"))
                                                (rule "true_left" (formula "60"))
                                                (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "32"))
                                                 (builtin "One Step Simplification" (formula "31"))
                                                (rule "true_left" (formula "31"))
                                                (rule "applyEq" (formula "49") (term "0") (ifseqformula "48"))
                                                (rule "applyEq" (formula "60") (term "1") (ifseqformula "2"))
                                                (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "57"))
                                                (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                                (rule "add_literals" (formula "59") (term "1,0"))
                                                (rule "times_zero_1" (formula "59") (term "0"))
                                                 (builtin "One Step Simplification" (formula "59"))
                                                (rule "true_left" (formula "59"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                                (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                (rule "polySimp_elimOne" (formula "40") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "48"))
                                                (rule "mul_literals" (formula "48") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "61") (ifseqformula "49"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "61") (term "0,0"))
                                                (rule "add_literals" (formula "61") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                                (rule "add_literals" (formula "61") (term "0,0"))
                                                (rule "leq_literals" (formula "61") (term "0"))
                                                 (builtin "One Step Simplification" (formula "61"))
                                                (rule "false_right" (formula "61"))
                                                (rule "inEqSimp_strengthen1" (formula "4") (ifseqformula "59"))
                                                (rule "inEqSimp_contradEq7" (formula "59") (ifseqformula "4"))
                                                (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0"))
                                                (rule "add_literals" (formula "59") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "59") (term "1,0,0"))
                                                (rule "add_literals" (formula "59") (term "0,0"))
                                                (rule "leq_literals" (formula "59") (term "0"))
                                                 (builtin "One Step Simplification" (formula "59"))
                                                (rule "false_right" (formula "59"))
                                                (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "49"))
                                                (rule "inEqSimp_homoInEq0" (formula "36") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                                (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                                (rule "add_literals" (formula "36") (term "0,0"))
                                                (rule "qeq_literals" (formula "36") (term "0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "true_left" (formula "36"))
                                                (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "35"))
                                                (rule "leq_literals" (formula "47") (term "0"))
                                                 (builtin "One Step Simplification" (formula "47"))
                                                (rule "true_left" (formula "47"))
                                                (rule "nnf_imp2or" (formula "15") (term "0"))
                                                (rule "nnf_imp2or" (formula "37") (term "0"))
                                                (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "37") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                                                (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                                (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                (rule "nnf_notOr" (formula "37") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "37") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "37") (term "1,0,0,1,0,1,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "37") (term "1,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "37") (term "1,1,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "nnf_notAnd" (formula "37") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "37") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,1,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or" (formula "37") (term "0,0"))
                                                (rule "commute_or" (formula "15") (term "0,0"))
                                                (rule "commute_or_2" (formula "15") (term "0"))
                                                (rule "commute_or" (formula "37") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "37") (term "0,1,0"))
                                                (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "37") (term "0"))
                                                (rule "distr_forallAnd" (formula "37"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "commute_or" (formula "38") (term "0"))
                                                (rule "shift_paren_or" (formula "37") (term "0"))
                                                (rule "commute_or_2" (formula "37") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "commute_or" (formula "38") (term "0,1,0"))
                                                (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                (rule "commute_or" (formula "37") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "cnf_rightDist" (formula "38") (term "0"))
                                                (rule "distr_forallAnd" (formula "38"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "commute_or_2" (formula "39") (term "0"))
                                                (rule "shift_paren_or" (formula "38") (term "0"))
                                                (rule "commute_or_2" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                (rule "commute_or" (formula "38") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "true_left" (formula "38"))
                                                (rule "cut_direct" (formula "18") (term "0"))
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "applyEq" (formula "19") (term "1,1") (ifseqformula "18"))
                                                   (rule "replace_known_right" (formula "19") (term "1") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "applyEq" (formula "70") (term "0") (ifseqformula "19"))
                                                   (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "17"))
                                                   (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                   (rule "lenNonNegative" (formula "53") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "53"))
                                                   (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                   (rule "mul_literals" (formula "53") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "35"))
                                                   (rule "leq_literals" (formula "53") (term "0"))
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "true_left" (formula "53"))
                                                   (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "true_left" (formula "44"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "54"))
                                                      (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                      (rule "mul_literals" (formula "54") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "eqSymm" (formula "54") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "times_zero_2" (formula "55") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                      (rule "add_zero_right" (formula "54") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                      (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                      (rule "commute_or" (formula "54"))
                                                      (rule "inEqSimp_or_weaken1" (formula "54"))
                                                      (rule "add_literals" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                      (rule "castedGetAny" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                      (rule "castDel" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                      (rule "castedGetAny" (formula "44") (term "0"))
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "true_left" (formula "44"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "36") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "4"))
                                                      (rule "andLeft" (formula "36"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0"))
                                                      (rule "add_zero_right" (formula "36") (term "0"))
                                                      (rule "leq_literals" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "54"))
                                                      (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                      (rule "times_zero_2" (formula "54") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "eqSymm" (formula "54") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "55") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                      (rule "add_zero_right" (formula "54") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                      (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                      (rule "commute_or" (formula "54"))
                                                      (rule "inEqSimp_or_weaken1" (formula "54"))
                                                      (rule "add_literals" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                      (rule "castedGetAny" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                      (rule "castDel" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                      (rule "castedGetAny" (formula "44") (term "0"))
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "true_left" (formula "44"))
                                                      (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                      (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                      (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "36") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                      (rule "qeq_literals" (formula "36") (term "0"))
                                                       (builtin "One Step Simplification" (formula "36"))
                                                      (rule "closeFalse" (formula "36"))
                                                   )
                                                )
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "cut_direct" (formula "17") (term "0"))
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "true_left" (formula "18"))
                                                      (rule "applyEq" (formula "19") (term "1,0") (ifseqformula "17"))
                                                      (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "71"))
                                                       (builtin "One Step Simplification" (formula "19"))
                                                      (rule "applyEq" (formula "71") (term "0") (ifseqformula "19"))
                                                      (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                      (rule "lenNonNegative" (formula "53") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "53"))
                                                      (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                      (rule "mul_literals" (formula "53") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "35"))
                                                      (rule "leq_literals" (formula "53") (term "0"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "true_left" (formula "53"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "54"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "55") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                      (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                      (rule "mul_literals" (formula "54") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "eqSymm" (formula "54") (term "1"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                      (rule "add_zero_right" (formula "54") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                      (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                      (rule "commute_or" (formula "54"))
                                                      (rule "inEqSimp_or_weaken1" (formula "54"))
                                                      (rule "add_literals" (formula "54") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "true_left" (formula "44"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                         (rule "castDel" (formula "55") (term "0"))
                                                          (builtin "One Step Simplification" (formula "55"))
                                                         (rule "true_left" (formula "55"))
                                                         (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                         (rule "castedGetAny" (formula "44") (term "0"))
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "true_left" (formula "44"))
                                                         (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                         (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                         (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                         (rule "add_literals" (formula "36") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "36") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                         (rule "qeq_literals" (formula "36") (term "0"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "closeFalse" (formula "36"))
                                                      )
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                         (rule "castDel" (formula "55") (term "0"))
                                                          (builtin "One Step Simplification" (formula "55"))
                                                         (rule "true_left" (formula "55"))
                                                         (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                         (rule "castedGetAny" (formula "44") (term "0"))
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "true_left" (formula "44"))
                                                         (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                         (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                         (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "36") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "36"))
                                                         (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "36"))
                                                         (rule "qeq_literals" (formula "3") (term "0"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                   )
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "lenNonNegative" (formula "54") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "54"))
                                                      (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                                      (rule "mul_literals" (formula "54") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "36"))
                                                      (rule "leq_literals" (formula "54") (term "0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "cut_direct" (formula "19") (term "0"))
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) TRUE"
                                                          (builtin "One Step Simplification" (formula "20"))
                                                         (rule "true_left" (formula "20"))
                                                         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                         (rule "applyEq" (formula "71") (term "0") (ifseqformula "18"))
                                                         (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "54"))
                                                            (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "times_zero_2" (formula "55") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                            (rule "times_zero_2" (formula "54") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "eqSymm" (formula "54") (term "1"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                            (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                            (rule "commute_or" (formula "54"))
                                                            (rule "inEqSimp_or_weaken1" (formula "54"))
                                                            (rule "add_literals" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                            (rule "castDel" (formula "55") (term "0"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                            (rule "castedGetAny" (formula "44") (term "0"))
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "36") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "36") (term "0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "closeFalse" (formula "36"))
                                                         )
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "54"))
                                                            (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "55") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "eqSymm" (formula "54") (term "1"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                            (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                            (rule "commute_or" (formula "54"))
                                                            (rule "inEqSimp_or_weaken1" (formula "54"))
                                                            (rule "add_literals" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                            (rule "castDel" (formula "55") (term "0"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                            (rule "castedGetAny" (formula "44") (term "0"))
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "36") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "36") (term "0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "closeFalse" (formula "36"))
                                                         )
                                                      )
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) FALSE"
                                                          (builtin "One Step Simplification" (formula "19"))
                                                         (rule "applyEq" (formula "73") (term "0") (ifseqformula "19"))
                                                         (rule "applyEq" (formula "57") (term "0") (ifseqformula "19"))
                                                         (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "19"))
                                                         (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "54"))
                                                            (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "times_zero_2" (formula "55") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "eqSymm" (formula "54") (term "1"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                            (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                            (rule "commute_or" (formula "54"))
                                                            (rule "inEqSimp_or_weaken1" (formula "54"))
                                                            (rule "add_literals" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                            (rule "castDel" (formula "55") (term "0"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                            (rule "castedGetAny" (formula "44") (term "0"))
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "36") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "36") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "36") (term "0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "closeFalse" (formula "36"))
                                                         )
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "54") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "54"))
                                                            (rule "lenOfSeqSub" (formula "55") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "55") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "eqSymm" (formula "54") (term "1"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "55") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "55") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "55") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "55") (term "0,0,0"))
                                                            (rule "applyEq" (formula "55") (term "0,0,1,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "54") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "54") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "54") (term "0,0"))
                                                            (rule "commute_or" (formula "54"))
                                                            (rule "inEqSimp_or_weaken1" (formula "54"))
                                                            (rule "add_literals" (formula "54") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "35")))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "55") (term "0"))
                                                            (rule "castDel" (formula "55") (term "0"))
                                                             (builtin "One Step Simplification" (formula "55"))
                                                            (rule "true_left" (formula "55"))
                                                            (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                                            (rule "castedGetAny" (formula "44") (term "0"))
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "allLeft" (formula "36") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "4"))
                                                            (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "36") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "36") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "36") (term "0"))
                                                             (builtin "One Step Simplification" (formula "36"))
                                                            (rule "closeFalse" (formula "36"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "Case 2"
                                             (rule "allRight" (formula "80") (inst "sk=i_0") (proofscript))
                                             (rule "impRight" (formula "80") (proofscript))
                                             (rule "cut" (inst "cutFormula=  seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>,
                     self,
                     java.util.Collection::$seq))
= i_0") (proofscript))
                                             (branch "CUT: seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0 TRUE"
                                                (rule "ifthenelse_split" (formula "63") (term "0") (proofscript))
                                                (branch "lt(Z(0(#)), add(mul(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), Z(neglit(1(#)))), seqLen(Seq::select(anon_heap_add<<anonHeapFunction>>, self, java.util.Collection::$seq)))) TRUE"
                                                   (rule "applyEqReverse" (formula "83") (term "1,0,0") (ifseqformula "1") (proofscript))
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "83") (term "0,0,0") (proofscript))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "83") (term "0,0,0") (proofscript))
                                                   (rule "seqGetAlphaCast" (formula "83") (term "0,0") (proofscript))
                                                   (rule "applyEqReverse" (formula "84") (term "0,0") (ifseqformula "1") (proofscript))
                                                   (rule "applyEq" (formula "84") (term "0,0,0") (ifseqformula "65") (proofscript))
                                                   (rule "castDel" (formula "84") (term "0,0") (proofscript))
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "3") (term "0,1,1") (proofscript))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "3") (term "0,1,1"))
                                                   (rule "notRight" (formula "84"))
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "polySimp_homoEq" (formula "65"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "65") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "65") (term "0,1,0"))
                                                   (rule "castedGetAny" (formula "2") (term "0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "polySimp_addAssoc" (formula "64") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "44"))
                                                   (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "44") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "42") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "42") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "42") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "63"))
                                                   (rule "polySimp_mulComm0" (formula "63") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "63") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "65"))
                                                   (rule "add_zero_right" (formula "65") (term "0"))
                                                   (rule "polySimp_rightDist" (formula "65") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "65") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "65") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "65") (term "0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "4"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                   (rule "polySimp_addAssoc" (formula "65") (term "0"))
                                                   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "61"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                                   (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "4") (term "0,0"))
                                                   (rule "add_literals" (formula "4") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "4") (term "0,0"))
                                                   (rule "applyEq" (formula "65") (term "1") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "40") (term "0,0") (ifseqformula "34"))
                                                   (rule "applyEq" (formula "63") (term "0,1,0") (ifseqformula "61"))
                                                   (rule "polySimp_pullOutFactor1" (formula "63") (term "0"))
                                                   (rule "add_literals" (formula "63") (term "1,0"))
                                                   (rule "times_zero_1" (formula "63") (term "0"))
                                                   (rule "leq_literals" (formula "63"))
                                                   (rule "true_left" (formula "63"))
                                                   (rule "applyEq" (formula "39") (term "0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
                                                   (rule "qeq_literals" (formula "24"))
                                                   (rule "true_left" (formula "24"))
                                                   (rule "applyEq" (formula "65") (term "0") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "52") (term "1") (ifseqformula "50"))
                                                   (rule "applyEq" (formula "52") (term "0") (ifseqformula "31"))
                                                   (rule "applyEq" (formula "32") (term "0,0,1,0,0,0,0,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "61") (term "0,1,0") (ifseqformula "59"))
                                                   (rule "polySimp_pullOutFactor1" (formula "61") (term "0"))
                                                   (rule "add_literals" (formula "61") (term "1,0"))
                                                   (rule "times_zero_1" (formula "61") (term "0"))
                                                    (builtin "One Step Simplification" (formula "61"))
                                                   (rule "true_left" (formula "61"))
                                                   (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "applyEq" (formula "59") (term "2,0") (ifseqformula "2"))
                                                   (rule "lenOfSeqSubEQ" (formula "39") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "39") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "39") (term "1,1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "39") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "39") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "39") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "39") (term "1,1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "39") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "60") (term "1,0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "60") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "60") (term "1,1,1,0"))
                                                   (rule "add_zero_right" (formula "60") (term "1,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "38") (term "0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "38") (term "1,0"))
                                                   (rule "mul_literals" (formula "38") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "38") (term "1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "4") (term "0,1,0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "4") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "4") (term "1,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "2") (term "0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "2") (term "1,0"))
                                                   (rule "times_zero_2" (formula "2") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "2") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "eqSymm" (formula "2") (term "1"))
                                                   (rule "lenOfSeqSubEQ" (formula "58") (term "1,1") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "58") (term "1,1,1"))
                                                   (rule "mul_literals" (formula "58") (term "1,1,1,1"))
                                                   (rule "add_zero_right" (formula "58") (term "1,1,1"))
                                                   (rule "polySimp_homoEq" (formula "58"))
                                                   (rule "polySimp_addComm1" (formula "58") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "39") (term "0,1,0,0,0,0,0") (ifseqformula "59"))
                                                   (rule "polySimp_elimSub" (formula "39") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "39") (term "1,1,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "39") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "39") (term "0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "39") (term "0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "60") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "60") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0"))
                                                   (rule "add_zero_right" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1,0"))
                                                   (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "2") (term "0"))
                                                   (rule "add_zero_right" (formula "2") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "58") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "58") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "58") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "39") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,1,0,0,0,0,0"))
                                                   (rule "applyEq" (formula "50") (term "0") (ifseqformula "49"))
                                                   (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "61") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "61"))
                                                   (rule "eqSymm" (formula "61"))
                                                   (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "32"))
                                                    (builtin "One Step Simplification" (formula "31"))
                                                   (rule "true_left" (formula "31"))
                                                   (rule "polySimp_sepPosMonomial" (formula "57"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "57") (term "1"))
                                                   (rule "polySimp_mulLiterals" (formula "57") (term "1,1"))
                                                   (rule "mul_literals" (formula "57") (term "0,1"))
                                                   (rule "polySimp_elimOne" (formula "57") (term "1,1"))
                                                   (rule "applyEq" (formula "4") (term "0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "4") (term "1,0"))
                                                   (rule "mul_literals" (formula "4") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "4") (term "0,0"))
                                                   (rule "applyEq" (formula "37") (term "0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "57"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0,1,0"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,0,0,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                                   (rule "applyEq" (formula "38") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "57"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,0,1,0"))
                                                   (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                                   (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "40") (term "0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "48"))
                                                   (rule "mul_literals" (formula "48") (term "1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                                                   (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "4") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37"))
                                                   (rule "mul_literals" (formula "37") (term "1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "38") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "38") (term "1,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "38") (term "0,1,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "38") (term "1,1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_contradEq7" (formula "61") (ifseqformula "49"))
                                                   (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "61") (term "0,0"))
                                                   (rule "add_literals" (formula "61") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                                   (rule "add_literals" (formula "61") (term "0,0"))
                                                   (rule "leq_literals" (formula "61") (term "0"))
                                                    (builtin "One Step Simplification" (formula "61"))
                                                   (rule "false_right" (formula "61"))
                                                   (rule "inEqSimp_subsumption1" (formula "36") (ifseqformula "49"))
                                                   (rule "inEqSimp_homoInEq0" (formula "36") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0"))
                                                   (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "36") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "36") (term "0,0"))
                                                   (rule "qeq_literals" (formula "36") (term "0"))
                                                    (builtin "One Step Simplification" (formula "36"))
                                                   (rule "true_left" (formula "36"))
                                                   (rule "inEqSimp_subsumption1" (formula "47") (ifseqformula "35"))
                                                   (rule "leq_literals" (formula "47") (term "0"))
                                                    (builtin "One Step Simplification" (formula "47"))
                                                   (rule "true_left" (formula "47"))
                                                   (rule "equalityToSeqGetAndSeqLenRight" (formula "57") (inst "iv=iv"))
                                                   (rule "lenOfSeqConcat" (formula "57") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "lenOfSeqConcat" (formula "57") (term "1,1,0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "polySimp_addAssoc" (formula "57") (term "1,0"))
                                                   (rule "add_literals" (formula "57") (term "0,1,0"))
                                                   (rule "lenOfSeqConcat" (formula "57") (term "1,1,0"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "add_literals" (formula "57") (term "1,1,0"))
                                                   (rule "add_literals" (formula "57") (term "1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0,1"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "57") (term "1,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "57") (term "1,1,1,0,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "0,1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "57") (term "1,1,1,0,0,1"))
                                                   (rule "getOfSeqConcat" (formula "57") (term "1,1,0,1"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "eqSymm" (formula "57") (term "1,0,1"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,2,0,1,0,1"))
                                                   (rule "polySimp_addComm0" (formula "57") (term "1,2,0,1,0,1"))
                                                   (rule "getOfSeqSingleton" (formula "57") (term "1,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "2,1,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "1,1,0,1,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,0,0,0,1,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,0,0,0,1,0,1"))
                                                   (rule "add_zero_left" (formula "57") (term "0,0,0,1,0,1"))
                                                   (rule "getOfSeqConcat" (formula "57") (term "2,0,1,0,1"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,2,2,0,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "57") (term "1,2,2,0,1,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,1,2,2,0,1,0,1"))
                                                   (rule "getOfSeqSingleton" (formula "57") (term "1,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "2,1,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "1,1,2,0,1,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,0,0,2,0,1,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,0,0,2,0,1,0,1"))
                                                   (rule "add_zero_left" (formula "57") (term "0,0,2,0,1,0,1"))
                                                   (rule "polySimp_sepPosMonomial" (formula "57") (term "0,1,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,1,2,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,2,0,1,0,1"))
                                                   (rule "getOfSeqConcat" (formula "57") (term "2,2,0,1,0,1"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,2,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,2,2,2,0,1,0,1"))
                                                   (rule "polySimp_addComm1" (formula "57") (term "1,2,2,2,0,1,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,1,2,2,2,0,1,0,1"))
                                                   (rule "getOfSeqSingleton" (formula "57") (term "1,2,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "2,1,2,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "1,1,2,2,0,1,0,1"))
                                                   (rule "getOfSeqSingleton" (formula "57") (term "2,2,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "2,2,2,2,0,1,0,1"))
                                                   (rule "castDel" (formula "57") (term "1,2,2,2,0,1,0,1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,0,0,2,2,0,1,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,0,0,2,2,0,1,0,1"))
                                                   (rule "add_zero_left" (formula "57") (term "0,0,2,2,0,1,0,1"))
                                                   (rule "polySimp_sepPosMonomial" (formula "57") (term "0,1,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,1,2,2,0,1,0,1"))
                                                   (rule "polySimp_sepPosMonomial" (formula "57") (term "0,2,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,2,2,2,0,1,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,2,2,0,1,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,2,2,0,1,0,1"))
                                                   (rule "nnf_imp2or" (formula "15") (term "0"))
                                                   (rule "nnf_imp2or" (formula "37") (term "0"))
                                                   (rule "nnf_imp2or" (formula "57") (term "0,1"))
                                                   (rule "nnf_notAnd" (formula "15") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
                                                   (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0"))
                                                   (rule "add_zero_left" (formula "15") (term "0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "15") (term "1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "15") (term "1,0,0,0"))
                                                   (rule "nnf_notOr" (formula "37") (term "1,0"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,0"))
                                                   (rule "inEqSimp_notGeq" (formula "37") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,0,0,1,0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,1,0,0"))
                                                   (rule "inEqSimp_notLeq" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,0,0,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                                                   (rule "nnf_notAnd" (formula "57") (term "0,0,1"))
                                                   (rule "inEqSimp_notGeq" (formula "57") (term "0,0,0,1"))
                                                   (rule "times_zero_1" (formula "57") (term "1,0,0,0,0,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,0,0,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "1,0,0,0,1"))
                                                   (rule "inEqSimp_notLeq" (formula "57") (term "1,0,0,1"))
                                                   (rule "polySimp_rightDist" (formula "57") (term "1,0,0,1,0,0,1"))
                                                   (rule "mul_literals" (formula "57") (term "0,1,0,0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "57") (term "0,0,1,0,0,1"))
                                                   (rule "add_literals" (formula "57") (term "0,0,0,1,0,0,1"))
                                                   (rule "add_zero_left" (formula "57") (term "0,0,1,0,0,1"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "57") (term "1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,1"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,1,0"))
                                                   (rule "inEqSimp_notGeq" (formula "37") (term "1,0,1,0"))
                                                   (rule "times_zero_1" (formula "37") (term "1,0,0,1,0,1,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,1,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "1,1,0,1,0"))
                                                   (rule "nnf_notAnd" (formula "37") (term "1,1,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "nnf_notAnd" (formula "37") (term "0,0,1,0"))
                                                   (rule "inEqSimp_notLeq" (formula "37") (term "1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,0,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "37") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_literals" (formula "37") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "37") (term "1,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0"))
                                                   (rule "commute_or" (formula "2"))
                                                   (rule "inEqSimp_or_weaken1" (formula "2"))
                                                   (rule "add_literals" (formula "2") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "cut_direct" (formula "17") (term "0"))
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "true_left" (formula "18"))
                                                      (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "17"))
                                                      (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "70"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "applyEq" (formula "70") (term "0") (ifseqformula "18"))
                                                      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "70"))
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                      (rule "commute_or_2" (formula "14") (term "0"))
                                                      (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "commute_or" (formula "35") (term "0,0"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                         (rule "eqSymm" (formula "53"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                         (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "commute_or" (formula "35") (term "1,1,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0"))
                                                         (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0"))
                                                         (rule "ifthenelse_split" (formula "52") (term "0"))
                                                         (branch "geq(i_0, Z(1(#))) TRUE"
                                                            (rule "polySimp_homoEq" (formula "53"))
                                                            (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                            (rule "mul_literals" (formula "53") (term "0,1"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                            (rule "applyEq" (formula "34") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "34"))
                                                            (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                                            (rule "mul_literals" (formula "34") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                                            (rule "add_literals" (formula "34") (term "0,0"))
                                                            (rule "add_zero_left" (formula "34") (term "0"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "3"))
                                                            (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                            (rule "add_literals" (formula "3") (term "1,0"))
                                                            (rule "times_zero_1" (formula "3") (term "0"))
                                                            (rule "leq_literals" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,0,1,0"))
                                                            (rule "add_zero_left" (formula "34") (term "1,1,0,1,0"))
                                                            (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "54") (term "1,0"))
                                                            (rule "add_literals" (formula "54") (term "0,1,0"))
                                                            (rule "add_zero_left" (formula "54") (term "1,0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,0,0"))
                                                            (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                                            (rule "inEqSimp_invertInEq0" (formula "33"))
                                                            (rule "mul_literals" (formula "33") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                            (rule "leq_literals" (formula "2") (term "0"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "true_left" (formula "2"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,2,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,2,2,2,0,1,0,1"))
                                                            (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                            (rule "castedGetAny" (formula "40") (term "0"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                            (rule "cnf_rightDist" (formula "32") (term "0"))
                                                            (rule "distr_forallAnd" (formula "32"))
                                                            (rule "andLeft" (formula "32"))
                                                            (rule "commute_or" (formula "33") (term "0"))
                                                            (rule "shift_paren_or" (formula "32") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "32"))
                                                            (rule "commute_or" (formula "33") (term "0,1,0"))
                                                            (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                            (rule "commute_or" (formula "32") (term "0,0,0"))
                                                             (builtin "One Step Simplification" (formula "32"))
                                                            (rule "cnf_rightDist" (formula "33") (term "0"))
                                                            (rule "distr_forallAnd" (formula "33"))
                                                            (rule "andLeft" (formula "33"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "shift_paren_or" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                            (rule "commute_or" (formula "33") (term "0,0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                            (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                            (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                            (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "cut_direct" (formula "53") (term "0"))
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "allRight" (formula "54") (inst "sk=iv_0"))
                                                               (rule "orRight" (formula "54"))
                                                               (rule "orRight" (formula "54"))
                                                               (rule "inEqSimp_leqRight" (formula "54"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "mul_literals" (formula "1") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                               (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                               (rule "eqSymm" (formula "4"))
                                                               (rule "close" (formula "58") (ifseqformula "4"))
                                                            )
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "false_right" (formula "54"))
                                                               (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                               (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                               (rule "eqSymm" (formula "1"))
                                                               (rule "close" (formula "55") (ifseqformula "1"))
                                                            )
                                                         )
                                                         (branch "geq(i_0, Z(1(#))) FALSE"
                                                            (rule "polySimp_homoEq" (formula "52"))
                                                            (rule "times_zero_2" (formula "52") (term "1,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "mul_literals" (formula "53") (term "1"))
                                                            (rule "applyEq" (formula "36") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                                                            (rule "applyEq" (formula "36") (term "1,1,1,0,0") (ifseqformula "53"))
                                                            (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                            (rule "applyEq" (formula "35") (term "0") (ifseqformula "53"))
                                                            (rule "qeq_literals" (formula "35"))
                                                            (rule "true_left" (formula "35"))
                                                            (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                            (rule "add_literals" (formula "54") (term "1,0"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "52"))
                                                            (rule "inEqSimp_homoInEq1" (formula "4"))
                                                            (rule "mul_literals" (formula "4") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                            (rule "add_literals" (formula "4") (term "0,0"))
                                                            (rule "add_zero_left" (formula "4") (term "0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "51"))
                                                            (rule "add_literals" (formula "34") (term "1,1,1,1,1,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "53") (term "2,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "eqSeqEmpty" (formula "53"))
                                                            (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                            (rule "qeq_literals" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "charLiteral_to_int" (formula "52") (term "1,1,2,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "52") (term "1,1,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "52") (term "1,1,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "52") (term "1,2,2,2,0,1,0,1"))
                                                            (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                            (rule "castedGetAny" (formula "40") (term "0"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "lenNonNegative" (formula "52") (term "0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "1"))
                                                            (rule "cut_direct" (formula "53") (term "0"))
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "allRight" (formula "54") (inst "sk=iv_0"))
                                                               (rule "orRight" (formula "54"))
                                                               (rule "orRight" (formula "54"))
                                                               (rule "inEqSimp_leqRight" (formula "54"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "mul_literals" (formula "1") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                               (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "true_left" (formula "7"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "close" (formula "57") (ifseqformula "5"))
                                                            )
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                (builtin "One Step Simplification" (formula "54"))
                                                               (rule "false_right" (formula "54"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                               (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "eqSymm" (formula "2"))
                                                               (rule "close" (formula "55") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "42"))
                                                         (rule "commute_or" (formula "35") (term "0,0"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                         (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                         (rule "eqSymm" (formula "53"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                         (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "commute_or" (formula "35") (term "1,1,0"))
                                                         (rule "commute_or" (formula "14") (term "0,0"))
                                                         (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                         (rule "commute_or_2" (formula "14") (term "0"))
                                                         (rule "ifthenelse_split" (formula "52") (term "0"))
                                                         (branch "geq(i_0, Z(1(#))) TRUE"
                                                            (rule "polySimp_homoEq" (formula "53"))
                                                            (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                            (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                            (rule "mul_literals" (formula "53") (term "0,1"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                            (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                            (rule "polySimp_addAssoc" (formula "55") (term "1,0"))
                                                            (rule "add_literals" (formula "55") (term "0,1,0"))
                                                            (rule "add_zero_left" (formula "55") (term "1,0"))
                                                            (rule "applyEq" (formula "34") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "34"))
                                                            (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                                            (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                                            (rule "mul_literals" (formula "34") (term "0,1,0"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                                            (rule "add_literals" (formula "34") (term "0,0"))
                                                            (rule "add_zero_left" (formula "34") (term "0"))
                                                            (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "53"))
                                                            (rule "polySimp_addAssoc" (formula "35") (term "1,1,1,1,1,0"))
                                                            (rule "add_literals" (formula "35") (term "0,1,1,1,1,1,0"))
                                                            (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "3"))
                                                            (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                            (rule "add_literals" (formula "3") (term "1,0"))
                                                            (rule "times_zero_1" (formula "3") (term "0"))
                                                            (rule "leq_literals" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,0,0"))
                                                            (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                            (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0"))
                                                            (rule "add_literals" (formula "34") (term "0,1,1,0,1,0"))
                                                            (rule "add_zero_left" (formula "34") (term "1,1,0,1,0"))
                                                            (rule "inEqSimp_invertInEq0" (formula "33"))
                                                            (rule "mul_literals" (formula "33") (term "1"))
                                                            (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                            (rule "leq_literals" (formula "2") (term "0"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "true_left" (formula "2"))
                                                            (rule "charLiteral_to_int" (formula "54") (term "1,1,2,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "54") (term "1,1,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "54") (term "1,1,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "54") (term "1,2,2,2,0,1,0,1"))
                                                            (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                            (rule "castedGetAny" (formula "40") (term "0"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                            (rule "cnf_rightDist" (formula "32") (term "0"))
                                                            (rule "distr_forallAnd" (formula "32"))
                                                            (rule "andLeft" (formula "32"))
                                                            (rule "commute_or" (formula "33") (term "0"))
                                                            (rule "shift_paren_or" (formula "32") (term "0"))
                                                            (rule "commute_or_2" (formula "32") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "32"))
                                                            (rule "commute_or" (formula "33") (term "0,1,0"))
                                                            (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                            (rule "commute_or" (formula "32") (term "0,0,0"))
                                                             (builtin "One Step Simplification" (formula "32"))
                                                            (rule "cnf_rightDist" (formula "33") (term "0"))
                                                            (rule "distr_forallAnd" (formula "33"))
                                                            (rule "andLeft" (formula "33"))
                                                            (rule "commute_or_2" (formula "34") (term "0"))
                                                            (rule "shift_paren_or" (formula "33") (term "0"))
                                                            (rule "commute_or_2" (formula "33") (term "0,0"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                            (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                            (rule "commute_or" (formula "33") (term "0,0,0"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                            (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                            (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                            (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                            (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "cut_direct" (formula "54") (term "0"))
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                (builtin "One Step Simplification" (formula "55"))
                                                               (rule "allRight" (formula "55") (inst "sk=iv_0"))
                                                               (rule "orRight" (formula "55"))
                                                               (rule "orRight" (formula "55"))
                                                               (rule "inEqSimp_leqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "56"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "mul_literals" (formula "1") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                               (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                               (rule "close" (formula "59") (ifseqformula "5"))
                                                            )
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                (builtin "One Step Simplification" (formula "55"))
                                                               (rule "false_right" (formula "55"))
                                                               (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                               (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                               (rule "close" (formula "56") (ifseqformula "2"))
                                                            )
                                                         )
                                                         (branch "geq(i_0, Z(1(#))) FALSE"
                                                            (rule "polySimp_homoEq" (formula "52"))
                                                            (rule "mul_literals" (formula "52") (term "1,0"))
                                                            (rule "add_zero_right" (formula "52") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "55"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "polySimp_sepPosMonomial" (formula "53"))
                                                            (rule "mul_literals" (formula "53") (term "1"))
                                                            (rule "applyEq" (formula "36") (term "1,1,1,1,1,1,0") (ifseqformula "53"))
                                                            (rule "add_literals" (formula "36") (term "1,1,1,1,1,0"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                            (rule "inEqSimp_homoInEq1" (formula "4"))
                                                            (rule "mul_literals" (formula "4") (term "1,0"))
                                                            (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                            (rule "add_literals" (formula "4") (term "0,0"))
                                                            (rule "add_zero_left" (formula "4") (term "0"))
                                                            (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                            (rule "qeq_literals" (formula "34"))
                                                            (rule "true_left" (formula "34"))
                                                            (rule "applyEq" (formula "53") (term "1,1,0") (ifseqformula "51"))
                                                            (rule "add_literals" (formula "53") (term "1,0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "51"))
                                                            (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                                                            (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "51"))
                                                            (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                                            (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                            (rule "qeq_literals" (formula "4"))
                                                            (rule "true_left" (formula "4"))
                                                            (rule "applyEqRigid" (formula "52") (term "2,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "52"))
                                                            (rule "eqSymm" (formula "52"))
                                                            (rule "eqSeqEmpty" (formula "52"))
                                                            (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                                                            (rule "leq_literals" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                            (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                            (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                             (builtin "One Step Simplification" (formula "33"))
                                                            (rule "true_left" (formula "33"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,2,2,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,2,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,2,0,1,0,1"))
                                                            (rule "charLiteral_to_int" (formula "53") (term "1,1,0,1,0,1"))
                                                            (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                            (rule "castedGetAny" (formula "40") (term "0"))
                                                             (builtin "One Step Simplification" (formula "40"))
                                                            (rule "true_left" (formula "40"))
                                                            (rule "lenNonNegative" (formula "53") (term "0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "1"))
                                                            (rule "cut_direct" (formula "54") (term "0"))
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                (builtin "One Step Simplification" (formula "55"))
                                                               (rule "allRight" (formula "55") (inst "sk=iv_0"))
                                                               (rule "orRight" (formula "55"))
                                                               (rule "orRight" (formula "55"))
                                                               (rule "inEqSimp_leqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "56"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                               (rule "mul_literals" (formula "1") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                               (rule "mul_literals" (formula "1") (term "1"))
                                                               (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                               (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "true_left" (formula "7"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                               (rule "eqSymm" (formula "4"))
                                                               (rule "close" (formula "58") (ifseqformula "4"))
                                                            )
                                                            (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                (builtin "One Step Simplification" (formula "55"))
                                                               (rule "false_right" (formula "55"))
                                                               (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                               (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                               (rule "eqSymm" (formula "2"))
                                                               (rule "close" (formula "56") (ifseqformula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "cut_direct" (formula "16") (term "0"))
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                                          (builtin "One Step Simplification" (formula "17"))
                                                         (rule "true_left" (formula "17"))
                                                         (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "16"))
                                                         (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "71"))
                                                          (builtin "One Step Simplification" (formula "18"))
                                                         (rule "applyEq" (formula "71") (term "0") (ifseqformula "18"))
                                                         (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                         (rule "commute_or_2" (formula "14") (term "0"))
                                                         (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "commute_or" (formula "35") (term "0,0"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                            (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "commute_or" (formula "35") (term "1,1,0"))
                                                            (rule "commute_or" (formula "14") (term "0,0"))
                                                            (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "14") (term "0"))
                                                            (rule "ifthenelse_split" (formula "52") (term "0"))
                                                            (branch "geq(i_0, Z(1(#))) TRUE"
                                                               (rule "polySimp_homoEq" (formula "53"))
                                                               (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                               (rule "mul_literals" (formula "53") (term "0,1"))
                                                               (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                               (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                               (rule "polySimp_addAssoc" (formula "55") (term "1,0"))
                                                               (rule "add_literals" (formula "55") (term "0,1,0"))
                                                               (rule "add_zero_left" (formula "55") (term "1,0"))
                                                               (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                               (rule "applyEq" (formula "33") (term "0") (ifseqformula "52"))
                                                               (rule "inEqSimp_homoInEq1" (formula "33"))
                                                               (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                               (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                               (rule "add_literals" (formula "33") (term "0,0"))
                                                               (rule "add_zero_left" (formula "33") (term "0"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,0,1,0"))
                                                               (rule "add_zero_left" (formula "34") (term "1,1,0,1,0"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,0,0"))
                                                               (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                                               (rule "inEqSimp_invertInEq0" (formula "33"))
                                                               (rule "mul_literals" (formula "33") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                               (rule "leq_literals" (formula "2") (term "0"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "true_left" (formula "2"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,2,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,0,1,0,1"))
                                                               (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                               (rule "castedGetAny" (formula "40") (term "0"))
                                                                (builtin "One Step Simplification" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "32") (term "0"))
                                                               (rule "distr_forallAnd" (formula "32"))
                                                               (rule "andLeft" (formula "32"))
                                                               (rule "commute_or" (formula "33") (term "0"))
                                                               (rule "shift_paren_or" (formula "32") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "32"))
                                                               (rule "commute_or" (formula "33") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                               (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "32"))
                                                               (rule "cnf_rightDist" (formula "33") (term "0"))
                                                               (rule "distr_forallAnd" (formula "33"))
                                                               (rule "andLeft" (formula "33"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "shift_paren_or" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                               (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                               (rule "commute_or" (formula "33") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "lenNonNegative" (formula "54") (term "0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "1"))
                                                               (rule "cut_direct" (formula "55") (term "0"))
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                   (builtin "One Step Simplification" (formula "56"))
                                                                  (rule "allRight" (formula "56") (inst "sk=iv_0"))
                                                                  (rule "orRight" (formula "56"))
                                                                  (rule "orRight" (formula "56"))
                                                                  (rule "inEqSimp_leqRight" (formula "56"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "57"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "mul_literals" (formula "1") (term "1"))
                                                                  (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                  (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "true_left" (formula "6"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                                  (rule "close" (formula "59") (ifseqformula "5"))
                                                               )
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                   (builtin "One Step Simplification" (formula "56"))
                                                                  (rule "false_right" (formula "56"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "close" (formula "57") (ifseqformula "3"))
                                                               )
                                                            )
                                                            (branch "geq(i_0, Z(1(#))) FALSE"
                                                               (rule "polySimp_homoEq" (formula "52"))
                                                               (rule "times_zero_2" (formula "52") (term "1,0"))
                                                               (rule "add_zero_right" (formula "52") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "mul_literals" (formula "53") (term "1"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4"))
                                                               (rule "mul_literals" (formula "4") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                               (rule "add_literals" (formula "4") (term "0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "35") (term "1,1,1,1,1,0"))
                                                               (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "54") (term "1,0"))
                                                               (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                               (rule "qeq_literals" (formula "34"))
                                                               (rule "true_left" (formula "34"))
                                                               (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "53") (term "2,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "eqSeqEmpty" (formula "53"))
                                                               (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                               (rule "qeq_literals" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                               (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                               (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "charLiteral_to_int" (formula "53") (term "1,1,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "53") (term "1,1,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "53") (term "1,2,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "53") (term "1,1,0,1,0,1"))
                                                               (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                               (rule "castedGetAny" (formula "40") (term "0"))
                                                                (builtin "One Step Simplification" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "lenNonNegative" (formula "53") (term "0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "1"))
                                                               (rule "cut_direct" (formula "54") (term "0"))
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                   (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "allRight" (formula "55") (inst "sk=iv_0"))
                                                                  (rule "orRight" (formula "55"))
                                                                  (rule "orRight" (formula "55"))
                                                                  (rule "inEqSimp_leqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "56"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "mul_literals" (formula "1") (term "1"))
                                                                  (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                  (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "true_left" (formula "7"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                                  (rule "close" (formula "58") (ifseqformula "5"))
                                                               )
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                   (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "false_right" (formula "55"))
                                                                  (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                  (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                  (rule "eqSymm" (formula "2"))
                                                                  (rule "close" (formula "56") (ifseqformula "2"))
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                             (builtin "One Step Simplification" (formula "42"))
                                                            (rule "commute_or" (formula "35") (term "0,0"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                            (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                            (rule "eqSymm" (formula "53"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                            (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "commute_or" (formula "35") (term "1,1,0"))
                                                            (rule "commute_or" (formula "14") (term "0,0"))
                                                            (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                            (rule "commute_or_2" (formula "14") (term "0"))
                                                            (rule "ifthenelse_split" (formula "52") (term "0"))
                                                            (branch "geq(i_0, Z(1(#))) TRUE"
                                                               (rule "polySimp_homoEq" (formula "53"))
                                                               (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                               (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                               (rule "mul_literals" (formula "53") (term "0,1"))
                                                               (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                               (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "53"))
                                                               (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,0"))
                                                               (rule "add_literals" (formula "35") (term "0,1,1,0,0"))
                                                               (rule "add_zero_left" (formula "35") (term "1,1,0,0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                                               (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,1,0"))
                                                               (rule "add_literals" (formula "35") (term "0,1,1,0,1,0"))
                                                               (rule "add_zero_left" (formula "35") (term "1,1,0,1,0"))
                                                               (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                               (rule "polySimp_addAssoc" (formula "55") (term "1,0"))
                                                               (rule "add_literals" (formula "55") (term "0,1,0"))
                                                               (rule "add_zero_left" (formula "55") (term "1,0"))
                                                               (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "3"))
                                                               (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                               (rule "add_literals" (formula "3") (term "1,0"))
                                                               (rule "times_zero_1" (formula "3") (term "0"))
                                                               (rule "leq_literals" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEq" (formula "33") (term "0") (ifseqformula "52"))
                                                               (rule "inEqSimp_homoInEq1" (formula "33"))
                                                               (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                               (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                               (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                               (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                               (rule "add_literals" (formula "33") (term "0,0"))
                                                               (rule "add_zero_left" (formula "33") (term "0"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                               (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                               (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                               (rule "inEqSimp_invertInEq0" (formula "33"))
                                                               (rule "mul_literals" (formula "33") (term "1"))
                                                               (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                               (rule "leq_literals" (formula "2") (term "0"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "true_left" (formula "2"))
                                                               (rule "charLiteral_to_int" (formula "55") (term "1,1,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "55") (term "1,1,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "55") (term "1,2,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "55") (term "1,1,2,0,1,0,1"))
                                                               (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                               (rule "castedGetAny" (formula "40") (term "0"))
                                                                (builtin "One Step Simplification" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                               (rule "cnf_rightDist" (formula "32") (term "0"))
                                                               (rule "distr_forallAnd" (formula "32"))
                                                               (rule "andLeft" (formula "32"))
                                                               (rule "commute_or" (formula "33") (term "0"))
                                                               (rule "shift_paren_or" (formula "32") (term "0"))
                                                               (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                (builtin "One Step Simplification" (formula "32"))
                                                               (rule "commute_or" (formula "33") (term "0,1,0"))
                                                               (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                               (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                (builtin "One Step Simplification" (formula "32"))
                                                               (rule "cnf_rightDist" (formula "33") (term "0"))
                                                               (rule "distr_forallAnd" (formula "33"))
                                                               (rule "andLeft" (formula "33"))
                                                               (rule "commute_or_2" (formula "34") (term "0"))
                                                               (rule "shift_paren_or" (formula "33") (term "0"))
                                                               (rule "commute_or_2" (formula "33") (term "0,0"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                               (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                               (rule "commute_or" (formula "33") (term "0,0,0"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                               (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                               (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                               (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                               (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                               (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "cut_direct" (formula "55") (term "0"))
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                   (builtin "One Step Simplification" (formula "56"))
                                                                  (rule "allRight" (formula "56") (inst "sk=iv_0"))
                                                                  (rule "orRight" (formula "56"))
                                                                  (rule "orRight" (formula "56"))
                                                                  (rule "inEqSimp_leqRight" (formula "56"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "57"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                  (rule "mul_literals" (formula "1") (term "1"))
                                                                  (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                  (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "true_left" (formula "6"))
                                                                  (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                                  (rule "close" (formula "60") (ifseqformula "5"))
                                                               )
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                   (builtin "One Step Simplification" (formula "56"))
                                                                  (rule "false_right" (formula "56"))
                                                                  (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                                  (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "close" (formula "57") (ifseqformula "2"))
                                                               )
                                                            )
                                                            (branch "geq(i_0, Z(1(#))) FALSE"
                                                               (rule "polySimp_homoEq" (formula "52"))
                                                               (rule "mul_literals" (formula "52") (term "1,0"))
                                                               (rule "add_zero_right" (formula "52") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "55"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "polySimp_sepPosMonomial" (formula "53"))
                                                               (rule "mul_literals" (formula "53") (term "1"))
                                                               (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                               (rule "add_literals" (formula "55") (term "1,0"))
                                                               (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                               (rule "inEqSimp_homoInEq1" (formula "4"))
                                                               (rule "mul_literals" (formula "4") (term "1,0"))
                                                               (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                               (rule "add_literals" (formula "4") (term "0,0"))
                                                               (rule "add_zero_left" (formula "4") (term "0"))
                                                               (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                               (rule "add_literals" (formula "35") (term "1,1,1,1,1,0"))
                                                               (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                               (rule "qeq_literals" (formula "34"))
                                                               (rule "true_left" (formula "34"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "51"))
                                                               (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                                                               (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "51"))
                                                               (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                                               (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                                               (rule "leq_literals" (formula "1"))
                                                               (rule "true_left" (formula "1"))
                                                               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                               (rule "qeq_literals" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEqRigid" (formula "51") (term "2,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "51"))
                                                               (rule "eqSymm" (formula "51"))
                                                               (rule "eqSeqEmpty" (formula "51"))
                                                               (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                               (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                               (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                               (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                (builtin "One Step Simplification" (formula "33"))
                                                               (rule "true_left" (formula "33"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,2,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,2,2,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,0,1,0,1"))
                                                               (rule "charLiteral_to_int" (formula "54") (term "1,1,2,0,1,0,1"))
                                                               (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                               (rule "castedGetAny" (formula "40") (term "0"))
                                                                (builtin "One Step Simplification" (formula "40"))
                                                               (rule "true_left" (formula "40"))
                                                               (rule "cut_direct" (formula "54") (term "0"))
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                   (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "allRight" (formula "55") (inst "sk=iv_0"))
                                                                  (rule "orRight" (formula "55"))
                                                                  (rule "orRight" (formula "55"))
                                                                  (rule "inEqSimp_geqRight" (formula "56"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                  (rule "inEqSimp_leqRight" (formula "56"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                  (rule "mul_literals" (formula "2") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                  (rule "add_literals" (formula "2") (term "0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                  (rule "mul_literals" (formula "2") (term "1"))
                                                                  (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                  (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "true_left" (formula "7"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                  (rule "eqSymm" (formula "4"))
                                                                  (rule "close" (formula "59") (ifseqformula "4"))
                                                               )
                                                               (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                   (builtin "One Step Simplification" (formula "55"))
                                                                  (rule "false_right" (formula "55"))
                                                                  (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "3"))
                                                                  (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                  (rule "close" (formula "56") (ifseqformula "2"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                                          (builtin "One Step Simplification" (formula "16"))
                                                         (rule "commute_or_2" (formula "14") (term "0"))
                                                         (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                             (builtin "One Step Simplification" (formula "44"))
                                                            (rule "true_left" (formula "44"))
                                                            (rule "cut_direct" (formula "18") (term "1"))
                                                            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                                (builtin "One Step Simplification" (formula "19"))
                                                               (rule "true_left" (formula "19"))
                                                               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                               (rule "applyEq" (formula "71") (term "0") (ifseqformula "17"))
                                                               (rule "commute_or" (formula "35") (term "0,0"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,1,1,0,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "commute_or" (formula "35") (term "1,1,0"))
                                                               (rule "commute_or" (formula "14") (term "0,0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "14") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,0,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "52"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33"))
                                                                  (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0"))
                                                                  (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "54") (term "1,0"))
                                                                  (rule "add_literals" (formula "54") (term "0,1,0"))
                                                                  (rule "add_zero_left" (formula "54") (term "1,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,0,1,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "inEqSimp_invertInEq0" (formula "33"))
                                                                  (rule "mul_literals" (formula "33") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                                  (rule "leq_literals" (formula "2") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "lenNonNegative" (formula "55") (term "0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "1"))
                                                                  (rule "cut_direct" (formula "56") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "allRight" (formula "57") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "inEqSimp_geqRight" (formula "58"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_leqRight" (formula "58"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                     (rule "qeq_literals" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "2") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "add_literals" (formula "2") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                     (rule "mul_literals" (formula "2") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "true_left" (formula "6"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "60") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "false_right" (formula "57"))
                                                                     (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                     (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                     (rule "eqSymm" (formula "2"))
                                                                     (rule "close" (formula "58") (ifseqformula "2"))
                                                                  )
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "35") (term "0") (ifseqformula "53"))
                                                                  (rule "qeq_literals" (formula "35"))
                                                                  (rule "true_left" (formula "35"))
                                                                  (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "54") (term "1,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "52"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEq" (formula "51") (term "2,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "51"))
                                                                  (rule "eqSymm" (formula "51"))
                                                                  (rule "eqSeqEmpty" (formula "51"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "charLiteral_to_int" (formula "54") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "54") (term "1,1,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "54") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "54") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "lenNonNegative" (formula "54") (term "0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "1"))
                                                                  (rule "cut_direct" (formula "55") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "56"))
                                                                     (rule "allRight" (formula "56") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "56"))
                                                                     (rule "orRight" (formula "56"))
                                                                     (rule "inEqSimp_geqRight" (formula "57"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_leqRight" (formula "57"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "2") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "add_literals" (formula "2") (term "0,0"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                     (rule "qeq_literals" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                     (rule "mul_literals" (formula "2") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                     (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "59") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "56"))
                                                                     (rule "false_right" (formula "56"))
                                                                     (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                     (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "true_left" (formula "5"))
                                                                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                     (rule "close" (formula "57") (ifseqformula "3"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                                (builtin "One Step Simplification" (formula "18"))
                                                               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                               (rule "applyEq" (formula "72") (term "0") (ifseqformula "17"))
                                                               (rule "applyEq" (formula "55") (term "0") (ifseqformula "17"))
                                                               (rule "eqSymm" (formula "55"))
                                                               (rule "commute_or" (formula "35") (term "0,0"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "times_zero_2" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "1"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "commute_or" (formula "35") (term "1,1,0"))
                                                               (rule "commute_or" (formula "14") (term "0,0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "14") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,0,1,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "54") (term "1,0"))
                                                                  (rule "add_literals" (formula "54") (term "0,1,0"))
                                                                  (rule "add_zero_left" (formula "54") (term "1,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,0,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,0,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "52"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33"))
                                                                  (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_invertInEq0" (formula "33"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                                  (rule "mul_literals" (formula "33") (term "1"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                                  (rule "leq_literals" (formula "2") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "lenNonNegative" (formula "56") (term "0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "1"))
                                                                  (rule "cut_direct" (formula "57") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "allRight" (formula "58") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "inEqSimp_geqRight" (formula "59"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_leqRight" (formula "59"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "2") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "add_literals" (formula "2") (term "0,0"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                     (rule "qeq_literals" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                     (rule "mul_literals" (formula "2") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "true_left" (formula "6"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "61") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "false_right" (formula "58"))
                                                                     (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "3"))
                                                                     (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                                                                     (rule "close" (formula "59") (ifseqformula "3"))
                                                                  )
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "times_zero_2" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "54") (term "1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "54") (term "1,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                                  (rule "qeq_literals" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "3"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEq" (formula "52") (term "2,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "52"))
                                                                  (rule "eqSymm" (formula "52"))
                                                                  (rule "eqSeqEmpty" (formula "52"))
                                                                  (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "2"))
                                                                  (rule "qeq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,1,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,1,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,1,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "cut_direct" (formula "55") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "56"))
                                                                     (rule "allRight" (formula "56") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "56"))
                                                                     (rule "orRight" (formula "56"))
                                                                     (rule "inEqSimp_geqRight" (formula "57"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_leqRight" (formula "57"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "2") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "add_literals" (formula "2") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                     (rule "mul_literals" (formula "2") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                     (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "60") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "56"))
                                                                     (rule "false_right" (formula "56"))
                                                                     (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "3"))
                                                                     (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                                     (rule "eqSymm" (formula "1"))
                                                                     (rule "close" (formula "57") (ifseqformula "1"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "cut_direct" (formula "18") (term "1"))
                                                            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                                (builtin "One Step Simplification" (formula "19"))
                                                               (rule "true_left" (formula "19"))
                                                               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                               (rule "applyEq" (formula "72") (term "0") (ifseqformula "17"))
                                                               (rule "commute_or" (formula "35") (term "0,0"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "commute_or" (formula "35") (term "1,1,0"))
                                                               (rule "commute_or" (formula "14") (term "0,0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "14") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0,1,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "55") (term "1,0"))
                                                                  (rule "add_literals" (formula "55") (term "0,1,0"))
                                                                  (rule "add_zero_left" (formula "55") (term "1,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "34"))
                                                                  (rule "polySimp_mulComm0" (formula "34") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "34") (term "1,0"))
                                                                  (rule "mul_literals" (formula "34") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "0"))
                                                                  (rule "add_literals" (formula "34") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "34") (term "0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,1,1,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "inEqSimp_invertInEq0" (formula "33"))
                                                                  (rule "times_zero_2" (formula "33") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                                  (rule "leq_literals" (formula "2") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "cut_direct" (formula "56") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "allRight" (formula "57") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "inEqSimp_leqRight" (formula "57"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_geqRight" (formula "58"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                     (rule "mul_literals" (formula "1") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "true_left" (formula "6"))
                                                                     (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
                                                                     (rule "close" (formula "61") (ifseqformula "5"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "false_right" (formula "57"))
                                                                     (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                                     (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "true_left" (formula "3"))
                                                                     (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                                     (rule "eqSymm" (formula "1"))
                                                                     (rule "close" (formula "58") (ifseqformula "1"))
                                                                  )
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "36") (term "1,1,1,0,0") (ifseqformula "53"))
                                                                  (rule "add_literals" (formula "36") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                                  (rule "qeq_literals" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "53") (term "1,1,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "53") (term "1,0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "applyEq" (formula "51") (term "2,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "51"))
                                                                  (rule "eqSymm" (formula "51"))
                                                                  (rule "eqSeqEmpty" (formula "51"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                                  (rule "add_zero_right" (formula "33") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "55") (term "1,1,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "lenNonNegative" (formula "55") (term "0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "1"))
                                                                  (rule "cut_direct" (formula "56") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "allRight" (formula "57") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "orRight" (formula "57"))
                                                                     (rule "inEqSimp_geqRight" (formula "58"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_leqRight" (formula "58"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "2") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                                                                     (rule "add_literals" (formula "2") (term "0,0"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                     (rule "qeq_literals" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                                                     (rule "mul_literals" (formula "2") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                     (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "60") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "57"))
                                                                     (rule "false_right" (formula "57"))
                                                                     (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                     (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "true_left" (formula "5"))
                                                                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                     (rule "eqSymm" (formula "2"))
                                                                     (rule "close" (formula "58") (ifseqformula "2"))
                                                                  )
                                                               )
                                                            )
                                                            (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                                (builtin "One Step Simplification" (formula "18"))
                                                               (rule "applyEq" (formula "56") (term "0") (ifseqformula "18"))
                                                               (rule "eqSymm" (formula "56"))
                                                               (rule "applyEq" (formula "74") (term "0") (ifseqformula "18"))
                                                               (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                               (rule "commute_or" (formula "35") (term "0,0"))
                                                               (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                               (rule "andLeft" (formula "53"))
                                                               (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                               (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                               (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "times_zero_2" (formula "54") (term "1,1,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                               (rule "lenOfSeqSubEQ" (formula "53") (term "1") (ifseqformula "55"))
                                                               (rule "eqSymm" (formula "53"))
                                                               (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                               (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                               (rule "add_zero_right" (formula "53") (term "1,0"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "0,1,1,0,0"))
                                                               (rule "add_zero_right" (formula "53") (term "0,0,1,1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,1,0,0"))
                                                               (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                                               (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                                               (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                                               (rule "applyEq" (formula "53") (term "0,0,1,0") (ifseqformula "54"))
                                                                (builtin "One Step Simplification" (formula "53"))
                                                               (rule "true_left" (formula "53"))
                                                               (rule "commute_or" (formula "35") (term "1,1,0"))
                                                               (rule "commute_or" (formula "14") (term "0,0"))
                                                               (rule "commute_or_2" (formula "35") (term "0,1,0"))
                                                               (rule "commute_or_2" (formula "14") (term "0"))
                                                               (rule "ifthenelse_split" (formula "52") (term "0"))
                                                               (branch "geq(i_0, Z(1(#))) TRUE"
                                                                  (rule "polySimp_homoEq" (formula "53"))
                                                                  (rule "polySimp_addComm1" (formula "53") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "polySimp_mulComm0" (formula "53") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "53") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "53") (term "1,1"))
                                                                  (rule "mul_literals" (formula "53") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "53") (term "1,1"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,0,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "35") (term "1,1,0,1,0"))
                                                                  (rule "add_literals" (formula "35") (term "0,1,1,0,1,0"))
                                                                  (rule "add_zero_left" (formula "35") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "55") (term "1,1,0") (ifseqformula "53"))
                                                                  (rule "polySimp_addAssoc" (formula "55") (term "1,0"))
                                                                  (rule "add_literals" (formula "55") (term "0,1,0"))
                                                                  (rule "add_zero_left" (formula "55") (term "1,0"))
                                                                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "3"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "3") (term "0"))
                                                                  (rule "add_literals" (formula "3") (term "1,0"))
                                                                  (rule "times_zero_1" (formula "3") (term "0"))
                                                                  (rule "leq_literals" (formula "3"))
                                                                  (rule "true_left" (formula "3"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "polySimp_addAssoc" (formula "34") (term "1,1,1,1,1,0"))
                                                                  (rule "add_literals" (formula "34") (term "0,1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "33") (term "0") (ifseqformula "52"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33"))
                                                                  (rule "polySimp_mulComm0" (formula "33") (term "1,0"))
                                                                  (rule "polySimp_rightDist" (formula "33") (term "1,0"))
                                                                  (rule "mul_literals" (formula "33") (term "0,1,0"))
                                                                  (rule "polySimp_addAssoc" (formula "33") (term "0"))
                                                                  (rule "add_literals" (formula "33") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_invertInEq0" (formula "33"))
                                                                  (rule "times_zero_2" (formula "33") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "33") (term "0"))
                                                                  (rule "polySimp_elimOne" (formula "33") (term "0"))
                                                                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "50"))
                                                                  (rule "leq_literals" (formula "2") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "charLiteral_to_int" (formula "57") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "57") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "57") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "57") (term "1,1,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "1,1,0"))
                                                                  (rule "cnf_rightDist" (formula "32") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "32"))
                                                                  (rule "andLeft" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0"))
                                                                  (rule "commute_or_2" (formula "32") (term "0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "commute_or" (formula "33") (term "0,1,0"))
                                                                  (rule "shift_paren_or" (formula "32") (term "0,0"))
                                                                  (rule "commute_or" (formula "32") (term "0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "32"))
                                                                  (rule "cnf_rightDist" (formula "33") (term "0"))
                                                                  (rule "distr_forallAnd" (formula "33"))
                                                                  (rule "andLeft" (formula "33"))
                                                                  (rule "commute_or_2" (formula "34") (term "0"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0"))
                                                                  (rule "commute_or_2" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "shift_paren_or" (formula "33") (term "0,0"))
                                                                  (rule "commute_or" (formula "33") (term "0,0,0"))
                                                                  (rule "inEqSimp_or_tautInEq1" (formula "33") (term "0,0"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "33") (term "1,0,0"))
                                                                  (rule "polySimp_pullOutFactor1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,0,1,0,0"))
                                                                  (rule "times_zero_1" (formula "33") (term "0,1,0,0"))
                                                                  (rule "leq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "cut_direct" (formula "57") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "allRight" (formula "58") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "inEqSimp_leqRight" (formula "58"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_geqRight" (formula "59"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                     (rule "mul_literals" (formula "1") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "true_left" (formula "6"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "62") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "false_right" (formula "58"))
                                                                     (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                                     (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "true_left" (formula "3"))
                                                                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                                     (rule "close" (formula "59") (ifseqformula "2"))
                                                                  )
                                                               )
                                                               (branch "geq(i_0, Z(1(#))) FALSE"
                                                                  (rule "polySimp_homoEq" (formula "52"))
                                                                  (rule "mul_literals" (formula "52") (term "1,0"))
                                                                  (rule "add_zero_right" (formula "52") (term "0"))
                                                                  (rule "inEqSimp_geqRight" (formula "55"))
                                                                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                  (rule "add_literals" (formula "1") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "1") (term "0"))
                                                                  (rule "polySimp_sepPosMonomial" (formula "53"))
                                                                  (rule "mul_literals" (formula "53") (term "1"))
                                                                  (rule "applyEq" (formula "4") (term "0") (ifseqformula "53"))
                                                                  (rule "inEqSimp_homoInEq1" (formula "4"))
                                                                  (rule "mul_literals" (formula "4") (term "1,0"))
                                                                  (rule "polySimp_addComm1" (formula "4") (term "0"))
                                                                  (rule "add_literals" (formula "4") (term "0,0"))
                                                                  (rule "add_zero_left" (formula "4") (term "0"))
                                                                  (rule "applyEq" (formula "35") (term "1,1,1,1,1,1,0") (ifseqformula "52"))
                                                                  (rule "add_literals" (formula "35") (term "1,1,1,1,1,0"))
                                                                  (rule "applyEq" (formula "34") (term "0") (ifseqformula "52"))
                                                                  (rule "qeq_literals" (formula "34"))
                                                                  (rule "true_left" (formula "34"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0,0"))
                                                                  (rule "applyEq" (formula "34") (term "1,1,1,0,1,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "34") (term "1,1,0,1,0"))
                                                                  (rule "applyEq" (formula "53") (term "1,1,0") (ifseqformula "51"))
                                                                  (rule "add_literals" (formula "53") (term "1,0"))
                                                                  (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
                                                                  (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "3"))
                                                                  (rule "qeq_literals" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEqRigid" (formula "52") (term "2,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "52"))
                                                                  (rule "eqSymm" (formula "52"))
                                                                  (rule "eqSeqEmpty" (formula "52"))
                                                                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                                                                  (rule "leq_literals" (formula "1"))
                                                                  (rule "true_left" (formula "1"))
                                                                  (rule "inEqSimp_or_tautInEq0" (formula "33") (term "0,0"))
                                                                  (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                                                  (rule "qeq_literals" (formula "33") (term "1,0,0"))
                                                                   (builtin "One Step Simplification" (formula "33"))
                                                                  (rule "true_left" (formula "33"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,1,2,0,1,0,1"))
                                                                  (rule "charLiteral_to_int" (formula "56") (term "1,2,2,2,0,1,0,1"))
                                                                  (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                                  (rule "castedGetAny" (formula "40") (term "0"))
                                                                   (builtin "One Step Simplification" (formula "40"))
                                                                  (rule "true_left" (formula "40"))
                                                                  (rule "lenNonNegative" (formula "56") (term "0,0"))
                                                                  (rule "inEqSimp_commuteLeq" (formula "1"))
                                                                  (rule "cut_direct" (formula "57") (term "0"))
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) TRUE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "allRight" (formula "58") (inst "sk=iv_0"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "orRight" (formula "58"))
                                                                     (rule "inEqSimp_leqRight" (formula "58"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "add_zero_left" (formula "1") (term "0"))
                                                                     (rule "inEqSimp_geqRight" (formula "59"))
                                                                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                                     (rule "qeq_literals" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                                     (rule "mul_literals" (formula "1") (term "1,0"))
                                                                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                                     (rule "add_literals" (formula "1") (term "0,0"))
                                                                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                                     (rule "mul_literals" (formula "1") (term "1"))
                                                                     (rule "ineffectiveCast" (formula "4") (term "0") (ifseqformula "6"))
                                                                     (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "true_left" (formula "7"))
                                                                     (rule "applyEq" (formula "4") (term "0") (ifseqformula "5"))
                                                                     (rule "eqSymm" (formula "4"))
                                                                     (rule "close" (formula "61") (ifseqformula "4"))
                                                                  )
                                                                  (branch "CUT: seqLen(strContent(id)) = Z(4(#)) FALSE"
                                                                      (builtin "One Step Simplification" (formula "58"))
                                                                     (rule "false_right" (formula "58"))
                                                                     (rule "ineffectiveCast" (formula "2") (term "0") (ifseqformula "4"))
                                                                     (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "true_left" (formula "5"))
                                                                     (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
                                                                     (rule "eqSymm" (formula "2"))
                                                                     (rule "close" (formula "59") (ifseqformula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "lt(Z(0(#)), add(mul(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), Z(neglit(1(#)))), seqLen(Seq::select(anon_heap_add<<anonHeapFunction>>, self, java.util.Collection::$seq)))) FALSE"
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "2") (term "0,1,1"))
                                                   (rule "replaceKnownSelect_taclet00000000100_20" (formula "83") (term "0,0,0"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "2") (term "0,1,1"))
                                                   (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "83") (term "0,0,0"))
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "notRight" (formula "84"))
                                                   (rule "polySimp_homoEq" (formula "64"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "64") (term "1,0"))
                                                   (rule "polySimp_mulAssoc" (formula "64") (term "0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "64") (term "0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "64") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "64") (term "0"))
                                                   (rule "inEqSimp_ltRight" (formula "66"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "0"))
                                                   (rule "polySimp_mulAssoc" (formula "1") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "45"))
                                                   (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "45") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "64"))
                                                   (rule "polySimp_mulComm0" (formula "64") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "64") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "5"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0"))
                                                   (rule "applyEq" (formula "5") (term "0,1,0") (ifseqformula "62"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                                   (rule "mul_literals" (formula "5") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "5") (term "0,0"))
                                                   (rule "add_literals" (formula "5") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "5") (term "0,0"))
                                                   (rule "applyEq" (formula "34") (term "0,0,1,0,0,0,0,0") (ifseqformula "35"))
                                                   (rule "applyEq" (formula "45") (term "0,1,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "25") (term "0") (ifseqformula "26"))
                                                   (rule "qeq_literals" (formula "25"))
                                                   (rule "true_left" (formula "25"))
                                                   (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "applyEq" (formula "61") (term "2,0") (ifseqformula "3"))
                                                   (rule "lenOfSeqSubEQ" (formula "41") (term "0,1,0,0,0,0,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "41") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "times_zero_2" (formula "41") (term "1,1,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "41") (term "1,0,1,0,0,0,0,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "40") (term "0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "40") (term "1,0"))
                                                   (rule "mul_literals" (formula "40") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "40") (term "1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "41") (term "0,1,0,0,1,0,0,1,0,1,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "41") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "mul_literals" (formula "41") (term "1,1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "41") (term "1,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "60") (term "1,1") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "60") (term "1,1,1"))
                                                   (rule "mul_literals" (formula "60") (term "1,1,1,1"))
                                                   (rule "add_zero_right" (formula "60") (term "1,1,1"))
                                                   (rule "polySimp_homoEq" (formula "60"))
                                                   (rule "polySimp_addComm1" (formula "60") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "3") (term "0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "3") (term "1,0"))
                                                   (rule "mul_literals" (formula "3") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "3") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "eqSymm" (formula "3") (term "1"))
                                                   (rule "lenOfSeqSubEQ" (formula "41") (term "0,1,0,0,1,0,0,0,1,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "41") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "41") (term "1,1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "41") (term "1,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "5") (term "0,1,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "5") (term "1,0,1,0"))
                                                   (rule "mul_literals" (formula "5") (term "1,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "1,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "63") (term "1,0,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "63") (term "1,1,0,0"))
                                                   (rule "mul_literals" (formula "63") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "63") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "63") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "1") (term "0,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "1") (term "1,0,0"))
                                                   (rule "times_zero_2" (formula "1") (term "1,1,0,0"))
                                                   (rule "add_zero_right" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0"))
                                                   (rule "lenOfSeqSubEQ" (formula "62") (term "1,0,0") (ifseqformula "61"))
                                                   (rule "polySimp_elimSub" (formula "62") (term "1,1,0,0"))
                                                   (rule "times_zero_2" (formula "62") (term "1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "62") (term "1,1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "62") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,1,0,0,0,0,0"))
                                                   (rule "add_zero_right" (formula "41") (term "0,0,0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "40") (term "0,0"))
                                                   (rule "add_zero_right" (formula "40") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "40") (term "1,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "add_zero_right" (formula "41") (term "0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,1,0,0,1,0,0,1,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "60") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "60") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "3") (term "0"))
                                                   (rule "add_zero_right" (formula "3") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "41") (term "0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,1,0,0,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0"))
                                                   (rule "add_zero_right" (formula "5") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "62") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "62") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,1,0"))
                                                   (rule "applyEq" (formula "66") (term "0,0") (ifseqformula "33"))
                                                   (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "true_left" (formula "32"))
                                                   (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "51") (term "0") (ifseqformula "50"))
                                                   (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "40") (term "0,0,1,1,0,1,0") (ifseqformula "62"))
                                                   (rule "castDel" (formula "40") (term "0,1,1,0,1,0"))
                                                   (rule "applyEq" (formula "52") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "32"))
                                                   (rule "applyEq" (formula "51") (term "1") (ifseqformula "49"))
                                                   (rule "polySimp_sepPosMonomial" (formula "58"))
                                                   (rule "polySimp_mulComm0" (formula "58") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "58") (term "1"))
                                                   (rule "mul_literals" (formula "58") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "58") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "58") (term "1,1"))
                                                   (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "58"))
                                                   (rule "polySimp_addAssoc" (formula "60") (term "0"))
                                                   (rule "polySimp_addComm1" (formula "60") (term "0,0"))
                                                   (rule "add_literals" (formula "60") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "60") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "60") (term "0"))
                                                   (rule "add_literals" (formula "60") (term "1,0"))
                                                   (rule "times_zero_1" (formula "60") (term "0"))
                                                   (rule "leq_literals" (formula "60"))
                                                   (rule "true_left" (formula "60"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "58"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_zero_right" (formula "1") (term "0"))
                                                   (rule "qeq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch "CUT: seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0 FALSE"
                                                (rule "replaceKnownSelect_taclet00000000100_20" (formula "82") (term "0,0,0"))
                                                (rule "replaceKnownSelect_taclet00000000100_20" (formula "1") (term "0,1,1"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "82") (term "0,0,0"))
                                                (rule "replaceKnownAuxiliaryConstant_taclet00000000100_21" (formula "1") (term "0,1,1"))
                                                (rule "notRight" (formula "82"))
                                                (rule "andLeft" (formula "2"))
                                                (rule "polySimp_homoEq" (formula "63"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "63") (term "1,0"))
                                                (rule "polySimp_mulAssoc" (formula "63") (term "0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "63") (term "0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "63") (term "0,1,0"))
                                                (rule "polySimp_elimOne" (formula "63") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "63") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "64") (term "0,0"))
                                                (rule "add_zero_right" (formula "64") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "64") (term "1,0,0,0"))
                                                (rule "polySimp_mulAssoc" (formula "64") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "64") (term "0,0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "64") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "64") (term "0,1,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "64") (term "0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "43"))
                                                (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "62"))
                                                (rule "polySimp_mulComm0" (formula "62") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "62") (term "0"))
                                                (rule "replace_known_left" (formula "64") (term "0,0") (ifseqformula "62"))
                                                 (builtin "One Step Simplification" (formula "64"))
                                                (rule "inEqSimp_ltToLeq" (formula "41") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "3"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0"))
                                                (rule "applyEq" (formula "43") (term "0,0,1,0") (ifseqformula "33"))
                                                (rule "applyEq" (formula "62") (term "0,1,0") (ifseqformula "60"))
                                                (rule "polySimp_pullOutFactor1" (formula "62") (term "0"))
                                                (rule "add_literals" (formula "62") (term "1,0"))
                                                (rule "times_zero_1" (formula "62") (term "0"))
                                                (rule "leq_literals" (formula "62"))
                                                (rule "true_left" (formula "62"))
                                                (rule "applyEq" (formula "3") (term "0,1,0") (ifseqformula "60"))
                                                (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                                (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                                (rule "mul_literals" (formula "3") (term "0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                                (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                                (rule "add_literals" (formula "3") (term "0,0,0"))
                                                (rule "add_zero_left" (formula "3") (term "0,0"))
                                                (rule "applyEq" (formula "39") (term "0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "53") (term "0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "38") (term "0,0") (ifseqformula "33"))
                                                (rule "applyEq" (formula "52") (term "1") (ifseqformula "50"))
                                                (rule "applyEq" (formula "32") (term "0,0,1,0") (ifseqformula "33"))
                                                 (builtin "One Step Simplification" (formula "32"))
                                                (rule "true_left" (formula "32"))
                                                (rule "applyEq" (formula "65") (term "0,0") (ifseqformula "32"))
                                                (rule "applyEq" (formula "23") (term "0") (ifseqformula "24"))
                                                (rule "qeq_literals" (formula "23"))
                                                (rule "true_left" (formula "23"))
                                                (rule "applyEq" (formula "49") (term "0") (ifseqformula "48"))
                                                (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "57"))
                                                (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                                (rule "add_literals" (formula "59") (term "1,0"))
                                                (rule "times_zero_1" (formula "59") (term "0"))
                                                 (builtin "One Step Simplification" (formula "59"))
                                                (rule "true_left" (formula "59"))
                                                (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "31"))
                                                (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "30"))
                                                (rule "true_left" (formula "30"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,0,1,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,1,0,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,1,0,0,1,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,1,0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "37") (term "0,0,0"))
                                                (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0"))
                                                (rule "polySimp_rightDist" (formula "37") (term "1,0,0,0"))
                                                (rule "mul_literals" (formula "37") (term "0,1,0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "37") (term "1,1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "37") (term "1,1,0,0,0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "39"))
                                                (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                                                (rule "polySimp_elimOne" (formula "39") (term "0"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                                (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                                (rule "polySimp_elimOne" (formula "3") (term "0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "47"))
                                                (rule "mul_literals" (formula "47") (term "1"))
                                                (rule "inEqSimp_contradEq7" (formula "61") (ifseqformula "48"))
                                                (rule "polySimp_mulComm0" (formula "61") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "61") (term "0,0"))
                                                (rule "add_literals" (formula "61") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "61") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "61") (term "0,0"))
                                                (rule "leq_literals" (formula "61") (term "0"))
                                                 (builtin "One Step Simplification" (formula "61"))
                                                (rule "false_right" (formula "61"))
                                                (rule "inEqSimp_strengthen1" (formula "3") (ifseqformula "58"))
                                                (rule "inEqSimp_contradEq7" (formula "58") (ifseqformula "3"))
                                                (rule "polySimp_mulComm0" (formula "58") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "58") (term "0,0"))
                                                (rule "add_literals" (formula "58") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "58") (term "1,0,0"))
                                                (rule "add_zero_right" (formula "58") (term "0,0"))
                                                (rule "leq_literals" (formula "58") (term "0"))
                                                 (builtin "One Step Simplification" (formula "58"))
                                                (rule "false_right" (formula "58"))
                                                (rule "inEqSimp_subsumption1" (formula "35") (ifseqformula "48"))
                                                (rule "inEqSimp_homoInEq0" (formula "35") (term "0"))
                                                (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0"))
                                                (rule "add_literals" (formula "35") (term "1,1,0,0"))
                                                (rule "times_zero_1" (formula "35") (term "1,0,0"))
                                                (rule "add_literals" (formula "35") (term "0,0"))
                                                (rule "qeq_literals" (formula "35") (term "0"))
                                                 (builtin "One Step Simplification" (formula "35"))
                                                (rule "true_left" (formula "35"))
                                                (rule "inEqSimp_subsumption1" (formula "46") (ifseqformula "34"))
                                                (rule "leq_literals" (formula "46") (term "0"))
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "true_left" (formula "46"))
                                                (rule "equalityToSeqGetAndSeqLenRight" (formula "56") (inst "iv=iv"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0,1"))
                                                (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,1"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "56") (term "1,1,1,0,0,1"))
                                                (rule "mul_literals" (formula "56") (term "0,1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "56") (term "1,1,1,0,0,1"))
                                                (rule "nnf_imp2or" (formula "14") (term "0"))
                                                (rule "nnf_imp2or" (formula "36") (term "0"))
                                                (rule "nnf_imp2or" (formula "56") (term "0,1"))
                                                (rule "nnf_notAnd" (formula "14") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "14") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "14") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "14") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "14") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "14") (term "1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,0,0,1,0,0"))
                                                (rule "add_literals" (formula "14") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0"))
                                                (rule "mul_literals" (formula "14") (term "1,1,0,0"))
                                                (rule "nnf_notAnd" (formula "36") (term "0,0"))
                                                (rule "inEqSimp_notLeq" (formula "36") (term "0,0,0"))
                                                (rule "polySimp_rightDist" (formula "36") (term "1,0,0,0,0,0"))
                                                (rule "mul_literals" (formula "36") (term "0,1,0,0,0,0,0"))
                                                (rule "polySimp_addAssoc" (formula "36") (term "0,0,0,0,0"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,0,0,0"))
                                                (rule "add_zero_left" (formula "36") (term "0,0,0,0,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "0,0,0"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,0,0,0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,0,0,0"))
                                                (rule "inEqSimp_notGeq" (formula "36") (term "1,0,0"))
                                                (rule "mul_literals" (formula "36") (term "1,0,0,1,0,0"))
                                                (rule "add_zero_right" (formula "36") (term "0,0,1,0,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0"))
                                                (rule "mul_literals" (formula "36") (term "1,1,0,0"))
                                                (rule "nnf_notOr" (formula "36") (term "1,0"))
                                                (rule "nnf_notAnd" (formula "56") (term "0,0,1"))
                                                (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0,1"))
                                                (rule "polySimp_rightDist" (formula "56") (term "1,0,0,1,0,0,1"))
                                                (rule "mul_literals" (formula "56") (term "0,1,0,0,1,0,0,1"))
                                                (rule "polySimp_addAssoc" (formula "56") (term "0,0,1,0,0,1"))
                                                (rule "add_literals" (formula "56") (term "0,0,0,1,0,0,1"))
                                                (rule "add_zero_left" (formula "56") (term "0,0,1,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0,1"))
                                                (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,1"))
                                                (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,1"))
                                                (rule "inEqSimp_notGeq" (formula "56") (term "0,0,0,1"))
                                                (rule "times_zero_1" (formula "56") (term "1,0,0,0,0,0,1"))
                                                (rule "add_literals" (formula "56") (term "0,0,0,0,0,1"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,1"))
                                                (rule "mul_literals" (formula "56") (term "1,0,0,0,1"))
                                                (rule "nnf_notAnd" (formula "36") (term "0,1,0"))
                                                (rule "inEqSimp_notGeq" (formula "36") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "36") (term "1,0,0,1,0,1,0"))
                                                (rule "add_zero_right" (formula "36") (term "0,0,1,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,1,0"))
                                                (rule "mul_literals" (formula "36") (term "1,1,0,1,0"))
                                                (rule "nnf_notAnd" (formula "36") (term "1,1,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "nnf_notAnd" (formula "36") (term "0,0,1,0"))
                                                (rule "inEqSimp_notLeq" (formula "36") (term "1,0,0,1,0"))
                                                (rule "polySimp_rightDist" (formula "36") (term "1,0,0,1,0,0,1,0"))
                                                (rule "mul_literals" (formula "36") (term "0,1,0,0,1,0,0,1,0"))
                                                (rule "polySimp_addAssoc" (formula "36") (term "0,0,1,0,0,1,0"))
                                                (rule "add_literals" (formula "36") (term "0,0,0,1,0,0,1,0"))
                                                (rule "add_zero_left" (formula "36") (term "0,0,1,0,0,1,0"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "36") (term "1,0,0,1,0"))
                                                (rule "polySimp_mulLiterals" (formula "36") (term "1,1,0,0,1,0"))
                                                (rule "polySimp_elimOne" (formula "36") (term "1,1,0,0,1,0"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "commute_or" (formula "36") (term "0,0"))
                                                (rule "commute_or" (formula "14") (term "0,0"))
                                                (rule "commute_or_2" (formula "14") (term "0"))
                                                (rule "commute_or" (formula "36") (term "1,1,0"))
                                                (rule "commute_or_2" (formula "36") (term "0,1,0"))
                                                (rule "cnf_rightDist" (formula "36") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "36") (term "0"))
                                                (rule "distr_forallAnd" (formula "36"))
                                                (rule "andLeft" (formula "36"))
                                                (rule "commute_or" (formula "37") (term "0"))
                                                (rule "shift_paren_or" (formula "36") (term "0"))
                                                (rule "commute_or_2" (formula "36") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "commute_or" (formula "37") (term "0,1,0"))
                                                (rule "shift_paren_or" (formula "36") (term "0,0"))
                                                (rule "commute_or" (formula "36") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "36"))
                                                (rule "cnf_rightDist" (formula "37") (term "0"))
                                                (rule "distr_forallAnd" (formula "37"))
                                                (rule "andLeft" (formula "37"))
                                                (rule "commute_or_2" (formula "38") (term "0"))
                                                (rule "shift_paren_or" (formula "37") (term "0"))
                                                (rule "commute_or_2" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "37") (term "0,0,0"))
                                                (rule "add_literals" (formula "37") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "37") (term "1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                (rule "commute_or" (formula "37") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "37") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "37") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "37") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "37") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "37") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "37") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "37"))
                                                (rule "true_left" (formula "37"))
                                                (rule "cut_direct" (formula "17") (term "0"))
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "true_left" (formula "18"))
                                                   (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "17"))
                                                   (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "18"))
                                                   (rule "applyEq" (formula "70") (term "0") (ifseqformula "18"))
                                                   (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "16"))
                                                   (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                   (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "true_left" (formula "43"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "53"))
                                                      (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                      (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "53") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "eqSymm" (formula "53") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                      (rule "add_zero_right" (formula "53") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                      (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                      (rule "commute_or" (formula "53"))
                                                      (rule "inEqSimp_or_weaken1" (formula "53"))
                                                      (rule "add_literals" (formula "53") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                      (rule "true_left" (formula "53"))
                                                      (rule "lenNonNegative" (formula "52") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                      (rule "mul_literals" (formula "52") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "34"))
                                                      (rule "leq_literals" (formula "52") (term "0"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "true_left" (formula "52"))
                                                      (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                      (rule "castedGetAny" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                      (rule "castDel" (formula "54") (term "0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                      (rule "castedGetAny" (formula "43") (term "0"))
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "true_left" (formula "43"))
                                                      (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                      (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "35") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                                      (rule "qeq_literals" (formula "2") (term "0"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "42"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "53"))
                                                      (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                      (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                      (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "53") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "eqSymm" (formula "53") (term "1"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                      (rule "add_zero_right" (formula "53") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                      (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                      (rule "commute_or" (formula "53"))
                                                      (rule "inEqSimp_or_weaken1" (formula "53"))
                                                      (rule "add_literals" (formula "53") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                      (rule "true_left" (formula "53"))
                                                      (rule "lenNonNegative" (formula "52") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "52"))
                                                      (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                      (rule "mul_literals" (formula "52") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "34"))
                                                      (rule "leq_literals" (formula "52") (term "0"))
                                                       (builtin "One Step Simplification" (formula "52"))
                                                      (rule "true_left" (formula "52"))
                                                      (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                      (rule "castedGetAny" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                      (rule "castDel" (formula "54") (term "0"))
                                                       (builtin "One Step Simplification" (formula "54"))
                                                      (rule "true_left" (formula "54"))
                                                      (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                      (rule "castedGetAny" (formula "43") (term "0"))
                                                       (builtin "One Step Simplification" (formula "43"))
                                                      (rule "true_left" (formula "43"))
                                                      (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                      (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                      (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                      (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                      (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                      (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                      (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                      (rule "leq_literals" (formula "35") (term "0,1"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                                                      (rule "qeq_literals" (formula "35") (term "0"))
                                                       (builtin "One Step Simplification" (formula "35"))
                                                      (rule "closeFalse" (formula "35"))
                                                   )
                                                )
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                    (builtin "One Step Simplification" (formula "17"))
                                                   (rule "cut_direct" (formula "16") (term "0"))
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                                       (builtin "One Step Simplification" (formula "17"))
                                                      (rule "true_left" (formula "17"))
                                                      (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "16"))
                                                      (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "71"))
                                                       (builtin "One Step Simplification" (formula "18"))
                                                      (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                      (rule "applyEq" (formula "70") (term "0") (ifseqformula "17"))
                                                      (rule "cut_direct" (formula "42") (term "0,0,0,0"))
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "times_zero_2" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "eqSymm" (formula "53") (term "1"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                         (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                         (rule "commute_or" (formula "53"))
                                                         (rule "inEqSimp_or_weaken1" (formula "53"))
                                                         (rule "add_literals" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "lenNonNegative" (formula "52") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "52"))
                                                         (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                         (rule "mul_literals" (formula "52") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "34"))
                                                         (rule "leq_literals" (formula "52") (term "0"))
                                                          (builtin "One Step Simplification" (formula "52"))
                                                         (rule "true_left" (formula "52"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                         (rule "castDel" (formula "54") (term "0"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                         (rule "castedGetAny" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                         (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "35") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                                         (rule "qeq_literals" (formula "2") (term "0"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "42"))
                                                         (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                         (rule "andLeft" (formula "53"))
                                                         (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                         (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                         (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                         (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                         (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                         (rule "add_zero_right" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "eqSymm" (formula "53") (term "1"))
                                                         (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                         (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                         (rule "add_zero_right" (formula "53") (term "0,0"))
                                                         (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                         (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                         (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                         (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                         (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                         (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                         (rule "commute_or" (formula "53"))
                                                         (rule "inEqSimp_or_weaken1" (formula "53"))
                                                         (rule "add_literals" (formula "53") (term "1,0"))
                                                          (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                         (rule "true_left" (formula "53"))
                                                         (rule "lenNonNegative" (formula "52") (term "0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "52"))
                                                         (rule "applyEq" (formula "52") (term "0") (ifseqformula "53"))
                                                         (rule "inEqSimp_sepPosMonomial1" (formula "52"))
                                                         (rule "mul_literals" (formula "52") (term "1"))
                                                         (rule "inEqSimp_subsumption1" (formula "52") (ifseqformula "34"))
                                                         (rule "leq_literals" (formula "52") (term "0"))
                                                          (builtin "One Step Simplification" (formula "52"))
                                                         (rule "true_left" (formula "52"))
                                                         (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                         (rule "castedGetAny" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "true_left" (formula "1"))
                                                         (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                         (rule "castDel" (formula "54") (term "0"))
                                                          (builtin "One Step Simplification" (formula "54"))
                                                         (rule "true_left" (formula "54"))
                                                         (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                         (rule "castedGetAny" (formula "43") (term "0"))
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "true_left" (formula "43"))
                                                         (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                         (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                         (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                         (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                         (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                         (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                         (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                         (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                         (rule "leq_literals" (formula "35") (term "0,1"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                                                         (rule "qeq_literals" (formula "35") (term "0"))
                                                          (builtin "One Step Simplification" (formula "35"))
                                                         (rule "closeFalse" (formula "35"))
                                                      )
                                                   )
                                                   (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                                       (builtin "One Step Simplification" (formula "16"))
                                                      (rule "lenNonNegative" (formula "53") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "53"))
                                                      (rule "applyEq" (formula "53") (term "0") (ifseqformula "54"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "53"))
                                                      (rule "mul_literals" (formula "53") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "53") (ifseqformula "35"))
                                                      (rule "leq_literals" (formula "53") (term "0"))
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "true_left" (formula "53"))
                                                      (rule "cut_direct" (formula "43") (term "0,0,0,0"))
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                          (builtin "One Step Simplification" (formula "44"))
                                                         (rule "true_left" (formula "44"))
                                                         (rule "cut_direct" (formula "18") (term "1"))
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                             (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "71") (term "0") (ifseqformula "17"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53") (term "1"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                            (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                            (rule "commute_or" (formula "53"))
                                                            (rule "inEqSimp_or_weaken1" (formula "53"))
                                                            (rule "add_literals" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                            (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "35") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "2"))
                                                            (rule "qeq_literals" (formula "35") (term "0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "closeFalse" (formula "35"))
                                                         )
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                             (builtin "One Step Simplification" (formula "18"))
                                                            (rule "applyEq" (formula "73") (term "0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "55") (term "0") (ifseqformula "17"))
                                                            (rule "eqSymm" (formula "55"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53") (term "1"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                            (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                            (rule "commute_or" (formula "53"))
                                                            (rule "inEqSimp_or_weaken1" (formula "53"))
                                                            (rule "add_literals" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                            (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                            (rule "add_zero_right" (formula "35") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "35") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                                            (rule "qeq_literals" (formula "2") (term "0"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                      (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                          (builtin "One Step Simplification" (formula "43"))
                                                         (rule "cut_direct" (formula "18") (term "1"))
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                             (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "applyEq" (formula "73") (term "0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53") (term "1"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                            (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                            (rule "commute_or" (formula "53"))
                                                            (rule "inEqSimp_or_weaken1" (formula "53"))
                                                            (rule "add_literals" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (term "1") (ifseqformula "3"))
                                                            (rule "inEqSimp_homoInEq1" (formula "35") (term "0,1"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "35") (term "0,0,1"))
                                                            (rule "add_literals" (formula "35") (term "1,1,0,0,1"))
                                                            (rule "times_zero_1" (formula "35") (term "1,0,0,1"))
                                                            (rule "add_literals" (formula "35") (term "0,0,1"))
                                                            (rule "leq_literals" (formula "35") (term "0,1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "35"))
                                                            (rule "qeq_literals" (formula "2") (term "0"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                             (builtin "One Step Simplification" (formula "18"))
                                                            (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18"))
                                                            (rule "applyEq" (formula "73") (term "0") (ifseqformula "17"))
                                                            (rule "applyEq" (formula "55") (term "0") (ifseqformula "17"))
                                                            (rule "eqSymm" (formula "55"))
                                                            (rule "equalityToSeqGetAndSeqLenLeft" (formula "53") (inst "iv=iv"))
                                                            (rule "andLeft" (formula "53"))
                                                            (rule "lenOfSeqSub" (formula "54") (term "1,1,0,0"))
                                                            (rule "polySimp_elimSub" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "mul_literals" (formula "54") (term "1,1,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "1,1,1,0,0"))
                                                            (rule "lenOfSeqSub" (formula "53") (term "0"))
                                                            (rule "polySimp_elimSub" (formula "53") (term "1,0"))
                                                            (rule "mul_literals" (formula "53") (term "1,1,0"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "eqSymm" (formula "53") (term "1"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "0,1,1,0,0"))
                                                            (rule "add_zero_right" (formula "54") (term "0,0,1,1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "53") (term "0"))
                                                            (rule "add_zero_right" (formula "53") (term "0,0"))
                                                            (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "54") (term "1,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "54") (term "1,0,0,1,0,0"))
                                                            (rule "inEqSimp_commuteLeq" (formula "54") (term "0,0,0"))
                                                            (rule "applyEq" (formula "54") (term "0,0,1,0") (ifseqformula "55"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0"))
                                                            (rule "polySimp_mulLiterals" (formula "53") (term "0,0"))
                                                            (rule "polySimp_elimOne" (formula "53") (term "0,0"))
                                                            (rule "commute_or" (formula "53"))
                                                            (rule "inEqSimp_or_weaken1" (formula "53"))
                                                            (rule "add_zero_right" (formula "53") (term "1,0"))
                                                             (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "34")))
                                                            (rule "true_left" (formula "53"))
                                                            (rule "seqGetAlphaCast" (formula "1") (term "0"))
                                                            (rule "castedGetAny" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "seqGetAlphaCast" (formula "54") (term "0"))
                                                            (rule "castDel" (formula "54") (term "0"))
                                                             (builtin "One Step Simplification" (formula "54"))
                                                            (rule "true_left" (formula "54"))
                                                            (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                                            (rule "castedGetAny" (formula "43") (term "0"))
                                                             (builtin "One Step Simplification" (formula "43"))
                                                            (rule "true_left" (formula "43"))
                                                            (rule "allLeft" (formula "35") (inst "t=i_0"))
                                                            (rule "replace_known_left" (formula "35") (term "0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_commuteGeq" (formula "35") (term "1"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (term "0") (ifseqformula "2"))
                                                            (rule "qeq_literals" (formula "35") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "35"))
                                                            (rule "inEqSimp_contradInEq1" (formula "35") (ifseqformula "3"))
                                                            (rule "andLeft" (formula "35"))
                                                            (rule "inEqSimp_homoInEq1" (formula "35"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "35") (term "0"))
                                                            (rule "add_literals" (formula "35") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "35") (term "1,0"))
                                                            (rule "add_literals" (formula "35") (term "0"))
                                                            (rule "leq_literals" (formula "35"))
                                                            (rule "closeFalse" (formula "35"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch
                                       (rule "andRight" (formula "62"))
                                       (branch
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "80") (term "0,1,1,0,0,0") (ifseqformula "25"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "80") (term "0,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "notRight" (formula "62"))
                                          (rule "allRight" (formula "80") (inst "sk=f_0"))
                                          (rule "allRight" (formula "80") (inst "sk=o_0"))
                                          (rule "orRight" (formula "80"))
                                          (rule "orRight" (formula "80"))
                                          (rule "orRight" (formula "80"))
                                          (rule "polySimp_homoEq" (formula "61"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "61") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "61") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "60"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "60") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0"))
                                          (rule "add_zero_right" (formula "62") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "62") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "62") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "62") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "62") (term "0,1,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "41"))
                                          (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "41") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "62") (term "0,0,0"))
                                          (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "60"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                          (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "36") (term "0") (ifseqformula "29"))
                                          (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0") (ifseqformula "31"))
                                          (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                          (rule "qeq_literals" (formula "21"))
                                          (rule "true_left" (formula "21"))
                                          (rule "applyEq" (formula "58") (term "0,1,0") (ifseqformula "56"))
                                          (rule "polySimp_pullOutFactor1" (formula "58") (term "0"))
                                          (rule "add_literals" (formula "58") (term "1,0"))
                                          (rule "times_zero_1" (formula "58") (term "0"))
                                          (rule "leq_literals" (formula "58"))
                                          (rule "true_left" (formula "58"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                                           (builtin "One Step Simplification" (formula "28"))
                                          (rule "true_left" (formula "28"))
                                          (rule "applyEq" (formula "57") (term "1") (ifseqformula "1"))
                                          (rule "applyEq" (formula "59") (term "0,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "56") (term "0,1,0") (ifseqformula "54"))
                                          (rule "polySimp_pullOutFactor1" (formula "56") (term "0"))
                                          (rule "add_literals" (formula "56") (term "1,0"))
                                          (rule "times_zero_1" (formula "56") (term "0"))
                                           (builtin "One Step Simplification" (formula "56"))
                                          (rule "true_left" (formula "56"))
                                          (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                                          (rule "applyEq" (formula "46") (term "0") (ifseqformula "45"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                          (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                          (rule "polySimp_elimOne" (formula "37") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                          (rule "mul_literals" (formula "45") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "46"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                          (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "57") (term "0,0"))
                                          (rule "leq_literals" (formula "57") (term "0"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "false_right" (formula "57"))
                                          (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "46"))
                                          (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                          (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                          (rule "add_literals" (formula "33") (term "0,0"))
                                          (rule "qeq_literals" (formula "33") (term "0"))
                                           (builtin "One Step Simplification" (formula "33"))
                                          (rule "true_left" (formula "33"))
                                          (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "32"))
                                          (rule "leq_literals" (formula "44") (term "0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "pullOutSelect" (formula "73") (term "0") (inst "selectSK=f_0_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                          (rule "eqSymm" (formula "74"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "75") (term "0") (inst "selectSK=f_0_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "49"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "28"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,1,0,0") (ifseqformula "21"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "73"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "22"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "30"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "23"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_5"))
                                          (rule "simplifySelectOfAnon" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "replaceKnownSelect_taclet01000000000100_25" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "31"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "24"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "78"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                                          (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "77"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "nnf_imp2or" (formula "39") (term "0"))
                                          (rule "nnf_imp2or" (formula "17") (term "0"))
                                          (rule "nnf_notAnd" (formula "39") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "39") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "39") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "39") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,0"))
                                          (rule "mul_literals" (formula "39") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "39") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "39") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "39") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "39") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "39") (term "1,0"))
                                          (rule "nnf_notAnd" (formula "17") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "17") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "17") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "17") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "17") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "17") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "17") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "17") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "17") (term "1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,0,0,1,0,0"))
                                          (rule "add_zero_right" (formula "17") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0"))
                                          (rule "mul_literals" (formula "17") (term "1,1,0,0"))
                                          (rule "nnf_notAnd" (formula "39") (term "0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "39") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "39") (term "1,0,0,1,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "39") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "39") (term "1,1,0,1,0"))
                                          (rule "nnf_notAnd" (formula "39") (term "1,1,0"))
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "nnf_notAnd" (formula "39") (term "0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "39") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "39") (term "1,0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "39") (term "0,1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "39") (term "0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "39") (term "0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "39") (term "0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "39") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "39") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "39") (term "1,1,0,0,1,0"))
                                          (rule "commute_and" (formula "76"))
                                          (rule "commute_and" (formula "75"))
                                          (rule "commute_or_2" (formula "3") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or_2" (formula "1") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,1,0,0"))
                                          (rule "commute_or" (formula "39") (term "0,0"))
                                          (rule "commute_or" (formula "17") (term "0,0"))
                                          (rule "commute_or_2" (formula "17") (term "0"))
                                          (rule "commute_or" (formula "39") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "39") (term "0,1,0"))
                                          (rule "cut_direct" (formula "19") (term "0"))
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "true_left" (formula "20"))
                                             (rule "applyEq" (formula "21") (term "1,0") (ifseqformula "19"))
                                             (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "21"))
                                             (rule "applyEq" (formula "72") (term "0") (ifseqformula "21"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "21"))
                                             (rule "cnf_rightDist" (formula "38") (term "1,1,0"))
                                             (rule "cnf_rightDist" (formula "38") (term "0"))
                                             (rule "distr_forallAnd" (formula "38"))
                                             (rule "andLeft" (formula "38"))
                                             (rule "commute_or" (formula "39") (term "0"))
                                             (rule "shift_paren_or" (formula "38") (term "0"))
                                             (rule "commute_or_2" (formula "38") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "commute_or" (formula "39") (term "0,1,0"))
                                             (rule "shift_paren_or" (formula "38") (term "0,0"))
                                             (rule "commute_or" (formula "38") (term "0,0,0"))
                                              (builtin "One Step Simplification" (formula "38"))
                                             (rule "cnf_rightDist" (formula "39") (term "0"))
                                             (rule "distr_forallAnd" (formula "39"))
                                             (rule "andLeft" (formula "39"))
                                             (rule "commute_or_2" (formula "40") (term "0"))
                                             (rule "shift_paren_or" (formula "39") (term "0"))
                                             (rule "commute_or_2" (formula "39") (term "0,0"))
                                             (rule "inEqSimp_or_tautInEq0" (formula "39") (term "0,0,0"))
                                             (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                                             (rule "qeq_literals" (formula "39") (term "1,0,0,0"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "shift_paren_or" (formula "39") (term "0,0"))
                                             (rule "commute_or" (formula "39") (term "0,0,0"))
                                             (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                             (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
                                             (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,0,0"))
                                             (rule "add_literals" (formula "39") (term "1,0,1,0,0"))
                                             (rule "times_zero_1" (formula "39") (term "0,1,0,0"))
                                             (rule "leq_literals" (formula "39") (term "1,0,0"))
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "true_left" (formula "39"))
                                             (rule "commute_or_2" (formula "3") (term "0,0,0,1,0,0"))
                                             (rule "lenNonNegative" (formula "55") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "55"))
                                             (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                             (rule "mul_literals" (formula "55") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                             (rule "leq_literals" (formula "55") (term "0"))
                                              (builtin "One Step Simplification" (formula "55"))
                                             (rule "true_left" (formula "55"))
                                             (rule "equalityToSeqGetAndSeqLenLeft" (formula "56") (inst "iv=iv"))
                                             (rule "andLeft" (formula "56"))
                                             (rule "lenOfSeqSub" (formula "56") (term "0"))
                                             (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                             (rule "mul_literals" (formula "56") (term "1,1,0"))
                                             (rule "add_zero_right" (formula "56") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "56"))
                                             (rule "eqSymm" (formula "56") (term "1"))
                                             (rule "lenOfSeqSub" (formula "57") (term "1,1,0,0"))
                                             (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0"))
                                             (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0"))
                                             (rule "add_zero_right" (formula "57") (term "1,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "56") (term "0"))
                                             (rule "add_zero_right" (formula "56") (term "0,0"))
                                             (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0"))
                                             (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0"))
                                             (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                             (rule "applyEq" (formula "57") (term "0,0,1,0") (ifseqformula "58"))
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "true_left" (formula "57"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0"))
                                             (rule "polySimp_mulLiterals" (formula "56") (term "0,0"))
                                             (rule "polySimp_elimOne" (formula "56") (term "0,0"))
                                             (rule "commute_or" (formula "56"))
                                             (rule "inEqSimp_or_weaken1" (formula "56"))
                                             (rule "add_zero_right" (formula "56") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "37")))
                                             (rule "true_left" (formula "56"))
                                             (rule "cut_direct" (formula "45") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "46"))
                                                (rule "true_left" (formula "46"))
                                                (rule "cut_direct" (formula "76") (term "0,0"))
                                                (branch "CUT: o_0 = null TRUE"
                                                    (builtin "One Step Simplification" (formula "77"))
                                                   (rule "false_right" (formula "77"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "6"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "73") (term "0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "73"))
                                                   (rule "closeTrue" (formula "73"))
                                                )
                                                (branch "CUT: o_0 = null FALSE"
                                                    (builtin "One Step Simplification" (formula "77"))
                                                   (rule "notRight" (formula "77"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                   (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                   (rule "castDel" (formula "58") (term "0"))
                                                    (builtin "One Step Simplification" (formula "58"))
                                                   (rule "true_left" (formula "58"))
                                                   (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                   (rule "castedGetAny" (formula "47") (term "0"))
                                                    (builtin "One Step Simplification" (formula "47"))
                                                   (rule "true_left" (formula "47"))
                                                   (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                                      (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "75"))
                                                      (rule "closeTrue" (formula "75"))
                                                   )
                                                   (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "cut_direct" (formula "76") (term "1"))
                                                      (branch "CUT: o_0 = result_0 TRUE"
                                                          (builtin "One Step Simplification" (formula "77"))
                                                         (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "76") (term "0,1") (ifseqformula "1"))
                                                         (rule "sortsDisjointModuloNull" (formula "76") (term "1"))
                                                         (rule "replace_known_right" (formula "76") (term "0,1") (ifseqformula "64"))
                                                          (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "66")))
                                                         (rule "false_right" (formula "76"))
                                                         (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                         (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "31"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "true_left" (formula "2"))
                                                         (rule "applyEq" (formula "3") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "62"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEq" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "30"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                                         (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "eqSymm" (formula "74"))
                                                         (rule "applyEq" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "59"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEq" (formula "73") (term "0") (ifseqformula "1"))
                                                         (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "28"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "applyEq" (formula "2") (term "1,0,1,0,0") (ifseqformula "1"))
                                                         (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "27"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: o_0 = result_0 FALSE"
                                                          (builtin "One Step Simplification" (formula "77"))
                                                         (rule "false_right" (formula "77"))
                                                         (rule "cut_direct" (formula "75") (term "0"))
                                                         (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                             (builtin "One Step Simplification" (formula "76"))
                                                            (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                            (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                            (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                            (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                            (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "closeTrue" (formula "77"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "closeTrue" (formula "77"))
                                                            )
                                                         )
                                                         (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                             (builtin "One Step Simplification" (formula "76"))
                                                            (rule "false_right" (formula "76"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "78"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "eqSymm" (formula "78"))
                                                               (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "45"))
                                                (rule "cut_direct" (formula "77") (term "0,0"))
                                                (branch "CUT: o_0 = null TRUE"
                                                    (builtin "One Step Simplification" (formula "78"))
                                                   (rule "false_right" (formula "78"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "75"))
                                                   (rule "closeTrue" (formula "75"))
                                                )
                                                (branch "CUT: o_0 = null FALSE"
                                                    (builtin "One Step Simplification" (formula "78"))
                                                   (rule "notRight" (formula "78"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                   (rule "castDel" (formula "58") (term "0"))
                                                    (builtin "One Step Simplification" (formula "58"))
                                                   (rule "true_left" (formula "58"))
                                                   (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                   (rule "castedGetAny" (formula "47") (term "0"))
                                                    (builtin "One Step Simplification" (formula "47"))
                                                   (rule "true_left" (formula "47"))
                                                   (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                   (rule "ifthenelse_split" (formula "5") (term "0"))
                                                   (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                      (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "78"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0,0") (ifseqformula "3"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                      (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "cut_direct" (formula "77") (term "0"))
                                                      (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                         (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                         (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                         (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                         (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                         (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                         (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                         (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                         (rule "applyEq" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                         (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                         (rule "applyEq" (formula "77") (term "0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "77"))
                                                         (rule "false_right" (formula "77"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                            (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                            (rule "hideAuxiliaryEq" (formula "7"))
                                                            (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "closeTrue" (formula "77"))
                                                         )
                                                         (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "closeTrue" (formula "77"))
                                                         )
                                                      )
                                                      (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "false_right" (formula "78"))
                                                         (rule "cut_direct" (formula "76") (term "0"))
                                                         (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "applyEqRigid" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                            (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                            (rule "applyEqRigid" (formula "78") (term "0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "78"))
                                                            (rule "false_right" (formula "78"))
                                                            (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                            (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                            (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "closeTrue" (formula "77"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "closeTrue" (formula "77"))
                                                            )
                                                         )
                                                         (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "false_right" (formula "77"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "79"))
                                                               (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "eqSymm" (formula "79"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "cut_direct" (formula "20") (term "0"))
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "true_left" (formula "21"))
                                                (rule "applyEq" (formula "21") (term "1,1") (ifseqformula "20"))
                                                (rule "replace_known_right" (formula "21") (term "1") (ifseqformula "73"))
                                                 (builtin "One Step Simplification" (formula "21"))
                                                (rule "applyEq" (formula "73") (term "0") (ifseqformula "21"))
                                                (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "21"))
                                                (rule "cnf_rightDist" (formula "38") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "38") (term "0"))
                                                (rule "distr_forallAnd" (formula "38"))
                                                (rule "andLeft" (formula "38"))
                                                (rule "commute_or" (formula "39") (term "0"))
                                                (rule "shift_paren_or" (formula "38") (term "0"))
                                                (rule "commute_or_2" (formula "38") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "commute_or" (formula "39") (term "0,1,0"))
                                                (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                (rule "commute_or" (formula "38") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "38"))
                                                (rule "cnf_rightDist" (formula "39") (term "0"))
                                                (rule "distr_forallAnd" (formula "39"))
                                                (rule "andLeft" (formula "39"))
                                                (rule "commute_or_2" (formula "40") (term "0"))
                                                (rule "shift_paren_or" (formula "39") (term "0"))
                                                (rule "commute_or_2" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "39") (term "0,0,0"))
                                                (rule "add_literals" (formula "39") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "39") (term "1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                (rule "commute_or" (formula "39") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "39") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "39") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "39") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "39") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "39") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "39") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "true_left" (formula "39"))
                                                (rule "commute_or_2" (formula "3") (term "0,0,0,1,0,0"))
                                                (rule "cut_direct" (formula "45") (term "0,0,0,0"))
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "46"))
                                                   (rule "true_left" (formula "46"))
                                                   (rule "lenNonNegative" (formula "55") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "55"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                   (rule "mul_literals" (formula "55") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "55") (term "0"))
                                                    (builtin "One Step Simplification" (formula "55"))
                                                   (rule "true_left" (formula "55"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "56") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "56"))
                                                   (rule "lenOfSeqSub" (formula "57") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                                   (rule "times_zero_2" (formula "56") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "eqSymm" (formula "56") (term "1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                                   (rule "applyEq" (formula "57") (term "0,0,1,0") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "true_left" (formula "57"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0"))
                                                   (rule "commute_or" (formula "56"))
                                                   (rule "inEqSimp_or_weaken1" (formula "56"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "cut_direct" (formula "76") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "77"))
                                                      (rule "false_right" (formula "77"))
                                                      (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "6"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "5"))
                                                      (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "eqSymm" (formula "75"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "77"))
                                                      (rule "notRight" (formula "77"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                      (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                      (rule "castDel" (formula "58") (term "0"))
                                                       (builtin "One Step Simplification" (formula "58"))
                                                      (rule "true_left" (formula "58"))
                                                      (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                      (rule "castedGetAny" (formula "47") (term "0"))
                                                       (builtin "One Step Simplification" (formula "47"))
                                                      (rule "true_left" (formula "47"))
                                                      (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                                         (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "cut_direct" (formula "76") (term "0"))
                                                         (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                            (rule "applyEqRigid" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                            (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                            (rule "applyEqRigid" (formula "76") (term "0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "76"))
                                                            (rule "false_right" (formula "76"))
                                                            (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                            (rule "applyEq" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "closeTrue" (formula "76"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "closeTrue" (formula "76"))
                                                            )
                                                         )
                                                         (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "false_right" (formula "77"))
                                                            (rule "cut_direct" (formula "75") (term "1"))
                                                            (branch "CUT: o_0 = self TRUE"
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "23"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "eqSymm" (formula "77"))
                                                               (rule "applyEq" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "22"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "applyEq" (formula "75") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "21"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "CUT: o_0 = self FALSE"
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "false_right" (formula "76"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "eqSymm" (formula "78"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "eqSymm" (formula "78"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "lenNonNegative" (formula "55") (term "0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "55"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                   (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                   (rule "mul_literals" (formula "55") (term "1"))
                                                   (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                   (rule "leq_literals" (formula "55") (term "0"))
                                                    (builtin "One Step Simplification" (formula "55"))
                                                   (rule "true_left" (formula "55"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "56") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "56"))
                                                   (rule "lenOfSeqSub" (formula "57") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                                   (rule "mul_literals" (formula "56") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "eqSymm" (formula "56") (term "1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                                   (rule "applyEq" (formula "57") (term "0,0,1,0") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "true_left" (formula "57"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0"))
                                                   (rule "commute_or" (formula "56"))
                                                   (rule "inEqSimp_or_weaken1" (formula "56"))
                                                   (rule "add_literals" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "cut_direct" (formula "77") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "78"))
                                                      (rule "false_right" (formula "78"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                       (builtin "One Step Simplification" (formula "75"))
                                                      (rule "closeTrue" (formula "75"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "78"))
                                                      (rule "notRight" (formula "78"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "6"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                      (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                      (rule "castDel" (formula "58") (term "0"))
                                                       (builtin "One Step Simplification" (formula "58"))
                                                      (rule "true_left" (formula "58"))
                                                      (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                      (rule "castedGetAny" (formula "47") (term "0"))
                                                       (builtin "One Step Simplification" (formula "47"))
                                                      (rule "true_left" (formula "47"))
                                                      (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                      (rule "ifthenelse_split" (formula "5") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "5"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "77"))
                                                         (rule "closeTrue" (formula "77"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "cut_direct" (formula "77") (term "1"))
                                                         (branch "CUT: o_0 = result_0 TRUE"
                                                             (builtin "One Step Simplification" (formula "78"))
                                                            (rule "applyEq" (formula "5") (term "1,0,1,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "65"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEq" (formula "79") (term "0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "65"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "closeTrue" (formula "77"))
                                                         )
                                                         (branch "CUT: o_0 = result_0 FALSE"
                                                             (builtin "One Step Simplification" (formula "78"))
                                                            (rule "false_right" (formula "78"))
                                                            (rule "cut_direct" (formula "76") (term "1"))
                                                            (branch "CUT: o_0 = self TRUE"
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "applyEq" (formula "79") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "24"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "76") (term "0") (ifseqformula "1"))
                                                               (rule "eqSymm" (formula "76"))
                                                               (rule "sortsDisjointModuloNull" (formula "76"))
                                                               (rule "replace_known_right" (formula "76") (term "0") (ifseqformula "64"))
                                                                (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "66")))
                                                               (rule "false_right" (formula "76"))
                                                               (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "23"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "22"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "eqSymm" (formula "74"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "21"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "CUT: o_0 = self FALSE"
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "false_right" (formula "77"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "cnf_rightDist" (formula "39") (term "1,1,0"))
                                                (rule "cnf_rightDist" (formula "39") (term "0"))
                                                (rule "distr_forallAnd" (formula "39"))
                                                (rule "andLeft" (formula "39"))
                                                (rule "commute_or" (formula "40") (term "0"))
                                                (rule "shift_paren_or" (formula "39") (term "0"))
                                                (rule "commute_or_2" (formula "39") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "commute_or" (formula "40") (term "0,1,0"))
                                                (rule "shift_paren_or" (formula "39") (term "0,0"))
                                                (rule "commute_or" (formula "39") (term "0,0,0"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "cnf_rightDist" (formula "40") (term "0"))
                                                (rule "distr_forallAnd" (formula "40"))
                                                (rule "andLeft" (formula "40"))
                                                (rule "commute_or_2" (formula "41") (term "0"))
                                                (rule "shift_paren_or" (formula "40") (term "0"))
                                                (rule "commute_or_2" (formula "40") (term "0,0"))
                                                (rule "inEqSimp_or_tautInEq0" (formula "40") (term "0,0,0"))
                                                (rule "add_literals" (formula "40") (term "1,1,0,0,0"))
                                                (rule "qeq_literals" (formula "40") (term "1,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "shift_paren_or" (formula "40") (term "0,0"))
                                                (rule "commute_or" (formula "40") (term "0,0,0"))
                                                (rule "inEqSimp_or_tautInEq1" (formula "40") (term "0,0"))
                                                (rule "inEqSimp_homoInEq1" (formula "40") (term "1,0,0"))
                                                (rule "polySimp_pullOutFactor1" (formula "40") (term "0,1,0,0"))
                                                (rule "add_literals" (formula "40") (term "1,0,1,0,0"))
                                                (rule "times_zero_1" (formula "40") (term "0,1,0,0"))
                                                (rule "leq_literals" (formula "40") (term "1,0,0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "commute_or_2" (formula "3") (term "0,0,0,1,0,0"))
                                                (rule "cut_direct" (formula "21") (term "1"))
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                                    (builtin "One Step Simplification" (formula "22"))
                                                   (rule "true_left" (formula "22"))
                                                   (rule "applyEq" (formula "74") (term "0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "21"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "56") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "56"))
                                                   (rule "lenOfSeqSub" (formula "57") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                                   (rule "times_zero_2" (formula "56") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "eqSymm" (formula "56") (term "1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                                   (rule "applyEq" (formula "57") (term "0,0,1,0") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "true_left" (formula "57"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0"))
                                                   (rule "commute_or" (formula "56"))
                                                   (rule "inEqSimp_or_weaken1" (formula "56"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "cut_direct" (formula "45") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "46"))
                                                      (rule "true_left" (formula "46"))
                                                      (rule "lenNonNegative" (formula "55") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55"))
                                                      (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                      (rule "mul_literals" (formula "55") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "77") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "false_right" (formula "78"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "notRight" (formula "78"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                         (rule "castDel" (formula "58") (term "0"))
                                                          (builtin "One Step Simplification" (formula "58"))
                                                         (rule "true_left" (formula "58"))
                                                         (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                         (rule "castedGetAny" (formula "47") (term "0"))
                                                          (builtin "One Step Simplification" (formula "47"))
                                                         (rule "true_left" (formula "47"))
                                                         (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "eqSymm" (formula "77"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "cut_direct" (formula "77") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                               (rule "applyEqRigid" (formula "77") (term "0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "false_right" (formula "77"))
                                                               (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                               (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                               (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                               (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "closeTrue" (formula "77"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "closeTrue" (formula "77"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "cut_direct" (formula "76") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "applyEqRigid" (formula "78") (term "0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                                  (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                                  (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                                  (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                                  (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "77"))
                                                                     (rule "closeTrue" (formula "77"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "77"))
                                                                     (rule "closeTrue" (formula "77"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "false_right" (formula "77"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "79"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "79"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "1"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "lenNonNegative" (formula "55") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55"))
                                                      (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                      (rule "mul_literals" (formula "55") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "78") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "false_right" (formula "79"))
                                                         (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "6"))
                                                         (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "76"))
                                                         (rule "closeTrue" (formula "76"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "notRight" (formula "79"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                         (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                         (rule "castDel" (formula "58") (term "0"))
                                                          (builtin "One Step Simplification" (formula "58"))
                                                         (rule "true_left" (formula "58"))
                                                         (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                         (rule "castedGetAny" (formula "47") (term "0"))
                                                          (builtin "One Step Simplification" (formula "47"))
                                                         (rule "true_left" (formula "47"))
                                                         (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                            (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "eqSymm" (formula "79"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "cut_direct" (formula "78") (term "1"))
                                                            (branch "CUT: o_0 = result_0 TRUE"
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "65"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEq" (formula "6") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "65"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "79"))
                                                               (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "64"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "64"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEq" (formula "76") (term "0,1") (ifseqformula "1"))
                                                               (rule "sortsDisjointModuloNull" (formula "76") (term "1"))
                                                               (rule "replace_known_right" (formula "76") (term "1,1") (ifseqformula "67"))
                                                                (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "65")))
                                                               (rule "false_right" (formula "76"))
                                                               (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "30"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "true_left" (formula "2"))
                                                               (rule "applyEq" (formula "76") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "29"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "applyEq" (formula "75") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "28"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "2") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "27"))
                                                                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                               (rule "closeFalse" (formula "2"))
                                                            )
                                                            (branch "CUT: o_0 = result_0 FALSE"
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "false_right" (formula "79"))
                                                               (rule "cut_direct" (formula "77") (term "1"))
                                                               (branch "CUT: o_0 = self TRUE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "78") (term "0") (ifseqformula "1"))
                                                                  (rule "eqSymm" (formula "78"))
                                                                  (rule "sortsDisjointModuloNull" (formula "78"))
                                                                  (rule "replace_known_right" (formula "78") (term "0") (ifseqformula "66"))
                                                                   (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "68")))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "78") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "24"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "23"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "eqSymm" (formula "76"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "22"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "21"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,0") (ifseqformula "20"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "CUT: o_0 = self FALSE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "1"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "applyEq" (formula "59") (term "0") (ifseqformula "21"))
                                                   (rule "eqSymm" (formula "59"))
                                                   (rule "applyEq" (formula "18") (term "1,0") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "74") (term "0") (ifseqformula "20"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "56") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "56"))
                                                   (rule "lenOfSeqSub" (formula "57") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "57") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "1,1,1,0,0"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,0"))
                                                   (rule "mul_literals" (formula "56") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "eqSymm" (formula "56") (term "1"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "57") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "57") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0"))
                                                   (rule "applyEq" (formula "57") (term "0,0,1,0") (ifseqformula "58"))
                                                    (builtin "One Step Simplification" (formula "57"))
                                                   (rule "true_left" (formula "57"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0,0"))
                                                   (rule "commute_or" (formula "56"))
                                                   (rule "inEqSimp_or_weaken1" (formula "56"))
                                                   (rule "add_zero_right" (formula "56") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "37")))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "cut_direct" (formula "45") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "46"))
                                                      (rule "true_left" (formula "46"))
                                                      (rule "lenNonNegative" (formula "55") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55"))
                                                      (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                      (rule "mul_literals" (formula "55") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "78") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "false_right" (formula "79"))
                                                         (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                                         (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "notRight" (formula "79"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                         (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                         (rule "castDel" (formula "58") (term "0"))
                                                          (builtin "One Step Simplification" (formula "58"))
                                                         (rule "true_left" (formula "58"))
                                                         (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                         (rule "castedGetAny" (formula "47") (term "0"))
                                                          (builtin "One Step Simplification" (formula "47"))
                                                         (rule "true_left" (formula "47"))
                                                         (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "eqSymm" (formula "78"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "cut_direct" (formula "78") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "applyEq" (formula "78") (term "0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                               (rule "applyEqRigid" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                               (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                               (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                               (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "closeTrue" (formula "78"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "closeTrue" (formula "78"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "false_right" (formula "79"))
                                                               (rule "cut_direct" (formula "77") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                                  (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                                  (rule "applyEq" (formula "79") (term "0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                                  (rule "applyEq" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                                  (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "closeTrue" (formula "78"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "closeTrue" (formula "78"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "1"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "lenNonNegative" (formula "55") (term "0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "55"))
                                                      (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                      (rule "mul_literals" (formula "55") (term "1"))
                                                      (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                      (rule "leq_literals" (formula "55") (term "0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "79") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "80"))
                                                         (rule "false_right" (formula "80"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "3"))
                                                         (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "76"))
                                                         (rule "closeTrue" (formula "76"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "80"))
                                                         (rule "notRight" (formula "80"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "ifthenelse_negated" (formula "6") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "seqGetAlphaCast" (formula "58") (term "0"))
                                                         (rule "castDel" (formula "58") (term "0"))
                                                          (builtin "One Step Simplification" (formula "58"))
                                                         (rule "true_left" (formula "58"))
                                                         (rule "seqGetAlphaCast" (formula "47") (term "0"))
                                                         (rule "castedGetAny" (formula "47") (term "0"))
                                                          (builtin "One Step Simplification" (formula "47"))
                                                         (rule "true_left" (formula "47"))
                                                         (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "4"))
                                                            (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "78"))
                                                            (rule "closeTrue" (formula "78"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "cut_direct" (formula "79") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "applyEqRigid" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "22"))
                                                               (rule "applyEq" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "50"))
                                                               (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "43"))
                                                               (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "29"))
                                                               (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "53"))
                                                               (rule "applyEqRigid" (formula "79") (term "0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "false_right" (formula "79"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "closeTrue" (formula "79"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "closeTrue" (formula "79"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "false_right" (formula "80"))
                                                               (rule "cut_direct" (formula "78") (term "1"))
                                                               (branch "CUT: o_0 = self TRUE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "24"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "23"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "22"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "21"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "closeTrue" (formula "78"))
                                                               )
                                                               (branch "CUT: o_0 = self FALSE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "81"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "81"))
                                                                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "1"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "80") (term "0,1,1,0,0,0") (ifseqformula "25"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "80") (term "0,0,1,1,0,0,0") (ifseqformula "17"))
                                          (rule "allRight" (formula "80") (inst "sk=f_0"))
                                          (rule "allRight" (formula "80") (inst "sk=o_0"))
                                          (rule "orRight" (formula "80"))
                                          (rule "orRight" (formula "80"))
                                          (rule "orRight" (formula "80"))
                                          (rule "polySimp_homoEq" (formula "60"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "60") (term "1,0"))
                                          (rule "polySimp_mulAssoc" (formula "60") (term "0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "60") (term "0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "60") (term "0,1,0"))
                                          (rule "polySimp_elimOne" (formula "60") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "60") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "40"))
                                          (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "40") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0"))
                                          (rule "add_zero_right" (formula "61") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0"))
                                          (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "61") (term "0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "59"))
                                          (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "59") (term "0"))
                                          (rule "replace_known_left" (formula "61") (term "0,0") (ifseqformula "59"))
                                           (builtin "One Step Simplification" (formula "61"))
                                          (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                          (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "57"))
                                          (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                          (rule "add_literals" (formula "59") (term "1,0"))
                                          (rule "times_zero_1" (formula "59") (term "0"))
                                          (rule "leq_literals" (formula "59"))
                                          (rule "true_left" (formula "59"))
                                          (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "50") (term "0") (ifseqformula "28"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "30"))
                                          (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "30"))
                                          (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "29"))
                                          (rule "true_left" (formula "29"))
                                          (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                          (rule "qeq_literals" (formula "20"))
                                          (rule "true_left" (formula "20"))
                                          (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                                          (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                           (builtin "One Step Simplification" (formula "27"))
                                          (rule "true_left" (formula "27"))
                                          (rule "applyEq" (formula "55") (term "0,1,0") (ifseqformula "53"))
                                          (rule "polySimp_pullOutFactor1" (formula "55") (term "0"))
                                          (rule "add_literals" (formula "55") (term "1,0"))
                                          (rule "times_zero_1" (formula "55") (term "0"))
                                           (builtin "One Step Simplification" (formula "55"))
                                          (rule "true_left" (formula "55"))
                                          (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "58") (term "0,0") (ifseqformula "27"))
                                          (rule "applyEq" (formula "45") (term "0") (ifseqformula "44"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                          (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                          (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                          (rule "polySimp_elimOne" (formula "36") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                          (rule "mul_literals" (formula "44") (term "1"))
                                          (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "45"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                          (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                          (rule "add_literals" (formula "57") (term "0,0"))
                                          (rule "leq_literals" (formula "57") (term "0"))
                                           (builtin "One Step Simplification" (formula "57"))
                                          (rule "false_right" (formula "57"))
                                          (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                                          (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                          (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "32") (term "0,0"))
                                          (rule "qeq_literals" (formula "32") (term "0"))
                                           (builtin "One Step Simplification" (formula "32"))
                                          (rule "true_left" (formula "32"))
                                          (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                                          (rule "leq_literals" (formula "43") (term "0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "53") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1"))
                                          (rule "pullOutSelect" (formula "73") (term "1") (inst "selectSK=f_0_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "46"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0,0") (ifseqformula "25"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,1,0,0") (ifseqformula "18"))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "71"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "74") (term "0") (inst "selectSK=f_0_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                          (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "27"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "20"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                          (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,1,1,0,0") (ifseqformula "22"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_5"))
                                          (rule "simplifySelectOfAnon" (formula "3"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "replaceKnownSelect_taclet11000000000100_26" (formula "3") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "30"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "23"))
                                          (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "78"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "elementOfUnion" (formula "3") (term "0,0,0"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "77"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                          (rule "hideAuxiliaryEq" (formula "3"))
                                          (rule "nnf_imp2or" (formula "16") (term "0"))
                                          (rule "nnf_imp2or" (formula "38") (term "0"))
                                          (rule "nnf_imp2or" (formula "58") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "16") (term "0,0"))
                                          (rule "inEqSimp_notLeq" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "16") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "16") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "16") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "16") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "16") (term "1,0,0,0"))
                                          (rule "inEqSimp_notGeq" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "16") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0"))
                                          (rule "mul_literals" (formula "16") (term "1,1,0,0"))
                                          (rule "nnf_notOr" (formula "38") (term "1,0"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,0"))
                                          (rule "inEqSimp_notGeq" (formula "38") (term "1,0,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,1,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,0"))
                                          (rule "mul_literals" (formula "38") (term "1,1,0,0"))
                                          (rule "inEqSimp_notLeq" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,0,0,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,0,0,0"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "58") (term "0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "58") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "58") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "58") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "58") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "58") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "58") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "58") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "58") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "58") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "58") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "58") (term "1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "58") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "58") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "58") (term "1,0,0,0,1"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,1,0"))
                                          (rule "inEqSimp_notGeq" (formula "38") (term "1,0,1,0"))
                                          (rule "times_zero_1" (formula "38") (term "1,0,0,1,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,1,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "38") (term "1,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "1,1,0,1,0"))
                                          (rule "nnf_notAnd" (formula "38") (term "1,1,0"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "nnf_notAnd" (formula "38") (term "0,0,1,0"))
                                          (rule "inEqSimp_notLeq" (formula "38") (term "1,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "38") (term "1,0,0,1,0,0,1,0"))
                                          (rule "mul_literals" (formula "38") (term "0,1,0,0,1,0,0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "38") (term "0,0,1,0,0,1,0"))
                                          (rule "add_literals" (formula "38") (term "0,0,0,1,0,0,1,0"))
                                          (rule "add_zero_left" (formula "38") (term "0,0,1,0,0,1,0"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "38") (term "1,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "38") (term "1,1,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "38") (term "1,1,0,0,1,0"))
                                          (rule "commute_and" (formula "75"))
                                          (rule "commute_and" (formula "76"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or_2" (formula "5") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "3") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,1,0,0"))
                                          (rule "commute_or" (formula "38") (term "0,0"))
                                          (rule "commute_or" (formula "16") (term "0,0"))
                                          (rule "commute_or_2" (formula "16") (term "0"))
                                          (rule "commute_or" (formula "38") (term "1,1,0"))
                                          (rule "commute_or_2" (formula "38") (term "0,1,0"))
                                          (rule "cut_direct" (formula "18") (term "0"))
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "true_left" (formula "19"))
                                             (rule "applyEq" (formula "20") (term "1,0") (ifseqformula "18"))
                                             (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "20"))
                                             (rule "applyEq" (formula "72") (term "0") (ifseqformula "20"))
                                             (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "19"))
                                             (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "20"))
                                             (rule "cut_direct" (formula "44") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "45"))
                                                (rule "true_left" (formula "45"))
                                                (rule "lenNonNegative" (formula "54") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                                (rule "mul_literals" (formula "54") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "true_left" (formula "54"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                (rule "andLeft" (formula "55"))
                                                (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "55") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "eqSymm" (formula "55") (term "1"))
                                                (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                (rule "add_zero_right" (formula "55") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                (rule "commute_or" (formula "55"))
                                                (rule "inEqSimp_or_weaken1" (formula "55"))
                                                (rule "add_literals" (formula "55") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                (rule "true_left" (formula "55"))
                                                (rule "cut_direct" (formula "76") (term "0,0"))
                                                (branch "CUT: o_0 = null TRUE"
                                                    (builtin "One Step Simplification" (formula "77"))
                                                   (rule "false_right" (formula "77"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: o_0 = null FALSE"
                                                    (builtin "One Step Simplification" (formula "77"))
                                                   (rule "notRight" (formula "77"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "77")))
                                                   (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "eqSymm" (formula "77"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "76"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "76"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "76"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                   (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                   (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                   (rule "castDel" (formula "56") (term "0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                   (rule "castedGetAny" (formula "45") (term "0"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "true_left" (formula "45"))
                                                   (rule "cnf_rightDist" (formula "37") (term "0"))
                                                   (rule "distr_forallAnd" (formula "37"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "commute_or" (formula "38") (term "0"))
                                                   (rule "shift_paren_or" (formula "37") (term "0"))
                                                   (rule "commute_or_2" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "commute_or" (formula "38") (term "0,1,0"))
                                                   (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                   (rule "commute_or" (formula "37") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cnf_rightDist" (formula "38") (term "0"))
                                                   (rule "distr_forallAnd" (formula "38"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "commute_or_2" (formula "39") (term "0"))
                                                   (rule "shift_paren_or" (formula "38") (term "0"))
                                                   (rule "commute_or_2" (formula "38") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                   (rule "commute_or" (formula "38") (term "0,0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                   (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                   (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                   (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "lenNonNegative" (formula "57") (term "0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "lenNonNegative" (formula "58") (term "1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "cut_direct" (formula "59") (term "0"))
                                                   (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                       (builtin "One Step Simplification" (formula "60"))
                                                      (rule "allRight" (formula "60") (inst "sk=iv_0"))
                                                      (rule "orRight" (formula "60"))
                                                      (rule "orRight" (formula "60"))
                                                      (rule "inEqSimp_leqRight" (formula "60"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "inEqSimp_geqRight" (formula "61"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                                      (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                         (rule "hideAuxiliaryEq" (formula "7"))
                                                         (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "7"))
                                                         (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                         (rule "hideAuxiliaryEq" (formula "7"))
                                                         (rule "eqSymm" (formula "80"))
                                                         (rule "replace_known_left" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "8"))
                                                         (rule "hideAuxiliaryEq" (formula "8"))
                                                         (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "79")))
                                                         (rule "closeFalse" (formula "7"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "replace_known_right" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "cut_direct" (formula "78") (term "0"))
                                                         (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                             (builtin "One Step Simplification" (formula "79"))
                                                            (rule "applyEq" (formula "8") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "8") (term "2,0") (ifseqformula "45"))
                                                            (rule "applyEqRigid" (formula "7") (term "2,1,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "7") (term "1,0") (ifseqformula "24"))
                                                            (rule "applyEqRigid" (formula "80") (term "0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "80"))
                                                            (rule "false_right" (formula "80"))
                                                            (rule "applyEqRigid" (formula "9") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "9") (term "2,0") (ifseqformula "52"))
                                                            (rule "applyEqRigid" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "31"))
                                                            (rule "ifthenelse_split" (formula "7") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "8"))
                                                               (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                               (rule "hideAuxiliaryEq" (formula "8"))
                                                               (rule "replace_known_left" (formula "9") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "8"))
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "closeTrue" (formula "80"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                               (rule "hideAuxiliaryEq" (formula "8"))
                                                               (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "7"))
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "closeTrue" (formula "80"))
                                                            )
                                                         )
                                                         (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                             (builtin "One Step Simplification" (formula "79"))
                                                            (rule "false_right" (formula "79"))
                                                            (rule "cut_direct" (formula "79") (term "1"))
                                                            (branch "CUT: o_0 = result_0 TRUE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "applyEq" (formula "9") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "9") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "33"))
                                                                (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "64"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "eqSymm" (formula "79"))
                                                               (rule "applyEq" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "63"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEq" (formula "78") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "31"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "77") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "30"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "76"))
                                                               (rule "applyEq" (formula "76") (term "1,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "closeTrue" (formula "76"))
                                                            )
                                                            (branch "CUT: o_0 = result_0 FALSE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "false_right" (formula "80"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "eqSymm" (formula "81"))
                                                                  (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "80")))
                                                                  (rule "closeFalse" (formula "7"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "eqSymm" (formula "81"))
                                                                  (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "80")))
                                                                  (rule "closeFalse" (formula "6"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                       (builtin "One Step Simplification" (formula "60"))
                                                      (rule "false_right" (formula "60"))
                                                      (rule "ifthenelse_split" (formula "4") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "4"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_left" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "closeTrue" (formula "78"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "58"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "cut_direct" (formula "76") (term "0"))
                                                         (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "29"))
                                                            (rule "applyEqRigid" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "50"))
                                                            (rule "applyEqRigid" (formula "78") (term "0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "78"))
                                                            (rule "false_right" (formula "78"))
                                                            (rule "applyEqRigid" (formula "5") (term "2,1,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "5") (term "1,0") (ifseqformula "22"))
                                                            (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                            (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "43"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "closeTrue" (formula "78"))
                                                            )
                                                            (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "closeTrue" (formula "78"))
                                                            )
                                                         )
                                                         (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "false_right" (formula "77"))
                                                            (rule "cut_direct" (formula "77") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "applyEq" (formula "5") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "1,0") (ifseqformula "22"))
                                                               (rule "applyEqRigid" (formula "77") (term "0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "77"))
                                                               (rule "false_right" (formula "77"))
                                                               (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "43"))
                                                               (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "29"))
                                                               (rule "applyEqRigid" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "50"))
                                                               (rule "ifthenelse_split" (formula "5") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "closeTrue" (formula "78"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "closeTrue" (formula "78"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "ifthenelse_split" (formula "4") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "78")))
                                                                  (rule "closeFalse" (formula "5"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "57"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "78")))
                                                                  (rule "closeFalse" (formula "4"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "44"))
                                                (rule "lenNonNegative" (formula "54") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                                (rule "mul_literals" (formula "54") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "true_left" (formula "54"))
                                                (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                (rule "andLeft" (formula "55"))
                                                (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                (rule "add_zero_right" (formula "55") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "eqSymm" (formula "55") (term "1"))
                                                (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                (rule "add_zero_right" (formula "55") (term "0,0"))
                                                (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                 (builtin "One Step Simplification" (formula "56"))
                                                (rule "true_left" (formula "56"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                (rule "commute_or" (formula "55"))
                                                (rule "inEqSimp_or_weaken1" (formula "55"))
                                                (rule "add_zero_right" (formula "55") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                (rule "true_left" (formula "55"))
                                                (rule "cut_direct" (formula "77") (term "0,0"))
                                                (branch "CUT: o_0 = null TRUE"
                                                    (builtin "One Step Simplification" (formula "78"))
                                                   (rule "false_right" (formula "78"))
                                                   (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                   (rule "closeFalse" (formula "3"))
                                                )
                                                (branch "CUT: o_0 = null FALSE"
                                                    (builtin "One Step Simplification" (formula "78"))
                                                   (rule "notRight" (formula "78"))
                                                   (rule "replace_known_left" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "78")))
                                                   (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                   (rule "hideAuxiliaryEq" (formula "6"))
                                                   (rule "eqSymm" (formula "78"))
                                                   (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "77"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                   (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                   (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                   (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                   (rule "castDel" (formula "56") (term "0"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                   (rule "castedGetAny" (formula "45") (term "0"))
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "true_left" (formula "45"))
                                                   (rule "cnf_rightDist" (formula "37") (term "0"))
                                                   (rule "distr_forallAnd" (formula "37"))
                                                   (rule "andLeft" (formula "37"))
                                                   (rule "commute_or" (formula "38") (term "0"))
                                                   (rule "shift_paren_or" (formula "37") (term "0"))
                                                   (rule "commute_or_2" (formula "37") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "commute_or" (formula "38") (term "0,1,0"))
                                                   (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                   (rule "commute_or" (formula "37") (term "0,0,0"))
                                                    (builtin "One Step Simplification" (formula "37"))
                                                   (rule "cnf_rightDist" (formula "38") (term "0"))
                                                   (rule "distr_forallAnd" (formula "38"))
                                                   (rule "andLeft" (formula "38"))
                                                   (rule "commute_or_2" (formula "39") (term "0"))
                                                   (rule "shift_paren_or" (formula "38") (term "0"))
                                                   (rule "commute_or_2" (formula "38") (term "0,0"))
                                                   (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                   (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                   (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                   (rule "commute_or" (formula "38") (term "0,0,0"))
                                                   (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                   (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                   (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                   (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                   (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                    (builtin "One Step Simplification" (formula "38"))
                                                   (rule "true_left" (formula "38"))
                                                   (rule "lenNonNegative" (formula "58") (term "1,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "1"))
                                                   (rule "cut_direct" (formula "59") (term "0"))
                                                   (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                       (builtin "One Step Simplification" (formula "60"))
                                                      (rule "allRight" (formula "60") (inst "sk=iv_0"))
                                                      (rule "orRight" (formula "60"))
                                                      (rule "orRight" (formula "60"))
                                                      (rule "inEqSimp_geqRight" (formula "61"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                      (rule "inEqSimp_leqRight" (formula "61"))
                                                      (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0"))
                                                      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                      (rule "ifthenelse_split" (formula "6") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                         (rule "hideAuxiliaryEq" (formula "7"))
                                                         (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "9"))
                                                         (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                                         (rule "hideAuxiliaryEq" (formula "9"))
                                                         (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                          (builtin "One Step Simplification" (formula "81"))
                                                         (rule "closeTrue" (formula "81"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "6"))
                                                         (rule "replace_known_right" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "8"))
                                                         (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "7"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "60"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "cut_direct" (formula "79") (term "1"))
                                                         (branch "CUT: o_0 = self TRUE"
                                                             (builtin "One Step Simplification" (formula "80"))
                                                            (rule "applyEq" (formula "9") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "9") (term "1,2,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "8") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "26"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                            (rule "hideAuxiliaryEq" (formula "8"))
                                                            (rule "applyEq" (formula "80") (term "0,1") (ifseqformula "1"))
                                                            (rule "eqSymm" (formula "80") (term "1"))
                                                            (rule "sortsDisjointModuloNull" (formula "80") (term "1"))
                                                            (rule "replace_known_right" (formula "80") (term "0,1") (ifseqformula "67"))
                                                             (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "69")))
                                                            (rule "false_right" (formula "80"))
                                                            (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "8") (term "1,0,1,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "8") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "25"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "8"))
                                                             (builtin "One Step Simplification" (formula "79"))
                                                            (rule "closeTrue" (formula "79"))
                                                         )
                                                         (branch "CUT: o_0 = self FALSE"
                                                             (builtin "One Step Simplification" (formula "80"))
                                                            (rule "false_right" (formula "80"))
                                                            (rule "cut_direct" (formula "80") (term "1"))
                                                            (branch "CUT: o_0 = result_0 TRUE"
                                                                (builtin "One Step Simplification" (formula "81"))
                                                               (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                               (rule "sortsDisjointModuloNull" (formula "80"))
                                                               (rule "replace_known_right" (formula "80") (term "0") (ifseqformula "68"))
                                                                (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "70")))
                                                               (rule "false_right" (formula "80"))
                                                               (rule "applyEq" (formula "9") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "33"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "true_left" (formula "6"))
                                                               (rule "applyEq" (formula "6") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "66"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "80"))
                                                               (rule "applyEq" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "31"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "applyEq" (formula "6") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "30"))
                                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "79")))
                                                               (rule "closeFalse" (formula "6"))
                                                            )
                                                            (branch "CUT: o_0 = result_0 FALSE"
                                                                (builtin "One Step Simplification" (formula "81"))
                                                               (rule "false_right" (formula "81"))
                                                               (rule "ifthenelse_split" (formula "6") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "eqSymm" (formula "82"))
                                                                  (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")))
                                                                  (rule "closeFalse" (formula "7"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                  (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "eqSymm" (formula "82"))
                                                                  (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "5"))
                                                                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "81")))
                                                                  (rule "closeFalse" (formula "6"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                       (builtin "One Step Simplification" (formula "60"))
                                                      (rule "false_right" (formula "60"))
                                                      (rule "ifthenelse_split" (formula "3") (term "0"))
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                         (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "eqSymm" (formula "77"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "77")))
                                                         (rule "closeFalse" (formula "4"))
                                                      )
                                                      (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                         (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "57"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "57"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "57"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "cut_direct" (formula "76") (term "1"))
                                                         (branch "CUT: o_0 = self TRUE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "6") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "6") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "23"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "applyEq" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "22"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "true_left" (formula "3"))
                                                            (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "77") (term "0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                            (rule "applyEq" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                            (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "21"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "closeTrue" (formula "77"))
                                                         )
                                                         (branch "CUT: o_0 = self FALSE"
                                                             (builtin "One Step Simplification" (formula "77"))
                                                            (rule "false_right" (formula "77"))
                                                            (rule "cut_direct" (formula "77") (term "1"))
                                                            (branch "CUT: o_0 = result_0 TRUE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "30"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "applyEq" (formula "78") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "29"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "62"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "eqSymm" (formula "76"))
                                                               (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "61"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "73") (term "0") (ifseqformula "1"))
                                                               (rule "sortsDisjointModuloNull" (formula "73"))
                                                               (rule "replace_known_right" (formula "73") (term "0") (ifseqformula "61"))
                                                                (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "63")))
                                                               (rule "false_right" (formula "73"))
                                                               (rule "applyEq" (formula "74") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "27"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "74")))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch "CUT: o_0 = result_0 FALSE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "ifthenelse_split" (formula "3") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "78")))
                                                                  (rule "closeFalse" (formula "4"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "78")))
                                                                  (rule "closeFalse" (formula "3"))
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                              (builtin "One Step Simplification" (formula "18"))
                                             (rule "cut_direct" (formula "19") (term "0"))
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "true_left" (formula "20"))
                                                (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "19"))
                                                (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "73"))
                                                 (builtin "One Step Simplification" (formula "20"))
                                                (rule "applyEq" (formula "73") (term "0") (ifseqformula "20"))
                                                (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "20"))
                                                (rule "lenNonNegative" (formula "54") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "54"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "55"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "54"))
                                                (rule "mul_literals" (formula "54") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "54") (ifseqformula "36"))
                                                (rule "leq_literals" (formula "54") (term "0"))
                                                 (builtin "One Step Simplification" (formula "54"))
                                                (rule "true_left" (formula "54"))
                                                (rule "cut_direct" (formula "44") (term "0,0,0,0"))
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "45"))
                                                   (rule "true_left" (formula "45"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "55"))
                                                   (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                   (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "55") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "55"))
                                                   (rule "eqSymm" (formula "55") (term "1"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                   (rule "add_zero_right" (formula "55") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                   (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                   (rule "commute_or" (formula "55"))
                                                   (rule "inEqSimp_or_weaken1" (formula "55"))
                                                   (rule "add_literals" (formula "55") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                   (rule "true_left" (formula "55"))
                                                   (rule "cut_direct" (formula "76") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "77"))
                                                      (rule "false_right" (formula "77"))
                                                      (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "applyEqReverse" (formula "6") (term "2,0") (ifseqformula "5"))
                                                      (rule "hideAuxiliaryEq" (formula "5"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "77"))
                                                      (rule "notRight" (formula "77"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_left" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "77")))
                                                      (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "77"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "76"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "76"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                      (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                      (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                      (rule "castDel" (formula "56") (term "0"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                      (rule "castedGetAny" (formula "45") (term "0"))
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "true_left" (formula "45"))
                                                      (rule "cnf_rightDist" (formula "37") (term "0"))
                                                      (rule "distr_forallAnd" (formula "37"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "commute_or" (formula "38") (term "0"))
                                                      (rule "shift_paren_or" (formula "37") (term "0"))
                                                      (rule "commute_or_2" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "commute_or" (formula "38") (term "0,1,0"))
                                                      (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "cnf_rightDist" (formula "38") (term "0"))
                                                      (rule "distr_forallAnd" (formula "38"))
                                                      (rule "andLeft" (formula "38"))
                                                      (rule "commute_or_2" (formula "39") (term "0"))
                                                      (rule "shift_paren_or" (formula "38") (term "0"))
                                                      (rule "commute_or_2" (formula "38") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                      (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                      (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "38") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                      (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                      (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                      (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "cut_direct" (formula "58") (term "0"))
                                                      (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "allRight" (formula "59") (inst "sk=iv_0"))
                                                         (rule "orRight" (formula "59"))
                                                         (rule "orRight" (formula "59"))
                                                         (rule "inEqSimp_leqRight" (formula "59"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_geqRight" (formula "60"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "ifthenelse_split" (formula "5") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "8"))
                                                            (rule "hideAuxiliaryEq" (formula "8"))
                                                            (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "5"))
                                                             (builtin "One Step Simplification" (formula "7"))
                                                            (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "7"))
                                                             (builtin "One Step Simplification" (formula "79"))
                                                            (rule "closeTrue" (formula "79"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_right" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "59"))
                                                             (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "59"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "59"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "59"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "cut_direct" (formula "77") (term "1"))
                                                            (branch "CUT: o_0 = self TRUE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "applyEq" (formula "6") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,0,1,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "25"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "7") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "24"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "79"))
                                                               (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "23"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "true_left" (formula "5"))
                                                               (rule "applyEq" (formula "76") (term "0,1") (ifseqformula "1"))
                                                               (rule "eqSymm" (formula "76") (term "1"))
                                                               (rule "sortsDisjointModuloNull" (formula "76") (term "1"))
                                                               (rule "replace_known_right" (formula "76") (term "1,1") (ifseqformula "66"))
                                                                (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "64")))
                                                               (rule "false_right" (formula "76"))
                                                               (rule "applyEq" (formula "5") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "22"))
                                                                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "77")))
                                                               (rule "closeFalse" (formula "5"))
                                                            )
                                                            (branch "CUT: o_0 = self FALSE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "cut_direct" (formula "78") (term "1"))
                                                               (branch "CUT: o_0 = result_0 TRUE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "8") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "8") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "32"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEq" (formula "76") (term "0") (ifseqformula "1"))
                                                                  (rule "sortsDisjointModuloNull" (formula "76"))
                                                                  (rule "replace_known_right" (formula "76") (term "0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "76") (ifInst ""  (formula "67")))
                                                                  (rule "false_right" (formula "76"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                  (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "eqSymm" (formula "77"))
                                                                  (rule "applyEq" (formula "76") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "30"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "6"))
                                                                  (rule "hideAuxiliaryEq" (formula "6"))
                                                                  (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "29"))
                                                                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "75")))
                                                                  (rule "closeFalse" (formula "5"))
                                                               )
                                                               (branch "CUT: o_0 = result_0 FALSE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "6"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "5"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                          (builtin "One Step Simplification" (formula "59"))
                                                         (rule "false_right" (formula "59"))
                                                         (rule "ifthenelse_split" (formula "2") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "eqSymm" (formula "76"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                            (rule "hideAuxiliaryEq" (formula "3"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,0") (ifseqformula "2"))
                                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                            (rule "hideAuxiliaryEq" (formula "2"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "56"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "cut_direct" (formula "74") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                (builtin "One Step Simplification" (formula "75"))
                                                               (rule "applyEqRigid" (formula "76") (term "0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "76"))
                                                               (rule "false_right" (formula "76"))
                                                               (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "27"))
                                                               (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "41"))
                                                               (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "48"))
                                                               (rule "applyEq" (formula "3") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "3") (term "1,0") (ifseqformula "20"))
                                                               (rule "ifthenelse_split" (formula "3") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "4"))
                                                                   (builtin "One Step Simplification" (formula "76"))
                                                                  (rule "closeTrue" (formula "76"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "3"))
                                                                   (builtin "One Step Simplification" (formula "76"))
                                                                  (rule "closeTrue" (formula "76"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                (builtin "One Step Simplification" (formula "75"))
                                                               (rule "false_right" (formula "75"))
                                                               (rule "cut_direct" (formula "75") (term "1"))
                                                               (branch "CUT: o_0 = result_0 TRUE"
                                                                   (builtin "One Step Simplification" (formula "76"))
                                                                  (rule "applyEq" (formula "77") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "29"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "62"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "28"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "applyEq" (formula "55") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "60"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "2"))
                                                                  (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                  (rule "hideAuxiliaryEq" (formula "2"))
                                                                  (rule "eqSymm" (formula "73"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "26"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "CUT: o_0 = result_0 FALSE"
                                                                   (builtin "One Step Simplification" (formula "76"))
                                                                  (rule "false_right" (formula "76"))
                                                                  (rule "ifthenelse_split" (formula "2") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "eqSymm" (formula "77"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")))
                                                                     (rule "closeFalse" (formula "3"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "eqSymm" (formula "77"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "55"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "55"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                                                      (builtin "One Step Simplification" (formula "1"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                     (rule "hideAuxiliaryEq" (formula "2"))
                                                                     (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")))
                                                                     (rule "closeFalse" (formula "2"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "44"))
                                                   (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                   (rule "andLeft" (formula "55"))
                                                   (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                   (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                   (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                   (rule "add_zero_right" (formula "55") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "55"))
                                                   (rule "eqSymm" (formula "55") (term "1"))
                                                   (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                   (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                   (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                   (rule "add_zero_right" (formula "55") (term "0,0"))
                                                   (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                   (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                   (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                   (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                    (builtin "One Step Simplification" (formula "56"))
                                                   (rule "true_left" (formula "56"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                   (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                   (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                   (rule "commute_or" (formula "55"))
                                                   (rule "inEqSimp_or_weaken1" (formula "55"))
                                                   (rule "add_zero_right" (formula "55") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                   (rule "true_left" (formula "55"))
                                                   (rule "cut_direct" (formula "77") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "78"))
                                                      (rule "false_right" (formula "78"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                      (rule "applyEqReverse" (formula "78") (term "0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                      (rule "hideAuxiliaryEq" (formula "3"))
                                                      (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                      (rule "hideAuxiliaryEq" (formula "4"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "78"))
                                                      (rule "notRight" (formula "78"))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "78"))
                                                       (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
                                                      (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                      (rule "hideAuxiliaryEq" (formula "6"))
                                                      (rule "eqSymm" (formula "78"))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "3"))
                                                      (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "5"))
                                                      (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "77"))
                                                       (builtin "One Step Simplification" (formula "4"))
                                                      (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                      (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                      (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                      (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                      (rule "castDel" (formula "56") (term "0"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                      (rule "castedGetAny" (formula "45") (term "0"))
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "true_left" (formula "45"))
                                                      (rule "cnf_rightDist" (formula "37") (term "0"))
                                                      (rule "distr_forallAnd" (formula "37"))
                                                      (rule "andLeft" (formula "37"))
                                                      (rule "commute_or" (formula "38") (term "0"))
                                                      (rule "shift_paren_or" (formula "37") (term "0"))
                                                      (rule "commute_or_2" (formula "37") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "commute_or" (formula "38") (term "0,1,0"))
                                                      (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                      (rule "commute_or" (formula "37") (term "0,0,0"))
                                                       (builtin "One Step Simplification" (formula "37"))
                                                      (rule "cnf_rightDist" (formula "38") (term "0"))
                                                      (rule "distr_forallAnd" (formula "38"))
                                                      (rule "andLeft" (formula "38"))
                                                      (rule "commute_or_2" (formula "39") (term "0"))
                                                      (rule "shift_paren_or" (formula "38") (term "0"))
                                                      (rule "commute_or_2" (formula "38") (term "0,0"))
                                                      (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                      (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                      (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                      (rule "commute_or" (formula "38") (term "0,0,0"))
                                                      (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                      (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                      (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                      (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                      (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                      (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                       (builtin "One Step Simplification" (formula "38"))
                                                      (rule "true_left" (formula "38"))
                                                      (rule "lenNonNegative" (formula "59") (term "0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "lenNonNegative" (formula "60") (term "1,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "1"))
                                                      (rule "cut_direct" (formula "61") (term "0"))
                                                      (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                          (builtin "One Step Simplification" (formula "62"))
                                                         (rule "allRight" (formula "62") (inst "sk=iv_0"))
                                                         (rule "orRight" (formula "62"))
                                                         (rule "orRight" (formula "62"))
                                                         (rule "inEqSimp_leqRight" (formula "62"))
                                                         (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                         (rule "add_literals" (formula "1") (term "0,0"))
                                                         (rule "add_zero_left" (formula "1") (term "0"))
                                                         (rule "inEqSimp_geqRight" (formula "63"))
                                                         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                         (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                         (rule "applyEq" (formula "5") (term "0") (ifseqformula "3"))
                                                         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                         (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                         (rule "ifthenelse_split" (formula "6") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                            (rule "hideAuxiliaryEq" (formula "7"))
                                                            (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                             (builtin "One Step Simplification" (formula "9"))
                                                            (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                                            (rule "hideAuxiliaryEq" (formula "9"))
                                                            (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                             (builtin "One Step Simplification" (formula "81"))
                                                            (rule "closeTrue" (formula "81"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "60"))
                                                             (builtin "One Step Simplification" (formula "7"))
                                                            (rule "replace_known_right" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "60"))
                                                             (builtin "One Step Simplification" (formula "8"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "60"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "60"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "cut_direct" (formula "79") (term "0"))
                                                            (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "applyEqRigid" (formula "9") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "9") (term "2,0") (ifseqformula "52"))
                                                               (rule "applyEq" (formula "81") (term "0,0") (ifseqformula "1"))
                                                                (builtin "One Step Simplification" (formula "81"))
                                                               (rule "false_right" (formula "81"))
                                                               (rule "applyEq" (formula "8") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "8") (term "2,0") (ifseqformula "45"))
                                                               (rule "applyEq" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "31"))
                                                               (rule "applyEqRigid" (formula "7") (term "2,1,0") (ifseqformula "1"))
                                                               (rule "narrowSelectType" (formula "7") (term "1,0") (ifseqformula "24"))
                                                               (rule "ifthenelse_split" (formula "7") (term "0"))
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                  (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                                  (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "replace_known_left" (formula "9") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                   (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                                                  (rule "hideAuxiliaryEq" (formula "9"))
                                                                  (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "closeTrue" (formula "81"))
                                                               )
                                                               (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                  (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "60"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "60"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "7"))
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "closeTrue" (formula "81"))
                                                               )
                                                            )
                                                            (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                (builtin "One Step Simplification" (formula "80"))
                                                               (rule "false_right" (formula "80"))
                                                               (rule "cut_direct" (formula "80") (term "1"))
                                                               (branch "CUT: o_0 = result_0 TRUE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "applyEq" (formula "9") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "33"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "true_left" (formula "6"))
                                                                  (rule "applyEq" (formula "8") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "32"))
                                                                   (builtin "One Step Simplification" (formula "8"))
                                                                  (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                                  (rule "hideAuxiliaryEq" (formula "8"))
                                                                  (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "31"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "7"))
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "closeTrue" (formula "80"))
                                                               )
                                                               (branch "CUT: o_0 = result_0 FALSE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "false_right" (formula "81"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "eqSymm" (formula "82"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")))
                                                                     (rule "closeFalse" (formula "7"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "82"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "81")))
                                                                     (rule "closeFalse" (formula "6"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                      (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                          (builtin "One Step Simplification" (formula "62"))
                                                         (rule "false_right" (formula "62"))
                                                         (rule "ifthenelse_split" (formula "4") (term "0"))
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "replace_known_left" (formula "5") (term "0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                            (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                            (rule "hideAuxiliaryEq" (formula "5"))
                                                            (rule "eqSymm" (formula "79"))
                                                            (rule "replace_known_left" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                            (rule "hideAuxiliaryEq" (formula "6"))
                                                            (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                                             (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "78")))
                                                            (rule "closeFalse" (formula "5"))
                                                         )
                                                         (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                            (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                            (rule "hideAuxiliaryEq" (formula "4"))
                                                            (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "5"))
                                                            (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "4"))
                                                            (rule "replace_known_right" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "6"))
                                                            (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "58"))
                                                             (builtin "One Step Simplification" (formula "3"))
                                                            (rule "cut_direct" (formula "77") (term "1"))
                                                            (branch "CUT: o_0 = self TRUE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "applyEq" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "24"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "78") (term "0,1") (ifseqformula "1"))
                                                               (rule "eqSymm" (formula "78") (term "1"))
                                                               (rule "sortsDisjointModuloNull" (formula "78") (term "1"))
                                                               (rule "replace_known_right" (formula "78") (term "1,1") (ifseqformula "68"))
                                                                (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "66")))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "23"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "true_left" (formula "4"))
                                                               (rule "applyEq" (formula "57") (term "1,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "76") (term "0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0") (ifseqformula "22"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "eqSymm" (formula "75"))
                                                               (rule "applyEq" (formula "4") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "21"))
                                                                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "75")))
                                                               (rule "closeFalse" (formula "4"))
                                                            )
                                                            (branch "CUT: o_0 = self FALSE"
                                                                (builtin "One Step Simplification" (formula "78"))
                                                               (rule "false_right" (formula "78"))
                                                               (rule "cut_direct" (formula "78") (term "1"))
                                                               (branch "CUT: o_0 = result_0 TRUE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "31"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "true_left" (formula "4"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "65"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "4"))
                                                                  (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "4"))
                                                                  (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                  (rule "hideAuxiliaryEq" (formula "4"))
                                                                  (rule "eqSymm" (formula "77"))
                                                                  (rule "applyEq" (formula "75") (term "0") (ifseqformula "1"))
                                                                  (rule "sortsDisjointModuloNull" (formula "75"))
                                                                  (rule "replace_known_right" (formula "75") (term "0") (ifseqformula "64"))
                                                                   (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "66")))
                                                                  (rule "false_right" (formula "75"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "29"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "5"))
                                                                  (rule "hideAuxiliaryEq" (formula "5"))
                                                                  (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "28"))
                                                                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "75")))
                                                                  (rule "closeFalse" (formula "4"))
                                                               )
                                                               (branch "CUT: o_0 = result_0 FALSE"
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "5"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "eqSymm" (formula "80"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "4"))
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                                 (builtin "One Step Simplification" (formula "19"))
                                                (rule "lenNonNegative" (formula "55") (term "0"))
                                                (rule "inEqSimp_commuteLeq" (formula "55"))
                                                (rule "applyEq" (formula "55") (term "0") (ifseqformula "56"))
                                                (rule "inEqSimp_sepPosMonomial1" (formula "55"))
                                                (rule "mul_literals" (formula "55") (term "1"))
                                                (rule "inEqSimp_subsumption1" (formula "55") (ifseqformula "37"))
                                                (rule "leq_literals" (formula "55") (term "0"))
                                                 (builtin "One Step Simplification" (formula "55"))
                                                (rule "true_left" (formula "55"))
                                                (rule "cut_direct" (formula "20") (term "0"))
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) TRUE"
                                                    (builtin "One Step Simplification" (formula "21"))
                                                   (rule "true_left" (formula "21"))
                                                   (rule "applyEq" (formula "74") (term "0") (ifseqformula "20"))
                                                   (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "20"))
                                                   (rule "cut_direct" (formula "44") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "true_left" (formula "45"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "55"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                      (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "eqSymm" (formula "55") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                      (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                      (rule "commute_or" (formula "55"))
                                                      (rule "inEqSimp_or_weaken1" (formula "55"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "77") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "false_right" (formula "78"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "applyEqReverse" (formula "76") (term "0") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "75")))
                                                         (rule "closeFalse" (formula "3"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "78"))
                                                         (rule "notRight" (formula "78"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
                                                         (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "eqSymm" (formula "78"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                         (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                         (rule "castDel" (formula "56") (term "0"))
                                                          (builtin "One Step Simplification" (formula "56"))
                                                         (rule "true_left" (formula "56"))
                                                         (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                         (rule "castedGetAny" (formula "45") (term "0"))
                                                          (builtin "One Step Simplification" (formula "45"))
                                                         (rule "true_left" (formula "45"))
                                                         (rule "cnf_rightDist" (formula "37") (term "0"))
                                                         (rule "distr_forallAnd" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0"))
                                                         (rule "commute_or_2" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                         (rule "commute_or" (formula "37") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "cnf_rightDist" (formula "38") (term "0"))
                                                         (rule "distr_forallAnd" (formula "38"))
                                                         (rule "andLeft" (formula "38"))
                                                         (rule "commute_or_2" (formula "39") (term "0"))
                                                         (rule "shift_paren_or" (formula "38") (term "0"))
                                                         (rule "commute_or_2" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                         (rule "commute_or" (formula "38") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "lenNonNegative" (formula "59") (term "1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "lenNonNegative" (formula "60") (term "0,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "cut_direct" (formula "61") (term "0"))
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "allRight" (formula "62") (inst "sk=iv_0"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "inEqSimp_geqRight" (formula "63"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "inEqSimp_leqRight" (formula "63"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                            (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                                (builtin "One Step Simplification" (formula "81"))
                                                               (rule "closeTrue" (formula "81"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "cut_direct" (formula "79") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "applyEq" (formula "9") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "9") (term "2,0") (ifseqformula "52"))
                                                                  (rule "applyEqRigid" (formula "7") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "7") (term "1,0") (ifseqformula "24"))
                                                                  (rule "applyEqRigid" (formula "8") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "8") (term "2,0") (ifseqformula "45"))
                                                                  (rule "applyEq" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "31"))
                                                                  (rule "applyEqRigid" (formula "81") (term "0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "false_right" (formula "81"))
                                                                  (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                                     (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "8"))
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "closeTrue" (formula "81"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "60"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "60"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "7"))
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "closeTrue" (formula "81"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "false_right" (formula "80"))
                                                                  (rule "cut_direct" (formula "80") (term "1"))
                                                                  (branch "CUT: o_0 = result_0 TRUE"
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "68"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_left" (formula "9") (term "1,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "9"))
                                                                     (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "9"))
                                                                     (rule "hideAuxiliaryEq" (formula "9"))
                                                                     (rule "replace_known_left" (formula "8") (term "1,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "8"))
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "closeTrue" (formula "82"))
                                                                  )
                                                                  (branch "CUT: o_0 = result_0 FALSE"
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "false_right" (formula "81"))
                                                                     (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                        (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "eqSymm" (formula "82"))
                                                                        (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "8"))
                                                                        (rule "hideAuxiliaryEq" (formula "8"))
                                                                        (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")))
                                                                        (rule "closeFalse" (formula "7"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "eqSymm" (formula "82"))
                                                                        (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "81")))
                                                                        (rule "closeFalse" (formula "6"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "false_right" (formula "62"))
                                                            (rule "ifthenelse_split" (formula "4") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "closeTrue" (formula "79"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "58"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "cut_direct" (formula "77") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "applyEq" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "50"))
                                                                  (rule "applyEqRigid" (formula "79") (term "0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "applyEq" (formula "5") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "1,0") (ifseqformula "22"))
                                                                  (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "29"))
                                                                  (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "43"))
                                                                  (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "cut_direct" (formula "78") (term "1"))
                                                                  (branch "CUT: o_0 = result_0 TRUE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "66"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "5") (term "1,1,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "65"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,1") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "31"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "true_left" (formula "4"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "64"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "eqSymm" (formula "77"))
                                                                     (rule "applyEq" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "29"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "4") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "28"))
                                                                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "76")))
                                                                     (rule "closeFalse" (formula "4"))
                                                                  )
                                                                  (branch "CUT: o_0 = result_0 FALSE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "false_right" (formula "79"))
                                                                     (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                        (rule "hideAuxiliaryEq" (formula "5"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "5"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "4"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "55"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                      (rule "times_zero_2" (formula "55") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "eqSymm" (formula "55") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                      (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                      (rule "commute_or" (formula "55"))
                                                      (rule "inEqSimp_or_weaken1" (formula "55"))
                                                      (rule "add_literals" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "78") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "false_right" (formula "79"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "eqSymm" (formula "77"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
                                                         (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "3"))
                                                         (rule "hideAuxiliaryEq" (formula "3"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "notRight" (formula "79"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
                                                         (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "eqSymm" (formula "79"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                         (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                         (rule "castDel" (formula "56") (term "0"))
                                                          (builtin "One Step Simplification" (formula "56"))
                                                         (rule "true_left" (formula "56"))
                                                         (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                         (rule "castedGetAny" (formula "45") (term "0"))
                                                          (builtin "One Step Simplification" (formula "45"))
                                                         (rule "true_left" (formula "45"))
                                                         (rule "cnf_rightDist" (formula "37") (term "0"))
                                                         (rule "distr_forallAnd" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0"))
                                                         (rule "commute_or_2" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                         (rule "commute_or" (formula "37") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "cnf_rightDist" (formula "38") (term "0"))
                                                         (rule "distr_forallAnd" (formula "38"))
                                                         (rule "andLeft" (formula "38"))
                                                         (rule "commute_or_2" (formula "39") (term "0"))
                                                         (rule "shift_paren_or" (formula "38") (term "0"))
                                                         (rule "commute_or_2" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                         (rule "commute_or" (formula "38") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "lenNonNegative" (formula "60") (term "1,0"))
                                                         (rule "inEqSimp_commuteLeq" (formula "1"))
                                                         (rule "cut_direct" (formula "61") (term "0"))
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "allRight" (formula "62") (inst "sk=iv_0"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "inEqSimp_leqRight" (formula "62"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "63"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                            (rule "ifthenelse_split" (formula "6") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "9") (term "0,0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "9"))
                                                               (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "9"))
                                                               (rule "hideAuxiliaryEq" (formula "9"))
                                                               (rule "replace_known_left" (formula "7") (term "0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                               (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "eqSymm" (formula "81"))
                                                               (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")))
                                                               (rule "closeFalse" (formula "7"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "8") (term "0,0,0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "8"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "60"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "cut_direct" (formula "80") (term "1"))
                                                               (branch "CUT: o_0 = self TRUE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "applyEq" (formula "9") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "9") (term "0,0,0,0,0") (ifseqformula "26"))
                                                                   (builtin "One Step Simplification" (formula "9"))
                                                                  (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "9"))
                                                                  (rule "hideAuxiliaryEq" (formula "9"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,1") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "25"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                  (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "eqSymm" (formula "81"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "24"))
                                                                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "81")))
                                                                  (rule "closeFalse" (formula "7"))
                                                               )
                                                               (branch "CUT: o_0 = self FALSE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "false_right" (formula "81"))
                                                                  (rule "cut_direct" (formula "81") (term "0"))
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "applyEqRigid" (formula "9") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "9") (term "2,0") (ifseqformula "52"))
                                                                     (rule "applyEq" (formula "8") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "8") (term "2,0") (ifseqformula "45"))
                                                                     (rule "applyEq" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "31"))
                                                                     (rule "applyEqRigid" (formula "7") (term "2,1,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "7") (term "1,0") (ifseqformula "24"))
                                                                     (rule "ifthenelse_split" (formula "7") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                                        (rule "applyEqReverse" (formula "85") (term "1") (ifseqformula "8"))
                                                                        (rule "hideAuxiliaryEq" (formula "8"))
                                                                        (rule "replace_known_left" (formula "8") (term "0,0,0,0") (ifseqformula "7"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "applyEqReverse" (formula "9") (term "1,0") (ifseqformula "8"))
                                                                        (rule "hideAuxiliaryEq" (formula "8"))
                                                                        (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "7"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "8"))
                                                                         (builtin "One Step Simplification" (formula "83"))
                                                                        (rule "closeTrue" (formula "83"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "85") (term "1") (ifseqformula "7"))
                                                                        (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "60"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "60"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "60"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "8"))
                                                                        (rule "hideAuxiliaryEq" (formula "8"))
                                                                        (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "applyEqReverse" (formula "83") (term "0") (ifseqformula "7"))
                                                                         (builtin "One Step Simplification" (formula "83"))
                                                                        (rule "closeTrue" (formula "83"))
                                                                     )
                                                                  )
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "false_right" (formula "82"))
                                                                     (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                        (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "eqSymm" (formula "83"))
                                                                        (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "8"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "8"))
                                                                        (rule "hideAuxiliaryEq" (formula "8"))
                                                                        (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "82")))
                                                                        (rule "closeFalse" (formula "7"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                        (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "eqSymm" (formula "83"))
                                                                        (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "82")))
                                                                        (rule "closeFalse" (formula "6"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "false_right" (formula "62"))
                                                            (rule "ifthenelse_split" (formula "3") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                               (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "4"))
                                                               (rule "hideAuxiliaryEq" (formula "4"))
                                                               (rule "eqSymm" (formula "78"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "3"))
                                                                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "78")))
                                                               (rule "closeFalse" (formula "4"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "57"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "cut_direct" (formula "77") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "applyEqRigid" (formula "79") (term "0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "49"))
                                                                  (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "42"))
                                                                  (rule "applyEqRigid" (formula "4") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "4") (term "1,0") (ifseqformula "21"))
                                                                  (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "28"))
                                                                  (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "57"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_left" (formula "5") (term "1,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "5"))
                                                                     (rule "hideAuxiliaryEq" (formula "5"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "cut_direct" (formula "78") (term "0"))
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "applyEq" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "42"))
                                                                     (rule "applyEqRigid" (formula "78") (term "0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "false_right" (formula "78"))
                                                                     (rule "applyEq" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "28"))
                                                                     (rule "applyEq" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "49"))
                                                                     (rule "applyEqRigid" (formula "4") (term "2,1,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "4") (term "1,0") (ifseqformula "21"))
                                                                     (rule "ifthenelse_split" (formula "4") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "5"))
                                                                        (rule "hideAuxiliaryEq" (formula "5"))
                                                                        (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                        (rule "hideAuxiliaryEq" (formula "5"))
                                                                        (rule "replace_known_left" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "79"))
                                                                        (rule "closeTrue" (formula "79"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_right" (formula "5") (term "0,0,0,0,0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "57"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "79"))
                                                                        (rule "closeTrue" (formula "79"))
                                                                     )
                                                                  )
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "false_right" (formula "79"))
                                                                     (rule "ifthenelse_split" (formula "3") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "4"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "2"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "3"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                                (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) FALSE"
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "applyEq" (formula "58") (term "0") (ifseqformula "20"))
                                                   (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "20"))
                                                   (rule "applyEq" (formula "74") (term "0") (ifseqformula "19"))
                                                   (rule "cut_direct" (formula "44") (term "0,0,0,0"))
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                       (builtin "One Step Simplification" (formula "45"))
                                                      (rule "true_left" (formula "45"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "55"))
                                                      (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "times_zero_2" (formula "56") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                      (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "eqSymm" (formula "55") (term "1"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                      (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                      (rule "commute_or" (formula "55"))
                                                      (rule "inEqSimp_or_weaken1" (formula "55"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "78") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "false_right" (formula "79"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "eqSymm" (formula "77"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                          (builtin "One Step Simplification" (formula "75"))
                                                         (rule "closeTrue" (formula "75"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "79"))
                                                         (rule "notRight" (formula "79"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
                                                         (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "eqSymm" (formula "79"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "78"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                         (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                         (rule "castDel" (formula "56") (term "0"))
                                                          (builtin "One Step Simplification" (formula "56"))
                                                         (rule "true_left" (formula "56"))
                                                         (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                         (rule "castedGetAny" (formula "45") (term "0"))
                                                          (builtin "One Step Simplification" (formula "45"))
                                                         (rule "true_left" (formula "45"))
                                                         (rule "cnf_rightDist" (formula "37") (term "0"))
                                                         (rule "distr_forallAnd" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0"))
                                                         (rule "commute_or_2" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                         (rule "commute_or" (formula "37") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "cnf_rightDist" (formula "38") (term "0"))
                                                         (rule "distr_forallAnd" (formula "38"))
                                                         (rule "andLeft" (formula "38"))
                                                         (rule "commute_or_2" (formula "39") (term "0"))
                                                         (rule "shift_paren_or" (formula "38") (term "0"))
                                                         (rule "commute_or_2" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                         (rule "commute_or" (formula "38") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "cut_direct" (formula "60") (term "0"))
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                             (builtin "One Step Simplification" (formula "61"))
                                                            (rule "allRight" (formula "61") (inst "sk=iv_0"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "orRight" (formula "61"))
                                                            (rule "inEqSimp_leqRight" (formula "61"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "inEqSimp_geqRight" (formula "62"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "81"))
                                                               (rule "replace_known_left" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "7"))
                                                               (rule "hideAuxiliaryEq" (formula "7"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "80")))
                                                               (rule "closeFalse" (formula "6"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "cut_direct" (formula "79") (term "1"))
                                                               (branch "CUT: o_0 = self TRUE"
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "25"))
                                                                   (builtin "One Step Simplification" (formula "5"))
                                                                  (rule "true_left" (formula "5"))
                                                                  (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "80") (term "0,1") (ifseqformula "1"))
                                                                  (rule "eqSymm" (formula "80") (term "1"))
                                                                  (rule "sortsDisjointModuloNull" (formula "80") (term "1"))
                                                                  (rule "replace_known_right" (formula "80") (term "0,1") (ifseqformula "68"))
                                                                   (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "70")))
                                                                  (rule "false_right" (formula "80"))
                                                                  (rule "applyEq" (formula "6") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "7") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "24"))
                                                                   (builtin "One Step Simplification" (formula "7"))
                                                                  (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "7"))
                                                                  (rule "hideAuxiliaryEq" (formula "7"))
                                                                  (rule "applyEq" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "23"))
                                                                   (builtin "One Step Simplification" (formula "6"))
                                                                  (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "6"))
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "closeTrue" (formula "80"))
                                                               )
                                                               (branch "CUT: o_0 = self FALSE"
                                                                   (builtin "One Step Simplification" (formula "80"))
                                                                  (rule "false_right" (formula "80"))
                                                                  (rule "cut_direct" (formula "80") (term "1"))
                                                                  (branch "CUT: o_0 = result_0 TRUE"
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "67"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "67"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "eqSymm" (formula "81"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "80") (term "0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "5") (term "1,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "66"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "79")))
                                                                     (rule "closeFalse" (formula "6"))
                                                                  )
                                                                  (branch "CUT: o_0 = result_0 FALSE"
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "false_right" (formula "81"))
                                                                     (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "eqSymm" (formula "82"))
                                                                        (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "81")))
                                                                        (rule "closeFalse" (formula "6"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "5"))
                                                                        (rule "hideAuxiliaryEq" (formula "5"))
                                                                        (rule "eqSymm" (formula "82"))
                                                                        (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "81")))
                                                                        (rule "closeFalse" (formula "5"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                             (builtin "One Step Simplification" (formula "61"))
                                                            (rule "false_right" (formula "61"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "applyEqReverse" (formula "78") (term "1") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "eqSymm" (formula "77"))
                                                               (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "77")))
                                                               (rule "closeFalse" (formula "3"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "cut_direct" (formula "76") (term "1"))
                                                               (branch "CUT: o_0 = self TRUE"
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "applyEq" (formula "5") (term "1,2,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "5") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "22"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "eqSymm" (formula "79"))
                                                                  (rule "applyEq" (formula "4") (term "1,0,1,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "56") (term "1,0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "21"))
                                                                   (builtin "One Step Simplification" (formula "3"))
                                                                  (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                  (rule "hideAuxiliaryEq" (formula "3"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "20"))
                                                                   (builtin "One Step Simplification" (formula "2"))
                                                                  (rule "true_left" (formula "2"))
                                                                  (rule "applyEq" (formula "75") (term "0") (ifseqformula "1"))
                                                                  (rule "applyEq" (formula "2") (term "1,0,0,0,0,0,0") (ifseqformula "1"))
                                                                  (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "19"))
                                                                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                                                  (rule "closeFalse" (formula "2"))
                                                               )
                                                               (branch "CUT: o_0 = self FALSE"
                                                                   (builtin "One Step Simplification" (formula "77"))
                                                                  (rule "false_right" (formula "77"))
                                                                  (rule "cut_direct" (formula "77") (term "1"))
                                                                  (branch "CUT: o_0 = result_0 TRUE"
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "65"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                                  (branch "CUT: o_0 = result_0 FALSE"
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "false_right" (formula "78"))
                                                                     (rule "ifthenelse_split" (formula "2") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "eqSymm" (formula "79"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "78")))
                                                                        (rule "closeFalse" (formula "3"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "2"))
                                                                        (rule "hideAuxiliaryEq" (formula "2"))
                                                                        (rule "eqSymm" (formula "79"))
                                                                        (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "2"))
                                                                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "1"))
                                                                        (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")))
                                                                        (rule "closeFalse" (formula "2"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                   (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                       (builtin "One Step Simplification" (formula "44"))
                                                      (rule "equalityToSeqGetAndSeqLenLeft" (formula "55") (inst "iv=iv"))
                                                      (rule "andLeft" (formula "55"))
                                                      (rule "lenOfSeqSub" (formula "55") (term "0"))
                                                      (rule "polySimp_elimSub" (formula "55") (term "1,0"))
                                                      (rule "mul_literals" (formula "55") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55"))
                                                      (rule "eqSymm" (formula "55") (term "1"))
                                                      (rule "lenOfSeqSub" (formula "56") (term "1,1,0,0"))
                                                      (rule "polySimp_elimSub" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "mul_literals" (formula "56") (term "1,1,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "1,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "55") (term "0"))
                                                      (rule "add_zero_right" (formula "55") (term "0,0"))
                                                      (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "0,1,1,0,0"))
                                                      (rule "add_zero_right" (formula "56") (term "0,0,1,1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,1,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "56") (term "1,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,1,0,0"))
                                                      (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0"))
                                                      (rule "applyEq" (formula "56") (term "0,0,1,0") (ifseqformula "57"))
                                                       (builtin "One Step Simplification" (formula "56"))
                                                      (rule "true_left" (formula "56"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "55") (term "0"))
                                                      (rule "polySimp_mulLiterals" (formula "55") (term "0,0"))
                                                      (rule "polySimp_elimOne" (formula "55") (term "0,0"))
                                                      (rule "commute_or" (formula "55"))
                                                      (rule "inEqSimp_or_weaken1" (formula "55"))
                                                      (rule "add_literals" (formula "55") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "36")))
                                                      (rule "true_left" (formula "55"))
                                                      (rule "cut_direct" (formula "79") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "80"))
                                                         (rule "false_right" (formula "80"))
                                                         (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                         (rule "hideAuxiliaryEq" (formula "4"))
                                                         (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "applyEqReverse" (formula "79") (term "1") (ifseqformula "5"))
                                                         (rule "hideAuxiliaryEq" (formula "5"))
                                                         (rule "eqSymm" (formula "78"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "applyEqReverse" (formula "77") (term "0") (ifseqformula "3"))
                                                          (builtin "One Step Simplification" (formula "77"))
                                                         (rule "closeTrue" (formula "77"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "80"))
                                                         (rule "notRight" (formula "80"))
                                                         (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "4"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "2"))
                                                         (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "80"))
                                                          (builtin "One Step Simplification" (formula "5"))
                                                         (rule "replace_known_left" (formula "6") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "80")))
                                                         (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "6"))
                                                         (rule "hideAuxiliaryEq" (formula "6"))
                                                         (rule "eqSymm" (formula "80"))
                                                         (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "79"))
                                                          (builtin "One Step Simplification" (formula "3"))
                                                         (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "5") (term "0"))
                                                         (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                         (rule "cnf_rightDist" (formula "37") (term "1,1,0"))
                                                         (rule "seqGetAlphaCast" (formula "56") (term "0"))
                                                         (rule "castDel" (formula "56") (term "0"))
                                                          (builtin "One Step Simplification" (formula "56"))
                                                         (rule "true_left" (formula "56"))
                                                         (rule "seqGetAlphaCast" (formula "45") (term "0"))
                                                         (rule "castedGetAny" (formula "45") (term "0"))
                                                          (builtin "One Step Simplification" (formula "45"))
                                                         (rule "true_left" (formula "45"))
                                                         (rule "cnf_rightDist" (formula "37") (term "0"))
                                                         (rule "distr_forallAnd" (formula "37"))
                                                         (rule "andLeft" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0"))
                                                         (rule "commute_or_2" (formula "37") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "commute_or" (formula "38") (term "0,1,0"))
                                                         (rule "shift_paren_or" (formula "37") (term "0,0"))
                                                         (rule "commute_or" (formula "37") (term "0,0,0"))
                                                          (builtin "One Step Simplification" (formula "37"))
                                                         (rule "cnf_rightDist" (formula "38") (term "0"))
                                                         (rule "distr_forallAnd" (formula "38"))
                                                         (rule "andLeft" (formula "38"))
                                                         (rule "commute_or_2" (formula "39") (term "0"))
                                                         (rule "shift_paren_or" (formula "38") (term "0"))
                                                         (rule "commute_or_2" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_or_tautInEq0" (formula "38") (term "0,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,1,0,0,0"))
                                                         (rule "qeq_literals" (formula "38") (term "1,0,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "shift_paren_or" (formula "38") (term "0,0"))
                                                         (rule "commute_or" (formula "38") (term "0,0,0"))
                                                         (rule "inEqSimp_or_tautInEq1" (formula "38") (term "0,0"))
                                                         (rule "inEqSimp_homoInEq1" (formula "38") (term "1,0,0"))
                                                         (rule "polySimp_pullOutFactor1" (formula "38") (term "0,1,0,0"))
                                                         (rule "add_literals" (formula "38") (term "1,0,1,0,0"))
                                                         (rule "times_zero_1" (formula "38") (term "0,1,0,0"))
                                                         (rule "leq_literals" (formula "38") (term "1,0,0"))
                                                          (builtin "One Step Simplification" (formula "38"))
                                                         (rule "true_left" (formula "38"))
                                                         (rule "cut_direct" (formula "61") (term "0"))
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "allRight" (formula "62") (inst "sk=iv_0"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "orRight" (formula "62"))
                                                            (rule "inEqSimp_geqRight" (formula "63"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                            (rule "inEqSimp_leqRight" (formula "63"))
                                                            (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0"))
                                                            (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                            (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                            (rule "ifthenelse_split" (formula "5") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "eqSymm" (formula "82"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                               (rule "hideAuxiliaryEq" (formula "6"))
                                                               (rule "replace_known_left" (formula "6") (term "0,0,0,0,0,0") (ifseqformula "5"))
                                                                (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "81")))
                                                               (rule "closeFalse" (formula "6"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "6"))
                                                               (rule "replace_known_right" (formula "7") (term "0,0,0,0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "7"))
                                                               (rule "replace_known_right" (formula "5") (term "0,0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "59"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "cut_direct" (formula "80") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "applyEq" (formula "8") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "8") (term "2,0") (ifseqformula "51"))
                                                                  (rule "applyEq" (formula "7") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "7") (term "2,0") (ifseqformula "44"))
                                                                  (rule "applyEq" (formula "82") (term "0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "82"))
                                                                  (rule "false_right" (formula "82"))
                                                                  (rule "applyEqRigid" (formula "6") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "2,0") (ifseqformula "30"))
                                                                  (rule "applyEq" (formula "6") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "6") (term "1,0") (ifseqformula "23"))
                                                                  (rule "ifthenelse_split" (formula "6") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                                     (rule "hideAuxiliaryEq" (formula "7"))
                                                                     (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "7"))
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "closeTrue" (formula "82"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_right" (formula "6") (term "0,0,0,0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "replace_known_right" (formula "7") (term "0,0,0,0,0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "7"))
                                                                     (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "59"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                     (rule "hideAuxiliaryEq" (formula "6"))
                                                                     (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "5"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "82") (term "0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "closeTrue" (formula "82"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "81"))
                                                                  (rule "false_right" (formula "81"))
                                                                  (rule "cut_direct" (formula "81") (term "1"))
                                                                  (branch "CUT: o_0 = result_0 TRUE"
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "applyEq" (formula "8") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "32"))
                                                                      (builtin "One Step Simplification" (formula "8"))
                                                                     (rule "applyEqReverse" (formula "84") (term "0") (ifseqformula "8"))
                                                                     (rule "hideAuxiliaryEq" (formula "8"))
                                                                     (rule "applyEq" (formula "7") (term "1,0,1,0,0,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "5") (term "1,0,1") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "31"))
                                                                      (builtin "One Step Simplification" (formula "5"))
                                                                     (rule "true_left" (formula "5"))
                                                                     (rule "applyEq" (formula "58") (term "1,0") (ifseqformula "1"))
                                                                     (rule "applyEq" (formula "6") (term "1,0,1,0,0") (ifseqformula "1"))
                                                                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "30"))
                                                                      (builtin "One Step Simplification" (formula "6"))
                                                                     (rule "applyEqReverse" (formula "81") (term "0") (ifseqformula "6"))
                                                                      (builtin "One Step Simplification" (formula "81"))
                                                                     (rule "closeTrue" (formula "81"))
                                                                  )
                                                                  (branch "CUT: o_0 = result_0 FALSE"
                                                                      (builtin "One Step Simplification" (formula "82"))
                                                                     (rule "false_right" (formula "82"))
                                                                     (rule "ifthenelse_split" (formula "5") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "6"))
                                                                        (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "eqSymm" (formula "83"))
                                                                        (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "7"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "7"))
                                                                        (rule "hideAuxiliaryEq" (formula "7"))
                                                                        (rule "replace_known_left" (formula "6") (term "0,0,0,0") (ifseqformula "5"))
                                                                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "82")))
                                                                        (rule "closeFalse" (formula "6"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "6") (term "1,0") (ifseqformula "5"))
                                                                        (rule "applyEqReverse" (formula "84") (term "1") (ifseqformula "5"))
                                                                        (rule "hideAuxiliaryEq" (formula "5"))
                                                                        (rule "eqSymm" (formula "83"))
                                                                        (rule "replace_known_right" (formula "6") (term "0,0,0,0,0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "5"))
                                                                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "58"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "6"))
                                                                        (rule "applyEqReverse" (formula "83") (term "1") (ifseqformula "6"))
                                                                        (rule "hideAuxiliaryEq" (formula "6"))
                                                                        (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "82")))
                                                                        (rule "closeFalse" (formula "5"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                         (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                             (builtin "One Step Simplification" (formula "62"))
                                                            (rule "false_right" (formula "62"))
                                                            (rule "ifthenelse_split" (formula "2") (term "0"))
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                               (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                               (rule "hideAuxiliaryEq" (formula "3"))
                                                               (rule "replace_known_left" (formula "5") (term "0,0,0,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "5"))
                                                               (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "5"))
                                                               (rule "hideAuxiliaryEq" (formula "5"))
                                                               (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                (builtin "One Step Simplification" (formula "79"))
                                                               (rule "closeTrue" (formula "79"))
                                                            )
                                                            (branch " boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                               (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                               (rule "hideAuxiliaryEq" (formula "2"))
                                                               (rule "replace_known_right" (formula "2") (term "0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "2"))
                                                               (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "3"))
                                                               (rule "replace_known_right" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "4"))
                                                               (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "56"))
                                                                (builtin "One Step Simplification" (formula "1"))
                                                               (rule "cut_direct" (formula "77") (term "0"))
                                                               (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "27"))
                                                                  (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "48"))
                                                                  (rule "applyEqRigid" (formula "79") (term "0,0") (ifseqformula "1"))
                                                                   (builtin "One Step Simplification" (formula "79"))
                                                                  (rule "false_right" (formula "79"))
                                                                  (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "41"))
                                                                  (rule "applyEq" (formula "3") (term "2,1,0") (ifseqformula "1"))
                                                                  (rule "narrowSelectType" (formula "3") (term "1,0") (ifseqformula "20"))
                                                                  (rule "ifthenelse_split" (formula "3") (term "0"))
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                     (rule "hideAuxiliaryEq" (formula "4"))
                                                                     (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                                  (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "56"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                      (builtin "One Step Simplification" (formula "4"))
                                                                     (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                                                      (builtin "One Step Simplification" (formula "2"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                     (rule "hideAuxiliaryEq" (formula "3"))
                                                                     (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "2"))
                                                                      (builtin "One Step Simplification" (formula "3"))
                                                                     (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "3"))
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "closeTrue" (formula "79"))
                                                                  )
                                                               )
                                                               (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                                                                   (builtin "One Step Simplification" (formula "78"))
                                                                  (rule "false_right" (formula "78"))
                                                                  (rule "cut_direct" (formula "78") (term "0"))
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index TRUE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "applyEq" (formula "78") (term "0") (ifseqformula "1"))
                                                                      (builtin "One Step Simplification" (formula "78"))
                                                                     (rule "false_right" (formula "78"))
                                                                     (rule "applyEqRigid" (formula "3") (term "2,1,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "3") (term "1,0") (ifseqformula "20"))
                                                                     (rule "applyEqRigid" (formula "3") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "3") (term "2,0") (ifseqformula "27"))
                                                                     (rule "applyEqRigid" (formula "4") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "4") (term "2,0") (ifseqformula "41"))
                                                                     (rule "applyEqRigid" (formula "5") (term "2,2,0") (ifseqformula "1"))
                                                                     (rule "narrowSelectType" (formula "5") (term "2,0") (ifseqformula "48"))
                                                                     (rule "ifthenelse_split" (formula "3") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "4"))
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "5") (term "1,0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "4"))
                                                                         (builtin "One Step Simplification" (formula "79"))
                                                                        (rule "closeTrue" (formula "79"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "3"))
                                                                        (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_right" (formula "4") (term "0,0,0,0,0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "56"))
                                                                         (builtin "One Step Simplification" (formula "2"))
                                                                        (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "80") (term "0") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "applyEqReverse" (formula "79") (term "0") (ifseqformula "3"))
                                                                         (builtin "One Step Simplification" (formula "79"))
                                                                        (rule "closeTrue" (formula "79"))
                                                                     )
                                                                  )
                                                                  (branch "CUT: f_0 = java.util.Iterator::$index FALSE"
                                                                      (builtin "One Step Simplification" (formula "79"))
                                                                     (rule "false_right" (formula "79"))
                                                                     (rule "ifthenelse_split" (formula "2") (term "0"))
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                                        (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "4"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "4"))
                                                                        (rule "hideAuxiliaryEq" (formula "4"))
                                                                        (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "2"))
                                                                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "3"))
                                                                     )
                                                                     (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                                        (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "2"))
                                                                        (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                                        (rule "hideAuxiliaryEq" (formula "2"))
                                                                        (rule "eqSymm" (formula "80"))
                                                                        (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "2"))
                                                                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "55"))
                                                                         (builtin "One Step Simplification" (formula "1"))
                                                                        (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "3"))
                                                                        (rule "applyEqReverse" (formula "80") (term "1") (ifseqformula "3"))
                                                                        (rule "hideAuxiliaryEq" (formula "3"))
                                                                        (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "79")))
                                                                        (rule "closeFalse" (formula "2"))
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "andRight" (formula "62"))
                                    (branch
                                       (rule "notRight" (formula "62"))
                                       (rule "polySimp_homoEq" (formula "61"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0"))
                                       (rule "precOfInt" (formula "80"))
                                       (rule "inEqSimp_ltToLeq" (formula "60"))
                                       (rule "polySimp_mulComm0" (formula "60") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "60") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "41"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0"))
                                       (rule "add_zero_right" (formula "62") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "62") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "62") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "62") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "62") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "62") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "62") (term "0,0") (ifseqformula "60"))
                                        (builtin "One Step Simplification" (formula "62"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "80") (term "1"))
                                       (rule "polySimp_rightDist" (formula "80") (term "1,0,0,1"))
                                       (rule "polySimp_mulAssoc" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "80") (term "0,0,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "80") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "80") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "80") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "80") (term "0"))
                                       (rule "mul_literals" (formula "80") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "80") (term "0,0"))
                                       (rule "applyEq" (formula "41") (term "0,0,1,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "50") (term "0") (ifseqformula "49"))
                                       (rule "applyEq" (formula "80") (term "0,0,1,0,0,1") (ifseqformula "31"))
                                       (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "61") (term "0,1,0") (ifseqformula "58"))
                                       (rule "polySimp_pullOutFactor1" (formula "61") (term "0"))
                                       (rule "add_literals" (formula "61") (term "1,0"))
                                       (rule "times_zero_1" (formula "61") (term "0"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "true_left" (formula "61"))
                                       (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "60") (term "0,1,0") (ifseqformula "58"))
                                       (rule "polySimp_pullOutFactor1" (formula "60") (term "0"))
                                       (rule "add_literals" (formula "60") (term "1,0"))
                                       (rule "times_zero_1" (formula "60") (term "0"))
                                       (rule "leq_literals" (formula "60"))
                                       (rule "true_left" (formula "60"))
                                       (rule "applyEq" (formula "62") (term "0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "58") (term "1") (ifseqformula "1"))
                                       (rule "applyEq" (formula "49") (term "1") (ifseqformula "47"))
                                       (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "74") (term "1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                       (rule "mul_literals" (formula "45") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "73") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "73") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "73") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "73") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "73") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "73") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "73") (term "1,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "73") (term "1,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "73") (term "0,0,1,1"))
                                       (rule "mul_literals" (formula "73") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "46"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                       (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                       (rule "add_literals" (formula "57") (term "0,0"))
                                       (rule "leq_literals" (formula "57") (term "0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "false_right" (formula "57"))
                                       (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "46"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0"))
                                       (rule "qeq_literals" (formula "33") (term "0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "true_left" (formula "33"))
                                       (rule "inEqSimp_subsumption1" (formula "44") (ifseqformula "32"))
                                       (rule "leq_literals" (formula "44") (term "0"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "pullOutSelect" (formula "70") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_7"))
                                       (rule "applyEq" (formula "71") (term "0,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "1") (term "0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "61"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "replaceKnownSelect_taclet100_9" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "0,0,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "70") (term "0,0,1") (ifseqformula "28"))
                                       (rule "inEqSimp_homoInEq0" (formula "70") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "70") (term "0,1"))
                                       (rule "add_literals" (formula "70") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "70") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "70") (term "0,1"))
                                       (rule "applyEq" (formula "70") (term "0,0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "70") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "70") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "70") (term "1,1"))
                                       (rule "mul_literals" (formula "70") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "70") (term "1,1,1"))
                                       (rule "pullOutSelect" (formula "70") (term "1,0") (inst "selectSK=java_util_Iterator_index_3"))
                                       (rule "applyEq" (formula "71") (term "0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "47"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "19"))
                                       (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "27"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "58")))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                       (rule "replaceKnownSelect_taclet0000100_18" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "27")))
                                       (rule "applyEqReverse" (formula "71") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "0,1") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "70") (term "0,1") (ifseqformula "43"))
                                       (rule "inEqSimp_homoInEq1" (formula "70") (term "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "70") (term "0,1"))
                                       (rule "add_literals" (formula "70") (term "1,0,1"))
                                       (rule "times_zero_1" (formula "70") (term "0,1"))
                                       (rule "leq_literals" (formula "70") (term "1"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "inEqSimp_geqRight" (formula "70"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "44"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "45"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_literals" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch
                                       (rule "polySimp_homoEq" (formula "60"))
                                       (rule "polySimp_mulComm0" (formula "60") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "60") (term "1,0"))
                                       (rule "polySimp_mulAssoc" (formula "60") (term "0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "60") (term "0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "60") (term "0,1,0"))
                                       (rule "polySimp_elimOne" (formula "60") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "60") (term "0"))
                                       (rule "precOfInt" (formula "80"))
                                       (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0"))
                                       (rule "add_zero_right" (formula "61") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0"))
                                       (rule "polySimp_mulAssoc" (formula "61") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "61") (term "0,0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "61") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "61") (term "0,1,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "61") (term "0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "59"))
                                       (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "59") (term "0"))
                                       (rule "replace_known_left" (formula "61") (term "0,0") (ifseqformula "59"))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,1,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "40"))
                                       (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "40") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "80") (term "1"))
                                       (rule "polySimp_rightDist" (formula "80") (term "1,0,0,1"))
                                       (rule "polySimp_mulAssoc" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "80") (term "0,0,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "80") (term "0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "80") (term "0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "80") (term "0,1"))
                                       (rule "polySimp_addComm1" (formula "80") (term "0,0,1"))
                                       (rule "inEqSimp_homoInEq0" (formula "80") (term "0"))
                                       (rule "mul_literals" (formula "80") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "80") (term "0,0"))
                                       (rule "applyEq" (formula "49") (term "0") (ifseqformula "48"))
                                       (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "59") (term "0,1,0") (ifseqformula "57"))
                                       (rule "polySimp_pullOutFactor1" (formula "59") (term "0"))
                                       (rule "add_literals" (formula "59") (term "1,0"))
                                       (rule "times_zero_1" (formula "59") (term "0"))
                                       (rule "leq_literals" (formula "59"))
                                       (rule "true_left" (formula "59"))
                                       (rule "applyEq" (formula "79") (term "0,0,1,0,0,1") (ifseqformula "30"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "applyEq" (formula "34") (term "0,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "48") (term "1") (ifseqformula "46"))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "57") (term "0,1,0") (ifseqformula "55"))
                                       (rule "polySimp_pullOutFactor1" (formula "57") (term "0"))
                                       (rule "add_literals" (formula "57") (term "1,0"))
                                       (rule "times_zero_1" (formula "57") (term "0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "true_left" (formula "57"))
                                       (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "45") (term "0,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                       (rule "qeq_literals" (formula "20"))
                                       (rule "true_left" (formula "20"))
                                       (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                        (builtin "One Step Simplification" (formula "27"))
                                       (rule "true_left" (formula "27"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,1,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,1,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,1,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "74") (term "0"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,0"))
                                       (rule "polySimp_elimOne" (formula "74") (term "1,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                                       (rule "mul_literals" (formula "45") (term "1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "74") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "74") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,1,1"))
                                       (rule "polySimp_elimOne" (formula "74") (term "1,1,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "0,1,1"))
                                       (rule "polySimp_mulLiterals" (formula "74") (term "1,0,1,1"))
                                       (rule "polySimp_elimOne" (formula "74") (term "1,0,1,1"))
                                       (rule "polySimp_rightDist" (formula "74") (term "0,0,1,1"))
                                       (rule "mul_literals" (formula "74") (term "0,0,0,1,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "57") (ifseqformula "45"))
                                       (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "57") (term "0,0"))
                                       (rule "add_literals" (formula "57") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "57") (term "1,0,0"))
                                       (rule "add_literals" (formula "57") (term "0,0"))
                                       (rule "leq_literals" (formula "57") (term "0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "false_right" (formula "57"))
                                       (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                                       (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                       (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "32") (term "0,0"))
                                       (rule "qeq_literals" (formula "32") (term "0"))
                                        (builtin "One Step Simplification" (formula "32"))
                                       (rule "true_left" (formula "32"))
                                       (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                                       (rule "leq_literals" (formula "43") (term "0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "53") (inst "iv=iv"))
                                       (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "53") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "53") (term "1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "53") (term "1,1,1,0,0,1"))
                                       (rule "mul_literals" (formula "53") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "53") (term "1,1,1,0,0,1"))
                                       (rule "pullOutSelect" (formula "70") (term "0,0,0") (inst "selectSK=java_util_Collection_seq_7"))
                                       (rule "applyEq" (formula "71") (term "0,0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "46"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "eqSymm" (formula "1") (term "0,0"))
                                       (rule "sortsDisjointModuloNull" (formula "1") (term "0,0"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "70"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "70")))
                                       (rule "replaceKnownSelect_taclet100_9" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "8"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "0,0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "0,0,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "70") (term "0,0,1") (ifseqformula "27"))
                                       (rule "inEqSimp_homoInEq0" (formula "70") (term "1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "70") (term "0,1"))
                                       (rule "add_literals" (formula "70") (term "1,1,0,1"))
                                       (rule "times_zero_1" (formula "70") (term "1,0,1"))
                                       (rule "add_zero_right" (formula "70") (term "0,1"))
                                       (rule "applyEq" (formula "70") (term "0,0,0") (ifseqformula "27"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "70") (term "1"))
                                       (rule "polySimp_mulComm0" (formula "70") (term "1,1"))
                                       (rule "polySimp_rightDist" (formula "70") (term "1,1"))
                                       (rule "polySimp_mulLiterals" (formula "70") (term "1,1,1"))
                                       (rule "mul_literals" (formula "70") (term "0,1,1"))
                                       (rule "polySimp_elimOne" (formula "70") (term "1,1,1"))
                                       (rule "pullOutSelect" (formula "70") (term "1,0") (inst "selectSK=java_util_Iterator_index_3"))
                                       (rule "applyEq" (formula "71") (term "0,1") (ifseqformula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "46"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,0,1,0,0") (ifseqformula "57"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "26")))
                                       (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                                       (rule "replaceKnownSelect_taclet0000100_18" (formula "1") (term "2,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "1") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "18"))
                                       (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "58"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")) (ifInst ""  (formula "26")))
                                       (rule "applyEqReverse" (formula "71") (term "0,1") (ifseqformula "1"))
                                       (rule "applyEqReverse" (formula "71") (term "1,0") (ifseqformula "1"))
                                       (rule "hideAuxiliaryEq" (formula "1"))
                                       (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "42"))
                                       (rule "replace_known_left" (formula "70") (term "0") (ifseqformula "43"))
                                        (builtin "One Step Simplification" (formula "70"))
                                       (rule "inEqSimp_geqRight" (formula "70"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                       (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0,0"))
                                       (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "43"))
                                       (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                       (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                       (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "1") (term "1,0"))
                                       (rule "add_zero_right" (formula "1") (term "0"))
                                       (rule "leq_literals" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "Exceptional Post (add)"
                                  (builtin "One Step Simplification" (formula "74"))
                                  (builtin "One Step Simplification" (formula "55"))
                                 (rule "andLeft" (formula "55"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "1,0") (ifseqformula "55"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,1,0") (ifseqformula "52"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,1,0") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "56"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0,0,1,0") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "56") (term "0,0,0,0,0,1,0") (ifseqformula "17"))
                                 (rule "andLeft" (formula "56"))
                                 (rule "andLeft" (formula "56"))
                                 (rule "andLeft" (formula "58"))
                                 (rule "notLeft" (formula "56"))
                                 (rule "close" (formula "59") (ifseqformula "58"))
                              )
                              (branch "Pre (add)"
                                  (builtin "One Step Simplification" (formula "72"))
                                 (rule "wellFormedAnonEQ" (formula "72") (term "0,1") (ifseqformula "52"))
                                 (rule "wellFormedAnonEQ" (formula "72") (term "0,0,1") (ifseqformula "44"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "1,1,1") (ifseqformula "52"))
                                 (rule "wellFormedAnon" (formula "72") (term "0,0,0,1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "0,1,1,1") (ifseqformula "44"))
                                  (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "33")) (ifInst ""  (formula "43")) (ifInst ""  (formula "51")))
                                 (rule "wellFormedAnonEQ" (formula "72") (term "0,1") (ifseqformula "25"))
                                 (rule "wellFormedAnonEQ" (formula "72") (term "0,0,1") (ifseqformula "17"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "0,0,0,1,1,1") (ifseqformula "25"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "72") (term "0,0,0,0,1,1,1") (ifseqformula "17"))
                                 (rule "replace_known_left" (formula "72") (term "1,0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                                 (rule "inEqSimp_ltToLeq" (formula "40"))
                                 (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "40") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "35") (term "0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "30"))
                                 (rule "applyEq" (formula "35") (term "0") (ifseqformula "28"))
                                 (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                                 (rule "qeq_literals" (formula "20"))
                                 (rule "true_left" (formula "20"))
                                 (rule "applyEq" (formula "38") (term "0,0,1,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "48") (term "1") (ifseqformula "46"))
                                 (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "29"))
                                 (rule "applyEq" (formula "47") (term "0") (ifseqformula "46"))
                                 (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "true_left" (formula "28"))
                                 (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "true_left" (formula "27"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                                 (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                                 (rule "polySimp_elimOne" (formula "36") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                                 (rule "mul_literals" (formula "44") (term "1"))
                                 (rule "inEqSimp_contradEq7" (formula "51") (ifseqformula "45"))
                                 (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                 (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "51") (term "0,0"))
                                 (rule "leq_literals" (formula "51") (term "0"))
                                  (builtin "One Step Simplification" (formula "51"))
                                 (rule "false_right" (formula "51"))
                                 (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                                 (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                                 (rule "add_literals" (formula "32") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "32") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "32") (term "0,0"))
                                 (rule "qeq_literals" (formula "32") (term "0"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "true_left" (formula "32"))
                                 (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                                 (rule "leq_literals" (formula "43") (term "0"))
                                  (builtin "One Step Simplification" (formula "43"))
                                 (rule "true_left" (formula "43"))
                                 (rule "nnf_imp2or" (formula "33") (term "0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0"))
                                 (rule "nnf_notAnd" (formula "33") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "33") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                                 (rule "mul_literals" (formula "33") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "33") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "33") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                                 (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                                 (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "64") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "64"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "commute_or_2" (formula "64") (term "1,1"))
                                 (rule "commute_or" (formula "33") (term "0,0"))
                                 (rule "commute_or_2" (formula "33") (term "0"))
                                 (rule "commute_or" (formula "11") (term "0,0"))
                                 (rule "commute_or_2" (formula "11") (term "0"))
                                 (rule "shift_paren_or" (formula "64") (term "1"))
                                 (rule "shift_paren_or" (formula "64") (term "0,1"))
                                 (rule "shift_paren_or" (formula "64") (term "0,0,1"))
                                 (rule "shift_paren_or" (formula "64") (term "0,0,0,1"))
                                 (rule "shift_paren_or" (formula "64") (term "0,0,0,0,1"))
                                 (rule "commute_or_2" (formula "64") (term "0,0,1"))
                                 (rule "commute_or_2" (formula "64") (term "0,1"))
                                 (rule "cut_direct" (formula "14") (term "0"))
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "true_left" (formula "15"))
                                    (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "14"))
                                    (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                    (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "applyEq" (formula "60") (term "0") (ifseqformula "14"))
                                    (rule "cut_direct" (formula "46") (term "0,0"))
                                    (branch "CUT: (java.lang.String)result_4 = null TRUE"
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "false_right" (formula "47"))
                                       (rule "replace_known_left" (formula "63") (term "0,0,0,0,0,0,1") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "1")))
                                       (rule "false_right" (formula "63"))
                                       (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                          (rule "castedGetAny" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "close" (formula "48") (ifseqformula "1"))
                                       )
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                          (rule "castedGetAny" (formula "41") (term "0"))
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                          (rule "eqSymm" (formula "1"))
                                          (rule "close" (formula "49") (ifseqformula "1"))
                                       )
                                    )
                                    (branch "CUT: (java.lang.String)result_4 = null FALSE"
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "replace_known_right" (formula "64") (term "0,0") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "46")))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "equalityToSeqGetAndSeqLenRight" (formula "47") (inst "iv=iv"))
                                       (rule "inEqSimp_ltToLeq" (formula "47") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,0,0,1,0,0,1"))
                                       (rule "inEqSimp_commuteLeq" (formula "47") (term "0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "1,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "47") (term "1,1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,1,0,0,1"))
                                       (rule "mul_literals" (formula "47") (term "0,1,1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,1,0,0,1"))
                                       (rule "nnf_imp2or" (formula "47") (term "0,1"))
                                       (rule "nnf_notAnd" (formula "47") (term "0,0,1"))
                                       (rule "inEqSimp_notLeq" (formula "47") (term "1,0,0,1"))
                                       (rule "polySimp_rightDist" (formula "47") (term "1,0,0,1,0,0,1"))
                                       (rule "mul_literals" (formula "47") (term "0,1,0,0,1,0,0,1"))
                                       (rule "polySimp_addAssoc" (formula "47") (term "0,0,1,0,0,1"))
                                       (rule "add_literals" (formula "47") (term "0,0,0,1,0,0,1"))
                                       (rule "add_zero_left" (formula "47") (term "0,0,1,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "47") (term "1,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "1,1,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "47") (term "1,1,0,0,1"))
                                       (rule "inEqSimp_notGeq" (formula "47") (term "0,0,0,1"))
                                       (rule "times_zero_1" (formula "47") (term "1,0,0,0,0,0,1"))
                                       (rule "add_literals" (formula "47") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "47") (term "0,0,0,1"))
                                       (rule "mul_literals" (formula "47") (term "1,0,0,0,1"))
                                       (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                          (rule "castedGetAny" (formula "40") (term "0"))
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "cut_direct" (formula "47") (term "0"))
                                          (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "allRight" (formula "48") (inst "sk=iv_0"))
                                             (rule "orRight" (formula "48"))
                                             (rule "orRight" (formula "48"))
                                             (rule "inEqSimp_leqRight" (formula "48"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "49"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "ineffectiveCast" (formula "49") (term "0") (ifseqformula "4"))
                                             (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "50") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "67") (ifseqformula "42"))
                                          )
                                          (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                              (builtin "One Step Simplification" (formula "48"))
                                             (rule "false_right" (formula "48"))
                                             (rule "ineffectiveCast" (formula "65") (term "1,0") (ifseqformula "1"))
                                             (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "true_left" (formula "2"))
                                             (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "46") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "46") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "63") (ifseqformula "39"))
                                          )
                                       )
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "39"))
                                          (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                          (rule "castedGetAny" (formula "40") (term "0"))
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "true_left" (formula "40"))
                                          (rule "lenNonNegative" (formula "48") (term "0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "1"))
                                          (rule "cut_direct" (formula "49") (term "0"))
                                          (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "allRight" (formula "50") (inst "sk=iv_0"))
                                             (rule "orRight" (formula "50"))
                                             (rule "orRight" (formula "50"))
                                             (rule "inEqSimp_geqRight" (formula "51"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "51"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                             (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "ineffectiveCast" (formula "72") (term "1,0") (ifseqformula "5"))
                                             (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "6"))
                                             (rule "true_left" (formula "6"))
                                             (rule "applyEq" (formula "52") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "43") (term "1,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "70"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "43"))
                                             (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "73") (ifseqformula "43"))
                                          )
                                          (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                              (builtin "One Step Simplification" (formula "50"))
                                             (rule "false_right" (formula "50"))
                                             (rule "ineffectiveCast" (formula "67") (term "1,0") (ifseqformula "2"))
                                             (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "49") (term "0,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "40") (term "1,0,0") (ifseqformula "68"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "applyEq" (formula "48") (term "0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "40") (term "1") (ifseqformula "70"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "applyEq" (formula "66") (term "1,0") (ifseqformula "1"))
                                             (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "66"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "68") (ifseqformula "40"))
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "cut_direct" (formula "13") (term "0"))
                                    (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "true_left" (formula "14"))
                                       (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "13"))
                                       (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "62"))
                                        (builtin "One Step Simplification" (formula "15"))
                                       (rule "applyEq" (formula "62") (term "0") (ifseqformula "15"))
                                       (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                       (rule "cut_direct" (formula "47") (term "0,0"))
                                       (branch "CUT: (java.lang.String)result_4 = null TRUE"
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "false_right" (formula "48"))
                                          (rule "replace_known_left" (formula "63") (term "0,0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "1")))
                                          (rule "false_right" (formula "63"))
                                          (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "true_left" (formula "41"))
                                             (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                             (rule "castedGetAny" (formula "41") (term "0"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "true_left" (formula "41"))
                                             (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "close" (formula "49") (ifseqformula "1"))
                                          )
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                             (rule "castedGetAny" (formula "41") (term "0"))
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "true_left" (formula "41"))
                                             (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "true_left" (formula "3"))
                                             (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                             (rule "eqSymm" (formula "1"))
                                             (rule "close" (formula "50") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "CUT: (java.lang.String)result_4 = null FALSE"
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "replace_known_right" (formula "64") (term "0,0,0,0,0,0,1") (ifseqformula "47"))
                                           (builtin "One Step Simplification" (formula "64") (ifInst ""  (formula "47")))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "48") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,1"))
                                          (rule "mul_literals" (formula "48") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,1"))
                                          (rule "nnf_imp2or" (formula "48") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "48") (term "0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "48") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "48") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "48") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "48") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "48") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "48") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "48") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "48") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "48") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "48") (term "0,0,0,1"))
                                          (rule "times_zero_1" (formula "48") (term "1,0,0,0,0,0,1"))
                                          (rule "add_literals" (formula "48") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "48") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "48") (term "1,0,0,0,1"))
                                          (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "true_left" (formula "40"))
                                             (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                             (rule "castedGetAny" (formula "40") (term "0"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "true_left" (formula "40"))
                                             (rule "cut_direct" (formula "48") (term "0"))
                                             (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                 (builtin "One Step Simplification" (formula "49"))
                                                (rule "allRight" (formula "49") (inst "sk=iv_0"))
                                                (rule "orRight" (formula "49"))
                                                (rule "orRight" (formula "49"))
                                                (rule "inEqSimp_leqRight" (formula "49"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_geqRight" (formula "50"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "ineffectiveCast" (formula "69") (term "1,0") (ifseqformula "4"))
                                                (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                (rule "close" (formula "67") (ifseqformula "42"))
                                             )
                                             (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                 (builtin "One Step Simplification" (formula "49"))
                                                (rule "false_right" (formula "49"))
                                                (rule "ineffectiveCast" (formula "65") (term "1,0") (ifseqformula "1"))
                                                (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "1"))
                                                (rule "close" (formula "64") (ifseqformula "39"))
                                             )
                                          )
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "39"))
                                             (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                             (rule "castedGetAny" (formula "40") (term "0"))
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "true_left" (formula "40"))
                                             (rule "cut_direct" (formula "49") (term "0"))
                                             (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "allRight" (formula "50") (inst "sk=iv_0"))
                                                (rule "orRight" (formula "50"))
                                                (rule "orRight" (formula "50"))
                                                (rule "inEqSimp_leqRight" (formula "50"))
                                                (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                (rule "add_literals" (formula "1") (term "0,0"))
                                                (rule "add_zero_left" (formula "1") (term "0"))
                                                (rule "inEqSimp_geqRight" (formula "51"))
                                                (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                (rule "ineffectiveCast" (formula "68") (term "1,0") (ifseqformula "4"))
                                                (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "42") (term "1,0") (ifseqformula "70"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "applyEq" (formula "51") (term "0,0,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "42") (term "0,0") (ifseqformula "67"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "42") (term "0") (ifseqformula "68"))
                                                 (builtin "One Step Simplification" (formula "42"))
                                                (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                (rule "close" (formula "71") (ifseqformula "42"))
                                             )
                                             (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                 (builtin "One Step Simplification" (formula "50"))
                                                (rule "false_right" (formula "50"))
                                                (rule "ineffectiveCast" (formula "69") (term "1,0") (ifseqformula "1"))
                                                (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "true_left" (formula "2"))
                                                (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "70"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "69"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "67"))
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "48") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                                (rule "close" (formula "65") (ifseqformula "39"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "cut_direct" (formula "49") (term "0,0"))
                                       (branch "CUT: (java.lang.String)result_4 = null TRUE"
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "false_right" (formula "50"))
                                          (rule "replace_known_left" (formula "66") (term "0,0,0,0,0,0,1") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "1")))
                                          (rule "false_right" (formula "66"))
                                          (rule "cut_direct" (formula "16") (term "1"))
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                              (builtin "One Step Simplification" (formula "17"))
                                             (rule "true_left" (formula "17"))
                                             (rule "applyEq" (formula "63") (term "0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                                (rule "castedGetAny" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "close" (formula "50") (ifseqformula "2"))
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                                (rule "castedGetAny" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                                                (rule "close" (formula "51") (ifseqformula "2"))
                                             )
                                          )
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "applyEq" (formula "48") (term "0") (ifseqformula "16"))
                                             (rule "eqSymm" (formula "48"))
                                             (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "63") (term "0") (ifseqformula "15"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                                (rule "castedGetAny" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "close" (formula "51") (ifseqformula "1"))
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "seqGetAlphaCast" (formula "41") (term "0"))
                                                (rule "castedGetAny" (formula "41") (term "0"))
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "ineffectiveCast" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "true_left" (formula "3"))
                                                (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                                                (rule "eqSymm" (formula "1"))
                                                (rule "close" (formula "52") (ifseqformula "1"))
                                             )
                                          )
                                       )
                                       (branch "CUT: (java.lang.String)result_4 = null FALSE"
                                           (builtin "One Step Simplification" (formula "50"))
                                          (rule "replace_known_right" (formula "67") (term "0,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "49")))
                                          (rule "orRight" (formula "67"))
                                          (rule "orRight" (formula "67"))
                                          (rule "orRight" (formula "67"))
                                          (rule "orRight" (formula "67"))
                                          (rule "orRight" (formula "67"))
                                          (rule "equalityToSeqGetAndSeqLenRight" (formula "50") (inst "iv=iv"))
                                          (rule "inEqSimp_ltToLeq" (formula "50") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,0,0,1,0,0,1"))
                                          (rule "inEqSimp_commuteLeq" (formula "50") (term "0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "1,0,0,1"))
                                          (rule "polySimp_mulComm0" (formula "50") (term "1,1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,1,0,0,1"))
                                          (rule "mul_literals" (formula "50") (term "0,1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "50") (term "1,1,1,0,0,1"))
                                          (rule "nnf_imp2or" (formula "50") (term "0,1"))
                                          (rule "nnf_notAnd" (formula "50") (term "0,0,1"))
                                          (rule "inEqSimp_notLeq" (formula "50") (term "1,0,0,1"))
                                          (rule "polySimp_rightDist" (formula "50") (term "1,0,0,1,0,0,1"))
                                          (rule "mul_literals" (formula "50") (term "0,1,0,0,1,0,0,1"))
                                          (rule "polySimp_addAssoc" (formula "50") (term "0,0,1,0,0,1"))
                                          (rule "add_literals" (formula "50") (term "0,0,0,1,0,0,1"))
                                          (rule "add_zero_left" (formula "50") (term "0,0,1,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial1" (formula "50") (term "1,0,0,1"))
                                          (rule "polySimp_mulLiterals" (formula "50") (term "1,1,0,0,1"))
                                          (rule "polySimp_elimOne" (formula "50") (term "1,1,0,0,1"))
                                          (rule "inEqSimp_notGeq" (formula "50") (term "0,0,0,1"))
                                          (rule "times_zero_1" (formula "50") (term "1,0,0,0,0,0,1"))
                                          (rule "add_zero_right" (formula "50") (term "0,0,0,0,0,1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "50") (term "0,0,0,1"))
                                          (rule "mul_literals" (formula "50") (term "1,0,0,0,1"))
                                          (rule "cut_direct" (formula "15") (term "1"))
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "true_left" (formula "16"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "63") (term "0") (ifseqformula "14"))
                                             (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                (rule "castedGetAny" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "cut_direct" (formula "49") (term "0"))
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "allRight" (formula "50") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "inEqSimp_geqRight" (formula "51"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "inEqSimp_leqRight" (formula "51"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                                   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "2") (term "0"))
                                                   (rule "ineffectiveCast" (formula "51") (term "0") (ifseqformula "4"))
                                                   (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEq" (formula "52") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "67") (ifseqformula "42"))
                                                )
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                    (builtin "One Step Simplification" (formula "50"))
                                                   (rule "false_right" (formula "50"))
                                                   (rule "ineffectiveCast" (formula "66") (term "1,0") (ifseqformula "1"))
                                                   (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "true_left" (formula "2"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "48") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "48") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "64") (ifseqformula "39"))
                                                )
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                (rule "castedGetAny" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "lenNonNegative" (formula "50") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "lenNonNegative" (formula "51") (term "0,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "cut_direct" (formula "52") (term "0"))
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "allRight" (formula "53") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "inEqSimp_leqRight" (formula "53"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "54"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "ineffectiveCast" (formula "53") (term "0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "74") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "1,0") (ifseqformula "74"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "75") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "1") (ifseqformula "75"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "54") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "71") (ifseqformula "43"))
                                                )
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "false_right" (formula "53"))
                                                   (rule "ineffectiveCast" (formula "51") (term "0") (ifseqformula "3"))
                                                   (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "52") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "41") (term "1,0,0") (ifseqformula "68"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "71"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "41") (term "0") (ifseqformula "67"))
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "70") (ifseqformula "41"))
                                                )
                                             )
                                          )
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "applyEq" (formula "47") (term "0") (ifseqformula "15"))
                                             (rule "eqSymm" (formula "47"))
                                             (rule "applyEq" (formula "65") (term "0") (ifseqformula "15"))
                                             (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                             (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                (rule "castedGetAny" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "lenNonNegative" (formula "50") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "cut_direct" (formula "51") (term "0"))
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "allRight" (formula "52") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "inEqSimp_leqRight" (formula "52"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "53"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "ineffectiveCast" (formula "53") (term "0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "73") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "75") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "54") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "53") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "69") (ifseqformula "43"))
                                                )
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                    (builtin "One Step Simplification" (formula "52"))
                                                   (rule "false_right" (formula "52"))
                                                   (rule "ineffectiveCast" (formula "50") (term "0") (ifseqformula "2"))
                                                   (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "50") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "50") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "66") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "66") (ifseqformula "40"))
                                                )
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "39"))
                                                (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                                (rule "castedGetAny" (formula "40") (term "0"))
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "true_left" (formula "40"))
                                                (rule "lenNonNegative" (formula "51") (term "1,0"))
                                                (rule "inEqSimp_commuteLeq" (formula "1"))
                                                (rule "cut_direct" (formula "52") (term "0"))
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) TRUE"
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "allRight" (formula "53") (inst "sk=iv_0"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "inEqSimp_leqRight" (formula "53"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0"))
                                                   (rule "inEqSimp_geqRight" (formula "54"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "3"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                   (rule "ineffectiveCast" (formula "54") (term "0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "54") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "74") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "1,0") (ifseqformula "74"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "71"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "72"))
                                                    (builtin "One Step Simplification" (formula "43"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "72") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "54") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "74") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "74") (ifseqformula "43"))
                                                )
                                                (branch "CUT: seqLen(strContent((java.lang.String)result_4)) = seqLen(strContent(id)) FALSE"
                                                    (builtin "One Step Simplification" (formula "53"))
                                                   (rule "false_right" (formula "53"))
                                                   (rule "ineffectiveCast" (formula "51") (term "0") (ifseqformula "2"))
                                                   (rule "typeEqDerived2" (formula "3") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "true_left" (formula "3"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "69") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "69"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "67") (term "1,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "51") (term "0,0,0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "70") (term "1,0") (ifseqformula "1"))
                                                   (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "70"))
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "applyEq" (formula "71") (term "1,0") (ifseqformula "1"))
                                                   (rule "close" (formula "71") (ifseqformula "40"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "Null reference (result_1 = null)"
                                  (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "62")))
                                 (rule "closeTrue" (formula "72"))
                              )
                           )
                           (branch "if x_1 false"
                               (builtin "One Step Simplification" (formula "72"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "55") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "55"))
                              (rule "andLeft" (formula "55"))
                              (rule "notLeft" (formula "55"))
                              (rule "tryEmpty" (formula "73") (term "1"))
                              (rule "methodCallEmpty" (formula "73") (term "1"))
                              (rule "emptyModality" (formula "73") (term "1"))
                               (builtin "One Step Simplification" (formula "73"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "73") (term "0,1,1,0,0,0,1,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "73") (term "0,0,1,1,0,0,0,1,0") (ifseqformula "18"))
                              (rule "precOfInt" (formula "73") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "41"))
                              (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                              (rule "polySimp_addComm1" (formula "41") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "73") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "73") (term "1,0,0,1,0,0,1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "73") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "73") (term "1,0,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "73") (term "0,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "73") (term "0,0,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "73") (term "0,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "73") (term "0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "73") (term "0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "73") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "73") (term "0,0,1,1"))
                              (rule "inEqSimp_homoInEq0" (formula "73") (term "0,1"))
                              (rule "times_zero_2" (formula "73") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "73") (term "0,0,1"))
                              (rule "applyEq" (formula "30") (term "0,0,1,0,0,0,0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "73") (term "0,0,1,0,0,1,1") (ifseqformula "31"))
                              (rule "applyEq" (formula "36") (term "0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "31"))
                              (rule "applyEq" (formula "40") (term "0,1,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                              (rule "qeq_literals" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "applyEq" (formula "48") (term "0") (ifseqformula "47"))
                              (rule "applyEq" (formula "46") (term "0,0") (ifseqformula "30"))
                              (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "30"))
                              (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "29"))
                              (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "69") (term "1,0,0,1,0,0"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_rightDist" (formula "69") (term "1,1,0,0,1,0,0"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,1,1,0,0,1,0,0"))
                              (rule "mul_literals" (formula "69") (term "0,1,1,0,0,1,0,0"))
                              (rule "polySimp_elimOne" (formula "69") (term "1,1,1,0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                              (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                              (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "69") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,0,1"))
                              (rule "polySimp_elimOne" (formula "69") (term "1,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "69") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "69") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "69") (term "1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,1,1,1"))
                              (rule "polySimp_elimOne" (formula "69") (term "1,1,1,1"))
                              (rule "polySimp_rightDist" (formula "69") (term "0,1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "69") (term "1,0,1,1,1"))
                              (rule "polySimp_elimOne" (formula "69") (term "1,0,1,1,1"))
                              (rule "polySimp_rightDist" (formula "69") (term "0,0,1,1,1"))
                              (rule "mul_literals" (formula "69") (term "0,0,0,1,1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                              (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                              (rule "polySimp_elimOne" (formula "37") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "45"))
                              (rule "mul_literals" (formula "45") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "52") (ifseqformula "46"))
                              (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "52") (term "0,0"))
                              (rule "add_literals" (formula "52") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "52") (term "1,0,0"))
                              (rule "add_literals" (formula "52") (term "0,0"))
                              (rule "leq_literals" (formula "52") (term "0"))
                               (builtin "One Step Simplification" (formula "52"))
                              (rule "false_right" (formula "52"))
                              (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "32"))
                              (rule "leq_literals" (formula "45") (term "0"))
                               (builtin "One Step Simplification" (formula "45"))
                              (rule "true_left" (formula "45"))
                              (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "45"))
                              (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                              (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                              (rule "add_literals" (formula "33") (term "1,1,0,0"))
                              (rule "times_zero_1" (formula "33") (term "1,0,0"))
                              (rule "add_zero_right" (formula "33") (term "0,0"))
                              (rule "qeq_literals" (formula "33") (term "0"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "true_left" (formula "33"))
                              (rule "pullOutSelect" (formula "65") (term "1,1,0,0,0") (inst "selectSK=java_util_Collection_seq_5"))
                              (rule "applyEq" (formula "66") (term "0,0,1,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "66") (term "0,0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0,0,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "65")))
                              (rule "replaceKnownSelect_taclet100_9" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "66") (term "0,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "66") (term "0,0,1,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "66") (term "1,1,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "65") (term "0,0,0,1") (ifseqformula "28"))
                              (rule "applyEq" (formula "65") (term "0,0,1,1") (ifseqformula "28"))
                              (rule "inEqSimp_homoInEq0" (formula "65") (term "1,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "65") (term "0,1,1"))
                              (rule "add_literals" (formula "65") (term "1,1,0,1,1"))
                              (rule "times_zero_1" (formula "65") (term "1,0,1,1"))
                              (rule "add_zero_right" (formula "65") (term "0,1,1"))
                              (rule "applyEq" (formula "65") (term "1,1,0,0,0") (ifseqformula "28"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "1,1"))
                              (rule "polySimp_mulComm0" (formula "65") (term "1,1,1"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,1,1"))
                              (rule "mul_literals" (formula "65") (term "0,1,1,1"))
                              (rule "polySimp_mulLiterals" (formula "65") (term "1,1,1,1"))
                              (rule "polySimp_elimOne" (formula "65") (term "1,1,1,1"))
                              (rule "pullOutSelect" (formula "65") (term "0,0,0,1,0,1,0,0") (inst "selectSK=java_util_Collection_seq_6"))
                              (rule "applyEq" (formula "66") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")))
                              (rule "replaceKnownSelect_taclet100_14" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet100_15" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "55")))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "applyEqReverse" (formula "66") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "66") (term "0,0,0,1,0,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "65") (term "0,1,0,0,0") (inst "selectSK=java_util_Iterator_seq_1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                              (rule "replaceKnownSelect_taclet0000100_16" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000100_17" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                              (rule "eqSymm" (formula "66") (term "1,0,0,0"))
                              (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,0,0") (ifseqformula "53"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "27")))
                              (rule "applyEqReverse" (formula "66") (term "1,1,0,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "eqSymm" (formula "65") (term "1,0,0,0"))
                              (rule "replace_known_left" (formula "65") (term "1,0,0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "pullOutSelect" (formula "65") (term "0,1,1") (inst "selectSK=java_util_Iterator_index_3"))
                              (rule "applyEq" (formula "66") (term "1,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "47"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "54")))
                              (rule "replaceKnownSelect_taclet0000100_18" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0000100_19" (formula "1") (term "2,0"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0") (ifseqformula "26"))
                              (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "19"))
                              (rule "replace_known_left" (formula "1") (term "1,0,0,0,0,0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                              (rule "applyEqReverse" (formula "66") (term "1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "66") (term "0,1,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "applyEq" (formula "65") (term "0,1,1") (ifseqformula "43"))
                              (rule "inEqSimp_homoInEq1" (formula "65") (term "1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "65") (term "0,1,1"))
                              (rule "add_literals" (formula "65") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "65") (term "0,1,1"))
                              (rule "leq_literals" (formula "65") (term "1,1"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "applyEq" (formula "65") (term "1,1") (ifseqformula "43"))
                              (rule "replace_known_left" (formula "65") (term "1") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "nnf_imp2or" (formula "12") (term "0"))
                              (rule "nnf_imp2or" (formula "34") (term "0"))
                              (rule "nnf_notAnd" (formula "12") (term "0,0"))
                              (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                              (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                              (rule "nnf_notAnd" (formula "34") (term "0,0"))
                              (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                              (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                              (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                              (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                              (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                              (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                              (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                              (rule "nnf_imp2or" (formula "65") (term "0,1,0"))
                              (rule "nnf_notOr" (formula "65") (term "1,1,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "65") (term "0,0,1,0"))
                              (rule "inEqSimp_notLeq" (formula "65") (term "1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "65") (term "1,0,0,1,0,0,1,0"))
                              (rule "mul_literals" (formula "65") (term "0,1,0,0,1,0,0,1,0"))
                              (rule "polySimp_addAssoc" (formula "65") (term "0,0,1,0,0,1,0"))
                              (rule "add_literals" (formula "65") (term "0,0,0,1,0,0,1,0"))
                              (rule "add_zero_left" (formula "65") (term "0,0,1,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "65") (term "1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "65") (term "1,1,0,0,1,0"))
                              (rule "inEqSimp_notGeq" (formula "65") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "65") (term "1,0,0,0,0,0,1,0"))
                              (rule "add_literals" (formula "65") (term "0,0,0,0,0,1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "65") (term "0,0,0,1,0"))
                              (rule "mul_literals" (formula "65") (term "1,0,0,0,1,0"))
                              (rule "nnf_notOr" (formula "65") (term "0,1,1,0,0,0,1"))
                              (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "65") (term "0,0"))
                              (rule "replaceKnownSelect_taclet1000000100_28" (formula "65") (term "1,0,0,0"))
                              (rule "replaceKnownSelect_taclet1000000100_28" (formula "65") (term "0,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1000000100_29" (formula "65") (term "1,0,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1000000100_29" (formula "65") (term "0,1,0,0"))
                              (rule "replaceKnownSelect_taclet1000000100_26" (formula "65") (term "0,1,1,0,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet1000000100_27" (formula "65") (term "0,1,1,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "65") (term "0,0,0"))
                              (rule "inEqSimp_commuteLeq" (formula "65") (term "1,0,0"))
                              (rule "applyEq" (formula "65") (term "0,0,0,0") (ifseqformula "43"))
                              (rule "applyEq" (formula "65") (term "0,0,1,0,0") (ifseqformula "28"))
                              (rule "applyEq" (formula "65") (term "1,1,0,0") (ifseqformula "43"))
                              (rule "replace_known_left" (formula "65") (term "1,0,0") (ifseqformula "44"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "65") (term "0,0"))
                              (rule "mul_literals" (formula "65") (term "1,0,0"))
                              (rule "inEqSimp_subsumption1" (formula "65") (term "0,0") (ifseqformula "32"))
                              (rule "leq_literals" (formula "65") (term "0,0,0"))
                               (builtin "One Step Simplification" (formula "65"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "commute_or" (formula "12") (term "0,0"))
                              (rule "commute_or_2" (formula "12") (term "0"))
                              (rule "commute_or" (formula "34") (term "0,0"))
                              (rule "commute_or_2" (formula "34") (term "0"))
                              (rule "cut_direct" (formula "14") (term "0"))
                              (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "14"))
                                 (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "62"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                 (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "true_left" (formula "15"))
                                 (rule "applyEq" (formula "61") (term "0") (ifseqformula "15"))
                                 (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                 (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "41"))
                                    (rule "true_left" (formula "41"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                    (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "true_left" (formula "47"))
                                    (rule "applyEq" (formula "47") (term "0,0,1,0,0,1,0,0") (ifseqformula "48"))
                                    (rule "applyEq" (formula "47") (term "0,0,1,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "true_left" (formula "47"))
                                    (rule "andRight" (formula "64"))
                                    (branch
                                       (rule "allRight" (formula "64") (inst "sk=i_0"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "notRight" (formula "66"))
                                       (rule "inEqSimp_leqRight" (formula "65"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_geqRight" (formula "66"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                       (rule "polySimp_elimOne" (formula "1") (term "0"))
                                       (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                       (rule "castedGetAny" (formula "44") (term "0"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "36") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                       (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                       (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                       (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                       (rule "add_literals" (formula "36") (term "0,0,1"))
                                       (rule "leq_literals" (formula "36") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "2"))
                                       (rule "qeq_literals" (formula "36") (term "0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "closeFalse" (formula "36"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "64") (inst "sk=f_0"))
                                       (rule "allRight" (formula "64") (inst "sk=o_0"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "orRight" (formula "64"))
                                       (rule "pullOutSelect" (formula "67") (term "1") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                       (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                       (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,1,0,0") (ifseqformula "20"))
                                       (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "68"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replaceKnownSelect_taclet1001000000100_31" (formula "3") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "29"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                       (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                                       (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "69"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "70"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_and" (formula "69"))
                                       (rule "commute_and" (formula "70"))
                                       (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                       (rule "castedGetAny" (formula "46") (term "0"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "shift_paren_and" (formula "71"))
                                       (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,1,0,0"))
                                       (rule "shift_paren_and" (formula "71") (term "0"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "2"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0,1,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "53")))
                                          (rule "replace_known_right" (formula "72") (term "0,0,0,0") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "53")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "ifthenelse_negated" (formula "1") (term "0"))
                                          (rule "ifthenelse_negated" (formula "2") (term "0"))
                                          (rule "ifthenelse_negated" (formula "4") (term "0"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "replace_known_right" (formula "72") (term "0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "notRight" (formula "72"))
                                             (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "72") (term "1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                       (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "71") (term "0,0") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "71"))
                                          (rule "false_right" (formula "71"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "53"))
                                             (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "3") (term "1,0,0,0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "51")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "54") (term "0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "52")))
                                             (rule "closeTrue" (formula "54"))
                                          )
                                          (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "ineffectiveCast" (formula "50") (term "0,0") (ifseqformula "5"))
                                             (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "50"))
                                              (builtin "One Step Simplification" (formula "5"))
                                             (rule "true_left" (formula "5"))
                                             (rule "applyEq" (formula "53") (term "0") (ifseqformula "49"))
                                             (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "49"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "51"))
                                                (rule "orRight" (formula "51"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "55") (term "0,1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "53")))
                                                (rule "closeTrue" (formula "55"))
                                             )
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                   (rule "replace_known_right" (formula "56") (term "0,1") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                   (rule "closeTrue" (formula "56"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "cut_direct" (formula "52") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "70")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "notRight" (formula "53"))
                                                      (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "71")))
                                                      (rule "closeFalse" (formula "2"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                    (rule "andLeft" (formula "47"))
                                    (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                    (rule "applyEq" (formula "48") (term "0,0,1,0,0,1,0,0") (ifseqformula "49"))
                                    (rule "applyEq" (formula "48") (term "0,0,1,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "48"))
                                    (rule "true_left" (formula "48"))
                                    (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "47"))
                                    (rule "true_left" (formula "47"))
                                    (rule "andRight" (formula "65"))
                                    (branch
                                       (rule "allRight" (formula "65") (inst "sk=i_0"))
                                       (rule "orRight" (formula "65"))
                                       (rule "notRight" (formula "66"))
                                       (rule "orRight" (formula "66"))
                                       (rule "inEqSimp_geqRight" (formula "67"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "1") (term "0"))
                                       (rule "inEqSimp_leqRight" (formula "67"))
                                       (rule "mul_literals" (formula "1") (term "1,0,0"))
                                       (rule "add_literals" (formula "1") (term "0,0"))
                                       (rule "add_zero_left" (formula "1") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                       (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                       (rule "polySimp_elimOne" (formula "2") (term "0"))
                                       (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                       (rule "castedGetAny" (formula "44") (term "0"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "allLeft" (formula "36") (inst "t=i_0"))
                                       (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "36") (term "0,0"))
                                        (builtin "One Step Simplification" (formula "36"))
                                       (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "2"))
                                       (rule "andLeft" (formula "36"))
                                       (rule "inEqSimp_homoInEq1" (formula "36"))
                                       (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                       (rule "add_literals" (formula "36") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "36") (term "1,0"))
                                       (rule "add_literals" (formula "36") (term "0"))
                                       (rule "leq_literals" (formula "36"))
                                       (rule "closeFalse" (formula "36"))
                                    )
                                    (branch
                                       (rule "allRight" (formula "65") (inst "sk=f_0"))
                                       (rule "allRight" (formula "65") (inst "sk=o_0"))
                                       (rule "orRight" (formula "65"))
                                       (rule "orRight" (formula "65"))
                                       (rule "orRight" (formula "65"))
                                       (rule "pullOutSelect" (formula "68") (term "1") (inst "selectSK=f_0_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "18"))
                                       (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_0_1"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                       (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                       (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "41"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "27"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,1,0,0") (ifseqformula "20"))
                                       (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "69"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                       (rule "simplifySelectOfAnon" (formula "3"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "replaceKnownSelect_taclet1101000000100_31" (formula "3") (term "2,0"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "29"))
                                       (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                       (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                                       (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "1,0,0,0,0") (ifseqformula "71"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                       (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "70"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "commute_and" (formula "70"))
                                       (rule "commute_and" (formula "71"))
                                       (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                       (rule "castedGetAny" (formula "46") (term "0"))
                                        (builtin "One Step Simplification" (formula "46"))
                                       (rule "true_left" (formula "46"))
                                       (rule "shift_paren_and" (formula "72"))
                                       (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                                       (rule "commute_or_2" (formula "5") (term "0,0,1,0,0"))
                                       (rule "shift_paren_and" (formula "72") (term "0"))
                                       (rule "ifthenelse_split" (formula "1") (term "0"))
                                       (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                          (rule "andLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "notLeft" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                          (rule "replace_known_right" (formula "73") (term "0,1,0,0") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "53")))
                                          (rule "ifthenelse_negated" (formula "3") (term "0"))
                                          (rule "ifthenelse_negated" (formula "4") (term "0"))
                                          (rule "ifthenelse_negated" (formula "2") (term "0"))
                                          (rule "ifthenelse_negated" (formula "1") (term "0"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                             (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                             (rule "hideAuxiliaryEq" (formula "2"))
                                             (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replace_known_right" (formula "73") (term "0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "73"))
                                             (rule "notRight" (formula "73"))
                                             (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                             (rule "hideAuxiliaryEq" (formula "3"))
                                             (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                       )
                                       (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "replace_known_right" (formula "72") (term "0,0") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "false_right" (formula "72"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "orRight" (formula "53"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")))
                                             (rule "closeTrue" (formula "54"))
                                          )
                                          (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                             (rule "applyEqReverse" (formula "73") (term "0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "51"))
                                                (rule "orRight" (formula "51"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "1") (term "1,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "50")))
                                                (rule "closeTrue" (formula "55"))
                                             )
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "ineffectiveCast" (formula "54") (term "0") (ifseqformula "4"))
                                                (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "1"))
                                                (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "1"))
                                                (rule "ifthenelse_split" (formula "2") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "2"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "orRight" (formula "50"))
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                   (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                   (rule "closeTrue" (formula "56"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "cut_direct" (formula "52") (term "0,0"))
                                                   (branch "CUT: o_0 = null TRUE"
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "false_right" (formula "53"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "71")))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                   (branch "CUT: o_0 = null FALSE"
                                                       (builtin "One Step Simplification" (formula "53"))
                                                      (rule "notRight" (formula "53"))
                                                      (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "72")))
                                                      (rule "closeFalse" (formula "3"))
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                              (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "cut_direct" (formula "15") (term "0"))
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "15"))
                                    (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "63"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "applyEq" (formula "63") (term "0") (ifseqformula "16"))
                                    (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                    (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "41"))
                                       (rule "true_left" (formula "41"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                       (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "applyEq" (formula "47") (term "0,0,1,0,0,1,0,0") (ifseqformula "48"))
                                       (rule "applyEq" (formula "47") (term "0,0,1,0") (ifseqformula "48"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "andRight" (formula "64"))
                                       (branch
                                          (rule "allRight" (formula "64") (inst "sk=i_0"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "notRight" (formula "66"))
                                          (rule "inEqSimp_leqRight" (formula "65"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_geqRight" (formula "66"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                          (rule "castedGetAny" (formula "44") (term "0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "36") (inst "t=i_0"))
                                          (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "1"))
                                          (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                          (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                          (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                          (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                          (rule "add_literals" (formula "36") (term "0,0,1"))
                                          (rule "leq_literals" (formula "36") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "36"))
                                          (rule "qeq_literals" (formula "2") (term "0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "closeFalse" (formula "2"))
                                       )
                                       (branch
                                          (rule "allRight" (formula "64") (inst "sk=f_0"))
                                          (rule "allRight" (formula "64") (inst "sk=o_0"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "orRight" (formula "64"))
                                          (rule "pullOutSelect" (formula "67") (term "1") (inst "selectSK=f_0_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "18"))
                                          (rule "pullOutSelect" (formula "68") (term "0") (inst "selectSK=f_0_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                          (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "27"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,1,0,0") (ifseqformula "20"))
                                          (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "68"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                          (rule "simplifySelectOfAnon" (formula "3"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "replaceKnownSelect_taclet10011000000100_31" (formula "3") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                          (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "69"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "70"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_and" (formula "69"))
                                          (rule "commute_and" (formula "70"))
                                          (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                          (rule "castedGetAny" (formula "46") (term "0"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "true_left" (formula "46"))
                                          (rule "shift_paren_and" (formula "71"))
                                          (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,1,0,0"))
                                          (rule "shift_paren_and" (formula "71") (term "0"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "2"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "53")))
                                             (rule "replace_known_right" (formula "72") (term "0,0,0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "53")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "ifthenelse_negated" (formula "2") (term "0"))
                                             (rule "ifthenelse_negated" (formula "4") (term "0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "replace_known_right" (formula "72") (term "0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "72"))
                                                (rule "notRight" (formula "72"))
                                                (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "72") (term "1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "2") (term "1,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "71") (term "0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "71"))
                                             (rule "false_right" (formula "71"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "53"))
                                                (rule "applyEqReverse" (formula "74") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "3") (term "1,0,0,0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "51")) (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "54") (term "0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "52")))
                                                (rule "closeTrue" (formula "54"))
                                             )
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                (rule "applyEqReverse" (formula "72") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "ineffectiveCast" (formula "50") (term "0,0") (ifseqformula "5"))
                                                (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "5"))
                                                (rule "true_left" (formula "5"))
                                                (rule "applyEq" (formula "54") (term "0") (ifseqformula "49"))
                                                (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "49"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "50")))
                                                   (rule "closeTrue" (formula "55"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "53"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "56") (term "0,1") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                      (rule "closeTrue" (formula "56"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "cut_direct" (formula "52") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "70")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "notRight" (formula "53"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "71")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                       (rule "andLeft" (formula "47"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                       (rule "applyEq" (formula "48") (term "0,0,1,0,0,1,0,0") (ifseqformula "49"))
                                       (rule "applyEq" (formula "48") (term "0,0,1,0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "48"))
                                       (rule "true_left" (formula "48"))
                                       (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                        (builtin "One Step Simplification" (formula "47"))
                                       (rule "true_left" (formula "47"))
                                       (rule "andRight" (formula "65"))
                                       (branch
                                          (rule "allRight" (formula "65") (inst "sk=i_0"))
                                          (rule "orRight" (formula "65"))
                                          (rule "notRight" (formula "66"))
                                          (rule "orRight" (formula "66"))
                                          (rule "inEqSimp_geqRight" (formula "67"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "1") (term "0"))
                                          (rule "inEqSimp_leqRight" (formula "67"))
                                          (rule "mul_literals" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "add_zero_left" (formula "1") (term "0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                          (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                          (rule "polySimp_elimOne" (formula "2") (term "0"))
                                          (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                          (rule "castedGetAny" (formula "44") (term "0"))
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "allLeft" (formula "36") (inst "t=i_0"))
                                          (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                          (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "1"))
                                          (rule "qeq_literals" (formula "36") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "2"))
                                          (rule "andLeft" (formula "36"))
                                          (rule "inEqSimp_homoInEq1" (formula "36"))
                                          (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                          (rule "add_literals" (formula "36") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "36") (term "1,0"))
                                          (rule "add_literals" (formula "36") (term "0"))
                                          (rule "leq_literals" (formula "36"))
                                          (rule "closeFalse" (formula "36"))
                                       )
                                       (branch
                                          (rule "allRight" (formula "65") (inst "sk=f_0"))
                                          (rule "allRight" (formula "65") (inst "sk=o_0"))
                                          (rule "orRight" (formula "65"))
                                          (rule "orRight" (formula "65"))
                                          (rule "orRight" (formula "65"))
                                          (rule "pullOutSelect" (formula "68") (term "1") (inst "selectSK=f_0_0"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "18"))
                                          (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_0_1"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                          (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                          (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "41"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "27"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,1,0,0") (ifseqformula "20"))
                                          (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "69"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                          (rule "simplifySelectOfAnon" (formula "3"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "replaceKnownSelect_taclet11011000000100_31" (formula "3") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                          (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                                          (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "1,0,0,0,0") (ifseqformula "71"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                          (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "70"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_and" (formula "70"))
                                          (rule "commute_and" (formula "71"))
                                          (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                          (rule "castedGetAny" (formula "46") (term "0"))
                                           (builtin "One Step Simplification" (formula "46"))
                                          (rule "true_left" (formula "46"))
                                          (rule "shift_paren_and" (formula "72"))
                                          (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,1,0,0"))
                                          (rule "shift_paren_and" (formula "72") (term "0"))
                                          (rule "ifthenelse_split" (formula "1") (term "0"))
                                          (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                             (rule "andLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "notLeft" (formula "1"))
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                             (rule "replace_known_right" (formula "73") (term "0,1,0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "53")))
                                             (rule "ifthenelse_negated" (formula "3") (term "0"))
                                             (rule "ifthenelse_negated" (formula "4") (term "0"))
                                             (rule "ifthenelse_negated" (formula "2") (term "0"))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                (rule "hideAuxiliaryEq" (formula "2"))
                                                (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                             (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "replace_known_right" (formula "73") (term "0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "73"))
                                                (rule "notRight" (formula "73"))
                                                (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "3") (term "1,0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "3"))
                                                (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                                (rule "hideAuxiliaryEq" (formula "3"))
                                                (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                (rule "closeFalse" (formula "2"))
                                             )
                                          )
                                          (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                             (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "replace_known_right" (formula "72") (term "0,0") (ifseqformula "52"))
                                              (builtin "One Step Simplification" (formula "72"))
                                             (rule "false_right" (formula "72"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "2"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "orRight" (formula "53"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")))
                                                (rule "closeTrue" (formula "54"))
                                             )
                                             (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                (rule "applyEqReverse" (formula "73") (term "0") (ifseqformula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "orRight" (formula "51"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_right" (formula "1") (term "1,0,1,0,0") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "50")))
                                                   (rule "closeTrue" (formula "55"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "ineffectiveCast" (formula "49") (term "0,0") (ifseqformula "4"))
                                                   (rule "typeEqDerived2" (formula "4") (term "0") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "true_left" (formula "4"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "48"))
                                                   (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "48"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "orRight" (formula "50"))
                                                      (rule "orRight" (formula "50"))
                                                      (rule "orRight" (formula "50"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "52"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                      (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "53"))
                                                       (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                      (rule "closeTrue" (formula "56"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "cut_direct" (formula "52") (term "0,0"))
                                                      (branch "CUT: o_0 = null TRUE"
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "false_right" (formula "53"))
                                                         (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch "CUT: o_0 = null FALSE"
                                                          (builtin "One Step Simplification" (formula "53"))
                                                         (rule "notRight" (formula "53"))
                                                         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "72")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "cut_direct" (formula "16") (term "1"))
                                    (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                                        (builtin "One Step Simplification" (formula "17"))
                                       (rule "true_left" (formula "17"))
                                       (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "63") (term "0") (ifseqformula "15"))
                                       (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                          (rule "applyEq" (formula "48") (term "0,0,1,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "true_left" (formula "47"))
                                          (rule "andRight" (formula "65"))
                                          (branch
                                             (rule "allRight" (formula "65") (inst "sk=i_0"))
                                             (rule "orRight" (formula "65"))
                                             (rule "orRight" (formula "65"))
                                             (rule "notRight" (formula "67"))
                                             (rule "inEqSimp_geqRight" (formula "67"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "67"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                             (rule "castedGetAny" (formula "44") (term "0"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "36") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "36") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "2"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "inEqSimp_homoInEq1" (formula "36"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0"))
                                             (rule "add_literals" (formula "36") (term "0"))
                                             (rule "leq_literals" (formula "36"))
                                             (rule "closeFalse" (formula "36"))
                                          )
                                          (branch
                                             (rule "allRight" (formula "65") (inst "sk=f_0"))
                                             (rule "allRight" (formula "65") (inst "sk=o_0"))
                                             (rule "orRight" (formula "65"))
                                             (rule "orRight" (formula "65"))
                                             (rule "orRight" (formula "65"))
                                             (rule "pullOutSelect" (formula "68") (term "1") (inst "selectSK=f_0_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "39"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "25"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "18"))
                                             (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_0_1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "19"))
                                             (rule "pullOutSelect" (formula "2") (term "2,0") (inst "selectSK=f_0_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,1,1,0,0") (ifseqformula "27"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,0,0,1,1,0,0") (ifseqformula "20"))
                                             (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "69"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "3") (term "2,0") (inst "selectSK=f_0_4"))
                                             (rule "simplifySelectOfAnon" (formula "3"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "replaceKnownSelect_taclet100111000000100_31" (formula "3") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,1,0,0") (ifseqformula "29"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                             (rule "elementOfUnion" (formula "3") (term "0,0,0,0"))
                                             (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,0"))
                                             (rule "replace_known_right" (formula "3") (term "1,0,0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "70"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "commute_and" (formula "71"))
                                             (rule "commute_and" (formula "70"))
                                             (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                             (rule "castedGetAny" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "shift_paren_and" (formula "72"))
                                             (rule "commute_or_2" (formula "4") (term "0,1,0,0"))
                                             (rule "commute_or_2" (formula "5") (term "0,0,1,0,0"))
                                             (rule "shift_paren_and" (formula "72") (term "0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "notLeft" (formula "1"))
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "73") (term "0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "73") (ifInst ""  (formula "53")))
                                                (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "4") (term "0,0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "73") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "73") (term "0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "73"))
                                                   (rule "notRight" (formula "73"))
                                                   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                (rule "hideAuxiliaryEq" (formula "1"))
                                                (rule "replace_known_right" (formula "72") (term "0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "72"))
                                                (rule "false_right" (formula "72"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "notLeft" (formula "2"))
                                                   (rule "notLeft" (formula "1"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "75") (term "0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_right" (formula "3") (term "1,0,0,0,0,1,0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "53")))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                   (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")))
                                                   (rule "closeTrue" (formula "54"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "73") (term "0") (ifseqformula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "ineffectiveCast" (formula "50") (term "0,0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "49"))
                                                   (rule "applyEq" (formula "55") (term "0") (ifseqformula "49"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "53"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "50")))
                                                      (rule "closeTrue" (formula "55"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "1") (term "0"))
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "orRight" (formula "51"))
                                                         (rule "orRight" (formula "51"))
                                                         (rule "orRight" (formula "51"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "replace_known_right" (formula "1") (term "0,0,0,0,0,1,0,0") (ifseqformula "50"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "49")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                         (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "49"))
                                                          (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "50")))
                                                         (rule "closeTrue" (formula "56"))
                                                      )
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "cut_direct" (formula "52") (term "0,0"))
                                                         (branch "CUT: o_0 = null TRUE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "71")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: o_0 = null FALSE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "notRight" (formula "53"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "72")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                          (rule "applyEq" (formula "48") (term "0,0,1,0,0,1,0,0") (ifseqformula "49"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "true_left" (formula "47"))
                                          (rule "applyEq" (formula "47") (term "0,0,1,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "true_left" (formula "47"))
                                          (rule "andRight" (formula "66"))
                                          (branch
                                             (rule "allRight" (formula "66") (inst "sk=i_0"))
                                             (rule "orRight" (formula "66"))
                                             (rule "orRight" (formula "66"))
                                             (rule "notRight" (formula "68"))
                                             (rule "inEqSimp_leqRight" (formula "67"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_geqRight" (formula "68"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                             (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                             (rule "polySimp_elimOne" (formula "1") (term "0"))
                                             (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                             (rule "castedGetAny" (formula "44") (term "0"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "36") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "1"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "36") (term "0,0,1"))
                                             (rule "leq_literals" (formula "36") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "36"))
                                             (rule "qeq_literals" (formula "2") (term "0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "closeFalse" (formula "2"))
                                          )
                                          (branch
                                             (rule "allRight" (formula "66") (inst "sk=f_0"))
                                             (rule "allRight" (formula "66") (inst "sk=o_0"))
                                             (rule "orRight" (formula "66"))
                                             (rule "orRight" (formula "66"))
                                             (rule "orRight" (formula "66"))
                                             (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_0_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "71") (term "0") (inst "selectSK=f_0_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "20"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "42"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "28"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "21"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replaceKnownSelect_taclet110111000000100_30" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                             (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_and" (formula "72"))
                                             (rule "commute_and" (formula "71"))
                                             (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                             (rule "castedGetAny" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "shift_paren_and" (formula "73"))
                                             (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                                             (rule "commute_or_2" (formula "3") (term "0,0,1,0,0"))
                                             (rule "shift_paren_and" (formula "73") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "4"))
                                                (rule "notLeft" (formula "5"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "4") (term "0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "74") (term "0,0,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "53")))
                                                (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "73")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_right" (formula "74") (term "0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "74"))
                                                   (rule "notRight" (formula "74"))
                                                   (rule "replace_known_left" (formula "4") (term "1,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "4"))
                                                   (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "73") (term "0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "notLeft" (formula "5"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "orRight" (formula "53"))
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                   (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "51")))
                                                   (rule "closeTrue" (formula "54"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "73"))
                                                   (rule "ineffectiveCast" (formula "50") (term "0,0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "5") (term "0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "5"))
                                                   (rule "true_left" (formula "5"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "49"))
                                                   (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "49"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "orRight" (formula "52"))
                                                      (rule "orRight" (formula "52"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                      (rule "replace_known_right" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "50")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                                      (rule "replace_known_right" (formula "55") (term "0,1") (ifseqformula "51"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "50")))
                                                      (rule "closeTrue" (formula "55"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "1") (term "0"))
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "replace_known_right" (formula "1") (term "1,0,0,0,0,1,0,0") (ifseqformula "50"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "49")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                         (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "53"))
                                                          (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                         (rule "closeTrue" (formula "56"))
                                                      )
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "cut_direct" (formula "52") (term "0,0"))
                                                         (branch "CUT: o_0 = null TRUE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "72")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: o_0 = null FALSE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "notRight" (formula "53"))
                                                            (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "73")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                                        (builtin "One Step Simplification" (formula "16"))
                                       (rule "applyEq" (formula "65") (term "0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                       (rule "applyEq" (formula "48") (term "0") (ifseqformula "15"))
                                       (rule "eqSymm" (formula "48"))
                                       (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "41"))
                                          (rule "true_left" (formula "41"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                          (rule "applyEq" (formula "48") (term "0,0,1,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "true_left" (formula "47"))
                                          (rule "andRight" (formula "66"))
                                          (branch
                                             (rule "allRight" (formula "66") (inst "sk=i_0"))
                                             (rule "orRight" (formula "66"))
                                             (rule "notRight" (formula "67"))
                                             (rule "orRight" (formula "67"))
                                             (rule "inEqSimp_geqRight" (formula "68"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "68"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                             (rule "castedGetAny" (formula "44") (term "0"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "36") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "0") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "36") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "2"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "inEqSimp_homoInEq1" (formula "36"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0"))
                                             (rule "add_literals" (formula "36") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "36") (term "1,0"))
                                             (rule "add_zero_right" (formula "36") (term "0"))
                                             (rule "leq_literals" (formula "36"))
                                             (rule "closeFalse" (formula "36"))
                                          )
                                          (branch
                                             (rule "allRight" (formula "66") (inst "sk=f_0"))
                                             (rule "allRight" (formula "66") (inst "sk=o_0"))
                                             (rule "orRight" (formula "66"))
                                             (rule "orRight" (formula "66"))
                                             (rule "orRight" (formula "66"))
                                             (rule "pullOutSelect" (formula "69") (term "0") (inst "selectSK=f_0_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                                             (rule "eqSymm" (formula "70"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "71") (term "0") (inst "selectSK=f_0_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "20"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "42"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "28"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "21"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replaceKnownSelect_taclet101111000000100_30" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                             (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "71"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_and" (formula "71"))
                                             (rule "commute_and" (formula "72"))
                                             (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                             (rule "castedGetAny" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "shift_paren_and" (formula "73"))
                                             (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                                             (rule "commute_or_2" (formula "3") (term "0,0,1,0,0"))
                                             (rule "shift_paren_and" (formula "73") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "74") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "52")))
                                                (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_left" (formula "3") (term "0,0,0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "73")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_right" (formula "74") (term "0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "74"))
                                                   (rule "notRight" (formula "74"))
                                                   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "73") (term "0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "73"))
                                                (rule "false_right" (formula "73"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "1") (term "1,0,0,1,0,0") (ifseqformula "52"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "51")))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "53")))
                                                   (rule "closeTrue" (formula "54"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "73"))
                                                   (rule "ineffectiveCast" (formula "56") (term "0") (ifseqformula "5"))
                                                   (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "6"))
                                                   (rule "true_left" (formula "6"))
                                                   (rule "applyEq" (formula "56") (term "0") (ifseqformula "1"))
                                                   (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "1"))
                                                   (rule "ifthenelse_split" (formula "2") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "2"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "notLeft" (formula "2"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "replace_known_right" (formula "2") (term "1,0,0,0,1,0,0") (ifseqformula "51"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                                       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "50")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "55") (term "0,1") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "53")))
                                                      (rule "closeTrue" (formula "55"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                      (rule "hideAuxiliaryEq" (formula "2"))
                                                      (rule "ifthenelse_split" (formula "2") (term "0"))
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                         (rule "andLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "notLeft" (formula "2"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "replace_known_right" (formula "2") (term "1,0,0,0,0,1,0,0") (ifseqformula "50"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "49")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                         (rule "replace_known_right" (formula "56") (term "0,1") (ifseqformula "49"))
                                                          (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "53")))
                                                         (rule "closeTrue" (formula "56"))
                                                      )
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                         (rule "applyEqReverse" (formula "3") (term "2,0") (ifseqformula "2"))
                                                         (rule "hideAuxiliaryEq" (formula "2"))
                                                         (rule "cut_direct" (formula "52") (term "0,0"))
                                                         (branch "CUT: o_0 = null TRUE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "72")))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                         (branch "CUT: o_0 = null FALSE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "notRight" (formula "53"))
                                                            (rule "replace_known_left" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "73")))
                                                            (rule "closeFalse" (formula "3"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                       (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "40"))
                                          (rule "equalityToSeqGetAndSeqLenLeft" (formula "47") (inst "iv=iv"))
                                          (rule "andLeft" (formula "47"))
                                          (rule "inEqSimp_ltToLeq" (formula "48") (term "1,0,0"))
                                          (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,1,0,0"))
                                          (rule "inEqSimp_commuteLeq" (formula "48") (term "0,0,0"))
                                          (rule "applyEq" (formula "48") (term "0,0,1,0,0,1,0,0") (ifseqformula "49"))
                                          (rule "applyEq" (formula "48") (term "0,0,1,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "48"))
                                          (rule "true_left" (formula "48"))
                                          (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "47"))
                                          (rule "true_left" (formula "47"))
                                          (rule "andRight" (formula "67"))
                                          (branch
                                             (rule "allRight" (formula "67") (inst "sk=i_0"))
                                             (rule "orRight" (formula "67"))
                                             (rule "notRight" (formula "68"))
                                             (rule "orRight" (formula "68"))
                                             (rule "inEqSimp_geqRight" (formula "69"))
                                             (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                             (rule "polySimp_addComm1" (formula "1") (term "0"))
                                             (rule "inEqSimp_leqRight" (formula "69"))
                                             (rule "mul_literals" (formula "1") (term "1,0,0"))
                                             (rule "add_literals" (formula "1") (term "0,0"))
                                             (rule "add_zero_left" (formula "1") (term "0"))
                                             (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                             (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                             (rule "polySimp_elimOne" (formula "2") (term "0"))
                                             (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                             (rule "castedGetAny" (formula "44") (term "0"))
                                              (builtin "One Step Simplification" (formula "44"))
                                             (rule "true_left" (formula "44"))
                                             (rule "allLeft" (formula "36") (inst "t=i_0"))
                                             (rule "replace_known_left" (formula "36") (term "0,0,0") (ifseqformula "3"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_commuteGeq" (formula "36") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (term "1") (ifseqformula "2"))
                                             (rule "inEqSimp_homoInEq1" (formula "36") (term "0,1"))
                                             (rule "polySimp_pullOutFactor1b" (formula "36") (term "0,0,1"))
                                             (rule "add_literals" (formula "36") (term "1,1,0,0,1"))
                                             (rule "times_zero_1" (formula "36") (term "1,0,0,1"))
                                             (rule "add_literals" (formula "36") (term "0,0,1"))
                                             (rule "leq_literals" (formula "36") (term "0,1"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "inEqSimp_contradInEq1" (formula "36") (ifseqformula "1"))
                                             (rule "qeq_literals" (formula "36") (term "0"))
                                              (builtin "One Step Simplification" (formula "36"))
                                             (rule "closeFalse" (formula "36"))
                                          )
                                          (branch
                                             (rule "allRight" (formula "67") (inst "sk=f_0"))
                                             (rule "allRight" (formula "67") (inst "sk=o_0"))
                                             (rule "orRight" (formula "67"))
                                             (rule "orRight" (formula "67"))
                                             (rule "orRight" (formula "67"))
                                             (rule "pullOutSelect" (formula "70") (term "0") (inst "selectSK=f_0_0"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "18"))
                                             (rule "eqSymm" (formula "71"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "72") (term "0") (inst "selectSK=f_0_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "41"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "27"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "20"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "42"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "28"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "21"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_4"))
                                             (rule "simplifySelectOfAnon" (formula "1"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "replaceKnownSelect_taclet111111000000100_30" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "29"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "22"))
                                             (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "1,0,0,0,0") (ifseqformula "73"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                             (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "72"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "commute_and" (formula "73"))
                                             (rule "commute_and" (formula "72"))
                                             (rule "seqGetAlphaCast" (formula "46") (term "0"))
                                             (rule "castedGetAny" (formula "46") (term "0"))
                                              (builtin "One Step Simplification" (formula "46"))
                                             (rule "true_left" (formula "46"))
                                             (rule "shift_paren_and" (formula "74"))
                                             (rule "commute_or_2" (formula "2") (term "0,1,0,0"))
                                             (rule "commute_or_2" (formula "3") (term "0,0,1,0,0"))
                                             (rule "shift_paren_and" (formula "74") (term "0"))
                                             (rule "ifthenelse_split" (formula "4") (term "0"))
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                (rule "andLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "notLeft" (formula "4"))
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "53"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                                                (rule "replace_known_right" (formula "75") (term "0,1,0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "75") (ifInst ""  (formula "53")))
                                                (rule "ifthenelse_negated" (formula "4") (term "0"))
                                                (rule "ifthenelse_negated" (formula "2") (term "0"))
                                                (rule "ifthenelse_negated" (formula "3") (term "0"))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE TRUE"
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "5"))
                                                   (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "5"))
                                                   (rule "hideAuxiliaryEq" (formula "5"))
                                                   (rule "eqSymm" (formula "76"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "applyEqReverse" (formula "2") (term "1,0") (ifseqformula "1"))
                                                   (rule "hideAuxiliaryEq" (formula "1"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0,0,0,0") (ifseqformula "3"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "75") (term "1") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "1") (term "0,0,0,0") (ifseqformula "2"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "74")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                   (rule "applyEqReverse" (formula "1") (term "1,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "77") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "76"))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "replace_known_right" (formula "75") (term "0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "75"))
                                                   (rule "notRight" (formula "75"))
                                                   (rule "replace_known_left" (formula "3") (term "1,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "applyEqReverse" (formula "4") (term "1,0") (ifseqformula "3"))
                                                   (rule "hideAuxiliaryEq" (formula "3"))
                                                   (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "applyEqReverse" (formula "3") (term "1,0") (ifseqformula "2"))
                                                   (rule "hideAuxiliaryEq" (formula "2"))
                                                   (rule "replace_known_left" (formula "2") (term "1,0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")))
                                                   (rule "closeFalse" (formula "2"))
                                                )
                                             )
                                             (branch " !o_0 = null & ! boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "5") (term "2,0") (ifseqformula "4"))
                                                (rule "hideAuxiliaryEq" (formula "4"))
                                                (rule "replace_known_right" (formula "74") (term "0,0") (ifseqformula "52"))
                                                 (builtin "One Step Simplification" (formula "74"))
                                                (rule "false_right" (formula "74"))
                                                (rule "ineffectiveCast" (formula "51") (term "0,0") (ifseqformula "6"))
                                                (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "true_left" (formula "6"))
                                                (rule "applyEq" (formula "57") (term "0") (ifseqformula "50"))
                                                (rule "applyEq" (formula "51") (term "0,0") (ifseqformula "50"))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                   (rule "andLeft" (formula "4"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "notLeft" (formula "4"))
                                                   (rule "orRight" (formula "52"))
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "76") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "75"))
                                                   (rule "replace_known_right" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "3") (term "0,0,0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "2") (term "0,0,0,0,1,0,0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "52")))
                                                   (rule "replace_known_right" (formula "54") (term "0,1") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "53")))
                                                   (rule "closeTrue" (formula "54"))
                                                )
                                                (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                   (rule "applyEqReverse" (formula "1") (term "2,0") (ifseqformula "4"))
                                                   (rule "applyEqReverse" (formula "74") (term "1") (ifseqformula "4"))
                                                   (rule "hideAuxiliaryEq" (formula "4"))
                                                   (rule "eqSymm" (formula "73"))
                                                   (rule "ifthenelse_split" (formula "1") (term "0"))
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "notLeft" (formula "1"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "orRight" (formula "51"))
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "51")) (ifInst ""  (formula "52")))
                                                      (rule "replace_known_right" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "52"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "50")) (ifInst ""  (formula "51")))
                                                      (rule "replace_known_right" (formula "55") (term "0,1") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "55") (ifInst ""  (formula "53")))
                                                      (rule "closeTrue" (formula "55"))
                                                   )
                                                   (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                      (rule "hideAuxiliaryEq" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "1") (term "0"))
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                                                         (rule "andLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "notLeft" (formula "1"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "orRight" (formula "50"))
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "replace_known_right" (formula "1") (term "1,0,0,0,1,0,0") (ifseqformula "51"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "53")) (ifInst ""  (formula "49")) (ifInst ""  (formula "50")) (ifInst ""  (formula "52")))
                                                         (rule "replace_known_right" (formula "56") (term "0,0") (ifseqformula "53"))
                                                          (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                                                         (rule "closeTrue" (formula "56"))
                                                      )
                                                      (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_LOOP<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                                                         (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                                         (rule "hideAuxiliaryEq" (formula "1"))
                                                         (rule "cut_direct" (formula "52") (term "0,0"))
                                                         (branch "CUT: o_0 = null TRUE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "false_right" (formula "53"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "73")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                         (branch "CUT: o_0 = null FALSE"
                                                             (builtin "One Step Simplification" (formula "53"))
                                                            (rule "notRight" (formula "53"))
                                                            (rule "replace_known_left" (formula "2") (term "0,0,0,0,0,1,0,0") (ifseqformula "1"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "53")) (ifInst ""  (formula "74")))
                                                            (rule "closeFalse" (formula "2"))
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Exceptional Post (equals)"
                            (builtin "One Step Simplification" (formula "52"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "castDel" (formula "52") (term "0,1,1,1,0,1,1"))
                           (rule "andLeft" (formula "52"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "1,0") (ifseqformula "52"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,1,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "53"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0,1,0") (ifseqformula "25"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "53") (term "0,0,0,0,1,0") (ifseqformula "17"))
                           (rule "andLeft" (formula "53"))
                           (rule "andLeft" (formula "53"))
                           (rule "andLeft" (formula "55"))
                           (rule "notLeft" (formula "53"))
                           (rule "close" (formula "56") (ifseqformula "55"))
                        )
                        (branch "Pre (equals)"
                            (builtin "One Step Simplification" (formula "67"))
                           (rule "wellFormedAnonEQ" (formula "67") (term "0") (ifseqformula "44"))
                           (rule "wellFormedAnon" (formula "67") (term "0,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "67") (term "1,1") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "33")) (ifInst ""  (formula "43")))
                           (rule "wellFormedAnonEQ" (formula "67") (term "0") (ifseqformula "25"))
                           (rule "wellFormedAnonEQ" (formula "67") (term "0,0") (ifseqformula "17"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "67") (term "0,0,1,1") (ifseqformula "25"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "67") (term "0,0,0,1,1") (ifseqformula "17"))
                           (rule "replace_known_left" (formula "67") (term "1,0") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                           (rule "orRight" (formula "67"))
                           (rule "orRight" (formula "68"))
                           (rule "orRight" (formula "68"))
                           (rule "orRight" (formula "68"))
                           (rule "orRight" (formula "68"))
                           (rule "inEqSimp_ltToLeq" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "38") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "38") (term "1,0,0,0,0,0"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "30"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "39") (term "0,0,1,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "48") (term "0") (ifseqformula "47"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0,0,0,0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "35") (term "0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "49") (term "0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "50") (term "0,0") (ifseqformula "29"))
                           (rule "applyEq" (formula "28") (term "0,0,1,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "true_left" (formula "28"))
                           (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "28"))
                           (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                           (rule "applyEq" (formula "20") (term "0") (ifseqformula "21"))
                           (rule "qeq_literals" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "applyEq" (formula "43") (term "0,0") (ifseqformula "27"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "34") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "34") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "34") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "36"))
                           (rule "polySimp_mulLiterals" (formula "36") (term "0"))
                           (rule "polySimp_elimOne" (formula "36") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "44"))
                           (rule "mul_literals" (formula "44") (term "1"))
                           (rule "inEqSimp_contradEq7" (formula "46") (ifseqformula "45"))
                           (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "46") (term "0,0"))
                           (rule "add_literals" (formula "46") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "46") (term "1,0,0"))
                           (rule "add_literals" (formula "46") (term "0,0"))
                           (rule "leq_literals" (formula "46") (term "0"))
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "false_right" (formula "46"))
                           (rule "inEqSimp_subsumption1" (formula "32") (ifseqformula "45"))
                           (rule "inEqSimp_homoInEq0" (formula "32") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "32") (term "0,0"))
                           (rule "add_literals" (formula "32") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "32") (term "1,0,0"))
                           (rule "add_zero_right" (formula "32") (term "0,0"))
                           (rule "qeq_literals" (formula "32") (term "0"))
                            (builtin "One Step Simplification" (formula "32"))
                           (rule "true_left" (formula "32"))
                           (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "31"))
                           (rule "leq_literals" (formula "43") (term "0"))
                            (builtin "One Step Simplification" (formula "43"))
                           (rule "true_left" (formula "43"))
                           (rule "nnf_imp2or" (formula "11") (term "0"))
                           (rule "nnf_imp2or" (formula "33") (term "0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
                           (rule "mul_literals" (formula "11") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "33") (term "0,0"))
                           (rule "inEqSimp_notGeq" (formula "33") (term "1,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "33") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "1,0,0"))
                           (rule "mul_literals" (formula "33") (term "1,1,0,0"))
                           (rule "inEqSimp_notLeq" (formula "33") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "33") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "33") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "33") (term "1,0,0,0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "commute_or" (formula "11") (term "0,0"))
                           (rule "commute_or_2" (formula "11") (term "0"))
                           (rule "commute_or" (formula "33") (term "0,0"))
                           (rule "commute_or_2" (formula "33") (term "0"))
                           (rule "cut_direct" (formula "14") (term "0"))
                           (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "true_left" (formula "15"))
                              (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "56"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                              (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "true_left" (formula "13"))
                              (rule "applyEq" (formula "55") (term "0") (ifseqformula "14"))
                              (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                              (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                 (rule "castedGetAny" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "ineffectiveCast" (formula "58") (term "0") (ifseqformula "1"))
                                 (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                 (rule "close" (formula "59") (ifseqformula "39"))
                              )
                              (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                 (rule "castedGetAny" (formula "40") (term "0"))
                                  (builtin "One Step Simplification" (formula "40"))
                                 (rule "true_left" (formula "40"))
                                 (rule "ineffectiveCast" (formula "59") (term "0") (ifseqformula "1"))
                                 (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                 (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "61"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                 (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                 (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "61"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                 (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "62"))
                                  (builtin "One Step Simplification" (formula "39"))
                                 (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                 (rule "close" (formula "60") (ifseqformula "39"))
                              )
                           )
                           (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "cut_direct" (formula "13") (term "0"))
                              (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "true_left" (formula "14"))
                                 (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "13"))
                                 (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "57"))
                                  (builtin "One Step Simplification" (formula "15"))
                                 (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                 (rule "applyEq" (formula "56") (term "0") (ifseqformula "14"))
                                 (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                 (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                    (rule "castedGetAny" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "ineffectiveCast" (formula "59") (term "1,0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "59") (ifseqformula "39"))
                                 )
                                 (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                    (rule "castedGetAny" (formula "40") (term "0"))
                                     (builtin "One Step Simplification" (formula "40"))
                                    (rule "true_left" (formula "40"))
                                    (rule "ineffectiveCast" (formula "60") (term "1,0") (ifseqformula "1"))
                                    (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "39") (term "1,0") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "61"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
                                    (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                    (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "62"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "61") (ifseqformula "39"))
                                 )
                              )
                              (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "cut_direct" (formula "15") (term "0"))
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) TRUE"
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "true_left" (formula "16"))
                                    (rule "applyEq" (formula "58") (term "0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                    (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                       (rule "castedGetAny" (formula "40") (term "0"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "ineffectiveCast" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "59") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "59") (term "1,0") (ifseqformula "1"))
                                       (rule "close" (formula "59") (ifseqformula "39"))
                                    )
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                       (rule "castedGetAny" (formula "40") (term "0"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "ineffectiveCast" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "0,0,0") (ifseqformula "62"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "1,0") (ifseqformula "62"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "0") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "1"))
                                       (rule "close" (formula "64") (ifseqformula "39"))
                                    )
                                 )
                                 (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) FALSE"
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "applyEq" (formula "44") (term "0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "12") (term "1,0") (ifseqformula "15"))
                                    (rule "applyEq" (formula "58") (term "0") (ifseqformula "14"))
                                    (rule "cut_direct" (formula "39") (term "0,0,0,0"))
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                       (rule "castedGetAny" (formula "40") (term "0"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "ineffectiveCast" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "60") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "60") (term "1,0") (ifseqformula "1"))
                                       (rule "close" (formula "60") (ifseqformula "39"))
                                    )
                                    (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "seqGetAlphaCast" (formula "40") (term "0"))
                                       (rule "castedGetAny" (formula "40") (term "0"))
                                        (builtin "One Step Simplification" (formula "40"))
                                       (rule "true_left" (formula "40"))
                                       (rule "ineffectiveCast" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "typeEqDerived2" (formula "2") (term "0") (ifseqformula "1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "applyEq" (formula "65") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "1,0,0") (ifseqformula "65"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "63") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "61") (term "0") (ifseqformula "1"))
                                       (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "1"))
                                       (rule "replace_known_right" (formula "39") (term "1") (ifseqformula "64"))
                                        (builtin "One Step Simplification" (formula "39"))
                                       (rule "applyEq" (formula "62") (term "1,0") (ifseqformula "1"))
                                       (rule "close" (formula "62") (ifseqformula "39"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Null reference (_id = null)"
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "65")))
                           (rule "closeTrue" (formula "67"))
                        )
                     )
                     (branch "ClassCastException (!(o instanceof String))"
                         (builtin "One Step Simplification" (formula "66") (ifInst ""  (formula "51")))
                         (builtin "One Step Simplification" (formula "67"))
                        (rule "seqGetAlphaCast" (formula "46") (term "0"))
                        (rule "castedGetAny" (formula "46") (term "0"))
                         (builtin "One Step Simplification" (formula "46"))
                        (rule "true_left" (formula "46"))
                        (rule "methodCallParamThrow" (formula "67") (term "1,0,0,1"))
                        (rule "tryCatchThrow" (formula "67") (term "1,0,0,1"))
                        (rule "ifElseUnfold" (formula "67") (term "1,0,0,1") (inst "#boolv=x"))
                        (rule "variableDeclaration" (formula "67") (term "1,0,0,1") (newnames "x_1"))
                        (rule "equality_comparison_simple" (formula "67") (term "1,0,0,1"))
                        (rule "throwUnfold" (formula "67") (term "1") (inst "#v0=c"))
                        (rule "variableDeclarationAssign" (formula "67") (term "1"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "c"))
                        (rule "instanceCreationAssignment" (formula "67") (term "1") (inst "#v0=c_1"))
                        (rule "variableDeclarationAssign" (formula "67") (term "1"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "c_1"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "67") (term "1") (inst "#v0=c_2"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "c_2"))
                        (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                         (builtin "One Step Simplification" (formula "67"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "__NEW__"))
                        (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "67") (term "1") (inst "#v0=c_3"))
                        (rule "variableDeclaration" (formula "67") (term "1") (newnames "c_3"))
                        (rule "allocateInstance" (formula "67"))
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "One Step Simplification" (formula "68"))
                        (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "44"))
                        (rule "wellFormedAnon" (formula "1") (term "0,0,1,0"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "43")))
                        (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "25"))
                        (rule "wellFormedAnonEQ" (formula "1") (term "0,0,1,0") (ifseqformula "17"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "25"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,0,1,1,0") (ifseqformula "17"))
                        (rule "andLeft" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "7")) (ifInst ""  (formula "25")))
                        (rule "notLeft" (formula "1"))
                        (rule "orRight" (formula "51"))
                        (rule "orRight" (formula "51"))
                        (rule "orRight" (formula "51"))
                        (rule "orRight" (formula "51"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "assignment" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "assignment_write_attribute_this" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallWithinClass" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "assignment_write_attribute_this" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "assignment_write_attribute_this" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "methodCallReturnIgnoreResult" (formula "74") (term "1"))
                        (rule "methodCallReturn" (formula "74") (term "1"))
                        (rule "assignment" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "assignment" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallSuper" (formula "74") (term "1"))
                        (rule "methodBodyExpand" (formula "74") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "assignment_write_attribute_this" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "assignment_write_attribute_this" (formula "74") (term "1"))
                         (builtin "One Step Simplification" (formula "74"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "methodCallEmpty" (formula "74") (term "1"))
                        (rule "blockEmpty" (formula "74") (term "1"))
                        (rule "assignment_write_attribute" (formula "74") (term "1"))
                        (branch "Normal Execution (c_1 != null)"
                            (builtin "One Step Simplification" (formula "75"))
                            (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "56")))
                           (rule "false_right" (formula "74"))
                           (rule "assignment" (formula "74") (term "1"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "tryCatchThrow" (formula "74") (term "1"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "ifElseUnfold" (formula "74") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "74") (term "1") (newnames "x_2"))
                           (rule "equality_comparison_simple" (formula "74") (term "1"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "replace_known_right" (formula "74") (term "0,0,1,0") (ifseqformula "56"))
                            (builtin "One Step Simplification" (formula "74"))
                           (rule "ifElseSplit" (formula "74"))
                           (branch "if x_2 true"
                               (builtin "One Step Simplification" (formula "75"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_2 false"
                               (builtin "One Step Simplification" (formula "75"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifElseSplit" (formula "74"))
                              (branch "if c instanceof java.lang.Throwable true"
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                 (rule "true_left" (formula "1"))
                                 (rule "variableDeclaration" (formula "74") (term "1") (newnames "e"))
                                 (rule "delete_unnecessary_cast" (formula "74") (term "1"))
                                  (builtin "One Step Simplification" (formula "75"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "74") (term "1"))
                                  (builtin "One Step Simplification" (formula "74"))
                                 (rule "assignment" (formula "74") (term "1"))
                                  (builtin "One Step Simplification" (formula "74"))
                                 (rule "methodCallEmpty" (formula "74") (term "1"))
                                 (rule "emptyModality" (formula "74") (term "1"))
                                  (builtin "One Step Simplification" (formula "74"))
                                 (rule "replace_known_right" (formula "74") (term "0,0,1,0") (ifseqformula "56"))
                                  (builtin "One Step Simplification" (formula "74"))
                                 (rule "ifElseSplit" (formula "74"))
                                 (branch "if x_1 true"
                                     (builtin "One Step Simplification" (formula "75"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_1 false"
                                     (builtin "One Step Simplification" (formula "75"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "ifElseSplit" (formula "74"))
                                    (branch "if thrownExc instanceof java.lang.Throwable true"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                       (rule "true_left" (formula "1"))
                                       (rule "variableDeclaration" (formula "74") (term "1") (newnames "e_1"))
                                       (rule "delete_unnecessary_cast" (formula "74") (term "1"))
                                        (builtin "One Step Simplification" (formula "75"))
                                        (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment" (formula "74") (term "1"))
                                        (builtin "One Step Simplification" (formula "74"))
                                       (rule "emptyModality" (formula "74") (term "1"))
                                       (rule "applyEqReverse" (formula "73") (term "0,0") (ifseqformula "47") (proofscript))
                                       (rule "seqCastInstance" (formula "73") (proofscript))
                                        (builtin "One Step Simplification" (formula "74") (ifInst ""  (formula "56")) (proofscript))
                                       (rule "false_right" (formula "74"))
                                       (rule "orRight" (formula "73"))
                                       (rule "notRight" (formula "73"))
                                       (rule "inEqSimp_ltToLeq" (formula "41"))
                                       (rule "polySimp_mulComm0" (formula "41") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "41") (term "0"))
                                       (rule "inEqSimp_ltToLeq" (formula "30") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "39") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "39") (term "1,0,0,0,0,0"))
                                       (rule "applyEq" (formula "74") (term "0") (ifseqformula "48"))
                                       (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "31"))
                                       (rule "applyEq" (formula "21") (term "0") (ifseqformula "22"))
                                       (rule "qeq_literals" (formula "21"))
                                       (rule "true_left" (formula "21"))
                                       (rule "applyEq" (formula "49") (term "0") (ifseqformula "48"))
                                       (rule "applyEq" (formula "40") (term "0,0,1,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "29") (term "0,0,1,0,0,0,0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "47") (term "0,0") (ifseqformula "30"))
                                       (rule "applyEq" (formula "29") (term "0,0,1,0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "29"))
                                       (rule "true_left" (formula "29"))
                                       (rule "applyEq" (formula "35") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "34") (term "0") (ifseqformula "28"))
                                       (rule "applyEq" (formula "48") (term "0,0") (ifseqformula "29"))
                                       (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "29"))
                                        (builtin "One Step Simplification" (formula "28"))
                                       (rule "true_left" (formula "28"))
                                       (rule "applyEq" (formula "47") (term "1") (ifseqformula "45"))
                                       (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "28"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                       (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0"))
                                       (rule "mul_literals" (formula "35") (term "0,1,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "35") (term "1,1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "35") (term "1,1,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "46"))
                                       (rule "mul_literals" (formula "46") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "37"))
                                       (rule "polySimp_mulLiterals" (formula "37") (term "0"))
                                       (rule "polySimp_elimOne" (formula "37") (term "0"))
                                       (rule "inEqSimp_contradEq7" (formula "53") (ifseqformula "46"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "53") (term "0,0"))
                                       (rule "add_literals" (formula "53") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "53") (term "1,0,0"))
                                       (rule "add_literals" (formula "53") (term "0,0"))
                                       (rule "leq_literals" (formula "53") (term "0"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "false_right" (formula "53"))
                                       (rule "inEqSimp_subsumption1" (formula "45") (ifseqformula "32"))
                                       (rule "leq_literals" (formula "45") (term "0"))
                                        (builtin "One Step Simplification" (formula "45"))
                                       (rule "true_left" (formula "45"))
                                       (rule "inEqSimp_subsumption1" (formula "33") (ifseqformula "45"))
                                       (rule "inEqSimp_homoInEq0" (formula "33") (term "0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "33") (term "0,0"))
                                       (rule "add_literals" (formula "33") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "33") (term "1,0,0"))
                                       (rule "add_literals" (formula "33") (term "0,0"))
                                       (rule "qeq_literals" (formula "33") (term "0"))
                                        (builtin "One Step Simplification" (formula "33"))
                                       (rule "true_left" (formula "33"))
                                       (rule "nnf_imp2or" (formula "12") (term "0"))
                                       (rule "nnf_imp2or" (formula "34") (term "0"))
                                       (rule "nnf_notAnd" (formula "12") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                                       (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                                       (rule "nnf_notAnd" (formula "34") (term "0,0"))
                                       (rule "inEqSimp_notGeq" (formula "34") (term "1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,0,0,1,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0"))
                                       (rule "mul_literals" (formula "34") (term "1,1,0,0"))
                                       (rule "inEqSimp_notLeq" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_rightDist" (formula "34") (term "1,0,0,0,0,0"))
                                       (rule "mul_literals" (formula "34") (term "0,1,0,0,0,0,0"))
                                       (rule "polySimp_addAssoc" (formula "34") (term "0,0,0,0,0"))
                                       (rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
                                       (rule "add_zero_left" (formula "34") (term "0,0,0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "34") (term "1,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "34") (term "1,0,0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "commute_or" (formula "12") (term "0,0"))
                                       (rule "commute_or_2" (formula "12") (term "0"))
                                       (rule "commute_or" (formula "34") (term "0,0"))
                                       (rule "commute_or_2" (formula "34") (term "0"))
                                       (rule "cut_direct" (formula "15") (term "0"))
                                       (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null TRUE"
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "applyEq" (formula "16") (term "1,1") (ifseqformula "15"))
                                          (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                          (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "13"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "15"))
                                          (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "41"))
                                             (rule "true_left" (formula "41"))
                                             (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                             (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "12") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_contradInEq0" (formula "44") (ifseqformula "12"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "inEqSimp_homoInEq1" (formula "44"))
                                             (rule "polySimp_pullOutFactor1b" (formula "44") (term "0"))
                                             (rule "add_literals" (formula "44") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "44") (term "1,0"))
                                             (rule "add_literals" (formula "44") (term "0"))
                                             (rule "leq_literals" (formula "44"))
                                             (rule "closeFalse" (formula "44"))
                                          )
                                          (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "40"))
                                             (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                             (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                             (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "32"))
                                             (rule "qeq_literals" (formula "12") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "12"))
                                             (rule "inEqSimp_contradInEq0" (formula "44") (ifseqformula "12"))
                                             (rule "andLeft" (formula "44"))
                                             (rule "inEqSimp_homoInEq1" (formula "44"))
                                             (rule "polySimp_pullOutFactor1b" (formula "44") (term "0"))
                                             (rule "add_literals" (formula "44") (term "1,1,0"))
                                             (rule "times_zero_1" (formula "44") (term "1,0"))
                                             (rule "add_literals" (formula "44") (term "0"))
                                             (rule "leq_literals" (formula "44"))
                                             (rule "closeFalse" (formula "44"))
                                          )
                                       )
                                       (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) = null FALSE"
                                           (builtin "One Step Simplification" (formula "15"))
                                          (rule "cut_direct" (formula "14") (term "0"))
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null TRUE"
                                              (builtin "One Step Simplification" (formula "15"))
                                             (rule "true_left" (formula "15"))
                                             (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "14"))
                                             (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "64"))
                                              (builtin "One Step Simplification" (formula "16"))
                                             (rule "applyEq" (formula "64") (term "0") (ifseqformula "16"))
                                             (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                             (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "41"))
                                                (rule "true_left" (formula "41"))
                                                (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "32"))
                                                (rule "qeq_literals" (formula "12") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "44"))
                                                (rule "andLeft" (formula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "12"))
                                                (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                                (rule "add_literals" (formula "12") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "12") (term "1,0"))
                                                (rule "add_literals" (formula "12") (term "0"))
                                                (rule "leq_literals" (formula "12"))
                                                (rule "closeFalse" (formula "12"))
                                             )
                                             (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                 (builtin "One Step Simplification" (formula "40"))
                                                (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "32"))
                                                (rule "qeq_literals" (formula "12") (term "0,0"))
                                                 (builtin "One Step Simplification" (formula "12"))
                                                (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "44"))
                                                (rule "andLeft" (formula "12"))
                                                (rule "inEqSimp_homoInEq1" (formula "12"))
                                                (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                                                (rule "add_literals" (formula "12") (term "1,1,0"))
                                                (rule "times_zero_1" (formula "12") (term "1,0"))
                                                (rule "add_literals" (formula "12") (term "0"))
                                                (rule "leq_literals" (formula "12"))
                                                (rule "closeFalse" (formula "12"))
                                             )
                                          )
                                          (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) = null FALSE"
                                              (builtin "One Step Simplification" (formula "14"))
                                             (rule "cut_direct" (formula "16") (term "0"))
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) TRUE"
                                                 (builtin "One Step Simplification" (formula "17"))
                                                (rule "true_left" (formula "17"))
                                                (rule "applyEq" (formula "65") (term "0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                                (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "44"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "12") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "32"))
                                                   (rule "qeq_literals" (formula "12") (term "0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "closeFalse" (formula "12"))
                                                )
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "0") (ifseqformula "32"))
                                                   (rule "qeq_literals" (formula "12") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_contradInEq0" (formula "44") (ifseqformula "12"))
                                                   (rule "andLeft" (formula "44"))
                                                   (rule "inEqSimp_homoInEq1" (formula "44"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "44") (term "0"))
                                                   (rule "add_literals" (formula "44") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "44") (term "1,0"))
                                                   (rule "add_literals" (formula "44") (term "0"))
                                                   (rule "leq_literals" (formula "44"))
                                                   (rule "closeFalse" (formula "44"))
                                                )
                                             )
                                             (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MAX) FALSE"
                                                 (builtin "One Step Simplification" (formula "16"))
                                                (rule "applyEq" (formula "66") (term "0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "16"))
                                                (rule "applyEq" (formula "44") (term "0") (ifseqformula "15"))
                                                (rule "cut_direct" (formula "40") (term "0,0,0,0"))
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "41"))
                                                   (rule "true_left" (formula "41"))
                                                   (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "44"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                                   (rule "add_literals" (formula "12") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "12") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "32"))
                                                   (rule "qeq_literals" (formula "12") (term "0"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "closeFalse" (formula "12"))
                                                )
                                                (branch "CUT: boolean::select(heap, result_4, java.lang.Object::<created>) = TRUE FALSE"
                                                    (builtin "One Step Simplification" (formula "40"))
                                                   (rule "allLeft" (formula "12") (inst "t=int::select(anon_heap_LOOP<<anonHeapFunction>>,
            result_0,
            java.util.Iterator::$index)"))
                                                   (rule "replace_known_left" (formula "12") (term "0,0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_commuteGeq" (formula "12") (term "1"))
                                                   (rule "inEqSimp_contradInEq1" (formula "12") (term "1") (ifseqformula "44"))
                                                   (rule "inEqSimp_homoInEq1" (formula "12") (term "0,1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0,1"))
                                                   (rule "add_literals" (formula "12") (term "1,1,0,0,1"))
                                                   (rule "times_zero_1" (formula "12") (term "1,0,0,1"))
                                                   (rule "add_zero_right" (formula "12") (term "0,0,1"))
                                                   (rule "leq_literals" (formula "12") (term "0,1"))
                                                    (builtin "One Step Simplification" (formula "12"))
                                                   (rule "inEqSimp_contradInEq0" (formula "32") (ifseqformula "12"))
                                                   (rule "qeq_literals" (formula "32") (term "0"))
                                                    (builtin "One Step Simplification" (formula "32"))
                                                   (rule "closeFalse" (formula "32"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "if thrownExc instanceof java.lang.Throwable false"
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch "if c instanceof java.lang.Throwable false"
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch "Null Reference (c_1 = null)"
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
                  (branch "Exceptional Post (next)"
                      (builtin "One Step Simplification" (formula "43"))
                      (builtin "One Step Simplification" (formula "58"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "1,0,1,1,0,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "1,0,1,1,0,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                     (rule "andLeft" (formula "43"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0") (ifseqformula "24"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,0,1,0") (ifseqformula "16"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "44"))
                     (rule "andLeft" (formula "46"))
                     (rule "notLeft" (formula "44"))
                     (rule "close" (formula "47") (ifseqformula "46"))
                  )
                  (branch "Pre (next)"
                      (builtin "One Step Simplification" (formula "56"))
                     (rule "wellFormedAnon" (formula "56") (term "1"))
                     (rule "wellFormedAnonEQ" (formula "56") (term "0,1") (ifseqformula "24"))
                     (rule "wellFormedAnonEQ" (formula "56") (term "0,0,1") (ifseqformula "16"))
                     (rule "replace_known_left" (formula "56") (term "1,0,0,1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "5")) (ifInst ""  (formula "23")) (ifInst ""  (formula "32")))
                     (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "37") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "39"))
                     (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "39") (term "0"))
                     (rule "applyEq" (formula "39") (term "0,1,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "28") (term "0,0,1,0,0,0,0,0") (ifseqformula "29"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
                     (rule "qeq_literals" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "27"))
                     (rule "applyEq" (formula "26") (term "0,0,1,0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "26"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                     (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                     (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "35"))
                     (rule "polySimp_mulLiterals" (formula "35") (term "0"))
                     (rule "polySimp_elimOne" (formula "35") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "31") (ifseqformula "35"))
                     (rule "inEqSimp_homoInEq0" (formula "31") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "31") (term "0,0"))
                     (rule "add_literals" (formula "31") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "31") (term "1,0,0"))
                     (rule "add_literals" (formula "31") (term "0,0"))
                     (rule "qeq_literals" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "true_left" (formula "31"))
                     (rule "nnf_imp2or" (formula "10") (term "0"))
                     (rule "nnf_imp2or" (formula "32") (term "0"))
                     (rule "nnf_notAnd" (formula "10") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "10") (term "1,0,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "10") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0"))
                     (rule "mul_literals" (formula "10") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "10") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "10") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,0,0,0"))
                     (rule "nnf_notAnd" (formula "32") (term "0,0"))
                     (rule "inEqSimp_notGeq" (formula "32") (term "1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,0,0,1,0,0"))
                     (rule "add_zero_right" (formula "32") (term "0,0,1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                     (rule "mul_literals" (formula "32") (term "1,1,0,0"))
                     (rule "inEqSimp_notLeq" (formula "32") (term "0,0,0"))
                     (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0"))
                     (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0"))
                     (rule "add_literals" (formula "32") (term "0,0,0,0,0,0"))
                     (rule "add_zero_left" (formula "32") (term "0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "32") (term "1,0,0,0"))
                     (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "51"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "51") (term "1,0"))
                     (rule "replaceKnownSelect_taclet100_11" (formula "51") (term "0,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "51") (term "1,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "51") (term "0,1"))
                     (rule "replaceKnownSelect_taclet100_10" (formula "51") (term "0,1,1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "51") (term "0,1,1"))
                     (rule "inEqSimp_commuteLeq" (formula "51") (term "0"))
                     (rule "replace_known_left" (formula "51") (term "0") (ifseqformula "30"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "inEqSimp_leqRight" (formula "51"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0"))
                     (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "27"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "35"))
                     (rule "andLeft" (formula "1"))
                     (rule "inEqSimp_homoInEq1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0"))
                     (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                     (rule "add_literals" (formula "1") (term "1,1,0"))
                     (rule "times_zero_1" (formula "1") (term "1,0"))
                     (rule "add_literals" (formula "1") (term "0"))
                     (rule "leq_literals" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Null reference (it = null)"
                      (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "44")))
                     (rule "closeTrue" (formula "56"))
                  )
               )
               (branch "if x false"
                   (builtin "One Step Simplification" (formula "57"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Exceptional Post (hasNext)"
                (builtin "One Step Simplification" (formula "32"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,1,0") (ifseqformula "18"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "32") (term "0,0,1,0") (ifseqformula "10"))
               (rule "replaceKnownSelect_taclet100_11" (formula "32") (term "0,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "32") (term "0,1,0,0,1"))
               (rule "replaceKnownSelect_taclet100_10" (formula "32") (term "0,1,1,0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "32") (term "0,1,1,0,0,1"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "32"))
               (rule "andLeft" (formula "34"))
               (rule "notLeft" (formula "32"))
               (rule "close" (formula "35") (ifseqformula "34"))
            )
            (branch "Pre (hasNext)"
                (builtin "One Step Simplification" (formula "46"))
               (rule "wellFormedAnon" (formula "46") (term "1"))
               (rule "wellFormedAnonEQ" (formula "46") (term "0,1") (ifseqformula "18"))
               (rule "wellFormedAnonEQ" (formula "46") (term "0,0,1") (ifseqformula "10"))
               (rule "replace_known_left" (formula "46") (term "0,0,0,1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "9")) (ifInst ""  (formula "17")) (ifInst ""  (formula "26")))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "31"))
               (rule "polySimp_mulComm0" (formula "31") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "31") (term "0"))
               (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0"))
               (rule "applyEq" (formula "31") (term "0,0,1,0") (ifseqformula "23"))
               (rule "applyEq" (formula "28") (term "0") (ifseqformula "21"))
               (rule "applyEq" (formula "22") (term "0,0,1,0,0,0,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
               (rule "qeq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "20"))
               (rule "true_left" (formula "20"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
               (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "28"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0"))
               (rule "polySimp_elimOne" (formula "28") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "25") (ifseqformula "28"))
               (rule "inEqSimp_homoInEq0" (formula "25") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "25") (term "0,0"))
               (rule "add_literals" (formula "25") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "25") (term "1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0"))
               (rule "qeq_literals" (formula "25") (term "0"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "nnf_imp2or" (formula "7") (term "0"))
               (rule "nnf_imp2or" (formula "25") (term "0"))
               (rule "nnf_notAnd" (formula "7") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "7") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "7") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "7") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "7") (term "1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "7") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
               (rule "mul_literals" (formula "7") (term "1,1,0,0"))
               (rule "nnf_notAnd" (formula "25") (term "0,0"))
               (rule "inEqSimp_notGeq" (formula "25") (term "1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,0,0,1,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "25") (term "1,0,0"))
               (rule "mul_literals" (formula "25") (term "1,1,0,0"))
               (rule "inEqSimp_notLeq" (formula "25") (term "0,0,0"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,0,0,0,0"))
               (rule "mul_literals" (formula "25") (term "0,1,0,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "25") (term "0,0,0,0,0,0"))
               (rule "add_zero_left" (formula "25") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "25") (term "0,0,0"))
               (rule "polySimp_mulLiterals" (formula "25") (term "1,0,0,0"))
               (rule "polySimp_elimOne" (formula "25") (term "1,0,0,0"))
               (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "42"))
               (rule "replaceKnownSelect_taclet100_11" (formula "42") (term "1,0"))
               (rule "replaceKnownSelect_taclet100_11" (formula "42") (term "0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "42") (term "1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "42") (term "0,1"))
               (rule "replaceKnownSelect_taclet100_10" (formula "42") (term "0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "42") (term "0,1,1"))
               (rule "inEqSimp_commuteLeq" (formula "42") (term "0"))
               (rule "replace_known_left" (formula "42") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "inEqSimp_leqRight" (formula "42"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "21"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "inEqSimp_contradInEq0" (formula "28") (ifseqformula "1"))
               (rule "andLeft" (formula "28"))
               (rule "inEqSimp_homoInEq1" (formula "28"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0"))
               (rule "mul_literals" (formula "28") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0"))
               (rule "polySimp_addComm1" (formula "28") (term "0,0"))
               (rule "add_literals" (formula "28") (term "0,0,0"))
               (rule "polySimp_pullOutFactor1b" (formula "28") (term "0"))
               (rule "add_literals" (formula "28") (term "1,1,0"))
               (rule "times_zero_1" (formula "28") (term "1,0"))
               (rule "add_zero_right" (formula "28") (term "0"))
               (rule "leq_literals" (formula "28"))
               (rule "closeFalse" (formula "28"))
            )
            (branch "Null reference (it = null)"
                (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "34")))
               (rule "closeTrue" (formula "46"))
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "27"))
             (builtin "One Step Simplification" (formula "28"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,1,0") (ifseqformula "17"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "27") (term "0,0,1,0") (ifseqformula "9"))
            (rule "replaceKnownSelect_taclet100_11" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "27") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet100_10" (formula "27") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "27") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "29"))
            (rule "notLeft" (formula "27"))
            (rule "close" (formula "30") (ifseqformula "29"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "27"))
            (rule "wellFormedAnon" (formula "27") (term "1"))
            (rule "wellFormedAnonEQ" (formula "27") (term "0,1") (ifseqformula "17"))
            (rule "wellFormedAnonEQ" (formula "27") (term "0,0,1") (ifseqformula "9"))
            (rule "replace_known_left" (formula "27") (term "1,1") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")) (ifInst ""  (formula "8")) (ifInst ""  (formula "16")))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "27"))
            (rule "replaceKnownSelect_taclet100_11" (formula "27") (term "1,0"))
            (rule "replaceKnownSelect_taclet100_11" (formula "27") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "27") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_13" (formula "27") (term "0,1"))
            (rule "replaceKnownSelect_taclet100_10" (formula "27") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet100_12" (formula "27") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0"))
            (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "close" (formula "27") (ifseqformula "25"))
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "30")))
            (rule "closeTrue" (formula "27"))
         )
      )
      (branch "Use Case"
          (builtin "One Step Simplification" (formula "37"))
          (builtin "One Step Simplification" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "castedGetAny" (formula "24") (term "0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "24") (term "0,0,0"))
         (rule "variableDeclarationAssign" (formula "39") (term "1"))
         (rule "variableDeclaration" (formula "39") (term "1") (newnames "b_1"))
         (rule "pullOutSelect" (formula "24") (term "0,1,1,0,0") (inst "selectSK=java_util_Collection_seq_3"))
         (rule "simplifySelectOfAnon" (formula "24"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "15"))
         (rule "replaceKnownSelect_taclet200_9" (formula "25") (term "0,0,0,1,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,1,0,0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "24") (term "0,0,0,1,0,0") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "9")))
         (rule "elementOfUnion" (formula "24") (term "0,0"))
         (rule "elementOfSingleton" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "hideAuxiliaryEq" (formula "24"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_10" (formula "24") (term "0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_10" (formula "24") (term "0,0,0,1,0"))
         (rule "pullOutSelect" (formula "23") (term "1") (inst "selectSK=java_util_Collection_seq_4"))
         (rule "simplifySelectOfAnon" (formula "24"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")))
         (rule "replaceKnownSelect_taclet00_5" (formula "24") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "24") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,0,1,0,0") (ifseqformula "8"))
         (rule "simplifySelectOfAnon" (formula "23"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "39")))
         (rule "replaceKnownSelect_taclet00_4" (formula "23") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_6" (formula "23") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,1,0,0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "24") (term "0,0,0,1,0,0") (ifseqformula "26"))
          (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "16")))
         (rule "replace_known_left" (formula "23") (term "0,0,0,1,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "elementOfUnion" (formula "24") (term "0,0"))
         (rule "elementOfSingleton" (formula "24") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "elementOfSingleton" (formula "24") (term "0,0"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "hideAuxiliaryEq" (formula "24"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "23") (term "1"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "eqSymm" (formula "23") (term "1"))
         (rule "elementOfUnion" (formula "23") (term "0,0"))
         (rule "elementOfSingleton" (formula "23") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "elementOfSingleton" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "eqSymm" (formula "23") (term "0,0"))
         (rule "sortsDisjointModuloNull" (formula "23") (term "0,0"))
         (rule "replace_known_right" (formula "23") (term "1,0,0") (ifseqformula "38"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "29")))
         (rule "true_left" (formula "23"))
         (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "22"))
         (rule "replaceKnownSelect_taclet200_11" (formula "22") (term "0,1,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "22") (term "0,1,1"))
         (rule "andLeft" (formula "22"))
         (rule "inEqSimp_commuteLeq" (formula "22"))
         (rule "pullOutSelect" (formula "23") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
         (rule "simplifySelectOfAnon" (formula "23"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "28")))
         (rule "replaceKnownSelect_taclet200_14" (formula "22") (term "0"))
         (rule "replaceKnownSelect_taclet00_2" (formula "23") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "23") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0") (ifseqformula "15"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,0,1,0,0") (ifseqformula "8"))
         (rule "replace_known_right" (formula "23") (term "1,0,0,1,0,0") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")) (ifInst ""  (formula "16")))
         (rule "inEqSimp_commuteLeq" (formula "24"))
         (rule "elementOfUnion" (formula "23") (term "0,0"))
         (rule "elementOfSingleton" (formula "23") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "elementOfSingleton" (formula "23") (term "0,0"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "hideAuxiliaryEq" (formula "23"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "23") (term "1"))
         (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "22") (term "0"))
         (rule "commute_and" (formula "24") (term "0,0"))
          (builtin "Use Operation Contract" (formula "39") (newnames "heapBefore_hasNext,result_2,exc_2") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "40"))
             (builtin "One Step Simplification" (formula "25"))
            (rule "replaceKnownSelect_taclet200_14" (formula "25") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "25") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet200_11" (formula "25") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "25") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "26"))
            (rule "andLeft" (formula "26"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "27"))
            (rule "replaceKnownSelect_taclet200_14" (formula "27") (term "0,1"))
            (rule "replaceKnownSelect_taclet200_14" (formula "27") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "27") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "27") (term "1,0"))
            (rule "replaceKnownSelect_taclet200_11" (formula "27") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "27") (term "0,1,1"))
            (rule "andLeft" (formula "27"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "inEqSimp_commuteLeq" (formula "27"))
            (rule "methodCallEmpty" (formula "41") (term "1"))
            (rule "emptyModality" (formula "41") (term "1"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "impRight" (formula "41"))
            (rule "notLeft" (formula "1"))
            (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "notLeft" (formula "26"))
            (rule "methodCallReturn" (formula "42") (term "1"))
            (rule "assignment" (formula "42") (term "1"))
             (builtin "One Step Simplification" (formula "42"))
            (rule "lenNonNegative" (formula "5") (term "1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "methodCallEmpty" (formula "43") (term "1"))
            (rule "tryEmpty" (formula "43") (term "1"))
            (rule "emptyModality" (formula "43") (term "1"))
             (builtin "One Step Simplification" (formula "43") (ifInst ""  (formula "33")))
            (rule "replaceKnownSelect_taclet200_9" (formula "43") (term "0,1,1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet200_9" (formula "43") (term "0,0,0,1,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_10" (formula "43") (term "0,1,1,0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_10" (formula "43") (term "0,0,0,1,0,0,0"))
            (rule "eqSymm" (formula "43") (term "1,0,0,1"))
            (rule "inEqSimp_ltRight" (formula "27"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "26") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "43") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,1,0,0,0,0"))
            (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "20"))
            (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "20"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "26") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "26") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "26") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "26") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "26") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "43") (term "1,0,0,0,0"))
            (rule "polySimp_mulComm0" (formula "43") (term "1,1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "43") (term "1,1,0,0,0,0"))
            (rule "mul_literals" (formula "43") (term "0,1,1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "43") (term "1,1,1,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "25") (ifseqformula "1"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "25"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "25") (term "0") (ifseqformula "24"))
            (rule "inEqSimp_homoInEq1" (formula "25"))
            (rule "polySimp_pullOutFactor1" (formula "25") (term "0"))
            (rule "add_literals" (formula "25") (term "1,0"))
            (rule "times_zero_1" (formula "25") (term "0"))
            (rule "leq_literals" (formula "25"))
            (rule "true_left" (formula "25"))
            (rule "applyEq" (formula "5") (term "0") (ifseqformula "24"))
            (rule "applyEq" (formula "5") (term "1,1,0,0,0") (ifseqformula "23"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_imp2or" (formula "5") (term "0"))
            (rule "nnf_imp2or" (formula "41") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "5") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
            (rule "mul_literals" (formula "5") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "41") (term "0,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,0,0"))
            (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,0,0"))
            (rule "mul_literals" (formula "41") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,0,0"))
            (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,0,0"))
            (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,0,0"))
            (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,0,0"))
            (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,0,0"))
            (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "41") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "41") (term "1,0"))
            (rule "insert_constant_string_value" (formula "41") (term "0,0,1,0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "insert_constant_string_value" (formula "41") (term "0,0,1,0,0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "insert_constant_string_value" (formula "41") (term "0,0,1,0,0,0,0,1,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "castDel" (formula "41") (term "0,0,0,1,0,0,1,0"))
            (rule "castDel" (formula "41") (term "0,0,0,1,0,0,0,0,1,0"))
            (rule "castDel" (formula "41") (term "0,0,0,1,0,0,0,1,0"))
            (rule "replace_known_right" (formula "41") (term "0,1,0,0,1,0") (ifseqformula "37"))
             (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "35")) (ifInst ""  (formula "36")))
            (rule "pullOutSelect" (formula "41") (term "0,0,1,0,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "0,0,1,0,0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "41") (term "0,1,0,0,0,1,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "pullOutSelect" (formula "41") (term "0,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
            (rule "applyEq" (formula "42") (term "0,0,1,1,0") (ifseqformula "1"))
            (rule "applyEq" (formula "42") (term "0,0,1,0,1,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "42") (term "1,1,1,0"))
            (rule "eqSymm" (formula "42") (term "0,1,1,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "1,1,1,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "42") (term "0,0,1,0,1,0") (ifseqformula "1"))
            (rule "applyEqReverse" (formula "42") (term "1,0,1,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "41") (term "0,1,0,1,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "pullOutSelect" (formula "41") (term "0,0,1,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "0,0,1,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "41") (term "0,1,0,1,0") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "pullOutSelect" (formula "41") (term "0,0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "0,0,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "41") (term "0,0,1,0") (ifseqformula "32"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "pullOutSelect" (formula "41") (term "0,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MAX_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "42") (term "1,1,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "1,1,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "pullOutSelect" (formula "41") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "42") (term "0,1,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "42") (term "1,0,1,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_or_2" (formula "5") (term "0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "commute_or" (formula "41") (term "1,0"))
            (rule "replace_known_left" (formula "41") (term "1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "commute_or" (formula "5") (term "0,0"))
            (rule "commute_or_2" (formula "5") (term "0"))
            (rule "andRight" (formula "41"))
            (branch
               (rule "allRight" (formula "41") (inst "sk=i_0"))
               (rule "orRight" (formula "41"))
               (rule "notRight" (formula "42"))
               (rule "orRight" (formula "42"))
               (rule "inEqSimp_leqRight" (formula "42"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "add_zero_left" (formula "1") (term "0"))
               (rule "inEqSimp_geqRight" (formula "43"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "1") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "lenNonNegative" (formula "14") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "14"))
               (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
               (rule "qeq_literals" (formula "14"))
               (rule "true_left" (formula "14"))
               (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
               (rule "andLeft" (formula "21"))
               (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
               (rule "applyEq" (formula "22") (term "0,0,1,0,0,1,0,0") (ifseqformula "23"))
               (rule "applyEq" (formula "22") (term "0,0,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "true_left" (formula "22"))
               (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "true_left" (formula "21"))
               (rule "cut_direct" (formula "9") (term "1"))
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "true_left" (formula "10"))
                  (rule "applyEq" (formula "41") (term "0") (ifseqformula "9"))
                  (rule "allLeft" (formula "27") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                  (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,1"))
                  (rule "leq_literals" (formula "27") (term "0,1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "27"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "applyEq" (formula "29") (term "0") (ifseqformula "9"))
                  (rule "eqSymm" (formula "29"))
                  (rule "applyEq" (formula "42") (term "0") (ifseqformula "9"))
                  (rule "allLeft" (formula "27") (inst "t=i_0"))
                  (rule "replace_known_left" (formula "27") (term "0,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_commuteGeq" (formula "27") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (term "1") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "27") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "27") (term "0,0,1"))
                  (rule "add_literals" (formula "27") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "27") (term "1,0,0,1"))
                  (rule "add_literals" (formula "27") (term "0,0,1"))
                  (rule "leq_literals" (formula "27") (term "0,1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_contradInEq1" (formula "27") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "27") (term "0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "closeFalse" (formula "27"))
               )
            )
            (branch
               (rule "allRight" (formula "41") (inst "sk=f_0"))
               (rule "allRight" (formula "41") (inst "sk=o_0"))
               (rule "orRight" (formula "41"))
               (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "16"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "9"))
               (rule "eqSymm" (formula "43"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "10"))
               (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
               (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "lenNonNegative" (formula "13") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "13"))
               (rule "applyEq" (formula "13") (term "0") (ifseqformula "14"))
               (rule "qeq_literals" (formula "13"))
               (rule "true_left" (formula "13"))
               (rule "cut_direct" (formula "8") (term "1"))
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) TRUE"
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "applyEq" (formula "40") (term "0") (ifseqformula "8"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                  (rule "andLeft" (formula "20"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "applyEq" (formula "20") (term "0,0,1,0,0,1,0,0") (ifseqformula "21"))
                  (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_and" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "2"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "29"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_right" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "28")))
                     (rule "replace_known_right" (formula "45") (term "0,0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "28")))
                     (rule "closeTrue" (formula "45"))
                  )
                  (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !f_0 = java.lang.Object::<created> & ( f_0 = java.util.Collection::$seq | f_0 = java.util.Iterator::$index) & (f_0 = java.util.Iterator::$index | o_0 = self) & (f_0 = java.util.Collection::$seq | o_0 = result_0) & (o_0 = self | o_0 = result_0) | !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                        (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "44"))
                        (rule "commute_and_2" (formula "1") (term "0,0"))
                        (rule "lenNonNegative" (formula "25") (term "1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "25"))
                        (rule "cut_direct" (formula "44") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "false_right" (formula "45"))
                           (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "false_right" (formula "29"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyEq" (formula "48") (term "1,1") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "48") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "5") (term "0"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEqRigid" (formula "3") (term "0,1") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1"))
                           (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "37"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEqRigid" (formula "46") (term "2,1") (ifseqformula "2"))
                           (rule "narrowSelectType" (formula "46") (term "1") (ifseqformula "4"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "close" (formula "34") (ifseqformula "1"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "45"))
                           (rule "notRight" (formula "45"))
                           (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "49"))
                            (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")))
                           (rule "false_right" (formula "33"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "40") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "41"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "cut_direct" (formula "8") (term "0"))
                           (branch "CUT: o_0 = self TRUE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "7"))
                              (rule "applyEq" (formula "6") (term "0,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "6") (term "1"))
                              (rule "sortsDisjointModuloNull" (formula "6") (term "1"))
                              (rule "replace_known_right" (formula "6") (term "1,1") (ifseqformula "40"))
                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "38")))
                              (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "6"))
                              (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "6"))
                              (rule "close" (formula "38") (ifseqformula "4"))
                           )
                           (branch "CUT: o_0 = self FALSE"
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_right" (formula "7") (term "1") (ifseqformula "35"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "51") (term "1,1") (ifseqformula "6"))
                              (rule "applyEq" (formula "34") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "false_right" (formula "34"))
                              (rule "applyEq" (formula "50") (term "2,1") (ifseqformula "5"))
                              (rule "narrowSelectType" (formula "50") (term "1") (ifseqformula "7"))
                              (rule "applyEq" (formula "50") (term "2,0") (ifseqformula "5"))
                              (rule "narrowSelectType" (formula "50") (term "0") (ifseqformula "27"))
                              (rule "applyEq" (formula "49") (term "0") (ifseqformula "6"))
                              (rule "applyEq" (formula "33") (term "0") (ifseqformula "6"))
                              (rule "sortsDisjointModuloNull" (formula "33"))
                              (rule "replace_known_right" (formula "33") (term "1") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "37")))
                              (rule "false_right" (formula "33"))
                              (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "6"))
                              (rule "close" (formula "34") (ifseqformula "4"))
                           )
                        )
                     )
                     (branch " !f_0 = java.lang.Object::<created> & ( f_0 = java.util.Collection::$seq | f_0 = java.util.Iterator::$index) & (f_0 = java.util.Iterator::$index | o_0 = self) & (f_0 = java.util.Collection::$seq | o_0 = result_0) & (o_0 = self | o_0 = result_0) | !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                        (rule "close" (formula "45") (ifseqformula "1"))
                     )
                  )
               )
               (branch "CUT: de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool::$polyasMode) = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::select(heap, null, de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode::$MIN) FALSE"
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "applyEq" (formula "41") (term "0") (ifseqformula "8"))
                  (rule "applyEq" (formula "28") (term "0") (ifseqformula "8"))
                  (rule "eqSymm" (formula "28"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
                  (rule "andLeft" (formula "20"))
                  (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
                  (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "true_left" (formula "20"))
                  (rule "commute_and" (formula "2") (term "1,0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "shift_paren_and" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0"))
                  (rule "commute_and_2" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_and" (formula "2") (term "0,0,0,0,0,0"))
                  (rule "ifthenelse_split" (formula "1") (term "0"))
                  (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "28"))
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "replace_known_right" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")) (ifInst ""  (formula "28")))
                     (rule "replace_known_right" (formula "46") (term "0,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "27")))
                     (rule "closeTrue" (formula "46"))
                  )
                  (branch " !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                     (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch " !f_0 = java.lang.Object::<created> & ( f_0 = java.util.Collection::$seq | f_0 = java.util.Iterator::$index) & (f_0 = java.util.Iterator::$index | o_0 = self) & (f_0 = java.util.Collection::$seq | o_0 = result_0) & (o_0 = self | o_0 = result_0) | !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) TRUE"
                        (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "eqSymm" (formula "45"))
                        (rule "commute_and_2" (formula "1") (term "0,0"))
                        (rule "lenNonNegative" (formula "25") (term "1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "25"))
                        (rule "cut_direct" (formula "45") (term "0,0"))
                        (branch "CUT: o_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "false_right" (formula "46"))
                           (rule "replace_known_left" (formula "29") (term "0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "false_right" (formula "29"))
                           (rule "replace_known_left" (formula "2") (term "0,0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "applyEq" (formula "49") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "49") (term "1,1") (ifseqformula "1"))
                           (rule "applyEq" (formula "5") (term "0,0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "5") (term "0"))
                           (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "39"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "replace_known_left" (formula "3") (term "1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                           (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "1"))
                           (rule "eqSymm" (formula "3") (term "1"))
                           (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "38"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
                           (rule "close" (formula "35") (ifseqformula "1"))
                        )
                        (branch "CUT: o_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "46"))
                           (rule "notRight" (formula "46"))
                           (rule "replace_known_left" (formula "29") (term "0,0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "46")))
                           (rule "false_right" (formula "29"))
                           (rule "replace_known_right" (formula "2") (term "0,0,1") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "6"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "7"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "8"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "cut_direct" (formula "8") (term "0"))
                           (branch "CUT: o_0 = self TRUE"
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "7"))
                              (rule "true_left" (formula "7"))
                              (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "7"))
                              (rule "applyEq" (formula "51") (term "0") (ifseqformula "7"))
                              (rule "applyEq" (formula "6") (term "0,1") (ifseqformula "7"))
                              (rule "eqSymm" (formula "6") (term "1"))
                              (rule "sortsDisjointModuloNull" (formula "6") (term "1"))
                              (rule "replace_known_right" (formula "6") (term "0,1") (ifseqformula "39"))
                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "41")))
                              (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "50") (term "1,1") (ifseqformula "6"))
                              (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "6"))
                              (rule "close" (formula "39") (ifseqformula "4"))
                           )
                           (branch "CUT: o_0 = self FALSE"
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "true_left" (formula "6"))
                              (rule "replace_known_right" (formula "6") (term "1") (ifseqformula "34"))
                               (builtin "One Step Simplification" (formula "6"))
                              (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "applyEq" (formula "52") (term "2,1") (ifseqformula "5"))
                              (rule "narrowSelectType" (formula "52") (term "1") (ifseqformula "7"))
                              (rule "applyEqRigid" (formula "34") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "false_right" (formula "34"))
                              (rule "applyEq" (formula "51") (term "2,0") (ifseqformula "5"))
                              (rule "narrowSelectType" (formula "51") (term "0") (ifseqformula "27"))
                              (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "6"))
                              (rule "close" (formula "36") (ifseqformula "4"))
                           )
                        )
                     )
                     (branch " !f_0 = java.lang.Object::<created> & ( f_0 = java.util.Collection::$seq | f_0 = java.util.Iterator::$index) & (f_0 = java.util.Iterator::$index | o_0 = self) & (f_0 = java.util.Collection::$seq | o_0 = result_0) & (o_0 = self | o_0 = result_0) | !o_0 = null & !( boolean::select(heap, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_ArrayList<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE | boolean::select(anon_heap_iterator<<anonHeapFunction>>, o_0, java.lang.Object::<created>) = TRUE) FALSE"
                        (rule "close" (formula "46") (ifseqformula "1"))
                     )
                  )
               )
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "25"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,1,0") (ifseqformula "15"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "0,0,1,0") (ifseqformula "8"))
            (rule "replaceKnownSelect_taclet200_14" (formula "25") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "25") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet200_11" (formula "25") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "25") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "25"))
            (rule "andLeft" (formula "27"))
            (rule "notLeft" (formula "25"))
            (rule "close" (formula "28") (ifseqformula "27"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "39"))
            (rule "wellFormedAnon" (formula "39") (term "1"))
            (rule "wellFormedAnonEQ" (formula "39") (term "0,1") (ifseqformula "15"))
            (rule "wellFormedAnonEQ" (formula "39") (term "0,0,1") (ifseqformula "8"))
            (rule "replace_known_left" (formula "39") (term "1,1") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")) (ifInst ""  (formula "14")))
            (rule "inEqSimp_ltToLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
            (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "18"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "24") (term "0"))
            (rule "nnf_imp2or" (formula "5") (term "0"))
            (rule "nnf_notAnd" (formula "24") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "24") (term "1,0,0"))
            (rule "times_zero_1" (formula "24") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "24") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,0,0"))
            (rule "mul_literals" (formula "24") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "24") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "24") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "24") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "24") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "24") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "24") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "24") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "24") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "24") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "5") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
            (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "5") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
            (rule "mul_literals" (formula "5") (term "1,1,0,0"))
            (rule "Class_invariant_axiom_for_java_util_CollectionIterator" (formula "39"))
            (rule "replaceKnownSelect_taclet200_14" (formula "39") (term "0,1"))
            (rule "replaceKnownSelect_taclet200_14" (formula "39") (term "1,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "39") (term "0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_15" (formula "39") (term "1,0"))
            (rule "replaceKnownSelect_taclet200_11" (formula "39") (term "0,1,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet200_13" (formula "39") (term "0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "39") (term "0"))
            (rule "replace_known_left" (formula "39") (term "0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "inEqSimp_leqRight" (formula "39"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "applyEq" (formula "1") (term "0,0,1,0") (ifseqformula "19"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "24"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_literals" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "27")))
            (rule "closeTrue" (formula "39"))
         )
      )
   )
   (branch "Exceptional Post (iterator)"
       (builtin "One Step Simplification" (formula "15"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,0,0,0,1,1,0,1,1") (ifseqformula "8"))
      (rule "andLeft" (formula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "1,0") (ifseqformula "15"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "18"))
      (rule "notLeft" (formula "16"))
      (rule "close" (formula "19") (ifseqformula "18"))
   )
   (branch "Pre (iterator)"
       (builtin "One Step Simplification" (formula "25"))
      (rule "wellFormedAnonEQ" (formula "25") (term "1") (ifseqformula "8"))
      (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "7")))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0"))
      (rule "nnf_imp2or" (formula "5") (term "0"))
      (rule "nnf_notAnd" (formula "5") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "5") (term "0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "5") (term "1,0,0"))
      (rule "times_zero_1" (formula "5") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,1,0,0"))
      (rule "Class_invariant_axiom_for_java_util_LinkedList" (formula "25"))
      (rule "closeTrue" (formula "25"))
   )
   (branch "Null reference (_cols = null)"
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")))
      (rule "closeTrue" (formula "25"))
   )
)
(branch "Exceptional Post (ArrayList)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0,0") (ifseqformula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (ArrayList)"
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "16"))
)
)
}
