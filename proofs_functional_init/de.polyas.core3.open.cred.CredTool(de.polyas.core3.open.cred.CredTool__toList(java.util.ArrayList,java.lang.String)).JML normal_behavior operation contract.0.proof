\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Feb 10 00:48:00 CET 2020
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../../../home/flo/git/polyas-core3-open-cred/boot";

\javaSource "../../../../../../home/flo/git/polyas-core3-open-cred/src";

\proofObligation "#Proof Obligation Settings
#Mon Feb 10 00:48:00 CET 2020
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.util.ArrayList,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:toList(java.util.ArrayList,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "1424")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "ls,s,result_636,exc_847,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "eqSymm" (formula "11") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "2"))
(rule "castedGetAny" (formula "11") (term "0,0,1,0,0,1,0,0,0,1"))
(rule "castedGetAny" (formula "6") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,0"))
(rule "assignment" (formula "11") (term "1"))
 (builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "6") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0,0"))
(rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "6") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0"))
(rule "mul_literals" (formula "6") (term "1,0,0,0"))
(rule "nnf_imp2or" (formula "11") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "11") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "5"))
(rule "true_left" (formula "5"))
(rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "insert_constant_string_value" (formula "6") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "6"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "6") (term "0,0,0,1,0,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "commute_or_2" (formula "5") (term "0"))
(rule "commute_or" (formula "6"))
(rule "commute_or" (formula "5") (term "0,0"))
(rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_toList,savedHeapBefore_toList"))
 (builtin "One Step Simplification" (formula "17"))
(rule "variableDeclarationAssign" (formula "17") (term "1"))
(rule "variableDeclaration" (formula "17") (term "1") (newnames "list"))
 (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_toList_0,result_637,exc_848,heapAfter_toList,anon_heap_toList") (contract "de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool::toList(java.util.ArrayList)].JML normal_behavior operation contract.0"))
(branch "Post (toList)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "16"))
   (rule "notLeft" (formula "13"))
   (rule "notLeft" (formula "12"))
   (rule "replace_known_right" (formula "9") (term "0,1") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "17")))
   (rule "castedGetAny" (formula "11") (term "0,0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "assignment" (formula "28") (term "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0"))
   (rule "pullOutSelect" (formula "11") (term "0,0,0,1,0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "applyEq" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
   (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "18")) (ifInst ""  (formula "17")))
   (rule "applyEqReverse" (formula "12") (term "0,0,0,1,0") (ifseqformula "11"))
   (rule "applyEqReverse" (formula "12") (term "0,1,1,1,0,0") (ifseqformula "11"))
   (rule "hideAuxiliaryEq" (formula "11"))
   (rule "nnf_imp2or" (formula "11") (term "0"))
   (rule "nnf_notAnd" (formula "11") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
   (rule "mul_literals" (formula "11") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "12"))
   (rule "insert_constant_string_value" (formula "12") (term "0,0,1,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "insert_constant_string_value" (formula "12") (term "0,0,1,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "insert_constant_string_value" (formula "12") (term "0,0,1,0,0,0,0") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "castDel" (formula "12") (term "0,0,0,1,0,0"))
   (rule "castDel" (formula "12") (term "0,0,0,1,0,0,0"))
   (rule "castDel" (formula "12") (term "0,0,0,1,0,0,0,0"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "14"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "14"))
   (rule "notLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "13"))
   (rule "andLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "notLeft" (formula "12"))
   (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_0"))
   (rule "applyEq" (formula "18") (term "0") (ifseqformula "12"))
   (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "12"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,1") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "eqSymm" (formula "12") (term "0"))
   (rule "eqSymm" (formula "12") (term "1"))
   (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "12") (term "0,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_0"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,0") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "eqSymm" (formula "12") (term "0"))
   (rule "pullOutSelect" (formula "12") (term "0,1") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MAX_0"))
   (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "applyEqReverse" (formula "13") (term "0,1") (ifseqformula "12"))
   (rule "hideAuxiliaryEq" (formula "12"))
   (rule "eqSymm" (formula "12") (term "1"))
   (rule "commute_or_2" (formula "10") (term "0"))
   (rule "commute_or" (formula "12"))
   (rule "commute_or" (formula "10") (term "0,0"))
    (builtin "Use Operation Contract" (formula "25") (newnames "heapBefore_add,result_638,exc_849,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
   (branch "Post (add)"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replaceKnownSelect_taclet0_0" (formula "14") (term "0,1,0,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "14") (term "0,1,0,0,1,1"))
      (rule "andLeft" (formula "14"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "simplifySelectOfAnonEQ" (formula "16") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "20")))
      (rule "replaceKnownSelect_taclet0_0" (formula "16") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "16") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "16") (term "0,1,0,0") (ifseqformula "8"))
      (rule "eqSymm" (formula "17"))
      (rule "applyEqReverse" (formula "16") (term "1") (ifseqformula "17"))
      (rule "hideAuxiliaryEq" (formula "17"))
      (rule "replace_known_right" (formula "16") (term "0,0,1,0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "9")))
      (rule "elementOfSingleton" (formula "16") (term "0,0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "eqSymm" (formula "16"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "17"))
      (rule "true_left" (formula "17"))
      (rule "methodCallReturn" (formula "29") (term "1"))
      (rule "assignment" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "methodCallEmpty" (formula "29") (term "1"))
      (rule "tryEmpty" (formula "29") (term "1"))
      (rule "emptyModality" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "18")))
      (rule "replaceKnownSelect_taclet00_16" (formula "29") (term "0,0,0,1,0,0,1,0"))
      (rule "replaceKnownSelect_taclet00_16" (formula "29") (term "0,1,1,0,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "29") (term "0,0,0,1,0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_17" (formula "29") (term "0,1,1,0,0,0,1,0"))
      (rule "eqSymm" (formula "29") (term "1,0,0,1"))
      (rule "lenOfSeqConcat" (formula "29") (term "1,1,0,0,0,1,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "polySimp_addComm0" (formula "29") (term "1,1,0,0,0,1,0"))
      (rule "applyEq" (formula "29") (term "0,0,0,1,0,0,1,0") (ifseqformula "16"))
      (rule "getOfSeqConcatEQ" (formula "29") (term "0,0,1,0,0,1,0") (ifseqformula "16"))
      (rule "polySimp_elimSub" (formula "29") (term "1,2,0,0,1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "29") (term "1,2,0,0,1,0,0,1,0"))
      (rule "getOfSeqSingleton" (formula "29") (term "2,0,0,1,0,0,1,0"))
      (rule "castDel" (formula "29") (term "1,2,0,0,1,0,0,1,0"))
      (rule "ifEqualsNull" (formula "29") (term "0,1,0,0,1,0"))
      (rule "ifEqualsNull" (formula "29") (term "1,1,0,1,0,0,1,0"))
      (rule "replace_known_right" (formula "29") (term "1,0,1,1,0,1,0,0,1,0") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "29") (term "0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "29") (term "0,0,1,1,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,1,1,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,0,0,1,1,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,1,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,1,0,0,1,0,1,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "29") (term "0,1,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,1,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,0,0,1,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,1,0,1,0,0,1,0"))
      (rule "add_literals" (formula "29") (term "0,0,0,0,1,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "29") (term "0,0,0,1,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,1,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,0,1,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,0,1,0,1,0,0,1,0"))
      (rule "nnf_notOr" (formula "29") (term "1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "29") (term "1,1,0,0,1,0"))
      (rule "inEqSimp_notGeq" (formula "29") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,0,0,1,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "29") (term "0,1,1,0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "29") (term "1,0,1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,1,1,0,0,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,1,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,1,0,1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,1,0,1,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "29") (term "0,1,0,0,1,0"))
      (rule "inEqSimp_notLeq" (formula "29") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "29") (term "1,0,0,0,0,1,0,0,1,0"))
      (rule "mul_literals" (formula "29") (term "0,1,0,0,0,0,1,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
      (rule "add_literals" (formula "29") (term "0,0,0,0,0,1,0,0,1,0"))
      (rule "add_zero_left" (formula "29") (term "0,0,0,0,1,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "29") (term "0,0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "29") (term "1,0,0,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "29") (term "1,0,0,1,0,0,1,0"))
      (rule "nnf_notAnd" (formula "29") (term "1,1,1,0,0,1,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "29") (term "1,1,1,0"))
      (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,1,1,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,0,1,1,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "insert_constant_string_value" (formula "29") (term "0,0,1,0,0,0,0,1,1,1,0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "castDel" (formula "29") (term "0,0,0,1,0,0,0,1,1,1,0"))
      (rule "castDel" (formula "29") (term "0,0,0,1,0,0,0,0,1,1,1,0"))
      (rule "castDel" (formula "29") (term "0,0,0,1,0,0,1,1,1,0"))
      (rule "replace_known_right" (formula "29") (term "0,1,0,0,0,1,1,1,0") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "22")) (ifInst ""  (formula "24")))
      (rule "pullOutSelect" (formula "29") (term "0,0,0,0,0,0,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_distVals_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_8" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "1") (term "2,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "29") (term "0,0,0,0,0,1,1,1,0") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "pullOutSelect" (formula "29") (term "0,0,1,0,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasMode_1"))
      (rule "applyEq" (formula "30") (term "0,1,1,1,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "30") (term "0,0,1,1,1,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "2,0"))
      (rule "eqSymm" (formula "30") (term "1,1,1,1,1,0"))
      (rule "eqSymm" (formula "30") (term "0,1,1,1,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "30") (term "1,0,1,1,1,1,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "30") (term "1,1,1,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "29") (term "0,1,0,1,1,1,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "pullOutSelect" (formula "29") (term "0,0,1,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MIN_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_12" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_13" (formula "1") (term "2,0"))
      (rule "eqSymm" (formula "30") (term "0,1,1,1,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "1,0,1,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "29") (term "0,1,1,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_FieldsForPolyasMode_MAX_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_14" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_15" (formula "1") (term "2,0"))
      (rule "eqSymm" (formula "30") (term "1,1,1,1,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "1,1,1,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "29") (term "0,0,1,0,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_print_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_6" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "1") (term "2,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,1,0,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "29") (term "0,1,0,1,1,1,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "pullOutSelect" (formula "29") (term "0,0,0,1,1,1,0") (inst "selectSK=de_polyas_core3_open_cred_CredTool_polyasVals_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_10" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_11" (formula "1") (term "2,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,0,1,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "29") (term "0,0,1,1,1,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "29") (term "0,1,1,0"))
      (rule "pullOutSelect" (formula "29") (term "0,0,0,1,1,0") (inst "selectSK=org_apache_commons_csv_CSVFormat_RFC4180_1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "30") (term "0,0,0,1,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "29") (term "0,0,1,1,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "29") (term "0,0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "lenNonNegative" (formula "5") (term "1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "5"))
      (rule "cut_direct" (formula "7") (term "1"))
      (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN TRUE"
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "replace_known_left" (formula "30") (term "0,1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "applyEq" (formula "26") (term "0") (ifseqformula "7"))
         (rule "andRight" (formula "30"))
         (branch
            (rule "allRight" (formula "30") (inst "sk=i_0"))
            (rule "orRight" (formula "30"))
            (rule "orRight" (formula "30"))
            (rule "eqSymm" (formula "32") (term "0,1,1"))
            (rule "inEqSimp_leqRight" (formula "30"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "31"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "32") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "32") (term "0,1"))
            (rule "polySimp_addComm1" (formula "32") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "32") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "32") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,1"))
            (rule "mul_literals" (formula "32") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "32") (term "1,1,0,1"))
            (rule "commute_or" (formula "32") (term "0"))
            (rule "commute_or" (formula "32") (term "1,1"))
            (rule "commute_or" (formula "32") (term "1"))
            (rule "inEqSimp_or_weaken3" (formula "32") (term "1"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "1")))
            (rule "orRight" (formula "32"))
            (rule "notRight" (formula "32"))
            (rule "inEqSimp_leqRight" (formula "33"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "allLeft" (formula "14") (inst "t=i_0"))
            (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
            (rule "andLeft" (formula "14"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,1,0"))
            (rule "times_zero_1" (formula "14") (term "1,0"))
            (rule "add_literals" (formula "14") (term "0"))
            (rule "leq_literals" (formula "14"))
            (rule "closeFalse" (formula "14"))
         )
         (branch
            (rule "allRight" (formula "30") (inst "sk=f_0"))
            (rule "allRight" (formula "30") (inst "sk=o_0"))
            (rule "orRight" (formula "30"))
            (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "32"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "applyEq_and_gen3" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "lenNonNegative" (formula "12") (term "1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
            (rule "andLeft" (formula "19"))
            (rule "lenOfSeqConcat" (formula "20") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
            (rule "lenOfSeqConcat" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "polySimp_homoEq" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0"))
            (rule "lenOfSeqConcatEQ" (formula "19") (term "1,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,0"))
            (rule "times_zero_1" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch " f_0 = java.util.Collection::$seq ∧ o_0 = result_637 ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE) TRUE"
               (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "eqSymm" (formula "33"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0") (ifseqformula "5"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "orLeft" (formula "5"))
               (branch "f_0 = java.util.Collection::$seq ∧ o_0 = result_637"
                  (rule "andLeft" (formula "5"))
                  (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "6"))
                  (rule "applyEq" (formula "37") (term "1,0,0,1") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "37") (term "0,1") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "notRight" (formula "37"))
                  (rule "applyEq" (formula "38") (term "1,1") (ifseqformula "7"))
                  (rule "applyEqRigid" (formula "38") (term "2,1") (ifseqformula "6"))
                  (rule "narrowSelectType" (formula "38") (term "1") (ifseqformula "8"))
                  (rule "applyEq" (formula "38") (term "2,0") (ifseqformula "6"))
                  (rule "narrowSelectType" (formula "38") (term "0") (ifseqformula "22"))
                  (rule "applyEqRigid" (formula "7") (term "0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "7"))
                  (rule "close" (formula "27") (ifseqformula "7"))
               )
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE)"
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "6"))
                  (rule "notLeft" (formula "5"))
                  (rule "orRight" (formula "24"))
                  (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "24")))
                  (rule "closeTrue" (formula "38"))
               )
            )
            (branch " f_0 = java.util.Collection::$seq ∧ o_0 = result_637 ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE) FALSE"
               (rule "close" (formula "34") (ifseqformula "1"))
            )
         )
      )
      (branch "CUT: de.polyas.core3.open.cred.CredTool.polyasMode = de.polyas.core3.open.cred.CredTool.FieldsForPolyasMode.MIN FALSE"
          (builtin "One Step Simplification" (formula "7"))
         (rule "replace_known_left" (formula "31") (term "1,1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "18")))
         (rule "applyEq" (formula "18") (term "0") (ifseqformula "7"))
         (rule "eqSymm" (formula "18"))
         (rule "applyEq" (formula "27") (term "0") (ifseqformula "7"))
         (rule "andRight" (formula "31"))
         (branch
            (rule "allRight" (formula "31") (inst "sk=i_0"))
            (rule "orRight" (formula "31"))
            (rule "orRight" (formula "31"))
            (rule "eqSymm" (formula "33") (term "0,1,1"))
            (rule "inEqSimp_leqRight" (formula "31"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "add_zero_left" (formula "1") (term "0"))
            (rule "inEqSimp_geqRight" (formula "32"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_commuteGeq" (formula "33") (term "0,0"))
            (rule "inEqSimp_homoInEq0" (formula "33") (term "0,1"))
            (rule "polySimp_addComm1" (formula "33") (term "0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "33") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "33") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "33") (term "1,0,1"))
            (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,1"))
            (rule "mul_literals" (formula "33") (term "0,1,0,1"))
            (rule "polySimp_elimOne" (formula "33") (term "1,1,0,1"))
            (rule "commute_or" (formula "33") (term "0"))
            (rule "commute_or" (formula "33") (term "1,1"))
            (rule "commute_or" (formula "33") (term "1"))
            (rule "inEqSimp_or_weaken3" (formula "33") (term "1"))
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "1")))
            (rule "orRight" (formula "33"))
            (rule "notRight" (formula "33"))
            (rule "inEqSimp_leqRight" (formula "34"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "qeq_literals" (formula "3") (term "0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "allLeft" (formula "14") (inst "t=i_0"))
            (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_commuteGeq" (formula "14") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "14") (term "0,0"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
            (rule "andLeft" (formula "14"))
            (rule "inEqSimp_homoInEq1" (formula "14"))
            (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
            (rule "add_literals" (formula "14") (term "1,1,0"))
            (rule "times_zero_1" (formula "14") (term "1,0"))
            (rule "add_literals" (formula "14") (term "0"))
            (rule "leq_literals" (formula "14"))
            (rule "closeFalse" (formula "14"))
         )
         (branch
            (rule "allRight" (formula "31") (inst "sk=f_0"))
            (rule "allRight" (formula "31") (inst "sk=o_0"))
            (rule "orRight" (formula "31"))
            (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "10"))
            (rule "eqSymm" (formula "33"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "applyEq_and_gen3" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "lenNonNegative" (formula "12") (term "1,1,0"))
            (rule "inEqSimp_commuteLeq" (formula "12"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "19") (inst "iv=iv"))
            (rule "andLeft" (formula "19"))
            (rule "lenOfSeqConcat" (formula "20") (term "1,1,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "polySimp_addComm0" (formula "20") (term "1,1,0,0"))
            (rule "lenOfSeqConcat" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "polySimp_homoEq" (formula "19"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
            (rule "polySimp_addComm0" (formula "19") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0"))
            (rule "polySimp_addComm0" (formula "19") (term "0,0"))
            (rule "lenOfSeqConcatEQ" (formula "19") (term "1,0,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "polySimp_addComm0" (formula "19") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0"))
            (rule "polySimp_pullOutFactor1" (formula "19") (term "0"))
            (rule "add_literals" (formula "19") (term "1,0"))
            (rule "times_zero_1" (formula "19") (term "0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "19") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "19") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "19") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "19") (term "0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "ifthenelse_split" (formula "1") (term "0"))
            (branch " f_0 = java.util.Collection::$seq ∧ o_0 = result_637 ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE) TRUE"
               (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "eqSymm" (formula "34"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "5"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "orLeft" (formula "5"))
               (branch "f_0 = java.util.Collection::$seq ∧ o_0 = result_637"
                  (rule "andLeft" (formula "5"))
                  (rule "applyEqRigid" (formula "39") (term "2,0") (ifseqformula "5"))
                  (rule "narrowSelectType" (formula "39") (term "0") (ifseqformula "21"))
                  (rule "eqSymm" (formula "39"))
                  (rule "applyEq" (formula "38") (term "0,0,0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "38") (term "0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "notRight" (formula "38"))
                  (rule "applyEq" (formula "39") (term "2,0") (ifseqformula "6"))
                  (rule "narrowSelectType" (formula "39") (term "0") (ifseqformula "8"))
                  (rule "eqSymm" (formula "39"))
                  (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "7"))
                  (rule "close" (formula "27") (ifseqformula "1"))
               )
               (branch " ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE)"
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "6"))
                  (rule "notLeft" (formula "5"))
                  (rule "orRight" (formula "24"))
                  (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "24")))
                  (rule "closeTrue" (formula "39"))
               )
            )
            (branch " f_0 = java.util.Collection::$seq ∧ o_0 = result_637 ∨ ¬o_0 = null ∧ ¬( o_0.<created> = TRUE ∨ o_0.<created>@anon_heap_toList«anonHeapFunction» = TRUE) FALSE"
               (rule "close" (formula "35") (ifseqformula "1"))
            )
         )
      )
   )
   (branch "Exceptional Post (add)"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replaceKnownSelect_taclet0_0" (formula "14") (term "0,1,0,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "14") (term "0,1,0,0,1,1"))
      (rule "andLeft" (formula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "1,0") (ifseqformula "14"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "15") (term "0,1,0") (ifseqformula "8"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "17"))
      (rule "notLeft" (formula "15"))
      (rule "close" (formula "18") (ifseqformula "17"))
   )
   (branch "Pre (add)"
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "25") (term "1,1") (ifseqformula "8"))
      (rule "wellFormedAnonEQ" (formula "25") (term "0,1") (ifseqformula "8"))
      (rule "replace_known_left" (formula "25") (term "0,1,1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")) (ifInst ""  (formula "7")))
      (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "25"))
      (rule "closeTrue" (formula "25"))
   )
   (branch "Null reference (list = null)"
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "14")))
      (rule "closeTrue" (formula "25"))
   )
)
(branch "Exceptional Post (toList)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "8"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "9") (term "1,0") (ifseqformula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "9"))
   (rule "close" (formula "12") (ifseqformula "11"))
)
(branch "Pre (toList)"
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "15")) (ifInst ""  (formula "1")) (ifInst ""  (formula "15")) (ifInst ""  (formula "2")))
   (rule "castedGetAny" (formula "17") (term "0,0,1,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "17") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "17") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "17") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "17") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "17") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "17") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "17") (term "1,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "17") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "17") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "17") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "17") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "17") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "17") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,0,1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_CredTool" (formula "17") (term "1,1,1"))
   (rule "insert_constant_string_value" (formula "17") (term "0,0,1,0,0,1,1,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "13")))
   (rule "insert_constant_string_value" (formula "17") (term "0,0,1,0,0,1,1,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "insert_constant_string_value" (formula "17") (term "0,0,0,0,0,1,1,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "castDel" (formula "17") (term "0,0,0,0,0,0,1,1,1"))
   (rule "castDel" (formula "17") (term "0,0,0,1,0,0,1,1,1"))
   (rule "castDel" (formula "17") (term "0,0,0,1,0,1,1,1"))
   (rule "replace_known_right" (formula "17") (term "0,0,0,0,1,1,1") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "17") (term "0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "Static_class_invariant_axiom_for_org_apache_commons_csv_CSVFormat" (formula "17") (term "0,1"))
   (rule "replace_known_right" (formula "17") (term "0,0,1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "commute_or" (formula "17") (term "1"))
   (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "allRight" (formula "17") (inst "sk=i_0"))
   (rule "orRight" (formula "17"))
   (rule "notRight" (formula "18"))
   (rule "orRight" (formula "18"))
   (rule "inEqSimp_leqRight" (formula "18"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "inEqSimp_geqRight" (formula "19"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0"))
   (rule "polySimp_elimOne" (formula "1") (term "0"))
   (rule "allLeft" (formula "8") (inst "t=i_0"))
   (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
   (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "8") (term "0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "8"))
   (rule "andLeft" (formula "1"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
