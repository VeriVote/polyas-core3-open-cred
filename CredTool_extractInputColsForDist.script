macro symbex;

select branch="ClassCastException (!(o instanceof String))";
rule applyEqReverse
    formula="java.lang.String::instance(result_4) = TRUE"
    on="result_4";
rule seqCastInstance
    formula="java.lang.String::instance(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = TRUE";
tryclose;

select branch="Invariant Initially Valid";
rule "One Step Simplification";
macro autopilot;
rule castAdd
    formula="java.lang.Object::<inv>(heapAfter_listIterator, result_0)"
    on="result_0";
auto;

select branch="if x_1 false";
macro autopilot;
rule castAdd
    formula="java.lang.Object::<inv>(heapAfter_equals, result_0)"
    on="result_0";
auto;

select branch="Pre (add)";
rule "One Step Simplification";
macro autopilot;

select formula="!(java.lang.String)result_4 = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

select formula="!(java.lang.String)result_4 = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

assert goals=1;

macro autopilot;

select formula="!(java.lang.String)result_4 = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

select formula="!(java.lang.String)result_4 = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

select formula="!(java.lang.String)result_4 = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

select formula="java.lang.Object::<inv>(heapAfter_add, result_0)";
rule castAdd
    formula="java.lang.Object::<inv>(heapAfter_add, result_0)"
    on="result_0";
rule Class_invariant_axiom_for_java_util_ListIteratorImpl
    formula="java.lang.Object::<inv>(heapAfter_add, (java.util.ListIteratorImpl)result_0)";
auto steps=100000;

select number=1;
auto steps=100000;

select formula="\forall int i; (     geq(i, Z(0(#))) & lt(i, seqLen(Seq::select(heapAfter_add, self, java.util.Collection::$seq))) -> !  java.lang.String::seqGet(Seq::select(heapAfter_add, self, java.util.Collection::$seq), i) = null)";
rule allRight;
rule impRight;
cut "seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0";
select branch="CUT: seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)) = i_0 TRUE";
rule ifthenelse_split;
select branch="lt(Z(0(#)), add(mul(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), Z(neglit(1(#)))), seqLen(Seq::select(anon_heap_add<<anonHeapFunction>>, self, java.util.Collection::$seq)))) TRUE";
rule applyEqReverse
    formula="!java.lang.String::seqGet(Seq::select(heapAfter_add, self, java.util.Collection::$seq), i_0) = null"
    on="i_0";
rule replaceKnownSelect_taclet00000000100_22
    formula="!  java.lang.String::seqGet(Seq::select(heapAfter_add, self, java.util.Collection::$seq), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = null"
    on="Seq::select(heapAfter_add, self, java.util.Collection::$seq)";
rule replaceKnownAuxiliaryConstant_taclet00000000100_23
    formula="!java.lang.String::seqGet(java_util_Collection_seq_5<<selectSK>>, seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = null"
    on="java_util_Collection_seq_5<<selectSK>>";
    
rule getOfSeqConcat
    formula="!  java.lang.String::seqGet(seqConcat(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq), seqSingleton((java.lang.String)result_4)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = null"; 
rule ifthenelse_split
    formula="!  \if (lt(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)))) \then (java.lang.String::seqGet(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)))) \else (java.lang.String::seqGet(seqSingleton((java.lang.String)result_4), sub(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))))) = null";
select branch="lt(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) TRUE";
auto;
select branch="lt(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) FALSE";
rule getOfSeqSingleton
    formula="!  java.lang.String::seqGet(seqSingleton((java.lang.String)result_4), sub(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)))) = null";
rule ifthenelse_split
    formula="!  \if (  sub(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = Z(0(#))) \then ((java.lang.String)((java.lang.String)result_4)) \else ((java.lang.String)(seqGetOutside)) = null";
select branch=" sub(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = Z(0(#)) FALSE";
auto;
select branch=" sub(seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq)), seqLen(Seq::select(anon_heap_LOOP<<anonHeapFunction>>, self, java.util.Collection::$seq))) = Z(0(#)) TRUE";
rule castDel formula="!(java.lang.String)((java.lang.String)result_4) = null";
rule applyEqReverse
    formula="!(java.lang.String)result_4 = null"
    on="result_4";
rule seqCastRemoveBeta
    formula="!  (java.lang.String)(java.lang.Object::seqGet(Seq::select(heap, cols, java.util.Collection::$seq), int::select(anon_heap_LOOP<<anonHeapFunction>>, result_0, java.util.ListIterator::$index))) = null";
auto;

auto;
auto;
