rule "One Step Simplification";
rule impRight;
rule andLeft;
macro symbex occ=0;

select number=-1;
macro autopilot-prep;

select number=-1;
macro use-inf-flow-contracts;
rule doubleImpLeft occ=1;
select number=-2;
rule impLeft occ=0;

select number=6;
macro autopilot-prep;
select number=7;
macro autopilot-prep;

select formula="\forall int i#36; (   (leq(Z(0(#)), i#36) & lt(i#36, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#36)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#36))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#36))), j#37)), C(2(3(#)))))<<SC>>))";
rule allRight formula="\forall int i#36; (   (leq(Z(0(#)), i#36) & lt(i#36, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#36)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#36))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i#36))), j#37)), C(2(3(#)))))<<SC>>))";
rule impRight formula="(leq(Z(0(#)), i_36_0) & lt(i_36_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)";
rule impRight formula="(java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0)) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)";
instantiate
    formula="\forall int i;  (lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)))) & geq(j, Z(0(#)))))"
    with="i_36_0";
rule doubleImpLeft formula="lt(i_36_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i_36_0, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0) = java.lang.String::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
select formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
rule exLeft formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
instantiate
    formula="\exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)"
    with="j_0;

select formula="\forall int i#36; (   (leq(Z(0(#)), i#36) & lt(i#36, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#36)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#36))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#36))), j#37)), C(2(3(#)))))<<SC>>))";
rule allRight formula="\forall int i#36; (   (leq(Z(0(#)), i#36) & lt(i#36, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#36)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#36))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i#36))), j#37)), C(2(3(#)))))<<SC>>))";
rule impRight formula="(leq(Z(0(#)), i_36_0) & lt(i_36_0, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> ->   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)";
rule impRight formula="(java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)";
instantiate
    formula="\forall int i; (   lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i, Z(0(#))) >   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i)))) & geq(j, Z(0(#)))))"
    with="i_36_0";
rule doubleImpLeft formula="lt(i_36_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) & geq(i_36_0, Z(0(#))) ->   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i_36_0) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol) -> \exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
select formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
rule exLeft formula="\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))\exists int j; (  gt(int::seqGet(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)), j), Z(2(3(#)))) & lt(j, seqLen(strContent(java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0)))) & geq(j, Z(0(#))))";
instantiate
    formula="\exists int j#37; ((  (leq(Z(0(#)), j#37) & lt(j#37, seqLen(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))))))<<SC>> & gt((int)(any::seqGet(strContent((java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$value_seq), i_36_0))), j#37)), C(2(3(#)))))<<SC>>)"
    with="j_0";

select formula="\forall int j#68; (   (  leq(Z(0(#)), j#68) & lt(j#68, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#68)))<<SC>>))";
rule allRight formula="\forall int j#68; (   (  leq(Z(0(#)), j#68) & lt(j#68, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#68)))<<SC>>))";
rule impRight formula="(  leq(Z(0(#)), j_68_0) & lt(j_68_0, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0)))<<SC>>)";
instantiate
    formula="\forall int j; (     lt(j, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i)  & geq(i, Z(0(#)))))"
    with="j_68_0";
rule impLeft="lt(j_68_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_68_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
select formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
rule exRight formula="\exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
instantiate
    formula="\exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0)))<<SC>>)"
    with="i_14;

select formula="\forall int j#68; (   (  leq(Z(0(#)), j#68) & lt(j#68, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#68)))<<SC>>))";
rule allRight formula="\forall int j#68; (   (  leq(Z(0(#)), j#68) & lt(j#68, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j#68)))<<SC>>))";
rule impRight formula="(  leq(Z(0(#)), j_68_0) & lt(j_68_0, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))))<<SC>> -> \exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0)))<<SC>>)";
instantiate
    formula="\forall int j; (     lt(j, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#)))))"
    with="j_68_0";
rule impLeft formula="lt(j_68_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_68_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
select formula="lt(j_68_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_68_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
rule exRight formula="lt(j_68_0, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) & geq(j_68_0, Z(0(#))) -> \exists int i; (  lt(i, seqLen(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq))) &   java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_A<<anonHeapFunction>>, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0) = java.lang.String::seqGet(Seq::select(heapAtPre_A<<anonHeapFunction>>, record_A, org.apache.commons.csv.CSVRecord::$key_seq), i) & geq(i, Z(0(#))))";
instantiate
    formula="\exists int i#69; ((  (leq(Z(0(#)), i#69) & lt(i#69, seqLen(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#69)) = (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), j_68_0)))<<SC>>)"
    with="i_14";
    
select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.LinkedList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_6";

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals_0, java.util.ArrayList::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals_0, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_11";
    
select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))":
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.LinkedList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_3";  
    
select formula="\exists int i#35; ((  (leq(Z(0(#)), i#35) & lt(i#35, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#35)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)";
instantiate
    formula="\exists int i#35; ((  (leq(Z(0(#)), i#35) & lt(i#35, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq))))<<SC>> &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, record_B, org.apache.commons.csv.CSVRecord::$key_seq), i#35)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))<<SC>>)"
    with="i_9";

select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.ArrayList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_11";
    
select formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i_2; (  leq(Z(0(#)), i_2) & lt(i_2, seqLen(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAtPre_B<<anonHeapFunction>>, java.util.LinkedList::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$inputCols), java.util.Collection::$seq), i_2)) = java.lang.String::select(heapAtPre_B<<anonHeapFunction>>, self_B, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_2_8";
    
select formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))";
instantiate
    formula="\exists int i; (  leq(Z(0(#)), i) & lt(i, seqLen(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq))) &   (java.lang.String)(any::seqGet(Seq::select(heapAfter_initDistVals, java.util.ArrayList::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$inputColsForPolyas), java.util.Collection::$seq), i)) = java.lang.String::select(heapAfter_initDistVals, selfAtPost_A, de.polyas.core3.open.cred.CredTool::$idCol))"
    with="i_6";

tryclose steps=1000000;
