\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Oct 31 14:39:42 CET 2019
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=true
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Oct 31 14:39:42 CET 2019
name=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols(java.util.ArrayList,java.util.ArrayList,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0
contract=de.polyas.core3.open.cred.CredTool[de.polyas.core3.open.cred.CredTool\\:\\:addInputCols(java.util.ArrayList,java.util.ArrayList,org.apache.commons.csv.CSVRecord)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))
(keyLog "1" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "792949")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "vals,cols,r,self,exc,heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "10"))
(rule "notLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "13") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "8") (term "1,0,1,0"))
(rule "replace_known_right" (formula "6") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "6"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "5") (term "0") (ifseqformula "10"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elementOfSingleton" (formula "13") (term "0,0,0,0,1,0,1"))
(rule "castedGetAny" (formula "8") (term "1,1,0,1,0"))
(rule "castedGetAny" (formula "8") (term "0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0,1,0"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "commute_and" (formula "8") (term "0,0"))
(rule "commute_and" (formula "8") (term "0,0,1,0"))
(rule "commute_and_2" (formula "8") (term "0,1,0"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_addInputCols,savedHeapBefore_addInputCols,_cols_1Before_addInputCols,_r_5Before_addInputCols,_vals_1Before_addInputCols"))
 (builtin "One Step Simplification" (formula "13"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "it"))
 (builtin "Use Operation Contract" (formula "13") (newnames "heapBefore_iterator,result_91,exc_108,heapAfter_iterator,anon_heap_iterator") (contract "java.util.ArrayList[java.util.Collection::iterator()].JML normal_behavior operation contract.0"))
(branch "Post (iterator)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "17"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "18"))
   (rule "notLeft" (formula "15"))
   (rule "replace_known_right" (formula "12") (term "0,1") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=java_util_Iterator_index_0"))
   (rule "simplifySelectOfAnonEQ" (formula "13") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
   (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "13"))
   (rule "hideAuxiliaryEq" (formula "13"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=java_util_Iterator_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
   (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "eqSymm" (formula "14"))
   (rule "pullOutSelect" (formula "14") (term "0") (inst "selectSK=java_util_Collection_seq_0"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "21")) (ifInst ""  (formula "5")))
   (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "eqSymm" (formula "14"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "16"))
   (rule "true_left" (formula "16"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "sv_heap=heap") (inst "i_1=i_1") (inst "seq_1=seq_1") (inst "obj=obj") (inst "i_0=i_0") (inst "seq_0=seq_0") (inst "str=str") (inst "i=i") (inst "seq=seq"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "commute_and" (formula "3") (term "0,0,0,0"))
   (rule "commute_and" (formula "2") (term "0,0,0,0"))
   (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "shift_paren_and" (formula "1") (term "1,0,0"))
    (builtin "Loop Invariant" (formula "25") (newnames "variant,b,heapBefore_LOOP,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (rule "andRight" (formula "25"))
      (branch
         (rule "andRight" (formula "25"))
         (branch
            (rule "andRight" (formula "25"))
            (branch
               (rule "andRight" (formula "25"))
               (branch
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "replaceKnownSelect_taclet0_0" (formula "25") (term "1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "25") (term "1"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "17"))
                  (rule "mul_literals" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "replaceKnownSelect_taclet0_0" (formula "25") (term "0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "25") (term "0"))
                  (rule "replaceKnownSelect_taclet0_4" (formula "25") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "25") (term "0,1"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
                  (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "17"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
                  (rule "mul_literals" (formula "12") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                  (rule "commute_or" (formula "12") (term "0,0"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or" (formula "3") (term "0,0"))
                  (rule "commute_and" (formula "13") (term "0,0,1,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or" (formula "3") (term "0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0"))
                  (rule "distr_forallAnd" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "commute_or" (formula "3") (term "0,0"))
                  (rule "commute_or" (formula "6") (term "1,0,0,0,0"))
                  (rule "commute_and_2" (formula "15") (term "0,1,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                  (rule "commute_and" (formula "7") (term "1,0,0,0"))
                  (rule "commute_and" (formula "6") (term "1,0,0,0"))
                  (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0"))
                  (rule "distr_forallAnd" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "commute_or_2" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0"))
                  (rule "distr_forallAnd" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "commute_or_2" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "ex_pull_out3" (formula "13") (term "0"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0"))
                  (rule "shift_paren_or" (formula "13") (term "1,0,0"))
                  (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                  (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "13") (term "1,0,0,0"))
                  (rule "commute_or" (formula "13") (term "0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                  (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or" (formula "2") (term "0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "cnf_rightDist" (formula "1") (term "0,0"))
                  (rule "distr_forallAnd" (formula "1") (term "0"))
                  (rule "distr_forallAnd" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "commute_or" (formula "1") (term "0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_iterator<<anonHeapFunction>>"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "commute_or" (formula "3") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_iterator<<anonHeapFunction>>)"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_iterator"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "21"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "21"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                  (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                  (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                  (rule "true_left" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                  (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or" (formula "1") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                  (rule "commute_and" (formula "5") (term "1,0,0,0"))
                  (rule "commute_and" (formula "4") (term "1,0,0,0"))
                  (rule "equalityToSeqGetAndSeqLenLeft" (formula "24") (inst "iv=iv"))
                  (rule "andLeft" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1,0,0"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1,0,0"))
                  (rule "inEqSimp_commuteLeq" (formula "25") (term "0,0,0"))
                  (rule "applyEq" (formula "25") (term "0,0,1,0,0,1,0,0") (ifseqformula "26"))
                  (rule "applyEq" (formula "25") (term "0,0,1,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "true_left" (formula "25"))
                  (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "true_left" (formula "24"))
                  (rule "lenNonNegative" (formula "6") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "6"))
                  (rule "inEqSimp_contradInEq0" (formula "6") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "6") (term "0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "closeFalse" (formula "6"))
               )
            )
            (branch
                (builtin "One Step Simplification" (formula "25"))
               (rule "replaceKnownSelect_taclet0_4" (formula "25") (term "1"))
               (rule "replaceKnownSelect_taclet0_2" (formula "25") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "25") (term "1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "25") (term "0"))
               (rule "close" (formula "25") (ifseqformula "17"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "25"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "11") (term "0"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "11") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
            (rule "mul_literals" (formula "11") (term "1,1,0,0"))
            (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "25"))
            (rule "closeTrue" (formula "25"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "25"))
         (rule "wellFormedAnonEQ" (formula "25") (ifseqformula "13"))
         (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "4")))
         (rule "closeTrue" (formula "25"))
      )
   )
   (branch "Body Preserves Invariant"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "impRight" (formula "27"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "eqSymm" (formula "31") (term "1,0,0,1,0,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "31") (term "0,1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "31") (term "0,1,1,1,0"))
      (rule "polySimp_addComm0" (formula "31") (term "0,1,1,1,0,1"))
      (rule "polySimp_addComm0" (formula "31") (term "0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "1,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "31") (term "0,0,0,0,0,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22"))
      (rule "inEqSimp_commuteLeq" (formula "21"))
      (rule "pullOutSelect" (formula "31") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
      (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "15"))
      (rule "simplifySelectOfAnon" (formula "24"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")))
      (rule "replaceKnownSelect_taclet0_2" (formula "24") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "24") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "24") (term "0,1,0,0") (ifseqformula "15"))
      (rule "replace_known_right" (formula "24") (term "0,0,1,0,0") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "17")))
      (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_addComm0" (formula "32") (term "0,1,1,1,0"))
      (rule "inEqSimp_commuteGeq" (formula "23"))
      (rule "pullOutSelect" (formula "32") (term "0,1,0,1,1,1,0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
      (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
      (rule "replace_known_right" (formula "1") (term "0,0,1,0,0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
      (rule "polySimp_addComm0" (formula "33") (term "0,1,1,1,0"))
      (rule "inEqSimp_commuteLeq" (formula "24"))
      (rule "variableDeclarationAssign" (formula "3") (term "1"))
      (rule "variableDeclarationAssign" (formula "33") (term "1"))
      (rule "variableDeclaration" (formula "3") (term "1") (newnames "b_1"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "33") (term "1"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "variableDeclaration" (formula "33") (term "1") (newnames "thrownExc"))
      (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "19"))
      (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "20"))
      (rule "blockThrow" (formula "33") (term "1,0,0,1"))
      (rule "elementOfUnion" (formula "25") (term "0,0"))
      (rule "elementOfSingleton" (formula "25") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "elementOfSingleton" (formula "25") (term "0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "33") (term "0,1,0,1,1,1,0,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "32") (term "0,0,0,1,1,1,0,0") (ifseqformula "1"))
      (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "elementOfUnion" (formula "31") (term "0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "31") (term "1,0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfSingleton" (formula "31") (term "0,0,0,0,0,1,0,1,1,0,1"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "boxToDiamond" (formula "2") (term "1"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "notLeft" (formula "2"))
      (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "commute_and" (formula "3") (term "0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_iterator<<anonHeapFunction>>"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_iterator<<anonHeapFunction>>)"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_iterator"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "20"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "20"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
      (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
      (rule "commute_and" (formula "2") (term "0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "shift_paren_and" (formula "7") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "shift_paren_and" (formula "7") (term "1,0,0"))
       (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_hasNext,result,exc_0") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "30"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replaceKnownSelect_taclet10_8" (formula "29") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "29") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_7" (formula "29") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "29") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "30"))
         (rule "andLeft" (formula "30"))
         (rule "assignment" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "31"))
         (rule "true_left" (formula "31"))
         (rule "methodCallEmpty" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "emptyModality" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "notRight" (formula "31"))
         (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "ifUnfold" (formula "38") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "38") (term "1") (newnames "x"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_LOOP<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "commute_and" (formula "3") (term "0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_iterator,
     union(singleton(vals, java.util.Collection::$seq),
           singleton(result_91,
                     java.util.Iterator::$index)),
     anon_heap_LOOP<<anonHeapFunction>>)"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "25"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "25"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapBefore_LOOP"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
         (rule "commute_and" (formula "2") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0,0"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "32") (inst "iv=iv"))
         (rule "andLeft" (formula "32"))
         (rule "inEqSimp_commuteLeq" (formula "33") (term "0,0,0"))
         (rule "applyEq" (formula "33") (term "0,0,1,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "true_left" (formula "33"))
         (rule "applyEq" (formula "32") (term "0,0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "true_left" (formula "32"))
         (rule "lenNonNegative" (formula "26") (term "1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "26"))
         (rule "lenNonNegative" (formula "27") (term "1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "27"))
         (rule "shift_paren_and" (formula "5") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "shift_paren_and" (formula "5") (term "1,0,0"))
          (builtin "Use Operation Contract" (formula "46") (newnames "heapBefore_hasNext_0,result_0,exc_2") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
         (branch "Post (hasNext)"
             (builtin "One Step Simplification" (formula "40"))
            (rule "replaceKnownSelect_taclet10_8" (formula "40") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "40") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_7" (formula "40") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "40") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "40"))
            (rule "andLeft" (formula "41"))
            (rule "andLeft" (formula "41"))
            (rule "replace_known_left" (formula "41") (term "1") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "assignment" (formula "49") (term "1"))
             (builtin "One Step Simplification" (formula "49"))
            (rule "applyEq" (formula "49") (term "0,1,0") (ifseqformula "41"))
            (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "42"))
            (rule "true_left" (formula "42"))
            (rule "ifSplit" (formula "48"))
            (branch "if x true"
                (builtin "One Step Simplification" (formula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "methodCallUnfoldArguments" (formula "48") (term "1"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "var"))
               (rule "assignment" (formula "48") (term "1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_1"))
               (rule "methodCallWithAssignmentUnfoldArguments" (formula "48") (term "1"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_2"))
               (rule "assignment" (formula "48") (term "1"))
                (builtin "One Step Simplification" (formula "48"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "var_3"))
               (rule "compound_reference_cast_expression" (formula "48") (term "1") (inst "#v=o"))
               (rule "variableDeclarationAssign" (formula "48") (term "1"))
               (rule "variableDeclaration" (formula "48") (term "1") (newnames "o"))
                (builtin "Use Operation Contract" (formula "48") (newnames "heapBefore_next,result_1,exc_3,heapAfter_next,anon_heap_next") (contract "java.util.Iterator[java.util.Iterator::next()].JML normal_behavior operation contract.0"))
               (branch "Post (next)"
                   (builtin "One Step Simplification" (formula "43"))
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "43"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,1,0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,1,0") (ifseqformula "29"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "45"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "45"))
                  (rule "andLeft" (formula "46"))
                  (rule "andLeft" (formula "47"))
                  (rule "andLeft" (formula "48"))
                  (rule "andLeft" (formula "49"))
                  (rule "eqSymm" (formula "45") (term "1"))
                  (rule "eqSymm" (formula "48") (term "0"))
                  (rule "eqSymm" (formula "49") (term "0"))
                  (rule "polySimp_addComm0" (formula "47") (term "1,1"))
                  (rule "castedGetAny" (formula "45") (term "0,1"))
                  (rule "assignment" (formula "58") (term "1"))
                   (builtin "One Step Simplification" (formula "58"))
                  (rule "pullOutSelect" (formula "45") (term "0,1,0") (inst "selectSK=java_util_Iterator_seq_1"))
                  (rule "applyEq" (formula "46") (term "0,0,1") (ifseqformula "45"))
                  (rule "applyEq" (formula "48") (term "0,1,0") (ifseqformula "45"))
                  (rule "applyEq" (formula "47") (term "0,1,0") (ifseqformula "45"))
                  (rule "applyEq" (formula "50") (term "0,0,0") (ifseqformula "45"))
                  (rule "applyEq" (formula "49") (term "0,0,0") (ifseqformula "45"))
                  (rule "simplifySelectOfAnonEQ" (formula "45") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "54")))
                  (rule "replaceKnownSelect_taclet10_7" (formula "45") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "45") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "45") (term "0,0,1,0,0") (ifseqformula "29"))
                  (rule "replace_known_right" (formula "45") (term "0,0,0,1,0,0") (ifseqformula "53"))
                   (builtin "One Step Simplification" (formula "45") (ifInst ""  (formula "31")))
                  (rule "elementOfSingleton" (formula "45") (term "0,0"))
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "applyEqReverse" (formula "47") (term "0,1,0") (ifseqformula "45"))
                  (rule "applyEqReverse" (formula "49") (term "0,0,0") (ifseqformula "45"))
                  (rule "applyEqReverse" (formula "46") (term "0,1,0") (ifseqformula "45"))
                  (rule "applyEqReverse" (formula "50") (term "0,0,0") (ifseqformula "45"))
                  (rule "applyEqReverse" (formula "46") (term "0,0,1") (ifseqformula "45"))
                  (rule "applyEqReverse" (formula "48") (term "0,1,0") (ifseqformula "45"))
                  (rule "hideAuxiliaryEq" (formula "45"))
                  (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "46"))
                  (rule "notLeft" (formula "46"))
                  (rule "replace_known_left" (formula "45") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "45"))
                  (rule "replace_known_left" (formula "46") (term "0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "46"))
                  (rule "replace_known_right" (formula "44") (term "0") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "replace_known_right" (formula "47") (term "1") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "notLeft" (formula "47"))
                  (rule "replace_known_right" (formula "47") (term "0") (ifseqformula "50"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "true_left" (formula "47"))
                  (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=java_util_Iterator_index_2"))
                  (rule "simplifySelectOfAnonEQ" (formula "46") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "53")))
                  (rule "replaceKnownSelect_taclet10_8" (formula "46") (term "2,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "46") (term "2,0"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "46") (term "0,0,1,0,0") (ifseqformula "29"))
                  (rule "replace_known_left" (formula "46") (term "1,0,0,1,0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "52")))
                  (rule "elementOfSingleton" (formula "46") (term "0,0"))
                   (builtin "One Step Simplification" (formula "46"))
                  (rule "applyEqReverse" (formula "47") (term "0") (ifseqformula "46"))
                  (rule "hideAuxiliaryEq" (formula "46"))
                  (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "47"))
                  (rule "true_left" (formula "47"))
                  (rule "commute_or_2" (formula "44") (term "0"))
                  (rule "reference_type_cast" (formula "56") (term "1"))
                  (branch "Normal Execution (o instanceof String)"
                      (builtin "One Step Simplification" (formula "57"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                      (builtin "Use Operation Contract" (formula "57") (newnames "heapBefore_get,result_2,exc_4") (contract "org.apache.commons.csv.CSVRecord[org.apache.commons.csv.CSVRecord::get(java.lang.String)].JML normal_behavior operation contract.0"))
                     (branch "Post (get)"
                         (builtin "One Step Simplification" (formula "49"))
                         (builtin "One Step Simplification" (formula "58"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "1,1,0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,1,1,0") (ifseqformula "30"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "51"))
                        (rule "andLeft" (formula "51"))
                        (rule "andLeft" (formula "52"))
                        (rule "notLeft" (formula "53"))
                        (rule "exLeft" (formula "51") (inst "sk=i_0"))
                        (rule "andLeft" (formula "51"))
                        (rule "andLeft" (formula "51"))
                        (rule "andLeft" (formula "53"))
                        (rule "replace_known_right" (formula "50") (term "0") (ifseqformula "56"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "castedGetAny" (formula "54") (term "0"))
                        (rule "castedGetAny" (formula "53") (term "0"))
                        (rule "inEqSimp_commuteLeq" (formula "51"))
                        (rule "assignment" (formula "65") (term "1"))
                         (builtin "One Step Simplification" (formula "65"))
                        (rule "blockEmpty" (formula "65") (term "1"))
                        (rule "pullOutSelect" (formula "52") (term "0,1") (inst "selectSK=org_apache_commons_csv_CSVRecord_key_seq_0"))
                        (rule "applyEq" (formula "54") (term "0,0") (ifseqformula "52"))
                        (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "64")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,0,1,0,0") (ifseqformula "30"))
                        (rule "eqSymm" (formula "54"))
                        (rule "replace_known_left" (formula "52") (term "0,0,0,1,0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "elementOfSingleton" (formula "52") (term "0,0"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "simplifySelectOfAnon" (formula "52"))
                         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "64")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "52") (term "0,1,0,0") (ifseqformula "30"))
                        (rule "replace_known_left" (formula "52") (term "0,0,1,0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "elementOfUnion" (formula "52") (term "0,0"))
                        (rule "elementOfSingleton" (formula "52") (term "1,0,0"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "elementOfSingleton" (formula "52") (term "0,0"))
                         (builtin "One Step Simplification" (formula "52"))
                        (rule "simplifySelectOfAnonEQ" (formula "52") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "64")) (ifInst ""  (formula "24")))
                        (rule "applyEqReverse" (formula "54") (term "0,1") (ifseqformula "52"))
                        (rule "applyEqReverse" (formula "53") (term "0,1") (ifseqformula "52"))
                        (rule "hideAuxiliaryEq" (formula "52"))
                        (rule "eqSymm" (formula "53"))
                        (rule "pullOutSelect" (formula "54") (term "0,0") (inst "selectSK=org_apache_commons_csv_CSVRecord_value_seq_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "64")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,0,1,0,0") (ifseqformula "30"))
                        (rule "replace_known_left" (formula "54") (term "0,0,0,1,0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "elementOfSingleton" (formula "54") (term "0,0"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "simplifySelectOfAnon" (formula "54"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "64")))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "54") (term "0,1,0,0") (ifseqformula "30"))
                        (rule "replace_known_left" (formula "54") (term "0,0,1,0,0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "elementOfUnion" (formula "54") (term "0,0"))
                        (rule "elementOfSingleton" (formula "54") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "elementOfSingleton" (formula "54") (term "0,0"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "simplifySelectOfAnonEQ" (formula "54") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "64")) (ifInst ""  (formula "24")))
                        (rule "applyEqReverse" (formula "55") (term "0,0") (ifseqformula "54"))
                        (rule "hideAuxiliaryEq" (formula "54"))
                        (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "55") (inst "i=i") (inst "i_0=i_0"))
                        (rule "replaceKnownSelect_taclet00000010_19" (formula "55") (term "0,1,0,0"))
                        (rule "replaceKnownSelect_taclet00000010_15" (formula "55") (term "0,0,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "55") (term "0,1,0,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_18" (formula "55") (term "0,0,0,0"))
                        (rule "replaceKnownSelect_taclet00000010_19" (formula "55") (term "0,1,1,0,0,0,1"))
                        (rule "replaceKnownSelect_taclet00000010_19" (formula "55") (term "0,0,0,0,1,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "55") (term "0,1,1,0,0,0,1"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_22" (formula "55") (term "0,0,0,0,1,0,1"))
                        (rule "replaceKnownSelect_taclet00000010_15" (formula "55") (term "0,1,1,0,0,0,1,0"))
                        (rule "replaceKnownSelect_taclet00000010_15" (formula "55") (term "0,0,0,0,1,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_18" (formula "55") (term "0,1,1,0,0,0,1,0"))
                        (rule "replaceKnownAuxiliaryConstant_taclet00000010_18" (formula "55") (term "0,0,0,0,1,0,1,0"))
                        (rule "expand_inInt" (formula "55") (term "1,0,0,1"))
                        (rule "expand_inInt" (formula "55") (term "1,0,0,1,0"))
                        (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0,1"))
                        (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0,1"))
                        (rule "replace_int_MIN" (formula "55") (term "0,1,1,0,0,1,0"))
                        (rule "replace_int_MAX" (formula "55") (term "1,0,1,0,0,1,0"))
                        (rule "andLeft" (formula "55"))
                        (rule "andLeft" (formula "55"))
                        (rule "eqSymm" (formula "55"))
                        (rule "castedGetAny" (formula "57") (term "0,0,1,0"))
                        (rule "castedGetAny" (formula "56") (term "0,0,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "57") (term "1,1,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "57") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "56") (term "0,0,0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "56") (term "1,1,0,0"))
                        (rule "applyEq" (formula "57") (term "1,1,0,0,0") (ifseqformula "55"))
                        (rule "commute_or_2" (formula "50") (term "0"))
                        (rule "commute_and" (formula "57") (term "1,0,0"))
                        (rule "commute_and" (formula "56") (term "0,0,0"))
                        (rule "commute_and" (formula "56") (term "1,0,0"))
                        (rule "commute_and" (formula "57") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "56") (term "0,0"))
                        (rule "commute_and_2" (formula "56") (term "0,0,0"))
                        (rule "shift_paren_and" (formula "57") (term "0,0"))
                        (rule "commute_and_2" (formula "57") (term "0,0,0"))
                         (builtin "Use Operation Contract" (formula "67") (newnames "heapBefore_add,result_3,exc_5,heapAfter_add,anon_heap_add") (contract "java.util.ArrayList[java.util.Collection::add(java.lang.Object)].JML normal_behavior operation contract.0"))
                        (branch "Post (add)"
                            (builtin "One Step Simplification" (formula "69"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "andLeft" (formula "59"))
                           (rule "andLeft" (formula "60"))
                           (rule "andLeft" (formula "61"))
                           (rule "andLeft" (formula "61"))
                           (rule "eqSymm" (formula "61"))
                           (rule "pullOutSelect" (formula "61") (term "0,0") (inst "selectSK=java_util_Collection_seq_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "61") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "72")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,0,1,0,0") (ifseqformula "30"))
                           (rule "eqSymm" (formula "62"))
                           (rule "replace_known_left" (formula "61") (term "0,0,0,1,0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "elementOfSingleton" (formula "61") (term "0,0"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "simplifySelectOfAnon" (formula "61"))
                            (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "72")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,1,0,0") (ifseqformula "30"))
                           (rule "replace_known_left" (formula "61") (term "0,0,1,0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "elementOfUnion" (formula "61") (term "0,0"))
                           (rule "elementOfSingleton" (formula "61") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "applyEqReverse" (formula "62") (term "0,1") (ifseqformula "61"))
                           (rule "hideAuxiliaryEq" (formula "61"))
                           (rule "pullOutSelect" (formula "61") (term "0") (inst "selectSK=java_util_Collection_seq_3"))
                           (rule "simplifySelectOfAnonEQ" (formula "61") (ifseqformula "59"))
                            (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "72")))
                           (rule "replaceKnownSelect_taclet000000010_23" (formula "61") (term "2,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000000010_25" (formula "61") (term "2,0"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,1,0,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "61") (term "0,0,0,1,0,0") (ifseqformula "30"))
                           (rule "eqSymm" (formula "62"))
                           (rule "applyEqReverse" (formula "61") (term "1") (ifseqformula "62"))
                           (rule "hideAuxiliaryEq" (formula "62"))
                           (rule "replace_known_left" (formula "61") (term "0,0,0,0,1,0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "elementOfSingleton" (formula "61") (term "0,0"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "eqSeqConcat" (formula "61"))
                            (builtin "One Step Simplification" (formula "61"))
                           (rule "andLeft" (formula "61"))
                           (rule "andLeft" (formula "61"))
                           (rule "polySimp_addComm0" (formula "61") (term "1"))
                           (rule "eqSeqSingleton" (formula "63"))
                           (rule "andLeft" (formula "63"))
                           (rule "lenOfSeqSub" (formula "63") (term "0"))
                           (rule "polySimp_elimSub" (formula "63") (term "1,0"))
                           (rule "polySimp_addComm0" (formula "63") (term "1,0"))
                           (rule "ifEqualsInteger" (formula "63"))
                           (rule "equal_literals" (formula "63") (term "1,1"))
                            (builtin "One Step Simplification" (formula "63"))
                           (rule "andLeft" (formula "63"))
                           (rule "applyEq" (formula "65") (term "2,0,0") (ifseqformula "61"))
                           (rule "applyEq" (formula "64") (term "1,0") (ifseqformula "61"))
                           (rule "polySimp_addAssoc" (formula "64") (term "0"))
                           (rule "polySimp_addComm0" (formula "64") (term "0,0"))
                           (rule "polySimp_pullOutFactor2b" (formula "64") (term "0"))
                           (rule "add_literals" (formula "64") (term "1,1,0"))
                           (rule "times_zero_1" (formula "64") (term "1,0"))
                           (rule "add_literals" (formula "64") (term "0"))
                            (builtin "One Step Simplification" (formula "64"))
                           (rule "true_left" (formula "64"))
                           (rule "applyEq" (formula "63") (term "1") (ifseqformula "61"))
                           (rule "getOfSeqSub" (formula "64") (term "0"))
                           (rule "castDel" (formula "64") (term "2,0"))
                           (rule "leq_literals" (formula "64") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "64"))
                           (rule "add_zero_left" (formula "64") (term "1,1,0"))
                           (rule "polySimp_elimSub" (formula "64") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "64") (term "1,0,0"))
                           (rule "add_literals" (formula "64") (term "1,1,1,0,0"))
                           (rule "times_zero_1" (formula "64") (term "1,1,0,0"))
                           (rule "add_literals" (formula "64") (term "1,0,0"))
                           (rule "less_literals" (formula "64") (term "0,0"))
                            (builtin "One Step Simplification" (formula "64"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "65"))
                           (rule "true_left" (formula "65"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(vals,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "34"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "34"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "50"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "50"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "36"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "36"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                           (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                           (rule "tryEmpty" (formula "79") (term "1"))
                           (rule "commute_and" (formula "5") (term "0,0,0,0"))
                           (rule "commute_and" (formula "4") (term "0,0,0,0"))
                           (rule "seqGetAlphaCast" (formula "51") (term "0"))
                           (rule "castedGetAny" (formula "51") (term "0"))
                            (builtin "One Step Simplification" (formula "51"))
                           (rule "true_left" (formula "51"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                           (rule "commute_or_2" (formula "1") (term "1,0,0,0,0,0,0"))
                           (rule "methodCallEmpty" (formula "79") (term "1"))
                           (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0,0"))
                           (rule "shift_paren_and" (formula "3") (term "1,0,0"))
                           (rule "emptyModality" (formula "78") (term "1"))
                            (builtin "One Step Simplification" (formula "78"))
                           (rule "andRight" (formula "78"))
                           (branch "Case 1"
                              (rule "andRight" (formula "78"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "78"))
                                 (branch
                                    (rule "andRight" (formula "78"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "78"))
                                       (branch
                                          (rule "inEqSimp_geqRight" (formula "78"))
                                          (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0,1,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "57"))
                                          (rule "polySimp_mulComm0" (formula "57") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "57") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "68"))
                                          (rule "polySimp_rightDist" (formula "68") (term "1,0,0"))
                                          (rule "mul_literals" (formula "68") (term "0,1,0,0"))
                                          (rule "polySimp_addAssoc" (formula "68") (term "0,0"))
                                          (rule "add_literals" (formula "68") (term "0,0,0"))
                                          (rule "add_zero_left" (formula "68") (term "0,0"))
                                          (rule "polySimp_pullOutFactor2" (formula "68") (term "0"))
                                          (rule "add_literals" (formula "68") (term "1,0"))
                                          (rule "times_zero_1" (formula "68") (term "0"))
                                          (rule "leq_literals" (formula "68"))
                                          (rule "true_left" (formula "68"))
                                          (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_ltToLeq" (formula "45"))
                                          (rule "polySimp_mulComm0" (formula "45") (term "1,0,0"))
                                          (rule "polySimp_addComm1" (formula "45") (term "0"))
                                          (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                          (rule "mul_literals" (formula "1") (term "1"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,1,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,0,1,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,1,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "57"))
                                          (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                                          (rule "polySimp_elimOne" (formula "57") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                                          (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                                          (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                          (rule "polySimp_elimOne" (formula "45") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "62") (term "0,0,0,0,0"))
                                          (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0"))
                                          (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0,0,0"))
                                          (rule "mul_literals" (formula "62") (term "0,1,0,0,0,0,0"))
                                          (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0,0,0,0,0"))
                                          (rule "polySimp_elimOne" (formula "62") (term "1,1,0,0,0,0,0"))
                                          (rule "inEqSimp_contradEq7" (formula "70") (ifseqformula "45"))
                                          (rule "polySimp_mulComm0" (formula "70") (term "1,0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "70") (term "0,0"))
                                          (rule "add_literals" (formula "70") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "70") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "70") (term "0,0"))
                                          (rule "leq_literals" (formula "70") (term "0"))
                                           (builtin "One Step Simplification" (formula "70"))
                                          (rule "false_right" (formula "70"))
                                          (rule "inEqSimp_subsumption1" (formula "43") (ifseqformula "45"))
                                          (rule "inEqSimp_homoInEq0" (formula "43") (term "0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "43") (term "0,0"))
                                          (rule "add_literals" (formula "43") (term "1,1,0,0"))
                                          (rule "times_zero_1" (formula "43") (term "1,0,0"))
                                          (rule "add_zero_right" (formula "43") (term "0,0"))
                                          (rule "qeq_literals" (formula "43") (term "0"))
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_util_Iterator_index_3"))
                                          (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "72")))
                                          (rule "replaceKnownSelect_taclet000010_13" (formula "1") (term "2,0"))
                                          (rule "replaceKnownAuxiliaryConstant_taclet000010_14" (formula "1") (term "2,0"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "36"))
                                          (rule "replace_known_right" (formula "1") (term "0,0,0,0,1,0,0") (ifseqformula "71"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")))
                                          (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
                                          (rule "hideAuxiliaryEq" (formula "1"))
                                          (rule "applyEq" (formula "1") (term "0") (ifseqformula "51"))
                                          (rule "inEqSimp_homoInEq0" (formula "1"))
                                          (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                          (rule "mul_literals" (formula "1") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                          (rule "add_literals" (formula "1") (term "0,0"))
                                          (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                          (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                          (rule "polySimp_elimOne" (formula "1") (term "0"))
                                          (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "42"))
                                          (rule "qeq_literals" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "Case 2"
                                          (rule "selectOfAnonEQ" (formula "78") (term "1") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "73")))
                                          (rule "elementOfSingleton" (formula "78") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "ifthenelse_negated" (formula "78") (term "1"))
                                          (rule "ifthenelse_split" (formula "78") (term "1"))
                                          (branch "result_91.<created>@heapAfter_next = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "79") (term "0,0") (ifseqformula "64"))
                                              (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "76")))
                                             (rule "ifthenelse_split" (formula "79") (term "0,0"))
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE TRUE"
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "80") (term "1") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "75")))
                                                (rule "ifthenelse_split" (formula "80") (term "1"))
                                                (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                   (rule "elementOfSingleton" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "51"))
                                                    (builtin "One Step Simplification" (formula "3"))
                                                   (rule "selectOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0,1") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0,1") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "eqSymm" (formula "1"))
                                                   (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1"))
                                                    (builtin "One Step Simplification" (formula "20"))
                                                   (rule "inEqSimp_geqRight" (formula "79"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "46"))
                                                   (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "46") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "63") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "58"))
                                                   (rule "polySimp_mulComm0" (formula "58") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "58") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "69"))
                                                   (rule "polySimp_rightDist" (formula "69") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "69") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                                                   (rule "add_literals" (formula "69") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "69") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "69") (term "0"))
                                                   (rule "add_literals" (formula "69") (term "1,0"))
                                                   (rule "times_zero_1" (formula "69") (term "0"))
                                                   (rule "leq_literals" (formula "69"))
                                                   (rule "true_left" (formula "69"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "applyEq" (formula "67") (term "1,0,1,1") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "68") (term "1,0,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "67") (term "1,0,2,0") (ifseqformula "2"))
                                                   (rule "lenOfSeqSubEQ" (formula "68") (term "1,0") (ifseqformula "67"))
                                                   (rule "polySimp_elimSub" (formula "68") (term "1,1,0"))
                                                   (rule "mul_literals" (formula "68") (term "1,1,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "1,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "68") (term "0,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0"))
                                                   (rule "applyEq" (formula "66") (term "1,0,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "49") (term "0,0,1,0,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "77") (term "0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "68") (term "1,0,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "67") (term "1,1") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "64") (term "0,1,0") (ifseqformula "2"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "52"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "applyEq" (formula "66") (term "0,1,1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "21"))
                                                   (rule "lenOfSeqSubEQ" (formula "68") (term "0,1,0,0,1,0") (ifseqformula "67"))
                                                   (rule "polySimp_elimSub" (formula "68") (term "1,0,1,0,0,1,0"))
                                                   (rule "mul_literals" (formula "68") (term "1,1,0,1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "1,0,1,0,0,1,0"))
                                                   (rule "lenOfSeqSubEQ" (formula "68") (term "1,1,0") (ifseqformula "67"))
                                                   (rule "polySimp_elimSub" (formula "68") (term "1,1,1,0"))
                                                   (rule "mul_literals" (formula "68") (term "1,1,1,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "1,1,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "68") (term "0,0,1,0,0,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "0,0,0,1,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,0,1,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "68") (term "0,1,1,0"))
                                                   (rule "add_zero_right" (formula "68") (term "0,0,1,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,1,0"))
                                                   (rule "applyEq" (formula "67") (term "1") (ifseqformula "21"))
                                                   (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "66"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                                                   (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "45") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "62") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "62") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "62") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "57"))
                                                   (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "57") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "33") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "68") (term "0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "68") (term "0,0,1,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,1,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "68") (term "0,0,1,1,0"))
                                                   (rule "polySimp_elimOne" (formula "68") (term "0,0,1,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                   (rule "mul_literals" (formula "1") (term "0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "68") (term "0,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "68") (term "0,0,0,0,1,0"))
                                                   (rule "inEqSimp_contradEq3" (formula "70") (ifseqformula "1"))
                                                   (rule "polySimp_mulComm0" (formula "70") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "70") (term "0,0"))
                                                   (rule "add_literals" (formula "70") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "70") (term "1,0,0"))
                                                   (rule "add_literals" (formula "70") (term "0,0"))
                                                   (rule "qeq_literals" (formula "70") (term "0"))
                                                    (builtin "One Step Simplification" (formula "70"))
                                                   (rule "false_right" (formula "70"))
                                                   (rule "inEqSimp_contradInEq0" (formula "43") (ifseqformula "1"))
                                                   (rule "andLeft" (formula "43"))
                                                   (rule "inEqSimp_homoInEq1" (formula "43"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                   (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                   (rule "mul_literals" (formula "43") (term "0,1,0"))
                                                   (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                                   (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "43") (term "0"))
                                                   (rule "add_literals" (formula "43") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "43") (term "1,0"))
                                                   (rule "add_literals" (formula "43") (term "0"))
                                                   (rule "leq_literals" (formula "43"))
                                                   (rule "closeFalse" (formula "43"))
                                                )
                                                (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                   (rule "orRight" (formula "80"))
                                                   (rule "elementOfSingleton" (formula "80"))
                                                    (builtin "One Step Simplification" (formula "80"))
                                                   (rule "closeTrue" (formula "80"))
                                                )
                                             )
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE FALSE"
                                                (rule "orRight" (formula "79"))
                                                (rule "elementOfSingleton" (formula "79"))
                                                 (builtin "One Step Simplification" (formula "79"))
                                                (rule "selectOfAnonEQ" (formula "81") (term "1") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                                (rule "selectOfAnon" (formula "81") (term "2,1"))
                                                 (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                                (rule "ifthenelse_split" (formula "81") (term "2,1"))
                                                (branch " (result_91, java.util.Iterator::$index) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                                   (rule "elementOfUnion" (formula "1") (term "0"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "ifthenelse_split" (formula "82") (term "1"))
                                                   (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                      (rule "elementOfSingleton" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "2"))
                                                      (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "81"))
                                                      (rule "selectOfAnonEQ" (formula "82") (term "0,0") (ifseqformula "50"))
                                                       (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")))
                                                      (rule "ifthenelse_split" (formula "82") (term "0,0"))
                                                      (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                         (rule "elementOfSingleton" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "selectOfAnonEQ" (formula "82") (term "0,0,0,0") (ifseqformula "37"))
                                                          (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "78")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                                         (rule "selectOfAnonEQ" (formula "3") (term "0,0,0") (ifseqformula "37"))
                                                          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                         (rule "selectOfAnonEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                         (rule "orRight" (formula "82"))
                                                         (rule "elementOfSingleton" (formula "82"))
                                                          (builtin "One Step Simplification" (formula "82"))
                                                         (rule "selectOfAnon" (formula "84") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "77")))
                                                         (rule "ifthenelse_split" (formula "84") (term "0,0"))
                                                         (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE TRUE"
                                                            (rule "elementOfUnion" (formula "1") (term "0"))
                                                            (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")))
                                                            (rule "elementOfSingleton" (formula "1") (term "0"))
                                                             (builtin "One Step Simplification" (formula "1"))
                                                            (rule "selectCreatedOfAnonEQ" (formula "84") (term "0,0,0") (ifseqformula "37"))
                                                             (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "30")))
                                                            (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "37"))
                                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "30")))
                                                            (rule "closeFalse" (formula "1"))
                                                         )
                                                         (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE FALSE"
                                                            (rule "orRight" (formula "84"))
                                                            (rule "elementOfUnion" (formula "84"))
                                                            (rule "orRight" (formula "84"))
                                                            (rule "elementOfSingleton" (formula "84"))
                                                             (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "80")))
                                                            (rule "elementOfSingleton" (formula "84"))
                                                             (builtin "One Step Simplification" (formula "84"))
                                                            (rule "selectCreatedOfAnonEQ" (formula "83") (term "0,0,0") (ifseqformula "36"))
                                                             (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "29")))
                                                            (rule "selectOfAnonEQ" (formula "81") (term "0,0,0,0") (ifseqformula "36"))
                                                             (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                            (rule "selectOfAnonEQ" (formula "2") (term "0,0,0") (ifseqformula "36"))
                                                             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                            (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "35"))
                                                             (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "28")))
                                                            (rule "selectOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "35"))
                                                             (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")))
                                                            (rule "true_left" (formula "1"))
                                                            (rule "false_right" (formula "79"))
                                                            (rule "eqSymm" (formula "78"))
                                                            (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "78"))
                                                             (builtin "One Step Simplification" (formula "19"))
                                                            (rule "true_left" (formula "19"))
                                                            (rule "inEqSimp_geqRight" (formula "78"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,1,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "67"))
                                                            (rule "polySimp_rightDist" (formula "67") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "67") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "67") (term "0,0"))
                                                            (rule "add_literals" (formula "67") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "67") (term "0,0"))
                                                            (rule "polySimp_pullOutFactor2" (formula "67") (term "0"))
                                                            (rule "add_literals" (formula "67") (term "1,0"))
                                                            (rule "times_zero_1" (formula "67") (term "0"))
                                                            (rule "leq_literals" (formula "67"))
                                                            (rule "true_left" (formula "67"))
                                                            (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "44"))
                                                            (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "44") (term "0"))
                                                            (rule "inEqSimp_ltToLeq" (formula "56"))
                                                            (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                                            (rule "polySimp_addComm1" (formula "56") (term "0"))
                                                            (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "51"))
                                                            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                            (rule "add_literals" (formula "1") (term "0,0,0"))
                                                            (rule "add_zero_left" (formula "1") (term "0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                                                            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                                                            (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                                                            (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                                                            (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                                                            (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                                            (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                            (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                                            (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                                            (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                                                            (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                                            (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                                            (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "44") (term "0"))
                                                            (rule "inEqSimp_sepNegMonomial0" (formula "56"))
                                                            (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                                                            (rule "polySimp_elimOne" (formula "56") (term "0"))
                                                            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                            (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                            (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                            (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "44"))
                                                            (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "69") (term "0,0"))
                                                            (rule "add_literals" (formula "69") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "69") (term "1,0,0"))
                                                            (rule "add_literals" (formula "69") (term "0,0"))
                                                            (rule "leq_literals" (formula "69") (term "0"))
                                                             (builtin "One Step Simplification" (formula "69"))
                                                            (rule "false_right" (formula "69"))
                                                            (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "44"))
                                                            (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                            (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                            (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                            (rule "add_literals" (formula "42") (term "0,0"))
                                                            (rule "qeq_literals" (formula "42") (term "0"))
                                                             (builtin "One Step Simplification" (formula "42"))
                                                            (rule "true_left" (formula "42"))
                                                            (rule "inEqSimp_contradInEq0" (formula "43") (ifseqformula "1"))
                                                            (rule "andLeft" (formula "43"))
                                                            (rule "inEqSimp_homoInEq1" (formula "43"))
                                                            (rule "polySimp_pullOutFactor1b" (formula "43") (term "0"))
                                                            (rule "add_literals" (formula "43") (term "1,1,0"))
                                                            (rule "times_zero_1" (formula "43") (term "1,0"))
                                                            (rule "add_literals" (formula "43") (term "0"))
                                                            (rule "leq_literals" (formula "43"))
                                                            (rule "closeFalse" (formula "43"))
                                                         )
                                                      )
                                                   )
                                                   (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                      (rule "orRight" (formula "82"))
                                                      (rule "elementOfSingleton" (formula "82"))
                                                       (builtin "One Step Simplification" (formula "82"))
                                                      (rule "closeTrue" (formula "82"))
                                                   )
                                                )
                                                (branch " (result_91, java.util.Iterator::$index) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                                   (rule "orRight" (formula "81"))
                                                   (rule "elementOfUnion" (formula "81"))
                                                   (rule "orRight" (formula "81"))
                                                   (rule "elementOfSingleton" (formula "82"))
                                                    (builtin "One Step Simplification" (formula "82"))
                                                   (rule "closeTrue" (formula "82"))
                                                )
                                             )
                                          )
                                          (branch "result_91.<created>@heapAfter_next = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "79") (term "0,0") (ifseqformula "63"))
                                              (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "75")))
                                             (rule "ifthenelse_split" (formula "79") (term "0,0"))
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE TRUE"
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "79") (term "0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "74")))
                                                (rule "ifthenelse_negated" (formula "79") (term "0"))
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "ifthenelse_split" (formula "79") (term "0"))
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "1")))
                                                   (rule "closeTrue" (formula "80"))
                                                )
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                   (rule "orRight" (formula "79"))
                                                   (rule "selectOfAnonEQ" (formula "1") (term "0,0,0,0,1") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "79") (term "0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                                   (rule "closeTrue" (formula "79"))
                                                )
                                             )
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE FALSE"
                                                (rule "orRight" (formula "79"))
                                                (rule "elementOfSingleton" (formula "79"))
                                                 (builtin "One Step Simplification" (formula "79"))
                                                (rule "selectOfAnonEQ" (formula "78") (term "0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "73")))
                                                (rule "ifthenelse_negated" (formula "78") (term "0"))
                                                (rule "selectCreatedOfAnon" (formula "78") (term "1,0"))
                                                (rule "selectCreatedOfAnonEQ" (formula "80") (term "0,0") (ifseqformula "48"))
                                                 (builtin "One Step Simplification" (formula "80"))
                                                (rule "ifthenelse_split" (formula "78") (term "0"))
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "1")))
                                                   (rule "closeTrue" (formula "79"))
                                                )
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                   (rule "orRight" (formula "78"))
                                                   (rule "selectOfAnonEQ" (formula "83") (term "0,0") (ifseqformula "48"))
                                                    (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "75")))
                                                   (rule "selectOfAnon" (formula "83") (term "2,0,0"))
                                                    (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "75")))
                                                   (rule "ifthenelse_split" (formula "83") (term "0,0"))
                                                   (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                      (rule "elementOfSingleton" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectOfAnonEQ" (formula "79") (term "0") (ifseqformula "35"))
                                                       (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                                      (rule "closeTrue" (formula "79"))
                                                   )
                                                   (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                      (rule "orRight" (formula "83"))
                                                      (rule "elementOfSingleton" (formula "83"))
                                                       (builtin "One Step Simplification" (formula "83"))
                                                      (rule "ifthenelse_split" (formula "85") (term "0,0"))
                                                      (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE TRUE"
                                                         (rule "elementOfUnion" (formula "1") (term "0"))
                                                         (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                                                         (rule "elementOfSingleton" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "selectOfAnonEQ" (formula "85") (term "0,0,0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                                         (rule "selectOfAnonEQ" (formula "83") (term "0,0,0,0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                                         (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE FALSE"
                                                         (rule "orRight" (formula "85"))
                                                         (rule "elementOfUnion" (formula "85"))
                                                         (rule "orRight" (formula "85"))
                                                         (rule "elementOfSingleton" (formula "86"))
                                                          (builtin "One Step Simplification" (formula "86"))
                                                         (rule "elementOfSingleton" (formula "85"))
                                                          (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "81")))
                                                         (rule "selectOfAnonEQ" (formula "84") (term "0,0,0") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "75")) (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                                                         (rule "selectOfAnonEQ" (formula "84") (term "0,0") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "84") (ifInst ""  (formula "75")) (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                                                         (rule "selectOfAnonEQ" (formula "78") (term "0") (ifseqformula "34"))
                                                          (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "73")) (ifInst ""  (formula "72")) (ifInst ""  (formula "36")))
                                                         (rule "closeTrue" (formula "78"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "selectOfAnonEQ" (formula "78") (term "1") (ifseqformula "63"))
                                        (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "75")))
                                       (rule "ifthenelse_split" (formula "78") (term "1"))
                                       (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE TRUE"
                                          (rule "elementOfSingleton" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,1") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectOfAnonEQ" (formula "79") (term "0") (ifseqformula "64"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "74")))
                                          (rule "elementOfSingleton" (formula "79") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "ifthenelse_negated" (formula "79") (term "0"))
                                          (rule "ifthenelse_split" (formula "79") (term "0"))
                                          (branch "result_91.<created>@heapAfter_next = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "50"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")))
                                             (rule "ifthenelse_negated" (formula "1") (term "0"))
                                             (rule "ifthenelse_split" (formula "1") (term "0"))
                                             (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                 (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                                (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")) (ifInst ""  (formula "1")))
                                                (rule "selectOfAnon" (formula "81") (term "2,0"))
                                                 (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")))
                                                (rule "elementOfUnion" (formula "81") (term "0,0,2,0"))
                                                (rule "ifthenelse_split" (formula "81") (term "0"))
                                                (branch "(result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} TRUE"
                                                   (rule "elementOfSingleton" (formula "1"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch "(result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} FALSE"
                                                   (rule "elementOfSingleton" (formula "81"))
                                                    (builtin "One Step Simplification" (formula "81"))
                                                   (rule "ifthenelse_split" (formula "82") (term "0"))
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                                      (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectOfAnonEQ" (formula "4") (term "0,0,0,0,1") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "79")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                                      (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "38"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "40")))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                                      (rule "orRight" (formula "82"))
                                                      (rule "orRight" (formula "82"))
                                                      (rule "elementOfSingleton" (formula "83"))
                                                       (builtin "One Step Simplification" (formula "83"))
                                                      (rule "elementOfSingleton" (formula "82"))
                                                       (builtin "One Step Simplification" (formula "82"))
                                                      (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "37"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                      (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "36"))
                                                       (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                      (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "36"))
                                                       (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")))
                                                      (rule "selectOfAnonEQ" (formula "2") (term "0,0,0,0,1") (ifseqformula "36"))
                                                       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                       (opengoal " ")
                                                   )
                                                )
                                             )
                                             (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                (rule "orRight" (formula "71"))
                                                (rule "selectOfAnonEQ" (formula "82") (term "0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")) (ifInst ""  (formula "71")) (ifInst ""  (formula "72")))
                                                (rule "selectOfAnonEQ" (formula "71") (term "0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "77")) (ifInst ""  (formula "76")) (ifInst ""  (formula "38")))
                                                (rule "closeTrue" (formula "71"))
                                             )
                                          )
                                          (branch "result_91.<created>@heapAfter_next = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "1") (term "0,0,0,0,1") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                             (rule "selectCreatedOfAnonEQ" (formula "79") (term "0") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "79"))
                                             (rule "orRight" (formula "79"))
                                             (rule "orRight" (formula "79"))
                                             (rule "selectOfAnonEQ" (formula "79") (term "0") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                             (rule "closeTrue" (formula "79"))
                                          )
                                       )
                                       (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE FALSE"
                                          (rule "orRight" (formula "78"))
                                          (rule "elementOfSingleton" (formula "78"))
                                           (builtin "One Step Simplification" (formula "78"))
                                          (rule "selectCreatedOfAnonEQ" (formula "79") (term "0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "79"))
                                          (rule "selectOfAnonEQ" (formula "80") (term "0") (ifseqformula "63"))
                                           (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "73")))
                                          (rule "elementOfSingleton" (formula "80") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "80"))
                                          (rule "ifthenelse_negated" (formula "80") (term "0"))
                                          (rule "selectCreatedOfAnonEQ" (formula "79") (term "0,0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "27")))
                                          (rule "ifthenelse_split" (formula "80") (term "0"))
                                          (branch "result_91.<created>@heapAfter_next = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "81") (term "1") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")))
                                             (rule "ifthenelse_split" (formula "81") (term "1"))
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "82") (term "0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                                (rule "selectOfAnon" (formula "82") (term "2,0"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                                (rule "elementOfUnion" (formula "82") (term "0,0,2,0"))
                                                (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "50"))
                                                 (builtin "One Step Simplification" (formula "2"))
                                                (rule "selectOfAnonEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                (rule "orRight" (formula "81"))
                                                (rule "elementOfSingleton" (formula "81"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "selectOfAnon" (formula "82") (term "1"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "76")))
                                                (rule "ifthenelse_split" (formula "82") (term "1"))
                                                (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE TRUE"
                                                   (rule "elementOfUnion" (formula "1") (term "0"))
                                                   (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "80")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "2") (term "0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "2"))
                                                   (rule "selectOfAnonEQ" (formula "82") (term "0,0,0") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                                   (rule "selectOfAnonEQ" (formula "82") (term "0") (ifseqformula "50"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                                   (rule "selectOfAnon" (formula "82") (term "2,0"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                                   (rule "elementOfUnion" (formula "82") (term "0,0,2,0"))
                                                   (rule "ifthenelse_split" (formula "82") (term "2,0"))
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                                      (rule "elementOfSingleton" (formula "1") (term "0,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "selectCreatedOfAnonEQ" (formula "83") (term "0,0,0,1,0,0") (ifseqformula "37"))
                                                       (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                      (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "37"))
                                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                                      (rule "orRight" (formula "82"))
                                                      (rule "orRight" (formula "82"))
                                                      (rule "elementOfSingleton" (formula "83"))
                                                       (builtin "One Step Simplification" (formula "83"))
                                                      (rule "elementOfSingleton" (formula "82"))
                                                       (builtin "One Step Simplification" (formula "82"))
                                                      (rule "selectCreatedOfAnonEQ" (formula "83") (term "0,0,0,1,0,0") (ifseqformula "36"))
                                                       (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                      (rule "ifthenelse_split" (formula "83") (term "0"))
                                                      (branch "(result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} TRUE"
                                                         (rule "elementOfSingleton" (formula "1"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch "(result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} FALSE"
                                                         (rule "elementOfSingleton" (formula "83"))
                                                          (builtin "One Step Simplification" (formula "83"))
                                                         (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "29")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                )
                                                (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE FALSE"
                                                   (rule "orRight" (formula "82"))
                                                   (rule "elementOfUnion" (formula "82"))
                                                   (rule "orRight" (formula "82"))
                                                   (rule "elementOfSingleton" (formula "83"))
                                                    (builtin "One Step Simplification" (formula "83"))
                                                   (rule "elementOfSingleton" (formula "82"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "79")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "1") (term "0") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "selectOfAnonEQ" (formula "81") (term "0,0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "28")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                                   (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "49"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                                   (rule "selectOfAnon" (formula "81") (term "2,0"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                                   (rule "elementOfUnion" (formula "81") (term "0,0,2,0"))
                                                   (rule "ifthenelse_split" (formula "81") (term "2,0"))
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                                      (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "elementOfSingleton" (formula "1") (term "0"))
                                                       (builtin "One Step Simplification" (formula "1"))
                                                      (rule "ifthenelse_split" (formula "82") (term "0"))
                                                      (branch " (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                         (rule "elementOfSingleton" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "37"))
                                                          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                         (rule "closeFalse" (formula "2"))
                                                      )
                                                      (branch " (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                         (rule "orRight" (formula "82"))
                                                         (rule "elementOfSingleton" (formula "82"))
                                                          (builtin "One Step Simplification" (formula "82"))
                                                         (rule "selectOfAnonEQ" (formula "83") (term "1") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")))
                                                         (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                   )
                                                   (branch " (result_91, java.util.Iterator::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                                      (rule "orRight" (formula "81"))
                                                      (rule "orRight" (formula "81"))
                                                      (rule "elementOfSingleton" (formula "82"))
                                                       (builtin "One Step Simplification" (formula "82"))
                                                      (rule "elementOfSingleton" (formula "81"))
                                                       (builtin "One Step Simplification" (formula "81"))
                                                      (rule "ifthenelse_split" (formula "82") (term "0"))
                                                      (branch " (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                         (rule "elementOfSingleton" (formula "1") (term "0"))
                                                          (builtin "One Step Simplification" (formula "1"))
                                                         (rule "selectCreatedOfAnonEQ" (formula "82") (term "0,0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                         (rule "selectOfAnonEQ" (formula "82") (term "1") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")))
                                                         (rule "selectOfAnonEQ" (formula "1") (term "0,0,0") (ifseqformula "36"))
                                                          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                         (rule "closeFalse" (formula "1"))
                                                      )
                                                      (branch " (result_91, java.util.Iterator::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                         (rule "orRight" (formula "82"))
                                                         (rule "elementOfSingleton" (formula "82"))
                                                          (builtin "One Step Simplification" (formula "82"))
                                                         (rule "selectOfAnonEQ" (formula "83") (term "1") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")))
                                                         (rule "selectOfAnonEQ" (formula "82") (term "0,0,0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                                         (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                                         (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "35"))
                                                          (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")) (ifInst ""  (formula "73")) (ifInst ""  (formula "39")))
                                                         (rule "closeTrue" (formula "81"))
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "result_91.<created>@heapAfter_next = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "81") (term "1") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "75")))
                                             (rule "ifthenelse_split" (formula "81") (term "1"))
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectCreatedOfAnonEQ" (formula "81") (term "0") (ifseqformula "49"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "orRight" (formula "81"))
                                                (rule "orRight" (formula "81"))
                                                (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0,0") (ifseqformula "35"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                (rule "orRight" (formula "81"))
                                                (rule "elementOfSingleton" (formula "81"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "selectOfAnon" (formula "82") (term "1"))
                                                 (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                                (rule "ifthenelse_split" (formula "82") (term "1"))
                                                (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE TRUE"
                                                   (rule "elementOfUnion" (formula "1") (term "0"))
                                                   (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                                    (builtin "One Step Simplification" (formula "1"))
                                                   (rule "elementOfSingleton" (formula "1") (term "0"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "82") (term "0,0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "28")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE FALSE"
                                                   (rule "orRight" (formula "82"))
                                                   (rule "elementOfUnion" (formula "82"))
                                                   (rule "orRight" (formula "82"))
                                                   (rule "elementOfSingleton" (formula "82"))
                                                    (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "78")))
                                                   (rule "elementOfSingleton" (formula "82"))
                                                    (builtin "One Step Simplification" (formula "82"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0,0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "27")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "27")))
                                                   (rule "selectOfAnonEQ" (formula "81") (term "1") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "75")) (ifInst ""  (formula "27")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "80") (term "0") (ifseqformula "48"))
                                                    (builtin "One Step Simplification" (formula "80"))
                                                   (rule "orRight" (formula "80"))
                                                   (rule "orRight" (formula "80"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "80") (term "0") (ifseqformula "34"))
                                                    (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "72")) (ifInst ""  (formula "36")))
                                                   (rule "closeTrue" (formula "80"))
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                                 (branch
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "67"))
                                    (rule "polySimp_rightDist" (formula "67") (term "1,0,0"))
                                    (rule "mul_literals" (formula "67") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "67") (term "0,0"))
                                    (rule "add_literals" (formula "67") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "67") (term "0,0"))
                                    (rule "polySimp_pullOutFactor2" (formula "67") (term "0"))
                                    (rule "add_literals" (formula "67") (term "1,0"))
                                    (rule "times_zero_1" (formula "67") (term "0"))
                                    (rule "leq_literals" (formula "67"))
                                    (rule "true_left" (formula "67"))
                                    (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "56"))
                                    (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "56") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "44"))
                                    (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "44") (term "0"))
                                    (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "56"))
                                    (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                                    (rule "polySimp_elimOne" (formula "56") (term "0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                    (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                    (rule "polySimp_elimOne" (formula "44") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                    (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "44"))
                                    (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "69") (term "0,0"))
                                    (rule "add_literals" (formula "69") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "69") (term "1,0,0"))
                                    (rule "add_literals" (formula "69") (term "0,0"))
                                    (rule "leq_literals" (formula "69") (term "0"))
                                     (builtin "One Step Simplification" (formula "69"))
                                    (rule "false_right" (formula "69"))
                                    (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "44"))
                                    (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                    (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                    (rule "add_literals" (formula "42") (term "0,0"))
                                    (rule "qeq_literals" (formula "42") (term "0"))
                                     (builtin "One Step Simplification" (formula "42"))
                                    (rule "true_left" (formula "42"))
                                    (rule "inEqSimp_and_subsumption3" (formula "59") (term "0,0,0"))
                                    (rule "leq_literals" (formula "59") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "59"))
                                    (rule "inEqSimp_and_subsumption3" (formula "60") (term "0,0,0"))
                                    (rule "leq_literals" (formula "60") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "nnf_imp2or" (formula "20") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "20"))
                                    (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "15") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "32") (term "0"))
                                    (rule "nnf_imp2or" (formula "59") (term "0"))
                                    (rule "nnf_imp2or" (formula "60") (term "0"))
                                    (rule "nnf_notAnd" (formula "32") (term "0,0"))
                                    (rule "inEqSimp_notGeq" (formula "32") (term "1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "32") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "1,0,0"))
                                    (rule "mul_literals" (formula "32") (term "1,1,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "32") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "32") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "32") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "32") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "32") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "32") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "32") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "32") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "59") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "59") (term "1,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "59") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "1,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "60") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "60") (term "1,0,0"))
                                    (rule "mul_literals" (formula "60") (term "1,0,0,1,0,0"))
                                    (rule "add_literals" (formula "60") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "1,0,0"))
                                    (rule "mul_literals" (formula "60") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "22"))
                                    (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "21"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "nnf_imp2or" (formula "15") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "15") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "15"))
                                    (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "nnf_notAnd" (formula "59") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "59") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "59") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "59") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "59") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "59") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "59") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "59") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "59") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "59") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "59") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,0,0,1,0,0,0"))
                                    (rule "add_zero_right" (formula "59") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "59") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "59") (term "1,1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "60") (term "0,0,0"))
                                    (rule "inEqSimp_notLeq" (formula "60") (term "0,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "60") (term "0,0,0,0,0,0"))
                                    (rule "add_literals" (formula "60") (term "0,0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "60") (term "0,0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "60") (term "0,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "60") (term "1,0,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "60") (term "1,0,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "60") (term "1,0,0,0"))
                                    (rule "times_zero_1" (formula "60") (term "1,0,0,1,0,0,0"))
                                    (rule "add_literals" (formula "60") (term "0,0,1,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "1,0,0,0"))
                                    (rule "mul_literals" (formula "60") (term "1,1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "15") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                                    (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "75"))
                                    (rule "closeTrue" (formula "75"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "78") (term "0,1,1,0,0,0") (ifseqformula "34"))
                                 (rule "allRight" (formula "78") (inst "sk=f_0"))
                                 (rule "allRight" (formula "78") (inst "sk=o_0"))
                                 (rule "orRight" (formula "78"))
                                 (rule "orRight" (formula "78"))
                                 (rule "orRight" (formula "78"))
                                 (rule "inEqSimp_ltToLeq" (formula "61") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "44"))
                                 (rule "polySimp_mulComm0" (formula "44") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "44") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "67"))
                                 (rule "polySimp_rightDist" (formula "67") (term "1,0,0"))
                                 (rule "mul_literals" (formula "67") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "67") (term "0,0"))
                                 (rule "add_literals" (formula "67") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "67") (term "0,0"))
                                 (rule "polySimp_pullOutFactor2" (formula "67") (term "0"))
                                 (rule "add_literals" (formula "67") (term "1,0"))
                                 (rule "times_zero_1" (formula "67") (term "0"))
                                 (rule "leq_literals" (formula "67"))
                                 (rule "true_left" (formula "67"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0,1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "32") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "56"))
                                 (rule "polySimp_mulComm0" (formula "56") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "56") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                 (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                 (rule "polySimp_elimOne" (formula "44") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                 (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "56"))
                                 (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                                 (rule "polySimp_elimOne" (formula "56") (term "0"))
                                 (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "44"))
                                 (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "69") (term "0,0"))
                                 (rule "add_literals" (formula "69") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "69") (term "1,0,0"))
                                 (rule "add_literals" (formula "69") (term "0,0"))
                                 (rule "leq_literals" (formula "69") (term "0"))
                                  (builtin "One Step Simplification" (formula "69"))
                                 (rule "false_right" (formula "69"))
                                 (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "44"))
                                 (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                 (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                 (rule "add_literals" (formula "42") (term "0,0"))
                                 (rule "qeq_literals" (formula "42") (term "0"))
                                  (builtin "One Step Simplification" (formula "42"))
                                 (rule "true_left" (formula "42"))
                                 (rule "pullOutSelect" (formula "78") (term "0") (inst "selectSK=f_0_0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "eqSymm" (formula "79"))
                                 (rule "pullOutSelect" (formula "79") (term "0") (inst "selectSK=f_0_1"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "64"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "49"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0,0") (ifseqformula "36"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "77"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_2"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "50"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,1,0,0") (ifseqformula "37"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "79"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_3"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replaceKnownSelect_taclet10000000010_28" (formula "1") (term "2,0"))
                                 (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "38"))
                                 (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "81"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "1,0,0,0") (ifseqformula "80"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "79"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "inEqSimp_and_subsumption3" (formula "63") (term "0,0,0"))
                                 (rule "leq_literals" (formula "63") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "63"))
                                 (rule "inEqSimp_and_subsumption3" (formula "62") (term "0,0,0"))
                                 (rule "leq_literals" (formula "62") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "62"))
                                 (rule "nnf_imp2or" (formula "23") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "19") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "24") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "20") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
                                 (rule "nnf_imp2or" (formula "35") (term "0"))
                                 (rule "nnf_imp2or" (formula "63") (term "0"))
                                 (rule "nnf_imp2or" (formula "62") (term "0"))
                                 (rule "nnf_notAnd" (formula "35") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "35") (term "1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "35") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "35") (term "1,0,0"))
                                 (rule "mul_literals" (formula "35") (term "1,1,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "35") (term "0,0,0"))
                                 (rule "polySimp_rightDist" (formula "35") (term "1,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "35") (term "0,1,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "35") (term "0,0,0,0,0"))
                                 (rule "add_literals" (formula "35") (term "0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "35") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "35") (term "0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "35") (term "1,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "35") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "63") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "63") (term "1,0,0"))
                                 (rule "mul_literals" (formula "63") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "63") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "1,0,0"))
                                 (rule "mul_literals" (formula "63") (term "1,1,0,0"))
                                 (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "nnf_notAnd" (formula "62") (term "0,0"))
                                 (rule "inEqSimp_notLeq" (formula "62") (term "1,0,0"))
                                 (rule "mul_literals" (formula "62") (term "1,0,0,1,0,0"))
                                 (rule "add_literals" (formula "62") (term "0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "1,0,0"))
                                 (rule "mul_literals" (formula "62") (term "1,1,0,0"))
                                 (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "16"))
                                 (rule "nnf_imp2or" (formula "19") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "19") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "19"))
                                 (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "12"))
                                 (rule "nnf_imp2or" (formula "24") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "24") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "13"))
                                 (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "18"))
                                 (rule "nnf_imp2or" (formula "20") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "20") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "17"))
                                 (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "nnf_notAnd" (formula "63") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "63") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "63") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "63") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "63") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "63") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "63") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "63") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "63") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "63") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "63") (term "1,0,0,0"))
                                 (rule "times_zero_1" (formula "63") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "63") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "63") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "63") (term "1,1,0,0,0"))
                                 (rule "nnf_notAnd" (formula "62") (term "0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "62") (term "0,0,0,0"))
                                 (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0,0,0,0"))
                                 (rule "mul_literals" (formula "62") (term "0,1,0,0,0,0,0,0"))
                                 (rule "polySimp_addAssoc" (formula "62") (term "0,0,0,0,0,0"))
                                 (rule "add_literals" (formula "62") (term "0,0,0,0,0,0,0"))
                                 (rule "add_zero_left" (formula "62") (term "0,0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "62") (term "0,0,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "62") (term "1,0,0,0,0"))
                                 (rule "polySimp_elimOne" (formula "62") (term "1,0,0,0,0"))
                                 (rule "inEqSimp_notGeq" (formula "62") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "62") (term "1,0,0,1,0,0,0"))
                                 (rule "add_zero_right" (formula "62") (term "0,0,1,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "62") (term "1,0,0,0"))
                                 (rule "mul_literals" (formula "62") (term "1,1,0,0,0"))
                                 (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "19") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "24") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "20") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
                                 (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                 (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                 (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
                                 (rule "commute_and" (formula "79"))
                                 (rule "commute_and" (formula "78"))
                                 (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "19") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "12") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "18") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "0,0,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "12") (term "0,0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "11") (term "0,0,1,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "0,0,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0,0,0,0"))
                                 (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0,0,0,0"))
                                 (rule "commute_or_2" (formula "1") (term "0,1,0,0"))
                                 (rule "commute_or_2" (formula "2") (term "0,0,1,0,0"))
                                 (rule "commute_or" (formula "35") (term "0,0"))
                                 (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                 (rule "distr_forallAnd" (formula "23") (term "0"))
                                 (rule "distr_forallAnd" (formula "23"))
                                 (rule "andLeft" (formula "23"))
                                 (rule "commute_or" (formula "7") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "64") (term "0"))
                                 (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "16") (term "1,0,0,0"))
                                 (rule "commute_and" (formula "36") (term "0,0,1,0"))
                                 (rule "commute_or" (formula "19") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "12") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "25") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "63") (term "0"))
                                 (rule "commute_or" (formula "9") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "13") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "18") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "20") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "21") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "11") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "17") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "26") (term "1,0,0,0"))
                                 (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                 (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                 (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                 (rule "commute_or" (formula "24") (term "0,0"))
                                 (rule "commute_or_2" (formula "64") (term "0,0"))
                                 (rule "commute_or_2" (formula "63") (term "0,0"))
                                 (rule "cut_direct" (formula "81") (term "0,0"))
                                 (branch "CUT: o_0 = null TRUE"
                                     (builtin "One Step Simplification" (formula "82"))
                                    (rule "false_right" (formula "82"))
                                    (rule "replace_known_left" (formula "4") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "4"))
                                    (rule "applyEqReverse" (formula "82") (term "1") (ifseqformula "4"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "eqSymm" (formula "81"))
                                    (rule "replace_known_left" (formula "3") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "applyEqReverse" (formula "81") (term "1") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "replace_known_left" (formula "2") (term "0,0,0,0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "80")))
                                    (rule "closeFalse" (formula "2"))
                                 )
                                 (branch "CUT: o_0 = null FALSE"
                                     (builtin "One Step Simplification" (formula "82"))
                                    (rule "notRight" (formula "82"))
                                    (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "82"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "replace_known_right" (formula "3") (term "0,0,0,0") (ifseqformula "82"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "82"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "4") (term "0"))
                                    (rule "ifthenelse_negated" (formula "3") (term "0"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0"))
                                    (rule "lenNonNegative" (formula "71") (term "1,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "71"))
                                    (rule "equalityToSeqGetAndSeqLenLeft" (formula "70") (inst "iv=iv"))
                                    (rule "andLeft" (formula "70"))
                                    (rule "lenOfSeqSub" (formula "70") (term "0"))
                                    (rule "polySimp_elimSub" (formula "70") (term "1,0"))
                                    (rule "times_zero_2" (formula "70") (term "1,1,0"))
                                    (rule "add_zero_right" (formula "70") (term "1,0"))
                                     (builtin "One Step Simplification" (formula "70"))
                                    (rule "eqSymm" (formula "70") (term "1"))
                                    (rule "lenOfSeqSub" (formula "71") (term "1,1,0,0"))
                                    (rule "polySimp_elimSub" (formula "71") (term "1,1,1,0,0"))
                                    (rule "times_zero_2" (formula "71") (term "1,1,1,1,0,0"))
                                    (rule "add_zero_right" (formula "71") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "70") (term "0"))
                                    (rule "add_zero_right" (formula "70") (term "0,0"))
                                    (rule "polySimp_mulComm0" (formula "70") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "71") (term "0,1,1,0,0"))
                                    (rule "add_zero_right" (formula "71") (term "0,0,1,1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,1,1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "71") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_commuteLeq" (formula "71") (term "0,0,0"))
                                    (rule "applyEq" (formula "71") (term "0,0,1,0") (ifseqformula "72"))
                                     (builtin "One Step Simplification" (formula "71"))
                                    (rule "true_left" (formula "71"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "70") (term "0"))
                                    (rule "polySimp_mulLiterals" (formula "70") (term "0,0"))
                                    (rule "polySimp_elimOne" (formula "70") (term "0,0"))
                                    (rule "cut_direct" (formula "23") (term "0,0"))
                                    (branch "CUT: vals = cols TRUE"
                                        (builtin "One Step Simplification" (formula "24"))
                                       (rule "applyEq" (formula "71") (term "1,0,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "72") (term "1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "70") (term "1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "68") (term "0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "74") (term "1,0,1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "72") (term "1,0,2,0") (ifseqformula "23"))
                                       (rule "lenOfSeqSubEQ" (formula "71") (term "0,1") (ifseqformula "72"))
                                        (builtin "One Step Simplification" (formula "71"))
                                       (rule "polySimp_elimSub" (formula "71") (term "0,1,1"))
                                       (rule "mul_literals" (formula "71") (term "1,0,1,1"))
                                       (rule "add_zero_right" (formula "71") (term "0,1,1"))
                                       (rule "lenOfSeqSubEQ" (formula "70") (term "1,1") (ifseqformula "72"))
                                       (rule "polySimp_elimSub" (formula "70") (term "1,1,1"))
                                       (rule "times_zero_2" (formula "70") (term "1,1,1,1"))
                                       (rule "add_zero_right" (formula "70") (term "1,1,1"))
                                       (rule "polySimp_homoEq" (formula "70"))
                                       (rule "polySimp_addComm1" (formula "70") (term "0"))
                                       (rule "lenOfSeqSubEQ" (formula "73") (term "0") (ifseqformula "72"))
                                       (rule "polySimp_elimSub" (formula "73") (term "1,0"))
                                       (rule "times_zero_2" (formula "73") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "73") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,1"))
                                       (rule "add_zero_right" (formula "71") (term "0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "70") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "70") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "73") (term "0,0"))
                                       (rule "add_zero_right" (formula "73") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "73") (term "1,0,0,0"))
                                       (rule "applyEq" (formula "82") (term "0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "72") (term "1,1") (ifseqformula "23"))
                                       (rule "applyEq" (formula "53") (term "0,0,1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "73") (term "1,0,0") (ifseqformula "23"))
                                       (rule "applyEq" (formula "81") (term "1,1") (ifseqformula "23"))
                                       (rule "applyEq" (formula "71") (term "1") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "37") (term "1,1,0,0") (ifseqformula "71"))
                                       (rule "polySimp_elimSub" (formula "37") (term "1,1,1,0,0"))
                                       (rule "mul_literals" (formula "37") (term "1,1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "1,1,1,0,0"))
                                       (rule "lenOfSeqSubEQ" (formula "48") (term "0") (ifseqformula "71"))
                                       (rule "polySimp_elimSub" (formula "48") (term "1,0"))
                                       (rule "mul_literals" (formula "48") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "48") (term "1,0"))
                                       (rule "lenOfSeqSubEQ" (formula "35") (term "0") (ifseqformula "71"))
                                       (rule "polySimp_elimSub" (formula "35") (term "1,0"))
                                       (rule "mul_literals" (formula "35") (term "1,1,0"))
                                       (rule "add_zero_right" (formula "35") (term "1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "37") (term "0,1,1,0,0"))
                                       (rule "add_zero_right" (formula "37") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "37") (term "1,0,0,1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "48") (term "0,0"))
                                       (rule "add_zero_right" (formula "48") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "48") (term "1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "35") (term "0,0"))
                                       (rule "add_zero_right" (formula "35") (term "0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "35") (term "1,0,0,0"))
                                       (rule "applyEq" (formula "68") (term "0,0,1,0,0,1,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "68") (term "0,1,0,0,1,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "68") (term "1,0,1,0,0,1,0"))
                                       (rule "mul_literals" (formula "68") (term "1,1,0,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "68") (term "1,0,1,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "68") (term "0,0,1,0,0,1,0"))
                                       (rule "add_zero_right" (formula "68") (term "0,0,0,1,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,0,1,0,0,1,0"))
                                       (rule "applyEq" (formula "69") (term "0,0,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "69") (term "0,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "69") (term "1,0,0"))
                                       (rule "mul_literals" (formula "69") (term "1,1,0,0"))
                                       (rule "add_zero_right" (formula "69") (term "1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "69") (term "0,0,0"))
                                       (rule "add_zero_right" (formula "69") (term "0,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,0,0"))
                                       (rule "applyEq" (formula "71") (term "0,1,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "71") (term "1,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "71") (term "1,1,0"))
                                       (rule "times_zero_2" (formula "71") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "71") (term "1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "71") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "71") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,1,0"))
                                       (rule "applyEq" (formula "72") (term "0,1,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "72") (term "1,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "72") (term "1,1,0"))
                                       (rule "mul_literals" (formula "72") (term "1,1,1,0"))
                                       (rule "add_zero_right" (formula "72") (term "1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "72") (term "0,1,0"))
                                       (rule "add_zero_right" (formula "72") (term "0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "72") (term "1,0,0,1,0"))
                                       (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,1") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "69") (term "0,1,0,0,0,1") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "69") (term "1,0,1,0,0,0,1"))
                                       (rule "mul_literals" (formula "69") (term "1,1,0,1,0,0,0,1"))
                                       (rule "add_zero_right" (formula "69") (term "1,0,1,0,0,0,1"))
                                       (rule "inEqSimp_ltToLeq" (formula "69") (term "0,0,1,0,0,0,1"))
                                       (rule "add_zero_right" (formula "69") (term "0,0,0,1,0,0,0,1"))
                                       (rule "polySimp_mulComm0" (formula "69") (term "1,0,0,0,1,0,0,0,1"))
                                       (rule "applyEq" (formula "71") (term "0,0,1,0,0,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "71") (term "0,1,0,0,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "71") (term "1,0,1,0,0,0"))
                                       (rule "mul_literals" (formula "71") (term "1,1,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "71") (term "1,0,1,0,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "71") (term "0,0,1,0,0,0"))
                                       (rule "add_zero_right" (formula "71") (term "0,0,0,1,0,0,0"))
                                       (rule "polySimp_mulComm0" (formula "71") (term "1,0,0,0,1,0,0,0"))
                                       (rule "applyEq" (formula "68") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "lenOfSeqSubEQ" (formula "68") (term "1,1,0") (ifseqformula "70"))
                                       (rule "polySimp_elimSub" (formula "68") (term "1,1,1,0"))
                                       (rule "mul_literals" (formula "68") (term "1,1,1,1,0"))
                                       (rule "add_zero_right" (formula "68") (term "1,1,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "68") (term "0,1,1,0"))
                                       (rule "add_zero_right" (formula "68") (term "0,0,1,1,0"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,1,0"))
                                       (rule "applyEq" (formula "70") (term "0,2,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "69") (term "0,0,1,1") (ifseqformula "24"))
                                       (rule "applyEq" (formula "69") (term "0,1,0,1,0,0,0,1") (ifseqformula "24"))
                                       (rule "applyEq" (formula "71") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "69") (term "0,1,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "68") (term "0,1,1,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "68") (term "0,0,1,0,0,1,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "36") (term "0,1,1,1,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "72") (term "0,0,1,0,0,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "71") (term "0,0,1,0,0,0,1,0,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "71") (term "0,1,0,1,0,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "72") (term "0,1,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "36") (term "0,0,1,0,0,1,1,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "68") (term "0,0,1,0,0,0,1,0,0,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "71") (term "0,0,1,0,0,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "47") (term "0,0,1,0,0,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "68") (term "0,1,0,1,0,0,1,0") (ifseqformula "24"))
                                       (rule "applyEq" (formula "69") (term "0,0,1,0,0,0,1,0,0,0,1") (ifseqformula "24"))
                                       (rule "applyEq" (formula "47") (term "0,1,0") (ifseqformula "24"))
                                       (rule "polySimp_sepPosMonomial" (formula "68"))
                                       (rule "polySimp_mulComm0" (formula "68") (term "1"))
                                       (rule "polySimp_rightDist" (formula "68") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "1,1"))
                                       (rule "mul_literals" (formula "68") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "68") (term "1,1"))
                                       (rule "applyEq" (formula "71") (term "0") (ifseqformula "68"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "69") (term "0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "69") (term "0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "69") (term "0,0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "72") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "72") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "72") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "36") (term "0,1,1,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "0,0,1,1,0,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "0,0,1,1,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "47") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "47") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "47") (term "0,0,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "69") (term "0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "69") (term "0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "69") (term "0,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,0,1,0"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,0,0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "71"))
                                       (rule "mul_literals" (formula "71") (term "1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "69") (term "0,0,0,0,1"))
                                       (rule "polySimp_mulLiterals" (formula "69") (term "0,0,0,0,0,1"))
                                       (rule "polySimp_elimOne" (formula "69") (term "0,0,0,0,0,1"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "68") (term "0,0,0,0"))
                                       (rule "polySimp_mulLiterals" (formula "68") (term "0,0,0,0,0"))
                                       (rule "polySimp_elimOne" (formula "68") (term "0,0,0,0,0"))
                                       (rule "getOfSeqSubEQ" (formula "53") (term "0") (ifseqformula "70"))
                                       (rule "add_zero_right" (formula "53") (term "1,1,0"))
                                       (rule "polySimp_elimSub" (formula "53") (term "1,1,0,0"))
                                       (rule "times_zero_2" (formula "53") (term "1,1,1,0,0"))
                                       (rule "add_zero_right" (formula "53") (term "1,1,0,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "53") (term "1,0,0"))
                                       (rule "polySimp_mulComm0" (formula "53") (term "1,0,0,1,0,0"))
                                       (rule "polySimp_addComm1" (formula "53") (term "0,1,0,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "53") (term "0,0,0"))
                                       (rule "replace_known_left" (formula "53") (term "0,0,0") (ifseqformula "45"))
                                        (builtin "One Step Simplification" (formula "53"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "53") (term "0,0"))
                                       (rule "polySimp_mulLiterals" (formula "53") (term "0,0,0"))
                                       (rule "polySimp_elimOne" (formula "53") (term "0,0,0"))
                                       (rule "getOfSeqSubEQ" (formula "36") (term "0,0,0,0,1,0") (ifseqformula "70"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0,0,0,0,1,0"))
                                       (rule "polySimp_elimSub" (formula "36") (term "1,1,0,0,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "36") (term "1,1,1,0,0,0,0,0,1,0"))
                                       (rule "add_zero_right" (formula "36") (term "1,1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_ltToLeq" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,0,0,1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_commuteLeq" (formula "36") (term "0,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "36") (term "1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_mulComm0" (formula "36") (term "1,1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_rightDist" (formula "36") (term "1,1,0,0,0,0,0,1,0"))
                                       (rule "mul_literals" (formula "36") (term "0,1,1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1,0,0,0,0,0,1,0"))
                                       (rule "polySimp_elimOne" (formula "36") (term "1,1,1,0,0,0,0,0,1,0"))
                                       (rule "inEqSimp_notGeq" (formula "69") (term "0,1"))
                                       (rule "mul_literals" (formula "69") (term "1,0,0,0,1"))
                                       (rule "add_literals" (formula "69") (term "0,0,0,1"))
                                       (rule "add_zero_left" (formula "69") (term "0,0,1"))
                                       (rule "cut_direct" (formula "52") (term "0,0,0"))
                                       (branch "CUT: result_1.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "cut_direct" (formula "57") (term "0,0,0"))
                                          (branch "CUT: result_2.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                             (rule "castedGetAny" (formula "60") (term "0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "42"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "distr_forallAnd" (formula "30") (term "0"))
                                             (rule "commute_or" (formula "74"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "89") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "88"))
                                                (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "88") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "87")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "89") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "88"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "87")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                          (branch "CUT: result_2.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                             (rule "castedGetAny" (formula "60") (term "0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "0,0"))
                                             (rule "commute_or" (formula "15") (term "1,0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "42"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "distr_forallAnd" (formula "30") (term "0"))
                                             (rule "commute_or" (formula "74"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "90") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "89"))
                                                (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "89") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "88")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "90") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "89"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "88")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_1.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                          (rule "castedGetAny" (formula "60") (term "0"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "cut_direct" (formula "57") (term "0,0,0"))
                                          (branch "CUT: result_2.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "42"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "distr_forallAnd" (formula "30") (term "0"))
                                             (rule "commute_or" (formula "74"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "90") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "89"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "88")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "90") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "89"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "88")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                          (branch "CUT: result_2.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "27") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "28") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "25") (term "0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "70"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "55"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "42"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "distr_forallAnd" (formula "30") (term "0"))
                                             (rule "commute_or" (formula "74"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "91") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "90"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "89")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "91") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "90"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "77"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "89")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                    )
                                    (branch "CUT: vals = cols FALSE"
                                        (builtin "One Step Simplification" (formula "23"))
                                       (rule "true_left" (formula "23"))
                                       (rule "cut_direct" (formula "52") (term "0,0,0"))
                                       (branch "CUT: result_1.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "53"))
                                          (rule "true_left" (formula "53"))
                                          (rule "seqGetAlphaCast" (formula "72") (term "0"))
                                          (rule "castDel" (formula "72") (term "0"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "true_left" (formula "72"))
                                          (rule "cut_direct" (formula "57") (term "0,0,0"))
                                          (branch "CUT: result_2.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                             (rule "castedGetAny" (formula "60") (term "0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "lenNonNegative" (formula "68") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "68"))
                                             (rule "applyEq" (formula "68") (term "0") (ifseqformula "69"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "68"))
                                             (rule "mul_literals" (formula "68") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "68") (ifseqformula "72"))
                                             (rule "leq_literals" (formula "68") (term "0"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "true_left" (formula "68"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or" (formula "69"))
                                             (rule "inEqSimp_or_weaken1" (formula "69"))
                                             (rule "add_zero_right" (formula "69") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "71")))
                                             (rule "true_left" (formula "69"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                             (rule "commute_or" (formula "15") (term "1,0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0"))
                                             (rule "commute_or_2" (formula "64") (term "0,0"))
                                             (rule "commute_or_2" (formula "64") (term "0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "17") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_next,
     singleton(vals, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "commute_and" (formula "32") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "26") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "23") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0"))
                                             (rule "distr_forallAnd" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0"))
                                             (rule "distr_forallAnd" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0"))
                                             (rule "distr_forallAnd" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0"))
                                             (rule "distr_forallAnd" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "96") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "95"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "94")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "96") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "95"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "95") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "94")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                          (branch "CUT: result_2.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                             (rule "castedGetAny" (formula "60") (term "0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "true_left" (formula "60"))
                                             (rule "lenNonNegative" (formula "62") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "62"))
                                             (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                             (rule "lenNonNegative" (formula "68") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "68"))
                                             (rule "applyEq" (formula "68") (term "0") (ifseqformula "69"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "68"))
                                             (rule "mul_literals" (formula "68") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "68") (ifseqformula "72"))
                                             (rule "leq_literals" (formula "68") (term "0"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "true_left" (formula "68"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or" (formula "69"))
                                             (rule "inEqSimp_or_weaken1" (formula "69"))
                                             (rule "add_literals" (formula "69") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "71")))
                                             (rule "true_left" (formula "69"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                             (rule "commute_or" (formula "15") (term "1,0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0"))
                                             (rule "commute_or_2" (formula "64") (term "0,0"))
                                             (rule "commute_or_2" (formula "64") (term "0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "17") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_next,
     singleton(vals, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "26") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "23") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0"))
                                             (rule "distr_forallAnd" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0"))
                                             (rule "distr_forallAnd" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0"))
                                             (rule "distr_forallAnd" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0"))
                                             (rule "distr_forallAnd" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "cnf_rightDist" (formula "36") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0"))
                                             (rule "distr_forallAnd" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "96"))
                                                (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "96") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "95")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "96"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "95")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                       (branch "CUT: result_1.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "52"))
                                          (rule "seqGetAlphaCast" (formula "72") (term "0"))
                                          (rule "castDel" (formula "72") (term "0"))
                                           (builtin "One Step Simplification" (formula "72"))
                                          (rule "true_left" (formula "72"))
                                          (rule "lenNonNegative" (formula "62") (term "0"))
                                          (rule "inEqSimp_commuteLeq" (formula "62"))
                                          (rule "applyEq" (formula "62") (term "0") (ifseqformula "63"))
                                          (rule "seqGetAlphaCast" (formula "60") (term "0"))
                                          (rule "castedGetAny" (formula "60") (term "0"))
                                           (builtin "One Step Simplification" (formula "60"))
                                          (rule "true_left" (formula "60"))
                                          (rule "cut_direct" (formula "57") (term "0,0,0"))
                                          (branch "CUT: result_2.<created> = TRUE TRUE"
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "true_left" (formula "58"))
                                             (rule "lenNonNegative" (formula "68") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "68"))
                                             (rule "applyEq" (formula "68") (term "0") (ifseqformula "69"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "68"))
                                             (rule "mul_literals" (formula "68") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "68") (ifseqformula "72"))
                                             (rule "leq_literals" (formula "68") (term "0"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "true_left" (formula "68"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or" (formula "69"))
                                             (rule "inEqSimp_or_weaken1" (formula "69"))
                                             (rule "add_literals" (formula "69") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "71")))
                                             (rule "true_left" (formula "69"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                             (rule "commute_or" (formula "15") (term "1,0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0"))
                                             (rule "commute_or_2" (formula "64") (term "0,0"))
                                             (rule "commute_or_2" (formula "64") (term "0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "11") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "17") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_next,
     singleton(vals, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "26") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "23") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "16") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "16") (term "0"))
                                             (rule "distr_forallAnd" (formula "16"))
                                             (rule "andLeft" (formula "16"))
                                             (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0"))
                                             (rule "distr_forallAnd" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0"))
                                             (rule "distr_forallAnd" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "cnf_rightDist" (formula "24") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "24") (term "0"))
                                             (rule "distr_forallAnd" (formula "24"))
                                             (rule "andLeft" (formula "24"))
                                             (rule "cnf_rightDist" (formula "36") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0"))
                                             (rule "distr_forallAnd" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "96"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "95")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "96"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "applyEqReverse" (formula "8") (term "1,0") (ifseqformula "7"))
                                                (rule "hideAuxiliaryEq" (formula "7"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "95")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                          (branch "CUT: result_2.<created> = TRUE FALSE"
                                              (builtin "One Step Simplification" (formula "57"))
                                             (rule "lenNonNegative" (formula "68") (term "0"))
                                             (rule "inEqSimp_commuteLeq" (formula "68"))
                                             (rule "applyEq" (formula "68") (term "0") (ifseqformula "69"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "68"))
                                             (rule "mul_literals" (formula "68") (term "1"))
                                             (rule "inEqSimp_subsumption1" (formula "68") (ifseqformula "72"))
                                             (rule "leq_literals" (formula "68") (term "0"))
                                              (builtin "One Step Simplification" (formula "68"))
                                             (rule "true_left" (formula "68"))
                                             (rule "seqGetAlphaCast" (formula "61") (term "0"))
                                             (rule "castedGetAny" (formula "61") (term "0"))
                                              (builtin "One Step Simplification" (formula "61"))
                                             (rule "true_left" (formula "61"))
                                             (rule "commute_or_2" (formula "8") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "17") (term "0,0,0"))
                                             (rule "commute_or" (formula "69"))
                                             (rule "inEqSimp_or_weaken1" (formula "69"))
                                             (rule "add_zero_right" (formula "69") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "69") (ifInst ""  (formula "71")))
                                             (rule "true_left" (formula "69"))
                                             (rule "commute_or_2" (formula "20") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "25") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "6") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "21") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "22") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "26") (term "0,0,0"))
                                             (rule "commute_or" (formula "64") (term "0,0,0"))
                                             (rule "commute_or" (formula "63") (term "0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_and_2" (formula "37") (term "0,1,0"))
                                             (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "11") (term "1,0,0,0,0"))
                                             (rule "commute_and" (formula "15") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "11") (term "1,0,0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0,0"))
                                             (rule "commute_or_2" (formula "65") (term "0"))
                                             (rule "commute_or_2" (formula "64") (term "0,0"))
                                             (rule "commute_or_2" (formula "64") (term "0"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                             (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                             (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "17") (term "0,0,0,0"))
                                             (rule "commute_or_2" (formula "15") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "26") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "19") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "23") (term "0"))
                                             (rule "distr_forallAnd" (formula "23"))
                                             (rule "andLeft" (formula "23"))
                                             (rule "commute_or" (formula "24") (term "0,0"))
                                             (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "18") (term "0,0,0,0"))
                                             (rule "shift_paren_or" (formula "28") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "8") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "17") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_add<<anonHeapFunction>>"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "3"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "commute_and" (formula "13") (term "1,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_next,
     singleton(vals, java.util.Collection::$seq),
     anon_heap_add<<anonHeapFunction>>)"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "57"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "44"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "44"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_add"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "74"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "59"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1") (ifseqformula "46"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,0,0,0,0,0,1,0") (ifseqformula "46"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "andLeft" (formula "1"))
                                             (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                             (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                             (rule "true_left" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                             (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                             (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "2"))
                                             (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                             (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "2") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "nnf_notOr" (formula "1") (term "0,0,0,1,0,0,0,0,0"))
                                             (rule "commute_and" (formula "19") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "26") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "27") (term "1,0,0,0"))
                                             (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                             (rule "commute_and" (formula "23") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "33") (term "1,0,0,0"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "20") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "20") (term "0"))
                                             (rule "distr_forallAnd" (formula "20"))
                                             (rule "andLeft" (formula "20"))
                                             (rule "commute_and" (formula "25") (term "0,1,0,0,0"))
                                             (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "18") (term "0"))
                                             (rule "distr_forallAnd" (formula "18"))
                                             (rule "andLeft" (formula "18"))
                                             (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                             (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                             (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                             (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0"))
                                             (rule "distr_forallAnd" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "13") (term "0"))
                                             (rule "distr_forallAnd" (formula "13"))
                                             (rule "andLeft" (formula "13"))
                                             (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "12") (term "0"))
                                             (rule "distr_forallAnd" (formula "12"))
                                             (rule "andLeft" (formula "12"))
                                             (rule "cnf_rightDist" (formula "26") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "26") (term "0"))
                                             (rule "distr_forallAnd" (formula "26"))
                                             (rule "andLeft" (formula "26"))
                                             (rule "cnf_rightDist" (formula "17") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "17") (term "0"))
                                             (rule "distr_forallAnd" (formula "17"))
                                             (rule "andLeft" (formula "17"))
                                             (rule "cnf_rightDist" (formula "36") (term "0,0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0,0"))
                                             (rule "distr_forallAnd" (formula "36") (term "0"))
                                             (rule "distr_forallAnd" (formula "36"))
                                             (rule "andLeft" (formula "36"))
                                             (rule "ifthenelse_split" (formula "9") (term "0"))
                                             (branch "o_0.<created> = TRUE TRUE"
                                                (rule "applyEqReverse" (formula "98") (term "1") (ifseqformula "10"))
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "10"))
                                                (rule "hideAuxiliaryEq" (formula "10"))
                                                (rule "eqSymm" (formula "97"))
                                                (rule "replace_known_left" (formula "8") (term "0,0,0,0,0") (ifseqformula "9"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "8"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "96")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                             (branch "o_0.<created> = TRUE FALSE"
                                                (rule "applyEqReverse" (formula "98") (term "1") (ifseqformula "9"))
                                                (rule "applyEqReverse" (formula "7") (term "1,0") (ifseqformula "9"))
                                                (rule "hideAuxiliaryEq" (formula "9"))
                                                (rule "eqSymm" (formula "97"))
                                                (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "7"))
                                                (rule "replace_known_right" (formula "8") (term "0,0,0,0,0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "82"))
                                                 (builtin "One Step Simplification" (formula "6"))
                                                (rule "replace_known_left" (formula "8") (term "1,0,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "8"))
                                                (rule "applyEqReverse" (formula "97") (term "1") (ifseqformula "8"))
                                                (rule "hideAuxiliaryEq" (formula "8"))
                                                (rule "replace_known_left" (formula "7") (term "1,0,0") (ifseqformula "6"))
                                                 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "96")))
                                                (rule "closeFalse" (formula "7"))
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                           (branch "Case 2"
                              (rule "selectOfAnonEQ" (formula "78") (term "0,1,0") (ifseqformula "63"))
                               (builtin "One Step Simplification" (formula "78") (ifInst ""  (formula "75")))
                              (rule "ifthenelse_split" (formula "78") (term "0,1,0"))
                              (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE TRUE"
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "selectOfAnonEQ" (formula "79") (term "0,0,0") (ifseqformula "64"))
                                  (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "74")))
                                 (rule "elementOfSingleton" (formula "79") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "79"))
                                 (rule "ifthenelse_negated" (formula "79") (term "0,0,0"))
                                 (rule "ifthenelse_split" (formula "79") (term "0,0,0"))
                                 (branch "result_91.<created>@heapAfter_next = TRUE TRUE"
                                    (rule "selectOfAnonEQ" (formula "2") (term "0,0,1") (ifseqformula "50"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                    (rule "ifthenelse_negated" (formula "2") (term "0,0,1"))
                                    (rule "selectOfAnon" (formula "2") (term "1,0,0,1"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "77")))
                                    (rule "ifthenelse_negated" (formula "2") (term "1,0,0,1"))
                                    (rule "ifthenelse_split" (formula "2") (term "0,0,1"))
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                       (rule "ifthenelse_split" (formula "3") (term "0,0,1"))
                                       (branch "cols.<created>@heapAfter_iterator = TRUE TRUE"
                                          (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "79")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                          (rule "selectCreatedOfAnonEQ" (formula "4") (term "0,0,1") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "31")))
                                          (rule "selectOfAnonEQ" (formula "3") (term "0") (ifseqformula "38"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "79")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                          (rule "selectOfAnonEQ" (formula "81") (term "0,0,0") (ifseqformula "51"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")))
                                          (rule "selectOfAnon" (formula "81") (term "2,0,0,0"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")))
                                          (rule "ifthenelse_split" (formula "81") (term "2,0,0,0"))
                                          (branch " (result_91, java.util.Iterator::$index) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                             (rule "elementOfUnion" (formula "1") (term "0"))
                                             (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "ifthenelse_split" (formula "81") (term "0,0,0"))
                                             (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "51"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                                (rule "ifthenelse_negated" (formula "1") (term "0"))
                                                (rule "ifthenelse_split" (formula "1") (term "0"))
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                                   (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")) (ifInst ""  (formula "75")) (ifInst ""  (formula "39")))
                                                   (rule "precOfInt" (formula "80") (userinteraction))
                                                   (rule "andRight" (formula "80"))
                                                   (branch
                                                      (rule "true_left" (formula "1"))
                                                      (rule "eqSymm" (formula "1"))
                                                      (rule "replace_known_left" (formula "20") (term "0,0") (ifseqformula "1"))
                                                       (builtin "One Step Simplification" (formula "20"))
                                                      (rule "inEqSimp_leqRight" (formula "79"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                                      (rule "polySimp_mulAssoc" (formula "1") (term "0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "1") (term "0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "62") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "69"))
                                                      (rule "polySimp_rightDist" (formula "69") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "69") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "69") (term "0,0"))
                                                      (rule "add_literals" (formula "69") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "69") (term "0,0"))
                                                      (rule "polySimp_pullOutFactor2" (formula "69") (term "0"))
                                                      (rule "add_literals" (formula "69") (term "1,0"))
                                                      (rule "times_zero_1" (formula "69") (term "0"))
                                                      (rule "leq_literals" (formula "69"))
                                                      (rule "true_left" (formula "69"))
                                                      (rule "inEqSimp_ltToLeq" (formula "63") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "63") (term "1,0,0,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "58"))
                                                      (rule "polySimp_mulComm0" (formula "58") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "58") (term "0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "34") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "34") (term "1,0,0,0,0,0,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "46"))
                                                      (rule "polySimp_mulComm0" (formula "46") (term "1,0,0"))
                                                      (rule "polySimp_addComm1" (formula "46") (term "0"))
                                                      (rule "applyEq" (formula "65") (term "0,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "28") (term "1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "49") (term "0,0,1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "67") (term "1,1") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "67") (term "1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "68") (term "1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "66") (term "1,0,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "77") (term "0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "66") (term "1,0,1,1") (ifseqformula "2"))
                                                      (rule "lenOfSeqSubEQ" (formula "66") (term "1,1") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "66") (term "1,1,1"))
                                                      (rule "mul_literals" (formula "66") (term "1,1,1,1"))
                                                      (rule "add_zero_right" (formula "66") (term "1,1,1"))
                                                      (rule "polySimp_homoEq" (formula "66"))
                                                      (rule "polySimp_addComm1" (formula "66") (term "0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "66") (term "0,1,0"))
                                                      (rule "add_zero_right" (formula "66") (term "0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "66") (term "1,0,0,1,0"))
                                                      (rule "applyEq" (formula "67") (term "1,0,2,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "68") (term "1,0,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "1") (term "1,0,0") (ifseqformula "52"))
                                                      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                      (rule "add_literals" (formula "1") (term "0,0,0"))
                                                      (rule "add_zero_left" (formula "1") (term "0,0"))
                                                      (rule "applyEq" (formula "67") (term "1") (ifseqformula "21"))
                                                      (rule "lenOfSeqSubEQ" (formula "45") (term "0,1,0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "45") (term "1,0,1,0"))
                                                      (rule "mul_literals" (formula "45") (term "1,1,0,1,0"))
                                                      (rule "add_zero_right" (formula "45") (term "1,0,1,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "33") (term "1,0,1,0,0,0,0,0"))
                                                      (rule "times_zero_2" (formula "33") (term "1,1,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "33") (term "1,0,1,0,0,0,0,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "70") (term "0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "70") (term "1,0"))
                                                      (rule "mul_literals" (formula "70") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "70") (term "1,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "31") (term "0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "31") (term "1,0"))
                                                      (rule "mul_literals" (formula "31") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "31") (term "1,0"))
                                                      (rule "lenOfSeqSubEQ" (formula "43") (term "0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "43") (term "1,0"))
                                                      (rule "mul_literals" (formula "43") (term "1,1,0"))
                                                      (rule "add_zero_right" (formula "43") (term "1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "45") (term "0,0,1,0"))
                                                      (rule "add_zero_right" (formula "45") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "45") (term "1,0,0,0,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "33") (term "0,0,1,0,0,0,0,0"))
                                                      (rule "add_zero_right" (formula "33") (term "0,0,0,1,0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "70") (term "0,0"))
                                                      (rule "add_zero_right" (formula "70") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "70") (term "1,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0"))
                                                      (rule "add_zero_right" (formula "31") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "43") (term "0,0"))
                                                      (rule "add_zero_right" (formula "43") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "43") (term "1,0,0,0"))
                                                      (rule "applyEq" (formula "68") (term "0,1,0") (ifseqformula "21"))
                                                      (rule "lenOfSeqSubEQ" (formula "68") (term "1,0") (ifseqformula "67"))
                                                      (rule "polySimp_elimSub" (formula "68") (term "1,1,0"))
                                                      (rule "mul_literals" (formula "68") (term "1,1,1,0"))
                                                      (rule "add_zero_right" (formula "68") (term "1,1,0"))
                                                      (rule "inEqSimp_ltToLeq" (formula "68") (term "0,1,0"))
                                                      (rule "add_zero_right" (formula "68") (term "0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "68") (term "1,0,0,1,0"))
                                                      (rule "applyEq" (formula "66") (term "1,0,1,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "67") (term "0,2,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "66") (term "1,0,0,1,0,0,1,0") (ifseqformula "2"))
                                                      (rule "applyEq" (formula "70") (term "0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "68") (term "0,1,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "33") (term "0,0,1,0,0,0,1,0,0,0,0,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "45") (term "0,0,1,0,0,0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "70") (term "0,0,1,0,0,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "68") (term "0,0,1,0,0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "33") (term "0,1,0,1,0,0,0,0,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "43") (term "0,0,1,0,0,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "66") (term "0,0,1,0,0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "66") (term "0,1,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "43") (term "0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "45") (term "0,1,0,1,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "31") (term "0,0,1,0,0,0") (ifseqformula "21"))
                                                      (rule "applyEq" (formula "31") (term "0,1,0") (ifseqformula "21"))
                                                      (rule "polySimp_sepPosMonomial" (formula "66"))
                                                      (rule "polySimp_mulComm0" (formula "66") (term "1"))
                                                      (rule "polySimp_rightDist" (formula "66") (term "1"))
                                                      (rule "mul_literals" (formula "66") (term "0,1"))
                                                      (rule "polySimp_mulLiterals" (formula "66") (term "1,1"))
                                                      (rule "polySimp_elimOne" (formula "66") (term "1,1"))
                                                      (rule "applyEq" (formula "43") (term "0") (ifseqformula "66"))
                                                      (rule "inEqSimp_homoInEq1" (formula "43"))
                                                      (rule "polySimp_mulComm0" (formula "43") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "43") (term "1,0"))
                                                      (rule "mul_literals" (formula "43") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "43") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "43") (term "0,0"))
                                                      (rule "applyEq" (formula "45") (term "0,1,0") (ifseqformula "66"))
                                                      (rule "polySimp_mulComm0" (formula "45") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "45") (term "1,0"))
                                                      (rule "mul_literals" (formula "45") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "45") (term "0"))
                                                      (rule "polySimp_addComm1" (formula "45") (term "0,0"))
                                                      (rule "add_literals" (formula "45") (term "0,0,0"))
                                                      (rule "applyEq" (formula "31") (term "0") (ifseqformula "66"))
                                                      (rule "applyEq" (formula "68") (term "1,0") (ifseqformula "66"))
                                                      (rule "applyEq" (formula "70") (term "0") (ifseqformula "66"))
                                                      (rule "polySimp_homoEq" (formula "70"))
                                                      (rule "polySimp_mulComm0" (formula "70") (term "1,0"))
                                                      (rule "polySimp_rightDist" (formula "70") (term "1,0"))
                                                      (rule "mul_literals" (formula "70") (term "0,1,0"))
                                                      (rule "polySimp_addAssoc" (formula "70") (term "0"))
                                                      (rule "polySimp_addComm0" (formula "70") (term "0,0"))
                                                      (rule "applyEq" (formula "33") (term "0,1,0,0,0,0,0") (ifseqformula "66"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "33") (term "0,0,0,0,0"))
                                                      (rule "add_literals" (formula "33") (term "0,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                                      (rule "polySimp_sepNegMonomial" (formula "70"))
                                                      (rule "polySimp_mulLiterals" (formula "70") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "70") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "62") (term "0,0,0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "62") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "62") (term "1,0,0,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "62") (term "1,1,0,0,0,0,0"))
                                                      (rule "mul_literals" (formula "62") (term "0,1,0,0,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "62") (term "1,1,0,0,0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "57"))
                                                      (rule "polySimp_mulLiterals" (formula "57") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "57") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0,1,0"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0,1,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0,1,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,0,1,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0,1,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0,1,0"))
                                                      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                                                      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "66") (term "0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "66") (term "0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "66") (term "0,0,0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "43"))
                                                      (rule "polySimp_mulLiterals" (formula "43") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "43") (term "0"))
                                                      (rule "inEqSimp_sepNegMonomial0" (formula "45"))
                                                      (rule "polySimp_mulLiterals" (formula "45") (term "0"))
                                                      (rule "polySimp_elimOne" (formula "45") (term "0"))
                                                      (rule "inEqSimp_sepPosMonomial1" (formula "31"))
                                                      (rule "mul_literals" (formula "31") (term "1"))
                                                      (rule "inEqSimp_sepPosMonomial0" (formula "33") (term "0,0,0"))
                                                      (rule "polySimp_mulComm0" (formula "33") (term "1,0,0,0"))
                                                      (rule "polySimp_rightDist" (formula "33") (term "1,0,0,0"))
                                                      (rule "mul_literals" (formula "33") (term "0,1,0,0,0"))
                                                      (rule "polySimp_mulLiterals" (formula "33") (term "1,1,0,0,0"))
                                                      (rule "polySimp_elimOne" (formula "33") (term "1,1,0,0,0"))
                                                      (rule "inEqSimp_contradEq3" (formula "70") (ifseqformula "1"))
                                                      (rule "polySimp_rightDist" (formula "70") (term "1,0,0"))
                                                      (rule "mul_literals" (formula "70") (term "0,1,0,0"))
                                                      (rule "polySimp_addAssoc" (formula "70") (term "0,0"))
                                                      (rule "polySimp_addComm0" (formula "70") (term "0,0,0"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "70") (term "0,0"))
                                                      (rule "add_literals" (formula "70") (term "1,1,0,0"))
                                                      (rule "times_zero_1" (formula "70") (term "1,0,0"))
                                                      (rule "add_zero_right" (formula "70") (term "0,0"))
                                                      (rule "qeq_literals" (formula "70") (term "0"))
                                                       (builtin "One Step Simplification" (formula "70"))
                                                      (rule "false_right" (formula "70"))
                                                      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "43"))
                                                      (rule "andLeft" (formula "1"))
                                                      (rule "inEqSimp_homoInEq1" (formula "1"))
                                                      (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                      (rule "add_literals" (formula "1") (term "1,1,0"))
                                                      (rule "times_zero_1" (formula "1") (term "1,0"))
                                                      (rule "add_zero_right" (formula "1") (term "0"))
                                                      (rule "leq_literals" (formula "1"))
                                                      (rule "closeFalse" (formula "1"))
                                                   )
                                                   (branch
                                                       (opengoal " ")
                                                   )
                                                )
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                   (rule "orRight" (formula "72"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "72") (term "0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "77")) (ifInst ""  (formula "39")))
                                                   (rule "closeTrue" (formula "72"))
                                                )
                                             )
                                             (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                                (rule "orRight" (formula "81"))
                                                (rule "elementOfSingleton" (formula "81"))
                                                 (builtin "One Step Simplification" (formula "81"))
                                                (rule "closeTrue" (formula "81"))
                                             )
                                          )
                                          (branch " (result_91, java.util.Iterator::$index) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                             (rule "orRight" (formula "81"))
                                             (rule "elementOfUnion" (formula "81"))
                                             (rule "orRight" (formula "81"))
                                             (rule "elementOfSingleton" (formula "81"))
                                              (builtin "One Step Simplification" (formula "81"))
                                             (rule "elementOfSingleton" (formula "82"))
                                              (builtin "One Step Simplification" (formula "82"))
                                             (rule "closeTrue" (formula "82"))
                                          )
                                       )
                                       (branch "cols.<created>@heapAfter_iterator = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "79")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                          (rule "selectOfAnonEQ" (formula "72") (term "0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "79")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                          (rule "closeTrue" (formula "72"))
                                       )
                                    )
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                       (rule "orRight" (formula "71"))
                                       (rule "selectOfAnonEQ" (formula "82") (term "0,0,0") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")))
                                       (rule "ifthenelse_split" (formula "82") (term "0,0,0"))
                                       (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                          (rule "elementOfSingleton" (formula "1") (term "0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectOfAnonEQ" (formula "72") (term "0") (ifseqformula "37"))
                                           (builtin "One Step Simplification" (formula "72") (ifInst ""  (formula "80")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                          (rule "closeTrue" (formula "72"))
                                       )
                                       (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                          (rule "orRight" (formula "82"))
                                          (rule "elementOfSingleton" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "closeTrue" (formula "82"))
                                       )
                                    )
                                 )
                                 (branch "result_91.<created>@heapAfter_next = TRUE FALSE"
                                    (rule "selectOfAnonEQ" (formula "1") (term "0,0,1") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "76")))
                                    (rule "ifthenelse_negated" (formula "1") (term "0,0,1"))
                                    (rule "ifthenelse_split" (formula "1") (term "0,0,1"))
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                                       (rule "selectOfAnonEQ" (formula "80") (term "0") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "75")))
                                       (rule "ifthenelse_negated" (formula "80") (term "0"))
                                       (rule "selectOfAnon" (formula "80") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "75")))
                                       (rule "ifthenelse_negated" (formula "80") (term "1,0"))
                                       (rule "ifthenelse_split" (formula "80") (term "1,0"))
                                       (branch "result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                          (rule "ifthenelse_split" (formula "81") (term "0"))
                                          (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                             (rule "close" (formula "82") (ifseqformula "2"))
                                          )
                                          (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                             (rule "orRight" (formula "81"))
                                             (rule "close" (formula "81") (ifseqformula "1"))
                                          )
                                       )
                                       (branch "result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "77")) (ifInst ""  (formula "29")) (ifInst ""  (formula "29")))
                                          (rule "selectOfAnonEQ" (formula "80") (term "0") (ifseqformula "36"))
                                           (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                          (rule "closeTrue" (formula "80"))
                                       )
                                    )
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                       (rule "orRight" (formula "70"))
                                       (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "76")))
                                       (rule "ifthenelse_negated" (formula "81") (term "0"))
                                       (rule "selectOfAnonEQ" (formula "70") (term "0") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "70") (ifInst ""  (formula "78")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                       (rule "closeTrue" (formula "70"))
                                    )
                                 )
                              )
                              (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∨ ¬cols.<created>@heapAfter_next = TRUE FALSE"
                                 (rule "orRight" (formula "78"))
                                 (rule "elementOfSingleton" (formula "78"))
                                  (builtin "One Step Simplification" (formula "78"))
                                 (rule "selectOfAnonEQ" (formula "80") (term "0,0,0") (ifseqformula "63"))
                                  (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "73")))
                                 (rule "elementOfSingleton" (formula "80") (term "0,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "80"))
                                 (rule "ifthenelse_negated" (formula "80") (term "0,0,0"))
                                 (rule "ifthenelse_split" (formula "80") (term "0,0,0"))
                                 (branch "result_91.<created>@heapAfter_next = TRUE TRUE"
                                    (rule "selectOfAnonEQ" (formula "80") (term "0,0") (ifseqformula "49"))
                                     (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "76")))
                                    (rule "ifthenelse_negated" (formula "80") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "80") (term "0,0"))
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "1")))
                                       (rule "selectOfAnonEQ" (formula "82") (term "0,1,0") (ifseqformula "50"))
                                        (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")) (ifInst ""  (formula "1")))
                                       (rule "ifthenelse_split" (formula "82") (term "0,1,0"))
                                       (branch "(cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} TRUE"
                                          (rule "elementOfSingleton" (formula "1"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                       (branch "(cols, java.util.Collection::$seq) ∊ {(result_91, java.util.Iterator::$index)} FALSE"
                                          (rule "elementOfSingleton" (formula "82"))
                                           (builtin "One Step Simplification" (formula "82"))
                                          (rule "selectOfAnonEQ" (formula "2") (term "0") (ifseqformula "50"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "75")))
                                          (rule "ifthenelse_negated" (formula "2") (term "0"))
                                          (rule "selectOfAnonEQ" (formula "82") (term "0,0,0") (ifseqformula "50"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                          (rule "selectOfAnon" (formula "82") (term "0,1,0"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "77")))
                                          (rule "selectOfAnon" (formula "82") (term "2,0,0,0"))
                                           (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "75")))
                                          (rule "ifthenelse_split" (formula "82") (term "0,0,0"))
                                          (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) TRUE"
                                             (rule "elementOfSingleton" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectOfAnonEQ" (formula "83") (term "2,0,1,0") (ifseqformula "37"))
                                              (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "78")) (ifInst ""  (formula "30")))
                                             (rule "ifthenelse_split" (formula "83") (term "0,1,0"))
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE TRUE"
                                                (rule "elementOfUnion" (formula "1") (term "0"))
                                                (rule "elementOfSingleton" (formula "1") (term "1,0"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "elementOfSingleton" (formula "1") (term "0"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "82")))
                                                (rule "ifthenelse_split" (formula "4") (term "0"))
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
                                                   (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "79")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                   (rule "orRight" (formula "73"))
                                                   (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "38"))
                                                    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "81")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                             )
                                             (branch " (cols, java.util.Collection::$seq) ∊ {(vals, java.util.Collection::$seq)} ∪ {(result_91, java.util.Iterator::$index)} ∨ ¬cols.<created>@heapAfter_iterator = TRUE FALSE"
                                                (rule "orRight" (formula "83"))
                                                (rule "elementOfUnion" (formula "83"))
                                                (rule "orRight" (formula "83"))
                                                (rule "elementOfSingleton" (formula "84"))
                                                 (builtin "One Step Simplification" (formula "84"))
                                                (rule "elementOfSingleton" (formula "83"))
                                                 (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "81")))
                                                (rule "ifthenelse_split" (formula "3") (term "0"))
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")))
                                                   (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "78")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                                   (rule "selectCreatedOfAnonEQ" (formula "81") (term "0,0") (ifseqformula "35"))
                                                    (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "28")))
                                                   (rule "true_left" (formula "1"))
                                                   (rule "false_right" (formula "79"))
                                                   (rule "eqSymm" (formula "78"))
                                                   (rule "replace_known_right" (formula "19") (term "0,0") (ifseqformula "78"))
                                                    (builtin "One Step Simplification" (formula "19"))
                                                   (rule "true_left" (formula "19"))
                                                   (rule "precOfInt" (formula "78"))
                                                   (rule "inEqSimp_ltToLeq" (formula "60") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "55"))
                                                   (rule "polySimp_mulComm0" (formula "55") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "55") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "31") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "31") (term "1,0,0,0,0,0,1,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "59") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "59") (term "1,0,0,0,0,0,0,0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "66"))
                                                   (rule "polySimp_rightDist" (formula "66") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "66") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "66") (term "0,0"))
                                                   (rule "add_literals" (formula "66") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "66") (term "0,0"))
                                                   (rule "polySimp_pullOutFactor2" (formula "66") (term "0"))
                                                   (rule "add_literals" (formula "66") (term "1,0"))
                                                   (rule "times_zero_1" (formula "66") (term "0"))
                                                   (rule "leq_literals" (formula "66"))
                                                   (rule "true_left" (formula "66"))
                                                   (rule "inEqSimp_ltToLeq" (formula "43"))
                                                   (rule "polySimp_mulComm0" (formula "43") (term "1,0,0"))
                                                   (rule "polySimp_addComm1" (formula "43") (term "0"))
                                                   (rule "inEqSimp_ltToLeq" (formula "77") (term "1"))
                                                   (rule "polySimp_rightDist" (formula "77") (term "1,0,0,1"))
                                                   (rule "polySimp_mulAssoc" (formula "77") (term "0,1,0,0,1"))
                                                   (rule "polySimp_mulComm0" (formula "77") (term "0,0,1,0,0,1"))
                                                   (rule "polySimp_mulLiterals" (formula "77") (term "0,1,0,0,1"))
                                                   (rule "polySimp_elimOne" (formula "77") (term "0,1,0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "77") (term "0,0,1"))
                                                   (rule "polySimp_addAssoc" (formula "77") (term "0,1"))
                                                   (rule "polySimp_addComm1" (formula "77") (term "0,0,1"))
                                                   (rule "polySimp_pullOutFactor2b" (formula "77") (term "0,1"))
                                                   (rule "add_literals" (formula "77") (term "1,1,0,1"))
                                                   (rule "times_zero_1" (formula "77") (term "1,0,1"))
                                                   (rule "add_zero_right" (formula "77") (term "0,1"))
                                                   (rule "inEqSimp_homoInEq0" (formula "77") (term "0"))
                                                   (rule "mul_literals" (formula "77") (term "1,0,0"))
                                                   (rule "add_zero_right" (formula "77") (term "0,0"))
                                                   (rule "applyEq" (formula "77") (term "0,1,0,1") (ifseqformula "50"))
                                                   (rule "polySimp_pullOutFactor1" (formula "77") (term "0,1"))
                                                   (rule "add_literals" (formula "77") (term "1,0,1"))
                                                   (rule "times_zero_1" (formula "77") (term "0,1"))
                                                   (rule "leq_literals" (formula "77") (term "1"))
                                                    (builtin "One Step Simplification" (formula "77"))
                                                   (rule "inEqSimp_geqRight" (formula "77"))
                                                   (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                                   (rule "applyEq" (formula "1") (term "0,1,0,0") (ifseqformula "51"))
                                                   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                                   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                                   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                                   (rule "add_literals" (formula "1") (term "0,0,0"))
                                                   (rule "add_zero_left" (formula "1") (term "0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "61") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "61") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "61") (term "1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "61") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "61") (term "1,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "61") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "56"))
                                                   (rule "polySimp_mulLiterals" (formula "56") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "56") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "32") (term "0,0,0,1,0"))
                                                   (rule "polySimp_mulComm0" (formula "32") (term "1,0,0,0,1,0"))
                                                   (rule "polySimp_rightDist" (formula "32") (term "1,0,0,0,1,0"))
                                                   (rule "mul_literals" (formula "32") (term "0,1,0,0,0,1,0"))
                                                   (rule "polySimp_mulLiterals" (formula "32") (term "1,1,0,0,0,1,0"))
                                                   (rule "polySimp_elimOne" (formula "32") (term "1,1,0,0,0,1,0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "60") (term "0,0,0,0,0"))
                                                   (rule "polySimp_mulComm0" (formula "60") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_rightDist" (formula "60") (term "1,0,0,0,0,0"))
                                                   (rule "polySimp_mulLiterals" (formula "60") (term "1,1,0,0,0,0,0"))
                                                   (rule "mul_literals" (formula "60") (term "0,1,0,0,0,0,0"))
                                                   (rule "polySimp_elimOne" (formula "60") (term "1,1,0,0,0,0,0"))
                                                   (rule "inEqSimp_sepNegMonomial0" (formula "44"))
                                                   (rule "polySimp_mulLiterals" (formula "44") (term "0"))
                                                   (rule "polySimp_elimOne" (formula "44") (term "0"))
                                                   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                                   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                                   (rule "polySimp_elimOne" (formula "1") (term "1"))
                                                   (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "44"))
                                                   (rule "polySimp_mulComm0" (formula "69") (term "1,0,0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "69") (term "0,0"))
                                                   (rule "add_literals" (formula "69") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "69") (term "1,0,0"))
                                                   (rule "add_literals" (formula "69") (term "0,0"))
                                                   (rule "leq_literals" (formula "69") (term "0"))
                                                    (builtin "One Step Simplification" (formula "69"))
                                                   (rule "false_right" (formula "69"))
                                                   (rule "inEqSimp_subsumption1" (formula "42") (ifseqformula "44"))
                                                   (rule "inEqSimp_homoInEq0" (formula "42") (term "0"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "42") (term "0,0"))
                                                   (rule "add_literals" (formula "42") (term "1,1,0,0"))
                                                   (rule "times_zero_1" (formula "42") (term "1,0,0"))
                                                   (rule "add_literals" (formula "42") (term "0,0"))
                                                   (rule "qeq_literals" (formula "42") (term "0"))
                                                    (builtin "One Step Simplification" (formula "42"))
                                                   (rule "true_left" (formula "42"))
                                                   (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "43"))
                                                   (rule "andLeft" (formula "1"))
                                                   (rule "inEqSimp_homoInEq1" (formula "1"))
                                                   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                                   (rule "add_literals" (formula "1") (term "1,1,0"))
                                                   (rule "times_zero_1" (formula "1") (term "1,0"))
                                                   (rule "add_literals" (formula "1") (term "0"))
                                                   (rule "leq_literals" (formula "1"))
                                                   (rule "closeFalse" (formula "1"))
                                                )
                                                (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                   (rule "orRight" (formula "72"))
                                                   (rule "selectCreatedOfAnonEQ" (formula "85") (term "0,0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "85") (ifInst ""  (formula "30")))
                                                   (rule "selectOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "37"))
                                                    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "80")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
                                                   (rule "selectOfAnonEQ" (formula "71") (term "0") (ifseqformula "36"))
                                                    (builtin "One Step Simplification" (formula "71") (ifInst ""  (formula "77")) (ifInst ""  (formula "76")) (ifInst ""  (formula "38")))
                                                   (rule "closeTrue" (formula "71"))
                                                )
                                             )
                                          )
                                          (branch " (result_91, java.util.Iterator::$index) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬( result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE) FALSE"
                                             (rule "orRight" (formula "82"))
                                             (rule "elementOfSingleton" (formula "82"))
                                              (builtin "One Step Simplification" (formula "82"))
                                             (rule "closeTrue" (formula "82"))
                                          )
                                       )
                                    )
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                       (rule "orRight" (formula "80"))
                                       (rule "selectOfAnonEQ" (formula "83") (term "0,1,0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "76")) (ifInst ""  (formula "80")) (ifInst ""  (formula "81")))
                                       (rule "selectOfAnonEQ" (formula "80") (term "0") (ifseqformula "35"))
                                        (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "76")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                                       (rule "closeTrue" (formula "80"))
                                    )
                                 )
                                 (branch "result_91.<created>@heapAfter_next = TRUE FALSE"
                                    (rule "selectOfAnonEQ" (formula "79") (term "0,0") (ifseqformula "48"))
                                     (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "75")))
                                    (rule "ifthenelse_negated" (formula "79") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "79") (term "0,0"))
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                        (builtin "One Step Simplification" (formula "80") (ifInst ""  (formula "1")))
                                       (rule "selectOfAnonEQ" (formula "81") (term "0") (ifseqformula "49"))
                                        (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                       (rule "ifthenelse_negated" (formula "81") (term "0"))
                                       (rule "selectOfAnon" (formula "81") (term "1,0"))
                                        (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "74")))
                                       (rule "ifthenelse_negated" (formula "81") (term "1,0"))
                                       (rule "ifthenelse_split" (formula "81") (term "0"))
                                       (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                          (rule "ifthenelse_split" (formula "82") (term "0"))
                                          (branch "result_91.<created>@heapAfter_iterator = TRUE TRUE"
                                             (rule "close" (formula "83") (ifseqformula "1"))
                                          )
                                          (branch "result_91.<created>@heapAfter_iterator = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "29")))
                                             (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "36"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "83")) (ifInst ""  (formula "75")) (ifInst ""  (formula "74")) (ifInst ""  (formula "38")))
                                             (rule "selectCreatedOfAnonEQ" (formula "81") (term "0") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                             (rule "closeTrue" (formula "81"))
                                          )
                                       )
                                       (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "81"))
                                          (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")))
                                          (rule "selectCreatedOfAnonEQ" (formula "81") (term "0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "81") (ifInst ""  (formula "73")) (ifInst ""  (formula "37")))
                                          (rule "closeTrue" (formula "81"))
                                       )
                                    )
                                    (branch " cols.<created>@heapAfter_iterator = TRUE ∨ cols.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                       (rule "orRight" (formula "79"))
                                       (rule "selectOfAnonEQ" (formula "82") (term "0") (ifseqformula "48"))
                                        (builtin "One Step Simplification" (formula "82") (ifInst ""  (formula "73")))
                                       (rule "ifthenelse_negated" (formula "82") (term "0"))
                                       (rule "ifthenelse_split" (formula "82") (term "0"))
                                       (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "83") (ifInst ""  (formula "1")))
                                          (rule "closeTrue" (formula "83"))
                                       )
                                       (branch " result_91.<created>@heapAfter_iterator = TRUE ∨ result_91.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "82"))
                                          (rule "selectOfAnonEQ" (formula "79") (term "0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "79") (ifInst ""  (formula "75")) (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
                                          (rule "closeTrue" (formula "79"))
                                       )
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Exceptional Post (add)"
                            (builtin "One Step Simplification" (formula "59"))
                            (builtin "One Step Simplification" (formula "69"))
                           (rule "andLeft" (formula "59"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "1,0") (ifseqformula "59"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,1,0") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "60"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "60") (term "0,0,0,1,0") (ifseqformula "30"))
                           (rule "andLeft" (formula "60"))
                           (rule "andLeft" (formula "60"))
                           (rule "andLeft" (formula "62"))
                           (rule "notLeft" (formula "60"))
                           (rule "close" (formula "63") (ifseqformula "62"))
                        )
                        (branch "Pre (add)"
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "58")) (ifInst ""  (formula "58")))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "67") (term "1,1") (ifseqformula "44"))
                            (builtin "One Step Simplification" (formula "67"))
                           (rule "wellFormedAnonEQ" (formula "67") (term "0,1") (ifseqformula "44"))
                           (rule "wellFormedAnon" (formula "67") (term "0,0,1"))
                           (rule "wellFormedAnonEQ" (formula "67") (term "0,0,0,1") (ifseqformula "30"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "67") (term "0,0,1,1") (ifseqformula "30"))
                           (rule "replace_known_left" (formula "67") (term "1,0,1") (ifseqformula "43"))
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "19")) (ifInst ""  (formula "29")) (ifInst ""  (formula "36")))
                           (rule "inEqSimp_ltToLeq" (formula "57") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "56") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "40"))
                           (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "40") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "52"))
                           (rule "polySimp_mulComm0" (formula "52") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "52") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "57") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "57") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "57") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "57") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "57") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "0,0,0,0,0"))
                           (rule "polySimp_mulComm0" (formula "56") (term "1,0,0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "56") (term "1,1,0,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "56") (term "1,1,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                           (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                           (rule "polySimp_elimOne" (formula "40") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "52"))
                           (rule "polySimp_mulLiterals" (formula "52") (term "0"))
                           (rule "polySimp_elimOne" (formula "52") (term "0"))
                           (rule "inEqSimp_contradEq7" (formula "59") (ifseqformula "40"))
                           (rule "polySimp_mulComm0" (formula "59") (term "1,0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "59") (term "0,0"))
                           (rule "add_literals" (formula "59") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "59") (term "1,0,0"))
                           (rule "add_zero_right" (formula "59") (term "0,0"))
                           (rule "leq_literals" (formula "59") (term "0"))
                            (builtin "One Step Simplification" (formula "59"))
                           (rule "false_right" (formula "59"))
                           (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "40"))
                           (rule "inEqSimp_homoInEq0" (formula "38") (term "0"))
                           (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                           (rule "add_literals" (formula "38") (term "1,1,0,0"))
                           (rule "times_zero_1" (formula "38") (term "1,0,0"))
                           (rule "add_zero_right" (formula "38") (term "0,0"))
                           (rule "qeq_literals" (formula "38") (term "0"))
                            (builtin "One Step Simplification" (formula "38"))
                           (rule "true_left" (formula "38"))
                           (rule "inEqSimp_and_subsumption3" (formula "56") (term "0,0,0"))
                           (rule "leq_literals" (formula "56") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "56"))
                           (rule "inEqSimp_and_subsumption3" (formula "55") (term "0,0,0"))
                           (rule "leq_literals" (formula "55") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "55"))
                           (rule "nnf_imp2or" (formula "16") (term "0,0"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                           (rule "nnf_imp2or" (formula "28") (term "0"))
                           (rule "nnf_imp2or" (formula "56") (term "0"))
                           (rule "nnf_imp2or" (formula "55") (term "0"))
                           (rule "nnf_notAnd" (formula "28") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                           (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                           (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                           (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                           (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
                           (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                           (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "56") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "56") (term "1,0,0"))
                           (rule "mul_literals" (formula "56") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "56") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "1,0,0"))
                           (rule "mul_literals" (formula "56") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "55") (term "0,0"))
                           (rule "inEqSimp_notLeq" (formula "55") (term "1,0,0"))
                           (rule "mul_literals" (formula "55") (term "1,0,0,1,0,0"))
                           (rule "add_literals" (formula "55") (term "0,0,1,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "1,0,0"))
                           (rule "mul_literals" (formula "55") (term "1,1,0,0"))
                           (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                           (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "11"))
                           (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "9"))
                           (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                            (builtin "One Step Simplification" (formula "7"))
                           (rule "nnf_notAnd" (formula "56") (term "0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "56") (term "1,0,0,0"))
                           (rule "times_zero_1" (formula "56") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "56") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "56") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "56") (term "1,1,0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "56") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "56") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "56") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "56") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "56") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "56") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "56") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "56") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "56") (term "1,0,0,0,0"))
                           (rule "nnf_notAnd" (formula "55") (term "0,0,0"))
                           (rule "inEqSimp_notLeq" (formula "55") (term "0,0,0,0"))
                           (rule "polySimp_rightDist" (formula "55") (term "1,0,0,0,0,0,0"))
                           (rule "mul_literals" (formula "55") (term "0,1,0,0,0,0,0,0"))
                           (rule "polySimp_addAssoc" (formula "55") (term "0,0,0,0,0,0"))
                           (rule "add_literals" (formula "55") (term "0,0,0,0,0,0,0"))
                           (rule "add_zero_left" (formula "55") (term "0,0,0,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "55") (term "0,0,0,0"))
                           (rule "polySimp_mulLiterals" (formula "55") (term "1,0,0,0,0"))
                           (rule "polySimp_elimOne" (formula "55") (term "1,0,0,0,0"))
                           (rule "inEqSimp_notGeq" (formula "55") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "55") (term "1,0,0,1,0,0,0"))
                           (rule "add_zero_right" (formula "55") (term "0,0,1,0,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "55") (term "1,0,0,0"))
                           (rule "mul_literals" (formula "55") (term "1,1,0,0,0"))
                           (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                           (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                           (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                           (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
                           (rule "nnf_notOr" (formula "12") (term "0,1,0,0,0,0"))
                           (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "65") (term "0"))
                            (builtin "One Step Simplification" (formula "65"))
                           (rule "orRight" (formula "65"))
                           (rule "orRight" (formula "65"))
                           (rule "orRight" (formula "65"))
                           (rule "replace_known_right" (formula "49") (term "1") (ifseqformula "68"))
                            (builtin "One Step Simplification" (formula "49") (ifInst ""  (formula "65")) (ifInst ""  (formula "67")) (ifInst ""  (formula "66")))
                           (rule "closeFalse" (formula "49"))
                        )
                        (branch "Null reference (var = null)"
                            (builtin "One Step Simplification" (formula "67") (ifInst ""  (formula "66")))
                           (rule "closeTrue" (formula "67"))
                        )
                     )
                     (branch "Exceptional Post (get)"
                         (builtin "One Step Simplification" (formula "58"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "1,0") (ifseqformula "44"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "selectCreatedOfAnonAsFormulaEQ" (formula "49") (term "0,0,1,0") (ifseqformula "30"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "50"))
                        (rule "andLeft" (formula "49"))
                        (rule "andLeft" (formula "51"))
                        (rule "notLeft" (formula "49"))
                        (rule "close" (formula "53") (ifseqformula "52"))
                     )
                     (branch "Pre (get)"
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "andRight" (formula "57"))
                        (branch "Case 1"
                           (rule "andRight" (formula "57"))
                           (branch "Case 1"
                               (opengoal " ")
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "57"))
                              (branch "Case 1"
                                 (rule "Class_invariant_axiom_for_org_apache_commons_csv_CSVRecord" (formula "57") (inst "i=i") (inst "i_0=i_0") (userinteraction))
                                 (rule "andRight" (formula "57"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "57"))
                                    (branch "Case 1"
                                       (rule "selectOfAnonEQ" (formula "57") (term "0,0") (ifseqformula "44"))
                                        (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "55")))
                                       (rule "elementOfSingleton" (formula "57") (term "0,0,0,0"))
                                        (builtin "One Step Simplification" (formula "57"))
                                       (rule "ifthenelse_negated" (formula "57") (term "0,0"))
                                       (rule "ifthenelse_split" (formula "57") (term "0,0"))
                                       (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                          (rule "selectOfAnonEQ" (formula "58") (term "0,1") (ifseqformula "45"))
                                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "56")) (ifInst ""  (formula "1")))
                                          (rule "elementOfSingleton" (formula "58") (term "0,0,1"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "selectOfAnon" (formula "58") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "56")))
                                          (rule "elementOfUnion" (formula "58") (term "0,0,0,1"))
                                          (rule "elementOfSingleton" (formula "58") (term "0,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "58"))
                                          (rule "ifthenelse_split" (formula "58") (term "0,1"))
                                          (branch " (r, org.apache.commons.csv.CSVRecord::$value_seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬r.<created>@heapAfter_iterator = TRUE TRUE"
                                             (rule "elementOfSingleton" (formula "1") (term "0"))
                                              (builtin "One Step Simplification" (formula "1"))
                                             (rule "selectOfAnon" (formula "59") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "57")) (ifInst ""  (formula "1")))
                                             (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "32"))
                                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch " (r, org.apache.commons.csv.CSVRecord::$value_seq) ∊ {(result_91, java.util.Iterator::$index)} ∨ ¬r.<created>@heapAfter_iterator = TRUE FALSE"
                                             (rule "orRight" (formula "58"))
                                             (rule "elementOfSingleton" (formula "58"))
                                              (builtin "One Step Simplification" (formula "58"))
                                             (rule "selectOfAnon" (formula "60") (term "0,0"))
                                              (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "56")) (ifInst ""  (formula "59")))
                                             (rule "elementOfUnion" (formula "60") (term "0,0,0"))
                                             (rule "elementOfSingleton" (formula "60") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "60"))
                                             (rule "ifthenelse_split" (formula "60") (term "0,0"))
                                             (branch "(r, org.apache.commons.csv.CSVRecord::$key_seq) ∊ {(result_91, java.util.Iterator::$index)} TRUE"
                                                (rule "elementOfSingleton" (formula "1"))
                                                 (builtin "One Step Simplification" (formula "1"))
                                                (rule "closeFalse" (formula "1"))
                                             )
                                             (branch "(r, org.apache.commons.csv.CSVRecord::$key_seq) ∊ {(result_91, java.util.Iterator::$index)} FALSE"
                                                (rule "elementOfSingleton" (formula "60"))
                                                 (builtin "One Step Simplification" (formula "60"))
                                                (rule "selectOfAnonEQ" (formula "60") (term "0,1") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "56")) (ifInst ""  (formula "25")))
                                                (rule "selectOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "56")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                                                (rule "selectCreatedOfAnonEQ" (formula "59") (term "0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "25")))
                                                (rule "selectOfAnonEQ" (formula "59") (term "0,0") (ifseqformula "31"))
                                                 (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "56")) (ifInst ""  (formula "25")))
                                                 (opengoal " ")
                                             )
                                          )
                                       )
                                       (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "57"))
                                          (rule "selectOfAnonEQ" (formula "59") (term "0,1") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "55")) (ifInst ""  (formula "57")) (ifInst ""  (formula "58")))
                                          (rule "selectCreatedOfAnonEQ" (formula "57") (term "0") (ifseqformula "30"))
                                           (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "24")))
                                          (rule "closeTrue" (formula "57"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "allRight" (formula "57") (inst "sk=i_0_0"))
                                       (rule "impRight" (formula "57"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "andLeft" (formula "1"))
                                       (rule "selectOfAnonEQ" (formula "2") (term "0,1") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "58")))
                                       (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
                                        (builtin "One Step Simplification" (formula "2"))
                                       (rule "ifthenelse_negated" (formula "2") (term "0,1"))
                                       (rule "ifthenelse_split" (formula "2") (term "0,1"))
                                       (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                          (rule "selectOfAnon" (formula "3") (term "0,1"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                                          (rule "elementOfUnion" (formula "3") (term "0,0,0,1"))
                                          (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "ifthenelse_negated" (formula "3") (term "0,1"))
                                          (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")))
                                          (rule "ifthenelse_split" (formula "3") (term "0,1"))
                                          (branch "r.<created>@heapAfter_iterator = TRUE TRUE"
                                             (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "49"))
                                              (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "3")))
                                             (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "selectOfAnon" (formula "62") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "3")))
                                             (rule "elementOfUnion" (formula "62") (term "0,0,0,0,0"))
                                             (rule "elementOfSingleton" (formula "62") (term "1,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "selectOfAnonEQ" (formula "4") (term "0,1") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "60")) (ifInst ""  (formula "29")))
                                             (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")))
                                             (rule "selectOfAnonEQ" (formula "61") (term "0,0,0,0") (ifseqformula "34"))
                                              (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "59")) (ifInst ""  (formula "28")))
                                              (opengoal " ")
                                          )
                                          (branch "r.<created>@heapAfter_iterator = TRUE FALSE"
                                             (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "48"))
                                              (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "53")))
                                             (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "62"))
                                             (rule "ifthenelse_negated" (formula "62") (term "0,0,0,0"))
                                             (rule "ifthenelse_split" (formula "62") (term "0,0,0,0"))
                                             (branch "r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                                (rule "selectOfAnon" (formula "63") (term "0,0,0,0"))
                                                 (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "61")) (ifInst ""  (formula "54")))
                                                (rule "selectCreatedOfAnonEQ" (formula "54") (term "0") (ifseqformula "35"))
                                                 (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "29")))
                                                (rule "closeTrue" (formula "54"))
                                             )
                                             (branch "r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                                (rule "selectCreatedOfAnonEQ" (formula "53") (term "0") (ifseqformula "34"))
                                                 (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "28")))
                                                (rule "closeTrue" (formula "53"))
                                             )
                                          )
                                       )
                                       (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                          (rule "orRight" (formula "52"))
                                          (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "47"))
                                           (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                          (rule "selectCreatedOfAnonEQ" (formula "52") (term "0") (ifseqformula "33"))
                                           (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "27")))
                                          (rule "closeTrue" (formula "52"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "allRight" (formula "57") (inst "sk=i_0"))
                                    (rule "impRight" (formula "57"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "selectOfAnonEQ" (formula "2") (term "0,1") (ifseqformula "47"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "58")))
                                    (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "ifthenelse_negated" (formula "2") (term "0,1"))
                                    (rule "ifthenelse_split" (formula "2") (term "0,1"))
                                    (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                       (rule "selectOfAnon" (formula "3") (term "0,1"))
                                        (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "59")))
                                       (rule "elementOfUnion" (formula "3") (term "0,0,0,1"))
                                       (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "elementOfSingleton" (formula "3") (term "0,0,0,1"))
                                        (builtin "One Step Simplification" (formula "3"))
                                       (rule "ifthenelse_negated" (formula "3") (term "0,1"))
                                       (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "34"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")))
                                       (rule "ifthenelse_split" (formula "3") (term "0,1"))
                                       (branch "r.<created>@heapAfter_iterator = TRUE TRUE"
                                          (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "49"))
                                           (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "3")))
                                          (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "selectOfAnon" (formula "62") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "3")))
                                          (rule "elementOfUnion" (formula "62") (term "0,0,0,0,0"))
                                          (rule "elementOfSingleton" (formula "62") (term "1,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "selectOfAnonEQ" (formula "4") (term "0,1") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "60")) (ifInst ""  (formula "29")))
                                          (rule "selectCreatedOfAnonEQ" (formula "3") (term "0") (ifseqformula "35"))
                                           (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "29")))
                                          (rule "selectOfAnonEQ" (formula "61") (term "0,0,0,0") (ifseqformula "34"))
                                           (builtin "One Step Simplification" (formula "61") (ifInst ""  (formula "59")) (ifInst ""  (formula "28")))
                                           (opengoal " ")
                                       )
                                       (branch "r.<created>@heapAfter_iterator = TRUE FALSE"
                                          (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "48"))
                                           (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "53")))
                                          (rule "elementOfSingleton" (formula "62") (term "0,0,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "62"))
                                          (rule "ifthenelse_negated" (formula "62") (term "0,0,0,0"))
                                          (rule "ifthenelse_split" (formula "62") (term "0,0,0,0"))
                                          (branch "r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                             (rule "selectOfAnon" (formula "63") (term "0,0,0,0"))
                                              (builtin "One Step Simplification" (formula "63") (ifInst ""  (formula "61")) (ifInst ""  (formula "54")))
                                             (rule "selectCreatedOfAnonEQ" (formula "54") (term "0") (ifseqformula "35"))
                                              (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "29")))
                                             (rule "closeTrue" (formula "54"))
                                          )
                                          (branch "r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                             (rule "selectCreatedOfAnonEQ" (formula "53") (term "0") (ifseqformula "34"))
                                              (builtin "One Step Simplification" (formula "53") (ifInst ""  (formula "28")))
                                             (rule "closeTrue" (formula "53"))
                                          )
                                       )
                                    )
                                    (branch " r.<created>@heapAfter_iterator = TRUE ∨ r.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                       (rule "orRight" (formula "52"))
                                       (rule "selectOfAnonEQ" (formula "62") (term "0,0,0,0") (ifseqformula "47"))
                                        (builtin "One Step Simplification" (formula "62") (ifInst ""  (formula "60")) (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
                                       (rule "selectCreatedOfAnonEQ" (formula "52") (term "0") (ifseqformula "33"))
                                        (builtin "One Step Simplification" (formula "52") (ifInst ""  (formula "27")))
                                       (rule "closeTrue" (formula "52"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (opengoal " ")
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "57"))
                           (branch
                              (rule "wellFormedAnonEQ" (formula "57") (ifseqformula "44"))
                              (rule "wellFormedAnon" (formula "57") (term "0"))
                              (rule "wellFormedAnonEQ" (formula "57") (term "0,0") (ifseqformula "30"))
                              (rule "replace_known_left" (formula "57") (term "1,0") (ifseqformula "36"))
                               (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "19")) (ifInst ""  (formula "29")) (ifInst ""  (formula "43")))
                              (rule "closeTrue" (formula "57"))
                           )
                           (branch "Case 2"
                              (rule "orRight" (formula "57"))
                              (rule "selectCreatedOfAnonEQ" (formula "58") (term "0") (ifseqformula "44"))
                              (rule "selectOfAnon" (formula "58") (term "0,0,0"))
                              (rule "elementOfUnion" (formula "58") (term "0,0,0,0,0,0"))
                              (rule "elementOfSingleton" (formula "58") (term "1,0,0,0,0,0,0"))
                              (rule "elementOfSingleton" (formula "58") (term "0,0,0,0,0,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "58") (term "0,1,0,0,0,0,0,0"))
                              (rule "sortsDisjointModuloNull" (formula "58") (term "0,0,0,0,0,0,0,0"))
                              (rule "ifthenelse_split" (formula "58") (term "0,0,0"))
                              (branch " ( (java.lang.String)result_1 = null ∧ vals = null ∧ java.lang.Object::<created> = java.util.Collection::$seq ∨ (java.lang.String)result_1 = null ∧ result_91 = null ∧ java.lang.Object::<created> = java.util.Iterator::$index) ∧ ¬ java.lang.Object::<created> = java.lang.Object::<created> ∨ ((java.lang.String)result_1, java.lang.Object::<created>) ∊ freshLocs(heapAfter_iterator) TRUE"
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "57")) (ifInst ""  (formula "58")) (ifInst ""  (formula "53")) (ifInst ""  (formula "58")))
                                 (rule "ifthenelse_split" (formula "59") (term "0"))
                                 (branch " (java.lang.String)result_1.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE TRUE"
                                    (rule "selectCreatedOfAnonEQ" (formula "2") (term "0,0") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "2"))
                                     (builtin "One Step Simplification" (formula "60"))
                                    (rule "closeTrue" (formula "60"))
                                 )
                                 (branch " (java.lang.String)result_1.<created>@anon_heap_LOOP«anonHeapFunction» = TRUE FALSE"
                                    (rule "selectCreatedOfAnonEQ" (formula "1") (term "0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "orRight" (formula "49"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "40"))
                                    (rule "polySimp_mulComm0" (formula "40") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "40") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "40"))
                                    (rule "polySimp_mulLiterals" (formula "40") (term "0"))
                                    (rule "polySimp_elimOne" (formula "40") (term "0"))
                                    (rule "inEqSimp_contradEq7" (formula "51") (ifseqformula "40"))
                                    (rule "polySimp_mulComm0" (formula "51") (term "1,0,0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "51") (term "0,0"))
                                    (rule "add_literals" (formula "51") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "51") (term "1,0,0"))
                                    (rule "add_literals" (formula "51") (term "0,0"))
                                    (rule "leq_literals" (formula "51") (term "0"))
                                     (builtin "One Step Simplification" (formula "51"))
                                    (rule "false_right" (formula "51"))
                                    (rule "inEqSimp_subsumption1" (formula "38") (ifseqformula "40"))
                                    (rule "inEqSimp_homoInEq0" (formula "38") (term "0"))
                                    (rule "polySimp_pullOutFactor1b" (formula "38") (term "0,0"))
                                    (rule "add_literals" (formula "38") (term "1,1,0,0"))
                                    (rule "times_zero_1" (formula "38") (term "1,0,0"))
                                    (rule "add_literals" (formula "38") (term "0,0"))
                                    (rule "qeq_literals" (formula "38") (term "0"))
                                     (builtin "One Step Simplification" (formula "38"))
                                    (rule "true_left" (formula "38"))
                                    (rule "nnf_imp2or" (formula "16") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "16"))
                                    (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "18") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "14") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                                    (rule "nnf_imp2or" (formula "28") (term "0"))
                                    (rule "nnf_notAnd" (formula "28") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,0,0"))
                                    (rule "mul_literals" (formula "28") (term "0,1,0,0,0,0,0"))
                                    (rule "polySimp_addAssoc" (formula "28") (term "0,0,0,0,0"))
                                    (rule "add_literals" (formula "28") (term "0,0,0,0,0,0"))
                                    (rule "add_zero_left" (formula "28") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "0,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "28") (term "1,0,0,0"))
                                    (rule "polySimp_elimOne" (formula "28") (term "1,0,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "28") (term "1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,0,0,1,0,0"))
                                    (rule "add_zero_right" (formula "28") (term "0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0"))
                                    (rule "mul_literals" (formula "28") (term "1,1,0,0"))
                                    (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "nnf_imp2or" (formula "18") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "18") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "18"))
                                    (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "10"))
                                    (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "nnf_imp2or" (formula "14") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "14") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "14"))
                                    (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "17"))
                                    (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                    (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "18") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "14") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                                    (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                                    (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "5") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "12") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "5") (term "0,0,1,0,0,0,0"))
                                    (rule "nnf_notOr" (formula "4") (term "0,0,1,0,0,0,0"))
                                    (rule "commute_or" (formula "28") (term "0,0"))
                                    (rule "cnf_rightDist" (formula "16") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "16") (term "0"))
                                    (rule "distr_forallAnd" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "commute_or" (formula "13") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "19") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "10") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "14") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                    (rule "commute_or" (formula "18") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "29") (term "0,0,1,0"))
                                    (rule "commute_or" (formula "11") (term "1,0,0,0"))
                                    (rule "commute_or" (formula "17") (term "0,0"))
                                    (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                    (rule "commute_or" (formula "6") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                    (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "13") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "10") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "18") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                    (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                    (rule "cnf_rightDist" (formula "16") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "16") (term "0"))
                                    (rule "distr_forallAnd" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "commute_or" (formula "17") (term "0,0"))
                                    (rule "commute_or" (formula "9") (term "1,0,0,0,0"))
                                    (rule "commute_and_2" (formula "30") (term "0,1,0"))
                                    (rule "commute_or" (formula "2") (term "1,0,0,0,0"))
                                    (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
                                    (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "12") (term "0,0,0,0"))
                                    (rule "commute_or" (formula "4") (term "1,0,0,0,0"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                    (rule "cnf_rightDist" (formula "16") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "16") (term "0"))
                                    (rule "distr_forallAnd" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "commute_or" (formula "17") (term "0,0"))
                                    (rule "shift_paren_or" (formula "10") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "14") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "11") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                    (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "9") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "7") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "13") (term "1,0,0,0"))
                                    (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                    (rule "commute_and" (formula "21") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "10") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "14") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "20") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                    (rule "commute_and" (formula "3") (term "1,0,0,0"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0"))
                                    (rule "distr_forallAnd" (formula "5"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "6"))
                                    (rule "true_left" (formula "6"))
                                    (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "9") (term "0"))
                                    (rule "distr_forallAnd" (formula "9"))
                                    (rule "andLeft" (formula "9"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0"))
                                    (rule "distr_forallAnd" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0"))
                                    (rule "distr_forallAnd" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "cnf_rightDist" (formula "15") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "15") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "15") (term "0"))
                                    (rule "distr_forallAnd" (formula "15"))
                                    (rule "andLeft" (formula "15"))
                                    (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "true_left" (formula "13"))
                                    (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "4") (term "0"))
                                    (rule "distr_forallAnd" (formula "4"))
                                    (rule "andLeft" (formula "4"))
                                    (rule "cnf_rightDist" (formula "23") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "23") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "23") (term "0"))
                                    (rule "distr_forallAnd" (formula "23"))
                                    (rule "andLeft" (formula "23"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0"))
                                    (rule "distr_forallAnd" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "cnf_rightDist" (formula "16") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "16") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "16") (term "0"))
                                    (rule "distr_forallAnd" (formula "16"))
                                    (rule "andLeft" (formula "16"))
                                    (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "22") (term "0"))
                                    (rule "distr_forallAnd" (formula "22"))
                                    (rule "andLeft" (formula "22"))
                                    (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "7") (term "0"))
                                    (rule "distr_forallAnd" (formula "7"))
                                    (rule "andLeft" (formula "7"))
                                    (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "2") (term "0"))
                                    (rule "distr_forallAnd" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "7"))
                                    (rule "true_left" (formula "7"))
                                    (rule "cnf_rightDist" (formula "12") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "12") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "shift_paren_or" (formula "9") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "commute_or_2" (formula "12") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "eqSymm" (formula "12") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "12") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "12"))
                                    (rule "true_left" (formula "12"))
                                    (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                    (rule "distr_forallAnd" (formula "5") (term "0"))
                                    (rule "distr_forallAnd" (formula "5"))
                                    (rule "andLeft" (formula "5"))
                                    (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
                                    (rule "distr_forallAnd" (formula "11") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "11"))
                                    (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                     (builtin "One Step Simplification" (formula "8"))
                                    (rule "true_left" (formula "8"))
                                    (rule "commute_or_2" (formula "19") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "19"))
                                    (rule "true_left" (formula "19"))
                                    (rule "commute_or_2" (formula "9") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "eqSymm" (formula "9") (term "1,0,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "1,0,0,1,0,0,0"))
                                    (rule "castedGetAny" (formula "9") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "9"))
                                    (rule "true_left" (formula "9"))
                                    (rule "cut_direct" (formula "12") (term "0,0"))
                                    (branch "CUT: vals = cols TRUE"
                                        (builtin "One Step Simplification" (formula "13"))
                                       (rule "applyEq" (formula "56") (term "0") (ifseqformula "12"))
                                       (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "12"))
                                       (rule "applyEq" (formula "42") (term "0,0,1,0,0") (ifseqformula "12"))
                                       (rule "seqGetAlphaCast" (formula "44") (term "0"))
                                       (rule "castedGetAny" (formula "44") (term "0"))
                                        (builtin "One Step Simplification" (formula "44"))
                                       (rule "true_left" (formula "44"))
                                       (rule "cut_direct" (formula "43") (term "0,0,0"))
                                       (branch "CUT: result_1.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "44"))
                                          (rule "true_left" (formula "44"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "16") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "ex_pull_out3" (formula "22") (term "0"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "29"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cnf_rightDist" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "shift_paren_or" (formula "23") (term "1,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "22") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "4") (term "0,0"))
                                          (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "shift_paren_or" (formula "21") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(cols,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "24"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0"))
                                          (rule "distr_forallAnd" (formula "7"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0"))
                                          (rule "distr_forallAnd" (formula "6"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "5") (term "0"))
                                          (rule "distr_forallAnd" (formula "5"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or" (formula "3") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0"))
                                          (rule "distr_forallAnd" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "ineffectiveCast" (formula "51") (term "1,0") (ifseqformula "6"))
                                          (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "1"))
                                          (rule "close" (formula "42") (ifseqformula "38"))
                                       )
                                       (branch "CUT: result_1.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "16") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "eqSymm" (formula "16") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "16") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "16"))
                                          (rule "true_left" (formula "16"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "ex_pull_out3" (formula "22") (term "0"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "42"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "29"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "29"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cnf_rightDist" (formula "24") (term "0,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "23") (term "1,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "22") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "4") (term "0,0"))
                                          (rule "commute_and" (formula "6") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "5") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "shift_paren_or" (formula "21") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "21") (term "0,0,0,0,0"))
                                          (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(cols,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "24"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "24"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0"))
                                          (rule "distr_forallAnd" (formula "7"))
                                          (rule "andLeft" (formula "7"))
                                          (rule "commute_or_2" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "6") (term "0"))
                                          (rule "distr_forallAnd" (formula "6"))
                                          (rule "andLeft" (formula "6"))
                                          (rule "commute_or" (formula "3") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "5") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "5") (term "0"))
                                          (rule "distr_forallAnd" (formula "5"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or" (formula "3") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0"))
                                          (rule "distr_forallAnd" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "ineffectiveCast" (formula "53") (term "1,0") (ifseqformula "6"))
                                          (rule "typeEqDerived2" (formula "7") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "applyEq" (formula "51") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "1"))
                                          (rule "replace_known_right" (formula "38") (term "1,0") (ifseqformula "44"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "applyEq" (formula "52") (term "1,0") (ifseqformula "1"))
                                          (rule "replace_known_right" (formula "38") (term "1") (ifseqformula "52"))
                                           (builtin "One Step Simplification" (formula "38"))
                                          (rule "applyEq" (formula "43") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "1"))
                                          (rule "close" (formula "50") (ifseqformula "38"))
                                       )
                                    )
                                    (branch "CUT: vals = cols FALSE"
                                        (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "seqGetAlphaCast" (formula "43") (term "0"))
                                       (rule "castedGetAny" (formula "43") (term "0"))
                                        (builtin "One Step Simplification" (formula "43"))
                                       (rule "true_left" (formula "43"))
                                       (rule "cut_direct" (formula "42") (term "0,0,0"))
                                       (branch "CUT: result_1.<created> = TRUE TRUE"
                                           (builtin "One Step Simplification" (formula "43"))
                                          (rule "true_left" (formula "43"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "ex_pull_out3" (formula "21") (term "0"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(vals,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "28"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "28"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "30"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "30"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                          (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "22") (term "1,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "4") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "22") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "commute_and" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "3") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
                                          (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0"))
                                          (rule "distr_forallAnd" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "ineffectiveCast" (formula "51") (term "1,0") (ifseqformula "5"))
                                          (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "41") (term "1,0") (ifseqformula "1"))
                                          (rule "close" (formula "41") (ifseqformula "36"))
                                       )
                                       (branch "CUT: result_1.<created> = TRUE FALSE"
                                           (builtin "One Step Simplification" (formula "42"))
                                          (rule "commute_or_2" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "commute_or_2" (formula "14") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "eqSymm" (formula "14") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "14") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "14"))
                                          (rule "true_left" (formula "14"))
                                          (rule "commute_or_2" (formula "6") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "true_left" (formula "2"))
                                          (rule "ex_pull_out3" (formula "21") (term "0"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(vals,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "28"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "28"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "43"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "30"))
                                          (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "30"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                                          (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
                                          (rule "true_left" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                                          (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "2"))
                                          (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "1"))
                                          (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                                          (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "2") (term "0,0,1,0,0,0,0,0"))
                                          (rule "nnf_notOr" (formula "1") (term "0,0,1,0,0,0,0,0"))
                                          (rule "shift_paren_or" (formula "13") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "eqSymm" (formula "13") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "13") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "13"))
                                          (rule "true_left" (formula "13"))
                                          (rule "shift_paren_or" (formula "10") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "10"))
                                          (rule "true_left" (formula "10"))
                                          (rule "shift_paren_or" (formula "11") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "11"))
                                          (rule "true_left" (formula "11"))
                                          (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "9") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "9"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "cnf_rightDist" (formula "23") (term "0,0"))
                                          (rule "commute_or" (formula "5") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "5") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "4") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "7") (term "0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "commute_or" (formula "1") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or" (formula "1") (term "0,0,0,0"))
                                          (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "commute_or_2" (formula "5") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                          (rule "commute_or_2" (formula "2") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "8") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "8"))
                                          (rule "true_left" (formula "8"))
                                          (rule "commute_or_2" (formula "1") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "22") (term "1,0,0"))
                                          (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "7"))
                                          (rule "true_left" (formula "7"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "4") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
                                          (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                                          (rule "commute_or_2" (formula "22") (term "0,0,0,0"))
                                          (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or" (formula "3") (term "0,0"))
                                          (rule "commute_and" (formula "4") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "3") (term "1,0,0,0"))
                                          (rule "commute_and" (formula "2") (term "1,0,0,0"))
                                          (rule "shift_paren_or" (formula "20") (term "1,0,0,0"))
                                          (rule "commute_or" (formula "20") (term "0,0,0,0,0"))
                                          (rule "commute_and" (formula "1") (term "1,0,0,0"))
                                          (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "4") (term "0"))
                                          (rule "distr_forallAnd" (formula "4"))
                                          (rule "andLeft" (formula "4"))
                                          (rule "commute_or_2" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "4"))
                                          (rule "true_left" (formula "4"))
                                          (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "3") (term "0"))
                                          (rule "distr_forallAnd" (formula "3"))
                                          (rule "andLeft" (formula "3"))
                                          (rule "commute_or_2" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                                          (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                                           (builtin "One Step Simplification" (formula "3"))
                                          (rule "true_left" (formula "3"))
                                          (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "2") (term "0"))
                                          (rule "distr_forallAnd" (formula "2"))
                                          (rule "andLeft" (formula "2"))
                                          (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0,0"))
                                          (rule "distr_forallAnd" (formula "1") (term "0"))
                                          (rule "distr_forallAnd" (formula "1"))
                                          (rule "andLeft" (formula "1"))
                                          (rule "ineffectiveCast" (formula "53") (term "1,0") (ifseqformula "5"))
                                          (rule "typeEqDerived2" (formula "6") (term "0") (ifseqformula "1"))
                                           (builtin "One Step Simplification" (formula "6"))
                                          (rule "true_left" (formula "6"))
                                          (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "50") (term "0") (ifseqformula "1"))
                                          (rule "applyEq" (formula "51") (term "1,0") (ifseqformula "1"))
                                          (rule "replace_known_right" (formula "36") (term "1") (ifseqformula "51"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "50") (term "1,0") (ifseqformula "1"))
                                          (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "50"))
                                           (builtin "One Step Simplification" (formula "36"))
                                          (rule "applyEq" (formula "42") (term "1,0") (ifseqformula "1"))
                                          (rule "close" (formula "42") (ifseqformula "36"))
                                       )
                                    )
                                 )
                              )
                              (branch " ( (java.lang.String)result_1 = null ∧ vals = null ∧ java.lang.Object::<created> = java.util.Collection::$seq ∨ (java.lang.String)result_1 = null ∧ result_91 = null ∧ java.lang.Object::<created> = java.util.Iterator::$index) ∧ ¬ java.lang.Object::<created> = java.lang.Object::<created> ∨ ((java.lang.String)result_1, java.lang.Object::<created>) ∊ freshLocs(heapAfter_iterator) FALSE"
                                  (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "57")) (ifInst ""  (formula "56")) (ifInst ""  (formula "57")) (ifInst ""  (formula "52")) (ifInst ""  (formula "57")))
                                 (rule "ifthenelse_split" (formula "59") (term "0"))
                                 (branch " (java.lang.String)result_1.<created>@heapAfter_iterator = TRUE TRUE"
                                    (rule "selectOfAnonEQ" (formula "59") (term "0,0") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "59") (ifInst ""  (formula "58")))
                                    (rule "ifthenelse_negated" (formula "59") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "59") (term "0,0"))
                                    (branch "(java.lang.String)result_1.<created> = TRUE TRUE"
                                       (rule "selectOfAnonEQ" (formula "2") (term "0") (ifseqformula "32"))
                                        (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "59")) (ifInst ""  (formula "60")) (ifInst ""  (formula "1")))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "closeTrue" (formula "61"))
                                    )
                                    (branch "(java.lang.String)result_1.<created> = TRUE FALSE"
                                       (rule "selectOfAnonEQ" (formula "1") (term "0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "58")) (ifInst ""  (formula "59")))
                                        (builtin "One Step Simplification" (formula "61"))
                                       (rule "closeTrue" (formula "61"))
                                    )
                                 )
                                 (branch " (java.lang.String)result_1.<created>@heapAfter_iterator = TRUE FALSE"
                                    (rule "selectOfAnonEQ" (formula "58") (term "0,0") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "58") (ifInst ""  (formula "57")))
                                    (rule "ifthenelse_negated" (formula "58") (term "0,0"))
                                    (rule "ifthenelse_split" (formula "58") (term "0,0"))
                                    (branch "(java.lang.String)result_1.<created> = TRUE TRUE"
                                       (rule "selectOfAnonEQ" (formula "60") (term "0") (ifseqformula "31"))
                                        (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "58")) (ifInst ""  (formula "59")) (ifInst ""  (formula "1")))
                                       (rule "closeTrue" (formula "60"))
                                    )
                                    (branch "(java.lang.String)result_1.<created> = TRUE FALSE"
                                       (rule "selectOfAnonEQ" (formula "60") (term "0") (ifseqformula "30"))
                                        (builtin "One Step Simplification" (formula "60") (ifInst ""  (formula "57")) (ifInst ""  (formula "58")))
                                       (rule "notRight" (formula "59"))
                                       (rule "close" (formula "60") (ifseqformula "1"))
                                    )
                                 )
                              )
                           )
                        )
                     )
                     (branch "Null reference (var_2 = null)"
                         (builtin "One Step Simplification" (formula "57") (ifInst ""  (formula "55")))
                        (rule "closeTrue" (formula "57"))
                     )
                  )
                  (branch "ClassCastException (!(o instanceof String))"
                      (builtin "One Step Simplification" (formula "57"))
                      (builtin "One Step Simplification" (formula "56") (ifInst ""  (formula "49")))
                     (rule "blockThrow" (formula "57") (term "1"))
                      (builtin "One Step Simplification" (formula "57"))
                     (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_next<<anonHeapFunction>>"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                     (rule "commute_and" (formula "3") (term "0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_and" (formula "1") (term "1,0,0"))
                     (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(anon(heapAfter_iterator,
          union(singleton(vals,
                          java.util.Collection::$seq),
                singleton(result_91,
                          java.util.Iterator::$index)),
          anon_heap_LOOP<<anonHeapFunction>>),
     singleton(result_91, java.util.Iterator::$index),
     anon_heap_next<<anonHeapFunction>>)"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "32"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "32"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "0,1,0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_and" (formula "1") (term "1,0,0"))
                     (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_next"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1") (ifseqformula "34"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,1,0,0,0,0,0,1,0") (ifseqformula "34"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
                     (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
                     (rule "commute_or_2" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "commute_or_2" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0,0,0"))
                     (rule "commute_and" (formula "2") (term "0,0,0,0"))
                     (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "shift_paren_and" (formula "1") (term "1,0,0"))
                     (rule "seqGetAlphaCast" (formula "49") (term "0"))
                     (rule "castedGetAny" (formula "49") (term "0"))
                      (builtin "One Step Simplification" (formula "49"))
                     (rule "true_left" (formula "49"))
                     (rule "methodCallThrow" (formula "61") (term "1,0,0,1"))
                     (rule "tryCatchThrow" (formula "61") (term "1,0,0,1"))
                     (rule "ifElseUnfold" (formula "61") (term "1,0,0,1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "61") (term "1,0,0,1") (newnames "x_1"))
                     (rule "equality_comparison_simple" (formula "61") (term "1,0,0,1"))
                     (rule "throwUnfold" (formula "61") (term "1") (inst "#v0=c"))
                     (rule "variableDeclarationAssign" (formula "61") (term "1"))
                     (rule "variableDeclaration" (formula "61") (term "1") (newnames "c"))
                     (rule "instanceCreationAssignment" (formula "61") (term "1") (inst "#v0=c_1"))
                     (rule "variableDeclarationAssign" (formula "61") (term "1"))
                     (rule "variableDeclaration" (formula "61") (term "1") (newnames "c_1"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "61") (term "1") (inst "#v0=c_2"))
                     (rule "variableDeclaration" (formula "61") (term "1") (newnames "c_2"))
                     (rule "methodBodyExpand" (formula "61") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
                      (builtin "One Step Simplification" (formula "61"))
                     (rule "variableDeclaration" (formula "61") (term "1") (newnames "__NEW__"))
                     (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "61") (term "1") (inst "#v0=c_3"))
                     (rule "variableDeclaration" (formula "61") (term "1") (newnames "c_3"))
                     (rule "allocateInstance" (formula "61"))
                      (builtin "One Step Simplification" (formula "62"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "48"))
                     (rule "wellFormedAnon" (formula "1") (term "0,0,1,0"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0") (ifseqformula "48"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "40")) (ifInst ""  (formula "47")))
                     (rule "wellFormedAnonEQ" (formula "1") (term "0,1,0") (ifseqformula "34"))
                     (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0,0,1,1,0") (ifseqformula "34"))
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                     (rule "notLeft" (formula "1"))
                     (rule "orRight" (formula "53"))
                     (rule "orRight" (formula "53"))
                     (rule "orRight" (formula "53"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                     (rule "assignment" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "assignment_write_attribute_this" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallWithinClass" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                     (rule "assignment_write_attribute_this" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "assignment_write_attribute_this" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                     (rule "methodCallReturnIgnoreResult" (formula "67") (term "1"))
                     (rule "methodCallReturn" (formula "67") (term "1"))
                     (rule "assignment" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                     (rule "assignment" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallSuper" (formula "67") (term "1"))
                     (rule "methodBodyExpand" (formula "67") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                     (rule "assignment_write_attribute_this" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "assignment_write_attribute_this" (formula "67") (term "1"))
                      (builtin "One Step Simplification" (formula "67"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "methodCallEmpty" (formula "67") (term "1"))
                     (rule "blockEmpty" (formula "67") (term "1"))
                      (opengoal " ")
                  )
               )
               (branch "Exceptional Post (next)"
                   (builtin "One Step Simplification" (formula "50"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "1,0,1,1,0,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,1,1,0,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownSelect_taclet10_8" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "1,1,0,1,1,1,1,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "43") (term "0,0,0,1,1,1,1,0,1,1"))
                  (rule "andLeft" (formula "43"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "1,0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "selectCreatedOfAnonAsFormulaEQ" (formula "44") (term "0,0,1,0") (ifseqformula "29"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "44"))
                  (rule "andLeft" (formula "46"))
                  (rule "notLeft" (formula "44"))
                  (rule "close" (formula "47") (ifseqformula "46"))
               )
               (branch "Pre (next)"
                   (builtin "One Step Simplification" (formula "48"))
                  (rule "wellFormedAnon" (formula "48") (term "1"))
                  (rule "wellFormedAnonEQ" (formula "48") (term "0,1") (ifseqformula "29"))
                  (rule "replace_known_left" (formula "48") (term "1,0,1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "18")) (ifInst ""  (formula "35")))
                  (rule "inEqSimp_ltToLeq" (formula "39"))
                  (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "39") (term "0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "39"))
                  (rule "polySimp_mulLiterals" (formula "39") (term "0"))
                  (rule "polySimp_elimOne" (formula "39") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
                  (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "39"))
                  (rule "inEqSimp_homoInEq0" (formula "37") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
                  (rule "add_literals" (formula "37") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "37") (term "1,0,0"))
                  (rule "add_zero_right" (formula "37") (term "0,0"))
                  (rule "qeq_literals" (formula "37") (term "0"))
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "true_left" (formula "37"))
                  (rule "nnf_imp2or" (formula "15") (term "0,0"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
                  (rule "nnf_imp2or" (formula "27") (term "0"))
                  (rule "nnf_notAnd" (formula "27") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
                  (rule "mul_literals" (formula "27") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
                  (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
                  (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
                  (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
                  (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "10") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "4") (term "0,0,1,0,0,0,0"))
                  (rule "nnf_notOr" (formula "3") (term "0,0,1,0,0,0,0"))
                  (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "47"))
                  (rule "closeTrue" (formula "47"))
               )
               (branch "Null reference (it = null)"
                   (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "43")))
                  (rule "closeTrue" (formula "48"))
               )
            )
            (branch "if x false"
                (builtin "One Step Simplification" (formula "49"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Exceptional Post (hasNext)"
             (builtin "One Step Simplification" (formula "40"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "40") (term "0,1,0") (ifseqformula "29"))
            (rule "replaceKnownSelect_taclet10_8" (formula "40") (term "0,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "40") (term "0,1,0,0,1"))
            (rule "replaceKnownSelect_taclet10_7" (formula "40") (term "0,1,1,0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "40") (term "0,1,1,0,0,1"))
            (rule "andLeft" (formula "40"))
            (rule "andLeft" (formula "41"))
            (rule "andLeft" (formula "40"))
            (rule "andLeft" (formula "42"))
            (rule "notLeft" (formula "40"))
            (rule "close" (formula "44") (ifseqformula "43"))
         )
         (branch "Pre (hasNext)"
             (builtin "One Step Simplification" (formula "46"))
            (rule "wellFormedAnon" (formula "46") (term "1"))
            (rule "wellFormedAnonEQ" (formula "46") (term "0,1") (ifseqformula "29"))
            (rule "replace_known_left" (formula "46") (term "1,1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "18")) (ifInst ""  (formula "28")))
            (rule "inEqSimp_ltToLeq" (formula "39"))
            (rule "polySimp_mulComm0" (formula "39") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "39") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "39"))
            (rule "polySimp_mulLiterals" (formula "39") (term "0"))
            (rule "polySimp_elimOne" (formula "39") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,1,0,0,0"))
            (rule "inEqSimp_subsumption1" (formula "37") (ifseqformula "39"))
            (rule "inEqSimp_homoInEq0" (formula "37") (term "0"))
            (rule "polySimp_pullOutFactor1b" (formula "37") (term "0,0"))
            (rule "add_literals" (formula "37") (term "1,1,0,0"))
            (rule "times_zero_1" (formula "37") (term "1,0,0"))
            (rule "add_zero_right" (formula "37") (term "0,0"))
            (rule "qeq_literals" (formula "37") (term "0"))
             (builtin "One Step Simplification" (formula "37"))
            (rule "true_left" (formula "37"))
            (rule "nnf_imp2or" (formula "15") (term "0,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "nnf_imp2or" (formula "12") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "16") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "5") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "17") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "10") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "27") (term "0"))
            (rule "nnf_notAnd" (formula "27") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "27") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "27") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "27") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "27") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "27") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "27") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "27") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "27") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,0,0,1,0,0"))
            (rule "add_literals" (formula "27") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "27") (term "1,0,0"))
            (rule "mul_literals" (formula "27") (term "1,1,0,0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "nnf_imp2or" (formula "16") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "16") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "nnf_notAnd" (formula "11") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_notAnd" (formula "5") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "nnf_notAnd" (formula "17") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "nnf_notAnd" (formula "10") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "12") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "13") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "12") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "13") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "16") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "11") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "5") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "17") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "10") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "11") (term "1,0,0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "5") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "17") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "10") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "11") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "10") (term "0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,0,1,0,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "0,0,1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "45"))
            (rule "closeTrue" (formula "45"))
         )
         (branch "Null reference (it = null)"
             (builtin "One Step Simplification" (formula "46") (ifInst ""  (formula "41")))
            (rule "closeTrue" (formula "46"))
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "29"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "29") (term "0,1,0") (ifseqformula "20"))
         (rule "replaceKnownSelect_taclet10_8" (formula "29") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_10" (formula "29") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet10_7" (formula "29") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet10_9" (formula "29") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "29"))
         (rule "andLeft" (formula "31"))
         (rule "notLeft" (formula "29"))
         (rule "close" (formula "32") (ifseqformula "31"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "29"))
         (rule "wellFormedAnon" (formula "29") (term "1"))
         (rule "wellFormedAnonEQ" (formula "29") (term "0,1") (ifseqformula "20"))
         (rule "replace_known_left" (formula "29") (term "0,0,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "19")) (ifInst ""  (formula "26")))
         (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "29"))
         (rule "closeTrue" (formula "29"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "31")))
         (rule "closeTrue" (formula "29"))
      )
   )
   (branch "Use Case"
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "inEqSimp_commuteLeq" (formula "20"))
      (rule "inEqSimp_commuteLeq" (formula "21"))
      (rule "variableDeclarationAssign" (formula "30") (term "1"))
      (rule "variableDeclaration" (formula "30") (term "1") (newnames "b_1"))
      (rule "pullOutSelect" (formula "22") (term "1") (inst "selectSK=java_util_Collection_seq_1"))
      (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "22"))
      (rule "simplifySelectOfAnon" (formula "22"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "28")))
      (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "13"))
      (rule "simplifySelectOfAnon" (formula "23"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
      (rule "replaceKnownSelect_taclet0_2" (formula "23") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "23") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0,0") (ifseqformula "13"))
      (rule "replace_known_left" (formula "22") (term "0,0,1,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "replace_known_right" (formula "23") (term "0,0,1,0,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "15")))
      (rule "inEqSimp_commuteGeq" (formula "21"))
      (rule "applyEq" (formula "23") (term "2,0") (ifseqformula "17"))
      (rule "elementOfUnion" (formula "22") (term "0,0"))
      (rule "elementOfSingleton" (formula "22") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "eqSymm" (formula "22") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "22") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "elementOfUnion" (formula "23") (term "0,0"))
      (rule "elementOfSingleton" (formula "23") (term "1,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "elementOfSingleton" (formula "23") (term "0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "applyEqReverse" (formula "21") (term "0,1") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "pullOutSelect" (formula "20") (term "0") (inst "selectSK=java_util_Iterator_index_1"))
      (rule "applyEq" (formula "22") (term "0") (ifseqformula "20"))
      (rule "simplifySelectOfAnon" (formula "20"))
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "26")))
      (rule "replaceKnownSelect_taclet0_0" (formula "20") (term "2,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "20") (term "2,0"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "0,1,0,0") (ifseqformula "13"))
      (rule "replace_known_right" (formula "20") (term "0,0,1,0,0") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "15")))
      (rule "inEqSimp_commuteLeq" (formula "22"))
      (rule "applyEq" (formula "20") (term "2,0") (ifseqformula "16"))
      (rule "elementOfUnion" (formula "20") (term "0,0"))
      (rule "elementOfSingleton" (formula "20") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "elementOfSingleton" (formula "20") (term "0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "applyEqReverse" (formula "22") (term "1") (ifseqformula "20"))
      (rule "applyEqReverse" (formula "21") (term "0") (ifseqformula "20"))
      (rule "hideAuxiliaryEq" (formula "20"))
      (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "23"))
      (rule "true_left" (formula "23"))
       (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_hasNext,result,exc_0") (contract "java.util.Iterator[java.util.Iterator::hasNext()].JML normal_behavior operation contract.0"))
      (branch "Post (hasNext)"
          (builtin "One Step Simplification" (formula "30"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "replaceKnownSelect_taclet20_9" (formula "23") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "23") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_7" (formula "23") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_8" (formula "23") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "assignment" (formula "32") (term "1"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "25"))
         (rule "true_left" (formula "25"))
         (rule "methodCallEmpty" (formula "31") (term "1"))
         (rule "emptyModality" (formula "31") (term "1"))
          (builtin "One Step Simplification" (formula "31"))
         (rule "impRight" (formula "31"))
         (rule "notLeft" (formula "1"))
         (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "notLeft" (formula "24"))
         (rule "methodCallEmpty" (formula "32") (term "1"))
         (rule "tryEmpty" (formula "32") (term "1"))
         (rule "emptyModality" (formula "32") (term "1"))
         (rule "andRight" (formula "32"))
         (branch
             (builtin "One Step Simplification" (formula "32"))
            (rule "closeTrue" (formula "32"))
         )
         (branch
             (builtin "One Step Simplification" (formula "32"))
            (rule "allRight" (formula "32") (inst "sk=f_0"))
            (rule "allRight" (formula "32") (inst "sk=o_0"))
            (rule "orRight" (formula "32"))
            (rule "orRight" (formula "32"))
            (rule "eqSymm" (formula "34"))
            (rule "inEqSimp_ltRight" (formula "24"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0,1,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0,1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,0"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=f_0_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,1,0,0") (ifseqformula "15"))
            (rule "eqSymm" (formula "35"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
            (rule "inEqSimp_antiSymm" (formula "23") (ifseqformula "2"))
            (rule "applyEq" (formula "24") (term "0") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq1" (formula "24"))
            (rule "polySimp_pullOutFactor1" (formula "24") (term "0"))
            (rule "add_literals" (formula "24") (term "1,0"))
            (rule "times_zero_1" (formula "24") (term "0"))
            (rule "leq_literals" (formula "24"))
            (rule "true_left" (formula "24"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "23"))
            (rule "inEqSimp_homoInEq0" (formula "2"))
            (rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
            (rule "add_literals" (formula "2") (term "1,0"))
            (rule "times_zero_1" (formula "2") (term "0"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "12") (term "1,1,0,0,0") (ifseqformula "22"))
            (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "12") (term "0"))
            (rule "nnf_notAnd" (formula "12") (term "0,0"))
            (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0,0,0,0,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0,0,0,0,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0,0,0,0,0"))
            (rule "add_literals" (formula "12") (term "0,0,0,0,0,0"))
            (rule "add_zero_left" (formula "12") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
            (rule "commute_and" (formula "32"))
            (rule "commute_or" (formula "12") (term "0,0"))
            (rule "commute_and_2" (formula "1") (term "0,0,0"))
            (rule "commute_or_2" (formula "4") (term "0,0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "commute_and" (formula "13") (term "0,0,1,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "applyEq_and_gen3" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "6") (term "1,0,0,0,0"))
            (rule "commute_or" (formula "5") (term "1,0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or" (formula "3") (term "0,0"))
            (rule "commute_and_2" (formula "15") (term "0,1,0"))
            (rule "commute_and" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
            (rule "commute_and" (formula "7") (term "1,0,0,0"))
            (rule "commute_and" (formula "6") (term "1,0,0,0"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0"))
            (rule "distr_forallAnd" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "commute_or_2" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "shift_paren_or" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0"))
            (rule "distr_forallAnd" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "commute_or_2" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "ex_pull_out3" (formula "13") (term "0"))
            (rule "cnf_rightDist" (formula "13") (term "0,0"))
            (rule "shift_paren_or" (formula "13") (term "1,0,0"))
            (rule "cnf_rightDist" (formula "13") (term "0,0,0"))
            (rule "commute_or_2" (formula "13") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "13") (term "1,0,0,0"))
            (rule "commute_or" (formula "13") (term "0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "3") (term "1,0,0,0"))
            (rule "commute_or" (formula "2") (term "1,0,0,0"))
            (rule "commute_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_iterator<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "2") (term "1,0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_LOOP<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_iterator<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_iterator"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "23"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "23"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "4") (term "1,0,0,0"))
            (rule "shift_paren_and" (formula "7") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "commute_or" (formula "3") (term "1,0,0,0"))
            (rule "commute_or" (formula "4") (term "0,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "26") (inst "iv=iv"))
            (rule "andLeft" (formula "26"))
            (rule "inEqSimp_ltToLeq" (formula "27") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "27") (term "0,0,0"))
            (rule "applyEq" (formula "27") (term "0,0,1,0,0,1,0,0") (ifseqformula "28"))
            (rule "applyEq" (formula "27") (term "0,0,1,0") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "27"))
            (rule "true_left" (formula "27"))
            (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "26"))
            (rule "true_left" (formula "26"))
            (rule "commute_or" (formula "3") (term "0,0,0,0"))
            (rule "cut_direct" (formula "31") (term "0,0"))
            (branch "CUT: vals = cols TRUE"
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "41") (term "1,1") (ifseqformula "31"))
               (rule "applyEq" (formula "40") (term "0") (ifseqformula "31"))
               (rule "applyEq" (formula "16") (term "1,0") (ifseqformula "31"))
               (rule "cut_direct" (formula "40") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "false_right" (formula "41"))
                  (rule "replace_known_left" (formula "9") (term "0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "applyEqRigid" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "9") (term "1,0,0"))
                  (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "41")))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "notRight" (formula "41"))
                  (rule "replace_known_right" (formula "9") (term "0,0,1,0,0") (ifseqformula "41"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
                  (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commute_or" (formula "3") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "lenNonNegative" (formula "30") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "30"))
                  (rule "applyEq" (formula "30") (term "0") (ifseqformula "31"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0"))
                  (rule "distr_forallAnd" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "commute_or" (formula "9") (term "0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_and" (formula "21") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "cut_direct" (formula "39") (term "0"))
                  (branch "CUT: f_0 = java.util.Collection::$seq TRUE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "applyEq" (formula "42") (term "2,0") (ifseqformula "1"))
                     (rule "narrowSelectType" (formula "42") (term "0") (ifseqformula "14"))
                     (rule "eqSymm" (formula "42"))
                     (rule "applyEq" (formula "9") (term "2,2,0") (ifseqformula "1"))
                     (rule "narrowSelectType" (formula "9") (term "2,0") (ifseqformula "14"))
                     (rule "applyEq" (formula "9") (term "0,0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "applyEqReverse" (formula "42") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "closeTrue" (formula "42"))
                  )
                  (branch "CUT: f_0 = java.util.Collection::$seq FALSE"
                      (builtin "One Step Simplification" (formula "40"))
                     (rule "false_right" (formula "40"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or" (formula "6") (term "0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or" (formula "6") (term "0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and" (formula "5") (term "1,0,0,0"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "lenNonNegative" (formula "17") (term "1,1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "commute_and_2" (formula "14") (term "0,0"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_91 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "38") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "37"))
                        (rule "applyEq" (formula "37") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "23"))
                        (rule "eqSymm" (formula "37"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "35"))
                        (rule "false_right" (formula "35"))
                        (rule "applyEq" (formula "35") (term "0") (ifseqformula "3"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "30") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_91 FALSE"
                        (rule "close" (formula "37") (ifseqformula "2"))
                     )
                  )
               )
            )
            (branch "CUT: vals = cols FALSE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "cut_direct" (formula "41") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "false_right" (formula "42"))
                  (rule "replace_known_left" (formula "9") (term "0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "applyEq" (formula "41") (term "0,1") (ifseqformula "1"))
                  (rule "eqSymm" (formula "41") (term "1"))
                  (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "40"))
                   (builtin "One Step Simplification" (formula "41"))
                  (rule "false_right" (formula "41"))
                  (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "9") (term "1,0,0"))
                  (rule "replace_known_right" (formula "9") (term "1,0,0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "41")))
                  (rule "closeFalse" (formula "9"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "42"))
                  (rule "notRight" (formula "42"))
                  (rule "replace_known_left" (formula "9") (term "0,0,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "42")))
                  (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "7") (term "0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
                  (rule "distr_forallAnd" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commute_or" (formula "3") (term "1,0,0,0"))
                  (rule "commute_or" (formula "2") (term "1,0,0,0"))
                  (rule "commute_or" (formula "3") (term "0,0,0,0"))
                  (rule "commute_or" (formula "2") (term "0,0,0,0"))
                  (rule "commute_or_2" (formula "5") (term "0,0,0"))
                  (rule "lenNonNegative" (formula "31") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "31"))
                  (rule "applyEq" (formula "31") (term "0") (ifseqformula "32"))
                  (rule "commute_or_2" (formula "4") (term "0,0,0"))
                  (rule "cnf_rightDist" (formula "8") (term "0,0"))
                  (rule "distr_forallAnd" (formula "8") (term "0"))
                  (rule "distr_forallAnd" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "commute_or" (formula "9") (term "0,0"))
                  (rule "commute_or_2" (formula "3") (term "0,0,0"))
                  (rule "commute_or_2" (formula "2") (term "0,0,0"))
                  (rule "commute_and" (formula "22") (term "0,0,0"))
                  (rule "shift_paren_or" (formula "7") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "shift_paren_or" (formula "6") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
                  (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "cut_direct" (formula "40") (term "1"))
                  (branch "CUT: o_0 = vals TRUE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "applyEq" (formula "9") (term "1,1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "42") (term "0") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "0,1,0,0") (ifseqformula "1"))
                     (rule "eqSymm" (formula "9") (term "1,0,0"))
                     (rule "sortsDisjointModuloNull" (formula "9") (term "1,0,0"))
                     (rule "replace_known_right" (formula "9") (term "1,1,0,0") (ifseqformula "40"))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "36")) (ifInst ""  (formula "42")))
                     (rule "closeFalse" (formula "9"))
                  )
                  (branch "CUT: o_0 = vals FALSE"
                      (builtin "One Step Simplification" (formula "41"))
                     (rule "false_right" (formula "41"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or" (formula "6") (term "0,0"))
                     (rule "cnf_rightDist" (formula "6") (term "0,0"))
                     (rule "distr_forallAnd" (formula "6") (term "0"))
                     (rule "distr_forallAnd" (formula "6"))
                     (rule "andLeft" (formula "6"))
                     (rule "commute_or" (formula "6") (term "0,0"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
                     (rule "commute_and" (formula "5") (term "1,0,0,0"))
                     (rule "commute_and" (formula "4") (term "1,0,0,0"))
                     (rule "commute_and" (formula "3") (term "1,0,0,0"))
                     (rule "commute_and" (formula "2") (term "1,0,0,0"))
                     (rule "lenNonNegative" (formula "18") (term "1,1,0,0,1,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18"))
                     (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0,0"))
                     (rule "distr_forallAnd" (formula "5") (term "0"))
                     (rule "distr_forallAnd" (formula "5"))
                     (rule "andLeft" (formula "5"))
                     (rule "commute_or_2" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0,0"))
                     (rule "distr_forallAnd" (formula "4") (term "0"))
                     (rule "distr_forallAnd" (formula "4"))
                     (rule "andLeft" (formula "4"))
                     (rule "commute_or_2" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "shift_paren_or" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "shift_paren_or" (formula "5") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0,0"))
                     (rule "distr_forallAnd" (formula "3") (term "0"))
                     (rule "distr_forallAnd" (formula "3"))
                     (rule "andLeft" (formula "3"))
                     (rule "commute_or_2" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "shift_paren_or" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0,0"))
                     (rule "distr_forallAnd" (formula "2") (term "0"))
                     (rule "distr_forallAnd" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "commute_or_2" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "shift_paren_or" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
                     (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "commute_and_2" (formula "15") (term "0,0"))
                     (rule "ifthenelse_split" (formula "2") (term "0"))
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_91 TRUE"
                        (rule "andLeft" (formula "2"))
                        (rule "applyEqReverse" (formula "39") (term "1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "eqSymm" (formula "38"))
                        (rule "applyEq" (formula "38") (term "1,0") (ifseqformula "3"))
                        (rule "applyEqRigid" (formula "38") (term "2,1") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "38") (term "1") (ifseqformula "8"))
                        (rule "applyEq" (formula "36") (term "0") (ifseqformula "3"))
                        (rule "sortsDisjointModuloNull" (formula "36"))
                        (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "35")))
                        (rule "false_right" (formula "36"))
                        (rule "applyEqRigid" (formula "37") (term "2,0") (ifseqformula "2"))
                        (rule "narrowSelectType" (formula "37") (term "0") (ifseqformula "24"))
                        (rule "eqSymm" (formula "37"))
                        (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                        (rule "close" (formula "30") (ifseqformula "1"))
                     )
                     (branch "f_0 = java.util.Iterator::$index ∧ o_0 = result_91 FALSE"
                        (rule "close" (formula "38") (ifseqformula "2"))
                     )
                  )
               )
            )
         )
      )
      (branch "Exceptional Post (hasNext)"
          (builtin "One Step Simplification" (formula "23"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "23") (term "0,1,0") (ifseqformula "13"))
         (rule "replaceKnownSelect_taclet20_9" (formula "23") (term "0,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_10" (formula "23") (term "0,1,0,0,1"))
         (rule "replaceKnownSelect_taclet20_7" (formula "23") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet20_8" (formula "23") (term "0,1,1,0,0,1"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "23"))
         (rule "andLeft" (formula "25"))
         (rule "notLeft" (formula "23"))
         (rule "close" (formula "26") (ifseqformula "25"))
      )
      (branch "Pre (hasNext)"
          (builtin "One Step Simplification" (formula "29"))
         (rule "wellFormedAnon" (formula "29") (term "1"))
         (rule "wellFormedAnonEQ" (formula "29") (term "0,1") (ifseqformula "13"))
         (rule "replace_known_left" (formula "29") (term "0,0,1") (ifseqformula "4"))
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "12")) (ifInst ""  (formula "19")))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
         (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
         (rule "nnf_imp2or" (formula "11") (term "0"))
         (rule "nnf_notAnd" (formula "11") (term "0,0"))
         (rule "inEqSimp_notLeq" (formula "11") (term "0,0,0"))
         (rule "polySimp_rightDist" (formula "11") (term "1,0,0,0,0,0"))
         (rule "mul_literals" (formula "11") (term "0,1,0,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "11") (term "0,0,0,0,0"))
         (rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
         (rule "add_zero_left" (formula "11") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "1,0,0,0"))
         (rule "polySimp_elimOne" (formula "11") (term "1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,0,0,1,0,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,1,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0"))
         (rule "mul_literals" (formula "11") (term "1,1,0,0"))
         (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
         (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
         (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0"))
         (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0"))
         (rule "Class_invariant_axiom_for_java_util_Collection_CollectionIterator" (formula "29"))
         (rule "closeTrue" (formula "29"))
      )
      (branch "Null reference (it = null)"
          (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
         (rule "closeTrue" (formula "29"))
      )
   )
)
(branch "Exceptional Post (iterator)"
    (builtin "One Step Simplification" (formula "10"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "andLeft" (formula "10"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "11") (term "1,0") (ifseqformula "10"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "11"))
   (rule "close" (formula "14") (ifseqformula "13"))
)
(branch "Pre (iterator)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,0,1,0"))
   (rule "nnf_imp2or" (formula "8") (term "0"))
   (rule "nnf_notAnd" (formula "8") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "8") (term "0,0,0"))
   (rule "polySimp_rightDist" (formula "8") (term "1,0,0,0,0,0"))
   (rule "mul_literals" (formula "8") (term "0,1,0,0,0,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "0,0,0,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,0,0,0,0"))
   (rule "add_zero_left" (formula "8") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "8") (term "0,0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "1,0,0,0"))
   (rule "inEqSimp_notGeq" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "8") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
   (rule "mul_literals" (formula "8") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_java_util_ArrayList" (formula "13"))
   (rule "closeTrue" (formula "13"))
)
(branch "Null reference (_cols_1 = null)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")))
   (rule "closeTrue" (formula "13"))
)
)
}
