\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 10 14:58:16 CET 2019
[Labels]UseOriginLabels=false
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sun Nov 10 14:58:16 CET 2019
contract=de.polyas.core3.open.cred.CredentialGenerator[de.polyas.core3.open.cred.CredentialGenerator\\:\\:append(java.lang.String,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.CredentialGenerator[de.polyas.core3.open.cred.CredentialGenerator\\:\\:append(java.lang.String,java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "1364")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "s0_3,s1_11,s2_11,result_209,exc_237,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "3"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_append,savedHeapBefore_append"))
 (builtin "One Step Simplification" (formula "9"))
(rule "returnUnfold" (formula "9") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "s"))
(rule "compound_addition_1" (formula "9") (term "1") (inst "#v=s_1"))
(rule "variableDeclarationAssign" (formula "9") (term "1"))
(rule "variableDeclaration" (formula "9") (term "1") (newnames "s_1"))
(rule "stringConcat" (formula "9") (term "1") (inst "sk=sk_0"))
 (builtin "One Step Simplification" (formula "11"))
 (builtin "One Step Simplification" (formula "10"))
 (builtin "One Step Simplification" (formula "1"))
(rule "stringConcat" (formula "11") (term "1") (inst "sk=sk_1"))
 (builtin "One Step Simplification" (formula "13"))
 (builtin "One Step Simplification" (formula "12"))
 (builtin "One Step Simplification" (formula "1"))
(rule "applyEq" (formula "1") (term "0,1") (ifseqformula "2"))
(rule "eqSeqConcat" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "lenOfSeqSubEQ" (formula "2") (term "1,1") (ifseqformula "4"))
(rule "polySimp_homoEq" (formula "2"))
(rule "polySimp_elimSub" (formula "2") (term "1,1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,0"))
(rule "polySimp_sepPosMonomial" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1"))
(rule "polySimp_rightDist" (formula "2") (term "1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1"))
(rule "polySimp_mulComm0" (formula "2") (term "0,1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "2") (term "1"))
(rule "times_zero_2" (formula "2") (term "1,0,1"))
(rule "add_zero_right" (formula "2") (term "0,1"))
(rule "polySimp_sepPosMonomial" (formula "2") (term "1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0"))
(rule "eqSeqConcat" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "lenOfSeqConcat" (formula "3") (term "1,0"))
(rule "lenOfSeqConcat" (formula "1") (term "0,1"))
(rule "lenOfSeqConcat" (formula "2") (term "2,0"))
(rule "lenOfSeqSubEQ" (formula "3") (term "1,1,0") (ifseqformula "6"))
(rule "polySimp_elimSub" (formula "3") (term "1,1,1,0"))
(rule "polySimp_addComm0" (formula "3") (term "1,1,1,0"))
(rule "lenOfSeqSubEQ" (formula "1") (term "1,0,1") (ifseqformula "6"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,1"))
(rule "polySimp_homoEq" (formula "1"))
(rule "polySimp_addComm1" (formula "1") (term "0,0"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "lenOfSeqSubEQ" (formula "2") (term "1,2,0") (ifseqformula "6"))
(rule "polySimp_elimSub" (formula "2") (term "1,1,2,0"))
(rule "polySimp_addComm0" (formula "2") (term "1,1,2,0"))
(rule "lenOfSeqSubEQ" (formula "1") (term "1,0,0,0") (ifseqformula "3"))
(rule "polySimp_elimSub" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,1,0,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "0,1,1,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "1,1,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "0,1,1,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,1,1,0"))
(rule "polySimp_addComm1" (formula "3") (term "0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,2,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,2,0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,2,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,0,1,1,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,0,1,1,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,0,1,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0,0,1,0"))
(rule "polySimp_addComm1" (formula "1") (term "0,0,1,0,0,1,0"))
(rule "polySimp_sepPosMonomial" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "1"))
(rule "polySimp_rightDist" (formula "1") (term "1"))
(rule "polySimp_rightDist" (formula "1") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "1,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "polySimp_homoEq" (formula "1") (term "1"))
(rule "times_zero_2" (formula "1") (term "1,0,1"))
(rule "add_zero_right" (formula "1") (term "0,1"))
(rule "polySimp_sepNegMonomial" (formula "1") (term "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "3") (term "0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "3") (term "0,0,1,1,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,2,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,2,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1,2,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0,0,0,1"))
(rule "polySimp_elimOne" (formula "1") (term "0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
(rule "polySimp_rightDist" (formula "1") (term "0,1,0"))
(rule "mul_literals" (formula "1") (term "0,0,1,0"))
(rule "eqSeqConcat" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "lenOfSeqSub" (formula "4") (term "2,0"))
(rule "polySimp_elimSub" (formula "4") (term "1,2,0"))
(rule "times_zero_2" (formula "4") (term "1,1,2,0"))
(rule "add_zero_right" (formula "4") (term "1,2,0"))
(rule "lenOfSeqSubEQ" (formula "2") (term "1,1") (ifseqformula "8"))
(rule "polySimp_homoEq" (formula "2"))
(rule "polySimp_elimSub" (formula "2") (term "1,1,0,0"))
(rule "polySimp_addComm0" (formula "2") (term "1,1,0,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "lenOfSeqSub" (formula "2") (term "0,1,0,0"))
(rule "polySimp_elimSub" (formula "2") (term "1,0,1,0,0"))
(rule "mul_literals" (formula "2") (term "1,1,0,1,0,0"))
(rule "add_zero_right" (formula "2") (term "1,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "4") (term "0,2,0"))
(rule "add_zero_right" (formula "4") (term "0,0,2,0"))
(rule "polySimp_rightDist" (formula "4") (term "1,0,0,2,0"))
(rule "polySimp_mulComm0" (formula "4") (term "0,1,0,0,2,0"))
(rule "polySimp_addAssoc" (formula "4") (term "0,0,2,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,1,0"))
(rule "polySimp_addComm1" (formula "2") (term "0"))
(rule "polySimp_addComm1" (formula "2") (term "0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "0,0,1,0"))
(rule "add_zero_right" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "2") (term "0,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,0,1,0"))
(rule "polySimp_sepNegMonomial" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "polySimp_elimOne" (formula "2") (term "0"))
(rule "applyEq" (formula "4") (term "2,0") (ifseqformula "2"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,1,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0,1,1"))
(rule "polySimp_elimOne" (formula "2") (term "0,0,1,1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "2") (term "1"))
(rule "times_zero_2" (formula "2") (term "1,0,1"))
(rule "add_zero_right" (formula "2") (term "0,1"))
(rule "polySimp_sepPosMonomial" (formula "2") (term "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,1,2,0"))
(rule "polySimp_mulLiterals" (formula "4") (term "0,0,1,2,0"))
(rule "polySimp_elimOne" (formula "4") (term "0,0,1,2,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0"))
(rule "inEqSimp_or_weaken0" (formula "1"))
(rule "polySimp_addAssoc" (formula "1") (term "1,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,1,0"))
(rule "add_literals" (formula "1") (term "0,0,1,0"))
(rule "add_zero_left" (formula "1") (term "0,1,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "commute_or" (formula "6"))
(rule "inEqSimp_or_weaken1" (formula "6"))
 (builtin "One Step Simplification" (formula "6"))
(rule "methodCallReturn" (formula "19") (term "1"))
(rule "assignment" (formula "19") (term "1"))
 (builtin "One Step Simplification" (formula "19"))
(rule "commute_or" (formula "2"))
(rule "inEqSimp_or_weaken1" (formula "2"))
 (builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
(rule "polySimp_mulAssoc" (formula "2") (term "0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "0,0"))
(rule "polySimp_elimOne" (formula "2") (term "0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0"))
(rule "polySimp_pullOutFactor1" (formula "2") (term "0,0"))
(rule "add_literals" (formula "2") (term "1,0,0"))
(rule "times_zero_1" (formula "2") (term "0,0"))
(rule "add_zero_left" (formula "2") (term "0"))
(rule "methodCallEmpty" (formula "20") (term "1"))
(rule "tryEmpty" (formula "20") (term "1"))
(rule "emptyModality" (formula "20") (term "1"))
 (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "19")))
(rule "allRight" (formula "20") (inst "sk=f_0"))
(rule "allRight" (formula "20") (inst "sk=o_0"))
(rule "orRight" (formula "20"))
(rule "eqSymm" (formula "21"))
(rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=f_0_0"))
(rule "simplifySelectOfCreate" (formula "1"))
(rule "castDel" (formula "1") (term "1,0"))
(rule "eqSymm" (formula "22"))
(rule "eqSymm" (formula "1") (term "0,0,0,0"))
(rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "1"))
(rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
(rule "simplifySelectOfCreate" (formula "1"))
(rule "castDel" (formula "1") (term "1,0"))
(rule "eqSymm" (formula "1") (term "0,0,0,0"))
(rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "20"))
 (builtin "One Step Simplification" (formula "1"))
(rule "commute_and" (formula "2") (term "0,0"))
(rule "commute_and" (formula "1") (term "0,0"))
(rule "ifthenelse_split" (formula "7") (term "1,2,0"))
(branch "strContent(sk_0).length ≥ 1 + strContent(s0_3).length TRUE"
   (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_left" (formula "6") (term "0,1,2,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "replace_known_left" (formula "9") (term "0,1,1,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_left" (formula "8") (term "0,1,2,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "6") (term "2,0,0"))
   (rule "polySimp_pullOutFactor1" (formula "6") (term "0,2,0,0"))
   (rule "add_literals" (formula "6") (term "1,0,2,0,0"))
   (rule "times_zero_1" (formula "6") (term "0,2,0,0"))
   (rule "add_zero_left" (formula "6") (term "2,0,0"))
   (rule "polySimp_addAssoc" (formula "9") (term "1,0"))
   (rule "polySimp_pullOutFactor1" (formula "9") (term "0,1,0"))
   (rule "add_literals" (formula "9") (term "1,0,1,0"))
   (rule "times_zero_1" (formula "9") (term "0,1,0"))
   (rule "add_zero_left" (formula "9") (term "1,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "2,0,0"))
   (rule "polySimp_pullOutFactor1" (formula "8") (term "0,2,0,0"))
   (rule "add_literals" (formula "8") (term "1,0,2,0,0"))
   (rule "times_zero_1" (formula "8") (term "0,2,0,0"))
   (rule "add_zero_left" (formula "8") (term "2,0,0"))
   (rule "polySimp_addAssoc" (formula "8") (term "2,0"))
   (rule "polySimp_pullOutFactor1" (formula "8") (term "0,2,0"))
   (rule "add_literals" (formula "8") (term "1,0,2,0"))
   (rule "times_zero_1" (formula "8") (term "0,2,0"))
   (rule "add_zero_left" (formula "8") (term "2,0"))
   (rule "inEqSimp_homoInEq1" (formula "5"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "5") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "5") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0"))
   (rule "polySimp_pullOutFactor2" (formula "5") (term "0,0"))
   (rule "add_literals" (formula "5") (term "1,0,0"))
   (rule "times_zero_1" (formula "5") (term "0,0"))
   (rule "add_zero_left" (formula "5") (term "0"))
   (rule "inEqSimp_homoInEq0" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
   (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
   (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
   (rule "polySimp_pullOutFactor2" (formula "3") (term "0,0,0"))
   (rule "add_literals" (formula "3") (term "1,0,0,0"))
   (rule "times_zero_1" (formula "3") (term "0,0,0"))
   (rule "add_zero_left" (formula "3") (term "0,0"))
   (rule "inEqSimp_invertInEq0" (formula "5"))
   (rule "polySimp_mulLiterals" (formula "5") (term "0"))
   (rule "times_zero_2" (formula "5") (term "1"))
   (rule "polySimp_elimOne" (formula "5") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1"))
   (rule "polySimp_elimOne" (formula "3") (term "1"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "7"))
   (rule "inEqSimp_homoInEq0" (formula "10") (term "0"))
   (rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
   (rule "add_literals" (formula "10") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "10") (term "1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "qeq_literals" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "lenNonNegative" (formula "11") (term "2,0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "lenNonNegative" (formula "11") (term "1,0"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
   (rule "andLeft" (formula "12"))
   (rule "lenOfSeqSub" (formula "12") (term "0"))
   (rule "polySimp_elimSub" (formula "12") (term "1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "1,0"))
   (rule "lenOfSeqSub" (formula "13") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
   (rule "polySimp_addComm0" (formula "13") (term "1,1,1,0,0"))
   (rule "lenOfSeqSubEQ" (formula "12") (term "1") (ifseqformula "14"))
   (rule "eqSymm" (formula "12"))
   (rule "polySimp_elimSub" (formula "12") (term "1,0"))
   (rule "polySimp_addComm0" (formula "12") (term "1,0"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,1,1,0,0"))
   (rule "polySimp_addComm1" (formula "12") (term "0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "12") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
   (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
   (rule "andLeft" (formula "10"))
   (rule "lenOfSeqSub" (formula "10") (term "0"))
   (rule "polySimp_elimSub" (formula "10") (term "1,0"))
   (rule "times_zero_2" (formula "10") (term "1,1,0"))
   (rule "add_zero_right" (formula "10") (term "1,0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "eqSymm" (formula "10") (term "1"))
   (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "11") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "11") (term "1,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0"))
   (rule "add_zero_right" (formula "10") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "11") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
   (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
   (rule "polySimp_elimOne" (formula "10") (term "0,0"))
   (rule "commute_or" (formula "10"))
   (rule "inEqSimp_or_weaken1" (formula "10"))
   (rule "add_zero_right" (formula "10") (term "1,0"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")))
   (rule "true_left" (formula "10"))
   (rule "ifthenelse_split" (formula "1") (term "0"))
   (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
      (rule "andLeft" (formula "1"))
      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
      (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "2"))
      (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "notRight" (formula "23"))
      (rule "applyEqRigid" (formula "24") (term "2,0") (ifseqformula "2"))
      (rule "castTrueImpliesOriginalTrue" (formula "24") (ifseqformula "1"))
      (rule "closeTrue" (formula "24"))
   )
   (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "lenNonNegative" (formula "3") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "cut_direct" (formula "23") (term "0,0"))
      (branch "CUT: o_0 = null TRUE"
          (builtin "One Step Simplification" (formula "24"))
         (rule "false_right" (formula "24"))
         (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "18") (term "0,1") (ifseqformula "1"))
         (rule "eqSymm" (formula "18") (term "1"))
         (rule "replace_known_right" (formula "18") (term "1") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "false_right" (formula "18"))
         (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
         (rule "eqSymm" (formula "2") (term "1,0,0"))
         (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "23")))
         (rule "closeFalse" (formula "2"))
      )
      (branch "CUT: o_0 = null FALSE"
          (builtin "One Step Simplification" (formula "24"))
         (rule "notRight" (formula "24"))
         (rule "substringSubstring" (formula "6") (term "0") (inst "newSym=newSym_0"))
         (rule "qeq_literals" (formula "6") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "12")))
         (rule "add_zero_left" (formula "6") (term "1,0,1,1"))
         (rule "qeq_literals" (formula "6") (term "1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_zero_left" (formula "6") (term "2,0,1,1"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0"))
         (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "7"))
         (rule "inEqSimp_subsumption1" (formula "6") (term "0") (ifseqformula "8"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0"))
         (rule "qeq_literals" (formula "6") (term "0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "applyEq" (formula "7") (term "0,2,0") (ifseqformula "6"))
         (rule "applyEq" (formula "8") (term "0,2,0") (ifseqformula "6"))
         (rule "lenOfSeqSubEQ" (formula "12") (term "2,0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "12") (term "1,2,0"))
         (rule "mul_literals" (formula "12") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "12") (term "1,2,0"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "1,0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "9") (term "1,1") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,1"))
         (rule "times_zero_2" (formula "9") (term "1,1,1,1"))
         (rule "add_zero_right" (formula "9") (term "1,1,1"))
         (rule "lenOfSeqSubEQ" (formula "14") (term "1,0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "14") (term "1,1,0"))
         (rule "mul_literals" (formula "14") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "14") (term "1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "13") (term "0") (ifseqformula "8"))
         (rule "polySimp_elimSub" (formula "13") (term "1,0"))
         (rule "times_zero_2" (formula "13") (term "1,1,0"))
         (rule "add_zero_right" (formula "13") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "12") (term "0,2,0"))
         (rule "add_zero_right" (formula "12") (term "0,0,2,0"))
         (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,2,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,1,0"))
         (rule "add_zero_right" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0"))
         (rule "add_zero_right" (formula "13") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0"))
         (rule "inEqSimp_homoInEq1" (formula "9"))
         (rule "polySimp_addComm1" (formula "9") (term "0"))
         (rule "applyEq" (formula "12") (term "1") (ifseqformula "6"))
         (rule "applyEq" (formula "8") (term "1") (ifseqformula "6"))
         (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,2,0"))
         (rule "polySimp_mulLiterals" (formula "12") (term "0,0,2,0"))
         (rule "polySimp_elimOne" (formula "12") (term "0,0,2,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "13") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "9") (term "0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9"))
         (rule "polySimp_mulComm0" (formula "9") (term "1"))
         (rule "polySimp_rightDist" (formula "9") (term "1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
         (rule "mul_literals" (formula "9") (term "0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "9"))
         (rule "mul_literals" (formula "13") (term "0,0"))
         (rule "add_zero_left" (formula "13") (term "0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "13"))
         (rule "mul_literals" (formula "13") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "13"))
         (rule "leq_literals" (formula "5") (term "0"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "10") (inst "iv=iv"))
         (rule "andLeft" (formula "10"))
         (rule "lenOfSeqSub" (formula "10") (term "0"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1,0"))
         (rule "lenOfSeqSub" (formula "11") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "11") (term "1,1,1,0,0"))
         (rule "polySimp_addComm0" (formula "11") (term "1,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "12"))
         (rule "eqSymm" (formula "10"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "1,0"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,1,0,0"))
         (rule "polySimp_addComm1" (formula "10") (term "0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
         (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_1 TRUE"
            (rule "andLeft" (formula "2"))
            (rule "applyEqReverse" (formula "29") (term "1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "3"))
            (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
            (rule "applyEq" (formula "28") (term "2,0") (ifseqformula "2"))
            (rule "narrowSelectType" (formula "28") (term "0") (ifseqformula "16"))
            (rule "applyEq" (formula "27") (term "0") (ifseqformula "3"))
            (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "3"))
            (rule "close" (formula "27") (ifseqformula "1"))
         )
         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_1 FALSE"
            (rule "close" (formula "28") (ifseqformula "2"))
         )
      )
   )
)
(branch "strContent(sk_0).length ≥ 1 + strContent(s0_3).length FALSE"
   (rule "add_zero_right" (formula "7") (term "2,0"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "17")))
   (rule "eqSymm" (formula "7"))
   (rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "replace_known_right" (formula "6") (term "0,1,2,0,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "add_zero_right" (formula "6") (term "2,0,0"))
   (rule "replace_known_right" (formula "8") (term "0,1,1,0") (ifseqformula "17"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "add_zero_right" (formula "8") (term "1,0"))
   (rule "eqSeqEmpty" (formula "7"))
   (rule "inEqSimp_geqRight" (formula "17"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0"))
   (rule "lenOfSeqSubEQ" (formula "8") (term "0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_elimSub" (formula "8") (term "0,1"))
   (rule "polySimp_addComm0" (formula "8") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_commuteGeq" (formula "6"))
   (rule "inEqSimp_homoInEq0" (formula "4"))
   (rule "times_zero_2" (formula "4") (term "1,0"))
   (rule "add_zero_right" (formula "4") (term "0"))
   (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
   (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
   (rule "polySimp_elimOne" (formula "8") (term "1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1"))
   (rule "polySimp_elimOne" (formula "1") (term "1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0,0"))
   (rule "polySimp_mulLiterals" (formula "8") (term "0,0,0"))
   (rule "polySimp_elimOne" (formula "8") (term "0,0,0"))
   (rule "inEqSimp_invertInEq0" (formula "6"))
   (rule "mul_literals" (formula "6") (term "1"))
   (rule "polySimp_mulLiterals" (formula "6") (term "0"))
   (rule "polySimp_elimOne" (formula "6") (term "0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "4"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1"))
   (rule "polySimp_elimOne" (formula "4") (term "1"))
   (rule "inEqSimp_contradInEq0" (formula "8") (term "0,0") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq1" (formula "8") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "8") (term "0,0,0,0"))
   (rule "add_literals" (formula "8") (term "1,1,0,0,0,0"))
   (rule "times_zero_1" (formula "8") (term "1,0,0,0,0"))
   (rule "add_zero_right" (formula "8") (term "0,0,0,0"))
   (rule "leq_literals" (formula "8") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "12"))
   (rule "eqSymm" (formula "12"))
   (rule "eqSeqEmpty" (formula "12"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,0"))
   (rule "times_zero_1" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
   (rule "inEqSimp_homoInEq1" (formula "9"))
   (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
   (rule "add_literals" (formula "9") (term "1,0"))
   (rule "times_zero_1" (formula "9") (term "0"))
   (rule "leq_literals" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
   (rule "andLeft" (formula "9"))
   (rule "lenOfSeqSub" (formula "9") (term "0"))
   (rule "polySimp_elimSub" (formula "9") (term "1,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0"))
   (rule "add_zero_right" (formula "9") (term "1,0"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "eqSymm" (formula "9") (term "1"))
   (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
   (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
   (rule "times_zero_2" (formula "10") (term "1,1,1,1,0,0"))
   (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
   (rule "add_zero_right" (formula "9") (term "0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
   (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
   (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
   (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
   (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
   (rule "polySimp_elimOne" (formula "9") (term "0,0"))
   (rule "commute_or" (formula "9"))
   (rule "inEqSimp_or_weaken1" (formula "9"))
   (rule "add_literals" (formula "9") (term "1,0"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "5")))
   (rule "true_left" (formula "9"))
   (rule "lenNonNegative" (formula "9") (term "2,0"))
   (rule "inEqSimp_commuteLeq" (formula "9"))
   (rule "ifthenelse_split" (formula "1") (term "0"))
   (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 TRUE"
      (rule "andLeft" (formula "1"))
      (rule "applyEqReverse" (formula "4") (term "2,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
      (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "21") (term "1,0,0,1") (ifseqformula "2"))
      (rule "applyEqRigid" (formula "22") (term "2,0") (ifseqformula "1"))
      (rule "narrowSelectType" (formula "22") (term "0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "21") (term "0,1") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "notRight" (formula "21"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
      (rule "close" (formula "20") (ifseqformula "1"))
   )
   (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_0 FALSE"
      (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "lenNonNegative" (formula "3") (term "0"))
      (rule "inEqSimp_commuteLeq" (formula "3"))
      (rule "cut_direct" (formula "21") (term "0,0"))
      (branch "CUT: o_0 = null TRUE"
          (builtin "One Step Simplification" (formula "22"))
         (rule "false_right" (formula "22"))
         (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
         (rule "applyEq" (formula "22") (term "1,0") (ifseqformula "1"))
         (rule "applyEqRigid" (formula "16") (term "0,1") (ifseqformula "1"))
         (rule "eqSymm" (formula "16") (term "1"))
         (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "false_right" (formula "16"))
         (rule "applyEqRigid" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
         (rule "eqSymm" (formula "2") (term "1,0,0"))
         (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
         (rule "closeFalse" (formula "2"))
      )
      (branch "CUT: o_0 = null FALSE"
          (builtin "One Step Simplification" (formula "22"))
         (rule "notRight" (formula "22"))
         (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
         (rule "andLeft" (formula "6"))
         (rule "lenOfSeqSub" (formula "7") (term "1,1,0,0"))
         (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
         (rule "times_zero_2" (formula "7") (term "1,1,1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
         (rule "lenOfSeqSub" (formula "6") (term "0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0"))
         (rule "mul_literals" (formula "6") (term "1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSymm" (formula "6") (term "1"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
         (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0"))
         (rule "commute_or" (formula "6"))
         (rule "inEqSimp_or_weaken1" (formula "6"))
         (rule "add_zero_right" (formula "6") (term "1,0"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
         (rule "true_left" (formula "6"))
         (rule "substringSubstring" (formula "6") (term "0") (inst "newSym=newSym_0"))
         (rule "add_zero_left" (formula "6") (term "2,0,1,1"))
         (rule "qeq_literals" (formula "6") (term "1,0,0,0"))
          (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
         (rule "add_zero_left" (formula "6") (term "1,0,1,1"))
         (rule "qeq_literals" (formula "6") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
         (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
         (rule "polySimp_pullOutFactor1" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,0,0"))
         (rule "times_zero_1" (formula "6") (term "0,0"))
         (rule "qeq_literals" (formula "6") (term "0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "applyEq" (formula "8") (term "0") (ifseqformula "6"))
         (rule "eqSymm" (formula "8"))
         (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "7"))
         (rule "eqSameSeq" (formula "6") (inst "iv=iv"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "add_zero_right" (formula "6") (term "1,1,1,0,1,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSymm" (formula "6") (term "1"))
         (rule "eqSymm" (formula "6") (term "0,0"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1"))
         (rule "mul_literals" (formula "6") (term "1,0,1"))
         (rule "add_zero_right" (formula "6") (term "0,1"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,0,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "1,0,0") (ifseqformula "7"))
         (rule "eqSymm" (formula "6") (term "0,0"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0,0"))
         (rule "mul_literals" (formula "6") (term "1,1,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSymm" (formula "6") (term "1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "1,1") (ifseqformula "7"))
         (rule "eqSymm" (formula "6") (term "1"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1"))
         (rule "add_zero_right" (formula "6") (term "1,0,1"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "eqSymm" (formula "6") (term "1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
         (rule "applyEq" (formula "11") (term "0,2,0") (ifseqformula "8"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,1,1,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,1,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "3") (term "1") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "3") (term "1,1"))
         (rule "mul_literals" (formula "3") (term "1,1,1"))
         (rule "add_zero_right" (formula "3") (term "1,1"))
         (rule "lenOfSeqSubEQ" (formula "5") (term "0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0"))
         (rule "times_zero_2" (formula "5") (term "1,1,0"))
         (rule "add_zero_right" (formula "5") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "1") (ifseqformula "11"))
         (rule "eqSymm" (formula "10"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0"))
         (rule "times_zero_2" (formula "10") (term "1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,0"))
         (rule "lenOfSeqSubEQ" (formula "9") (term "1,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "9") (term "1,1,0"))
         (rule "mul_literals" (formula "9") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "9") (term "1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "7") (term "2,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "7") (term "1,2,0"))
         (rule "times_zero_2" (formula "7") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "7") (term "1,2,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "3") (term "0,1"))
         (rule "add_zero_right" (formula "3") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,1") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,1"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,1"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,1"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,0"))
         (rule "add_zero_right" (formula "9") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "0,2,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,2,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,2,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,0,1,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,0,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,0,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,0"))
         (rule "inEqSimp_commuteGeq" (formula "3"))
         (rule "applyEq" (formula "11") (term "1") (ifseqformula "8"))
         (rule "applyEqRigid" (formula "3") (term "0") (ifseqformula "10"))
         (rule "inEqSimp_commuteLeq" (formula "3"))
         (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,0") (ifseqformula "10"))
         (rule "applyEqRigid" (formula "6") (term "0,1,0,0,1") (ifseqformula "10"))
         (rule "applyEqRigid" (formula "9") (term "1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "7") (term "2,0") (ifseqformula "10"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "1,0,1,0,0,0,1,1,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0,1,0,0,0,1,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,1,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0,1,0,0,0,1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1,1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1,1"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1,1"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "0,1,0,0,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "10") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "10") (term "1,1,0,1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "1,0,1,0,0,0"))
         (rule "lenOfSeqSubEQ" (formula "10") (term "1,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "10") (term "1,1,0"))
         (rule "mul_literals" (formula "10") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "10") (term "1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "5") (term "0,1,0,0,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "5") (term "1,0,1,0,0,0"))
         (rule "mul_literals" (formula "5") (term "1,1,0,1,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "1,0,1,0,0,0"))
         (rule "lenOfSeqSubEQ" (formula "11") (term "2,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "11") (term "1,2,0"))
         (rule "times_zero_2" (formula "11") (term "1,1,2,0"))
         (rule "add_zero_right" (formula "11") (term "1,2,0"))
         (rule "lenOfSeqSubEQ" (formula "5") (term "1,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "5") (term "1,1,0"))
         (rule "times_zero_2" (formula "5") (term "1,1,1,0"))
         (rule "add_zero_right" (formula "5") (term "1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,1,0,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,1,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,1,0,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,0,1,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,0,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,0,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,1,1") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,1,1"))
         (rule "mul_literals" (formula "6") (term "1,1,0,1,0,0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,1,1"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "1,0,0,1,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "6") (term "1,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,1,0,0,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1,0,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1,0,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
         (rule "add_zero_right" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1,0,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,1,0,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "11") (term "0,2,0"))
         (rule "add_zero_right" (formula "11") (term "0,0,2,0"))
         (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,2,0"))
         (rule "inEqSimp_ltToLeq" (formula "5") (term "0,1,0"))
         (rule "add_zero_right" (formula "5") (term "0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,1,1,1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "polySimp_elimSub" (formula "6") (term "0,1,1,1,1,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,0,1,1,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,1,1,1,1,1,0"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,1,0,0,0,1,1,0") (ifseqformula "7"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "times_zero_2" (formula "6") (term "1,1,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "lenOfSeqSubEQ" (formula "6") (term "0,1,0,0,0,1,1,1,0") (ifseqformula "11"))
         (rule "polySimp_elimSub" (formula "6") (term "1,0,1,0,0,0,1,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,1,0,1,0,0,0,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "1,0,1,0,0,0,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,1,0,0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0,1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,1,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,1,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,0,0,0,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,1,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,1,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,1,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,0,0,0,1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,0,0,0,1,0,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,0,0,0,1,0,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,1,0,0,1,0"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1,0,0,0,1,0,0,0,1,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0,0,1,0,0,0,1,1"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0,0,0,1,0,0,0,1,1"))
         (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,1,1") (ifseqformula "10"))
         (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,1,1,0") (ifseqformula "10"))
         (rule "applyEqRigid" (formula "6") (term "1,0,0,1,0") (ifseqformula "10"))
         (rule "applyEqRigid" (formula "6") (term "0,1,0,0,0,1,1,1,0") (ifseqformula "10"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "10"))
         (rule "applyEq" (formula "6") (term "0,1,0,0,0,1,0,0") (ifseqformula "10"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,1,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,1,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "11") (term "0,2,0"))
         (rule "polySimp_mulLiterals" (formula "11") (term "0,0,2,0"))
         (rule "polySimp_elimOne" (formula "11") (term "0,0,2,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,1,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0"))
         (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0"))
         (rule "polySimp_elimOne" (formula "10") (term "0,0,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,0,1,1,1,1,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0,1,1,1,1,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0,1,1,1,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,0,0,0,1,1,0,0"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0,1,1,0,0"))
         (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,1,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1,1,1,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,1,1,1,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,1,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,1"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,1"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,1,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,0,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,1,1,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,1,1,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,1,1,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,1,1,0"))
         (rule "inEqSimp_notGeq" (formula "6") (term "0,1,1,0,0"))
         (rule "mul_literals" (formula "6") (term "1,0,0,0,1,1,0,0"))
         (rule "add_literals" (formula "6") (term "0,0,0,1,1,0,0"))
         (rule "add_zero_left" (formula "6") (term "0,0,1,1,0,0"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_1 TRUE"
            (rule "andLeft" (formula "2"))
            (rule "applyEqReverse" (formula "27") (term "1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "26") (term "1,0") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "26") (term "2,0") (ifseqformula "2"))
            (rule "narrowSelectType" (formula "26") (term "0") (ifseqformula "14"))
            (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "3"))
            (rule "close" (formula "26") (ifseqformula "1"))
         )
         (branch "f_0 = java.lang.Object::<created> ∧ o_0 = sk_1 FALSE"
            (rule "close" (formula "26") (ifseqformula "2"))
         )
      )
   )
)
)
}
