\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 13 14:47:23 CET 2019
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:javaSemantics , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , methodExpansion-methodExpansion\\:modularOnly
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Labels]UseOriginLabels=false
[SMTSettings]integersMaximum=2147483645
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Nov 13 14:47:23 CET 2019
name=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:hexCharacters()].Non-interference contract.0
contract=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:hexCharacters()].Non-interference contract.0
class=de.uka.ilkd.key.informationflow.po.InfFlowContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion ""))

(autoModeTime "8074")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1") (userinteraction))
(rule "andLeft" (formula "1") (userinteraction))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "2") (term "0,0,0,1"))
(rule "eqSymm" (formula "2") (term "1,0,0,1"))
(rule "assignment" (formula "2") (term "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "boxToDiamond" (formula "2") (term "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_hexCharacters,savedHeapBefore_hexCharacters"))
 (builtin "One Step Simplification" (formula "3"))
(rule "returnUnfold" (formula "3") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "3") (term "1") (inst "#v0=s"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "s"))
(rule "stringAssignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "notLeft" (formula "1"))
 (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_toCharArray,result_158,exc_197,heapAfter_toCharArray,anon_heap_toCharArray") (contract "java.lang.String[java.lang.String::toCharArray()].JML normal_behavior operation contract.0"))
(branch "Post (toCharArray)"
    (builtin "One Step Simplification" (formula "9"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
    (builtin "One Step Simplification" (formula "6"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "eqSymm" (formula "7"))
   (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "poolKeyIsContentOfValue" (formula "7") (term "0,0"))
   (rule "eqSymm" (formula "7"))
   (rule "lenOfSeqConcat" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "polySimp_addAssoc" (formula "7") (term "1"))
   (rule "add_literals" (formula "7") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
   (rule "lenOfSeqConcat" (formula "7") (term "1,1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "add_literals" (formula "7") (term "1,1"))
   (rule "add_literals" (formula "7") (term "1"))
   (rule "assignment" (formula "15") (term "1"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "12"))
   (rule "true_left" (formula "12"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "commute_or" (formula "6"))
   (rule "commute_and" (formula "8") (term "1,0"))
   (rule "commute_and" (formula "8") (term "0,0"))
   (rule "methodCallReturn" (formula "13") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "methodCallEmpty" (formula "13") (term "1"))
   (rule "tryEmpty" (formula "13") (term "1"))
   (rule "emptyModality" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "notRight" (formula "13"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "2"))
   (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
   (rule "expand_inInt" (formula "10"))
   (rule "replace_int_MIN" (formula "10") (term "0,1"))
   (rule "replace_int_MAX" (formula "10") (term "1,0"))
   (rule "andLeft" (formula "10"))
   (rule "inEqSimp_commuteLeq" (formula "11"))
   (rule "arrayLengthNotNegative" (formula "12") (term "0"))
   (rule "Use_information_flow_contract_for_toCharArray_1742633537" (formula "16") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "true_left" (formula "16"))
   (rule "andLeft" (formula "6"))
   (rule "eqSymm" (formula "7") (term "1,0,0,1"))
   (rule "eqSymm" (formula "7") (term "0,0,0,1"))
   (rule "assignment" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "boxToDiamond" (formula "7") (term "1"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "methodBodyExpand" (formula "17") (term "1") (newnames "heapBefore_hexCharacters_0,savedHeapBefore_hexCharacters_0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "returnUnfold" (formula "17") (term "1") (inst "#v0=x_arr"))
   (rule "variableDeclarationAssign" (formula "17") (term "1"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_arr_1"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "17") (term "1") (inst "#v0=s"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "s_1"))
   (rule "stringAssignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "1"))
    (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_toCharArray_0,result_159,exc_198,heapAfter_toCharArray_0,anon_heap_toCharArray_0") (contract "java.lang.String[java.lang.String::toCharArray()].JML normal_behavior operation contract.0"))
   (branch "Post (toCharArray)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "7")))
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "expand_inChar" (formula "19") (term "1,0,0,1,0,1,1"))
      (rule "replace_char_MAX" (formula "19") (term "1,0,1,0,0,1,0,1,1"))
      (rule "replace_char_MIN" (formula "19") (term "0,1,1,0,0,1,0,1,1"))
      (rule "andLeft" (formula "19"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,1,0") (ifseqformula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "24"))
      (rule "eqSymm" (formula "21"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "27"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "poolKeyIsContentOfValue" (formula "21") (term "0,0"))
      (rule "eqSymm" (formula "21"))
      (rule "lenOfSeqConcat" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_addAssoc" (formula "21") (term "1"))
      (rule "add_literals" (formula "21") (term "0,1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0"))
      (rule "lenOfSeqConcat" (formula "21") (term "1,1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "add_literals" (formula "21") (term "1,1"))
      (rule "add_literals" (formula "21") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0"))
      (rule "assignment" (formula "28") (term "1"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "applyEq" (formula "22") (term "1,1,0,0") (ifseqformula "21"))
      (rule "applyEq" (formula "25") (term "4") (ifseqformula "24"))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "26"))
      (rule "true_left" (formula "26"))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "23"))
      (rule "true_left" (formula "23"))
      (rule "commute_or" (formula "20"))
      (rule "commute_and" (formula "22") (term "1,0"))
      (rule "commute_and" (formula "22") (term "0,0"))
      (rule "methodCallReturn" (formula "26") (term "1"))
      (rule "assignment" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "methodCallEmpty" (formula "26") (term "1"))
      (rule "tryEmpty" (formula "26") (term "1"))
      (rule "emptyModality" (formula "26") (term "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "notRight" (formula "26"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "31") (term "1"))
      (rule "eqSymm" (formula "31") (term "0"))
      (rule "eqSymm" (formula "2"))
      (rule "allFieldsEq" (formula "31") (term "1"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "25") (term "0,0,0"))
      (rule "mul_literals" (formula "25") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "25") (term "0,0,0,0,0"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "27") (term "3") (ifseqformula "1"))
      (rule "applyEq" (formula "23") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "25") (term "1,0,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "4") (ifseqformula "19"))
      (rule "applyEq" (formula "18") (term "0,0,1,0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "29") (term "0") (ifseqformula "5"))
      (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "20") (term "3") (ifseqformula "5"))
      (rule "applyEq" (formula "25") (term "1,0,0,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "18") (term "1,0,0,1,0") (ifseqformula "5"))
      (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "18") (term "1,0,1,1,0") (ifseqformula "5"))
      (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "5"))
      (rule "applyEq" (formula "13") (term "1,0,1") (ifseqformula "5"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "17"))
      (rule "qeq_literals" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "16"))
      (rule "leq_literals" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "15"))
      (rule "qeq_literals" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "applyEq" (formula "15") (term "0,1,0,0,0,0,0") (ifseqformula "14"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "0"))
      (rule "nnf_imp2or" (formula "15") (term "0"))
      (rule "nnf_notAnd" (formula "22") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "22") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "0,0,0"))
      (rule "mul_literals" (formula "22") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "22") (term "1,0,0"))
      (rule "times_zero_1" (formula "22") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "22") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0"))
      (rule "mul_literals" (formula "22") (term "1,1,0,0"))
      (rule "nnf_notAnd" (formula "15") (term "0,0"))
      (rule "inEqSimp_notLeq" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "15") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "0,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,0"))
      (rule "inEqSimp_notGeq" (formula "15") (term "1,0,0"))
      (rule "mul_literals" (formula "15") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
      (rule "mul_literals" (formula "15") (term "1,1,0,0"))
      (rule "commute_or" (formula "22") (term "0,0"))
      (rule "commute_or" (formula "15") (term "0,0"))
      (rule "cnf_rightDist" (formula "22") (term "0"))
      (rule "distr_forallAnd" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "commute_or" (formula "23") (term "0"))
      (rule "cnf_rightDist" (formula "15") (term "0"))
      (rule "distr_forallAnd" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "commute_or" (formula "16") (term "0"))
      (rule "arrayLengthNotNegative" (formula "14") (term "0"))
      (rule "arrayLengthIsAnInt" (formula "15") (term "0"))
      (rule "expand_inInt" (formula "15"))
      (rule "replace_int_MIN" (formula "15") (term "0,1"))
      (rule "replace_int_MAX" (formula "15") (term "1,0"))
      (rule "andLeft" (formula "15"))
      (rule "inEqSimp_commuteLeq" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "14"))
      (rule "leq_literals" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "arrayLengthIsAnInt" (formula "24") (term "0"))
      (rule "expand_inInt" (formula "24"))
      (rule "replace_int_MIN" (formula "24") (term "0,1"))
      (rule "replace_int_MAX" (formula "24") (term "1,0"))
      (rule "andLeft" (formula "24"))
      (rule "inEqSimp_commuteLeq" (formula "25"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "26"))
      (rule "leq_literals" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
      (rule "qeq_literals" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "arrayLengthNotNegative" (formula "24") (term "0"))
      (rule "applyEq" (formula "24") (term "0") (ifseqformula "25"))
      (rule "qeq_literals" (formula "24"))
      (rule "true_left" (formula "24"))
      (rule "cut_direct" (formula "23") (term "0"))
      (branch "CUT: resultAtPost_157_B.<created>@anon_heap_toCharArray_0«anonHeapFunction» = TRUE TRUE"
          (builtin "One Step Simplification" (formula "24"))
         (rule "true_left" (formula "24"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: resultAtPost_157_A.<created>@anon_heap_toCharArray«anonHeapFunction» = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "28") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "33")) (ifInst ""  (formula "33")))
            (rule "notLeft" (formula "28"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29") (term "0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29"))
            (rule "closeTrue" (formula "29"))
         )
         (branch "CUT: resultAtPost_157_A.<created>@anon_heap_toCharArray«anonHeapFunction» = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,1"))
            (rule "eqSymm" (formula "20") (term "0,1"))
            (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29") (term "1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29"))
            (rule "closeTrue" (formula "29"))
         )
      )
      (branch "CUT: resultAtPost_157_B.<created>@anon_heap_toCharArray_0«anonHeapFunction» = TRUE FALSE"
          (builtin "One Step Simplification" (formula "23"))
         (rule "cut_direct" (formula "13") (term "0"))
         (branch "CUT: resultAtPost_157_A.<created>@anon_heap_toCharArray«anonHeapFunction» = TRUE TRUE"
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "0,1"))
            (rule "eqSymm" (formula "20") (term "1,1"))
            (rule "replace_known_right" (formula "20") (term "0,1") (ifseqformula "34"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "notLeft" (formula "20"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29") (term "0"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29"))
            (rule "closeTrue" (formula "29"))
         )
         (branch "CUT: resultAtPost_157_A.<created>@anon_heap_toCharArray«anonHeapFunction» = TRUE FALSE"
             (builtin "One Step Simplification" (formula "13"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "20") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Use_information_flow_contract_for_toCharArray_1742633537_0" (formula "28") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "35")) (ifInst ""  (formula "35")))
            (rule "notLeft" (formula "28"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29") (term "1"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "Class_invariant_axiom_for_java_lang_String" (formula "29"))
            (rule "closeTrue" (formula "29"))
         )
      )
   )
   (branch "Exceptional Post (toCharArray)"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "expand_inChar" (formula "19") (term "1,0,0,1,0,1,1"))
      (rule "replace_char_MAX" (formula "19") (term "1,0,1,0,0,1,0,1,1"))
      (rule "replace_char_MIN" (formula "19") (term "0,1,1,0,0,1,0,1,1"))
      (rule "andLeft" (formula "19"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (term "1,0") (ifseqformula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "20"))
      (rule "close" (formula "24") (ifseqformula "23"))
   )
   (branch "Pre (toCharArray)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "7")))
      (rule "eqSymm" (formula "21") (term "1"))
      (rule "eqSymm" (formula "21") (term "0"))
      (rule "allFieldsEq" (formula "21") (term "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0"))
      (rule "applyEq" (formula "17") (term "3") (ifseqformula "2"))
      (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "11") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "10") (term "1,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "15") (term "0,0,1,0,0,0,0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "19") (term "0") (ifseqformula "2"))
      (rule "applyEq" (formula "15") (term "1,0,1,1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "15") (term "1,0,0,1,0") (ifseqformula "2"))
      (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "2"))
      (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "2"))
      (rule "applyEq" (formula "17") (term "4") (ifseqformula "16"))
      (rule "applyEq" (formula "12") (term "0") (ifseqformula "14"))
      (rule "qeq_literals" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "13"))
      (rule "leq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "applyEq" (formula "11") (term "0") (ifseqformula "12"))
      (rule "qeq_literals" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "11"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "12") (term "0"))
      (rule "nnf_notAnd" (formula "12") (term "0,0"))
      (rule "inEqSimp_notGeq" (formula "12") (term "1,0,0"))
      (rule "times_zero_1" (formula "12") (term "1,0,0,1,0,0"))
      (rule "add_zero_right" (formula "12") (term "0,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "1,0,0"))
      (rule "mul_literals" (formula "12") (term "1,1,0,0"))
      (rule "inEqSimp_notLeq" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "12") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "12") (term "0,0,0"))
      (rule "mul_literals" (formula "12") (term "1,0,0,0"))
      (rule "Class_invariant_axiom_for_java_lang_String" (formula "15"))
      (rule "closeTrue" (formula "15"))
   )
   (branch "Null reference (s_1 = null)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
      (rule "closeTrue" (formula "18"))
   )
)
(branch "Exceptional Post (toCharArray)"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "9") (ifseqformula "8"))
)
(branch "Pre (toCharArray)"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch "Null reference (s = null)"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "5"))
)
)
}
