\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Nov 04 12:02:29 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
any;
Heap;
Update;
de.polyas.core3.open.cred.CredTool\extends java.lang.Object;
Field;
boolean;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
int;
numbers;
Seq;
LocSet;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
Formula;
}

\predicates{
RELATED_BY_isEmpty_1439568742(java.lang.String,Heap,java.lang.String,boolean,java.lang.Throwable,Heap);
RELATED_BY_trim_1283894833(java.lang.String,Heap,java.lang.String,java.lang.String,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
boolean de.polyas.core3.open.cred.CredTool::exactInstance(any);
int i_0_A_0;
numbers #;
numbers 0(numbers);
int Z(numbers);
Formula geq(int,int);
Seq strContent(java.lang.String);
int seqLen(Seq);
Formula lt(int,int);
int int::seqGet(Seq,int);
numbers 3(numbers);
numbers 2(numbers);
Formula gt(int,int);
Heap anon_heap_trim;
LocSet empty;
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_trim_A_0;
Null null;
numbers 1(numbers);
Heap anon_heap_isEmpty;
Heap heapAfter_isEmpty_A_0;
boolean FALSE;
Heap heapAtPost_A;
Heap heapAtPre_B;
int i_0_B_0;
Heap heapAfter_trim_B_0;
Heap heapAfter_isEmpty_B_0;
Heap heapAtPost_B;
Formula leq(int,int);
any any::seqGet(Seq,int);
int int::cast(any);
int C(numbers);
}

\programVariables{
Heap heap;
de.polyas.core3.open.cred.CredTool self_79_A;
java.lang.String voterId_9_A;
java.lang.Throwable exc_108_A_0;
java.lang.String result_94_A_0;
java.lang.Throwable exc_109_A_0;
boolean result_95_A_0;
java.lang.Throwable exc_107_A;
boolean result_93_A;
de.polyas.core3.open.cred.CredTool selfAtPost_79_A;
boolean resultAtPost_93_A;
java.lang.Throwable excAtPost_107_A;
de.polyas.core3.open.cred.CredTool self_79_B;
java.lang.String voterId_9_B;
java.lang.Throwable exc_108_B_0;
java.lang.String result_94_B_0;
java.lang.Throwable exc_109_B_0;
boolean result_95_B_0;
java.lang.Throwable exc_107_B;
boolean result_93_B;
de.polyas.core3.open.cred.CredTool selfAtPost_79_B;
boolean resultAtPost_93_B;
java.lang.Throwable excAtPost_107_B;
java.lang.String _voterId_9_A;
java.lang.String _voterId_9_B;
}

\rules{

unfold_computed_formula_0_of_voterIdCheck_1060056493 {
  \schemaVar \term Heap sv_heapAtPre_A#16;
  \schemaVar \variables int i#30;
  \schemaVar \term java.lang.String sv_voterId_9_A#15;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_selfAtPost_79_A#18;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_79_A#14;
  \schemaVar \term boolean sv_resultAtPost_93_A#19;
  \schemaVar \term java.lang.Throwable sv_excAtPost_107_A#20;
  \schemaVar \term Heap sv_heapAtPost_A#21;
  \schemaVar \term Heap sv_heapAtPre_B#24;
  \schemaVar \variables int i#31;
  \schemaVar \term java.lang.String sv_voterId_9_B#23;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_selfAtPost_79_B#26;
  \schemaVar \term de.polyas.core3.open.cred.CredTool sv_self_79_B#22;
  \schemaVar \term boolean sv_resultAtPost_93_B#27;
  \schemaVar \term java.lang.Throwable sv_excAtPost_107_B#28;
  \schemaVar \term Heap sv_heapAtPost_B#29;
  \schemaVar \variables int i#33;
  
  \find (
      {heap:=sv_heapAtPre_A#16}
        (  wellFormed(sv_heapAtPre_A#16)
         & heap = sv_heapAtPre_A#16
         & !sv_self_79_A#14 = null
         &   boolean::select(heap, sv_self_79_A#14, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_79_A#14)
           = TRUE
         & ((  sv_voterId_9_A#15 = null
             |   boolean::select(sv_heapAtPre_A#16,
                                 sv_voterId_9_A#15,
                                 java.lang.Object::<created>)
               = TRUE)<<SC>>)
         & ((  \exists i#30;
                 ((  (leq(Z(0(#)), i#30)
                   & lt(i#30, seqLen(strContent(sv_voterId_9_A#15))))<<SC>>
                   & gt((int)(any::seqGet(strContent(sv_voterId_9_A#15), i#30)),
                        C(2(3(#)))))<<SC>>)
             & (!sv_voterId_9_A#15 = null)<<impl>>)<<SC>>)
         & {_voterId_9_A:=sv_voterId_9_A#15}
             \[{
                 exc_107_A=null;try {
                   result_93_A=self_79_A.voterIdCheck(_voterId_9_A)@de.polyas.core3.open.cred.CredTool;
                 }   catch (java.lang.Throwable e) {
                   exc_107_A=e;
                 }
               }\] (  sv_selfAtPost_79_A#18 = sv_self_79_A#14
                    & sv_resultAtPost_93_A#19 = result_93_A
                    & sv_excAtPost_107_A#20 = exc_107_A
                    & sv_heapAtPost_A#21 = heap))
    & {heap:=sv_heapAtPre_B#24}
        (  wellFormed(sv_heapAtPre_B#24)
         & heap = sv_heapAtPre_B#24
         & !sv_self_79_B#22 = null
         &   boolean::select(heap, sv_self_79_B#22, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_79_B#22)
           = TRUE
         & ((  sv_voterId_9_B#23 = null
             |   boolean::select(sv_heapAtPre_B#24,
                                 sv_voterId_9_B#23,
                                 java.lang.Object::<created>)
               = TRUE)<<SC>>)
         & ((  \exists i#31;
                 ((  (leq(Z(0(#)), i#31)
                   & lt(i#31, seqLen(strContent(sv_voterId_9_B#23))))<<SC>>
                   & gt((int)(any::seqGet(strContent(sv_voterId_9_B#23), i#31)),
                        C(2(3(#)))))<<SC>>)
             & (!sv_voterId_9_B#23 = null)<<impl>>)<<SC>>)
         & {_voterId_9_B:=sv_voterId_9_B#23}
             \[{
                 exc_107_B=null;try {
                   result_93_B=self_79_B.voterIdCheck(_voterId_9_B)@de.polyas.core3.open.cred.CredTool;
                 }   catch (java.lang.Throwable e) {
                   exc_107_B=e;
                 }
               }\] (  sv_selfAtPost_79_B#26 = sv_self_79_B#22
                    & sv_resultAtPost_93_B#27 = result_93_B
                    & sv_excAtPost_107_B#28 = exc_107_B
                    & sv_heapAtPost_B#29 = heap))
  )
  \antecedentPolarity
  \varcond (
     \notFreeIn( i#33, sv_heapAtPost_B#29),
     \notFreeIn( i#31, sv_heapAtPost_B#29),
     \notFreeIn( i#30, sv_heapAtPost_B#29),
     \notFreeIn( i#33, sv_excAtPost_107_B#28),
     \notFreeIn( i#31, sv_excAtPost_107_B#28),
     \notFreeIn( i#30, sv_excAtPost_107_B#28),
     \notFreeIn( i#33, sv_resultAtPost_93_B#27),
     \notFreeIn( i#31, sv_resultAtPost_93_B#27),
     \notFreeIn( i#30, sv_resultAtPost_93_B#27),
     \notFreeIn( i#33, sv_selfAtPost_79_B#26),
     \notFreeIn( i#31, sv_selfAtPost_79_B#26),
     \notFreeIn( i#30, sv_selfAtPost_79_B#26),
     \notFreeIn( i#33, sv_voterId_9_B#23),
     \notFreeIn( i#31, sv_voterId_9_B#23),
     \notFreeIn( i#30, sv_voterId_9_B#23),
     \notFreeIn( i#33, sv_self_79_B#22),
     \notFreeIn( i#31, sv_self_79_B#22),
     \notFreeIn( i#30, sv_self_79_B#22),
     \notFreeIn( i#33, sv_heapAtPre_B#24),
     \notFreeIn( i#31, sv_heapAtPre_B#24),
     \notFreeIn( i#30, sv_heapAtPre_B#24),
     \notFreeIn( i#33, sv_heapAtPost_A#21),
     \notFreeIn( i#31, sv_heapAtPost_A#21),
     \notFreeIn( i#30, sv_heapAtPost_A#21),
     \notFreeIn( i#33, sv_excAtPost_107_A#20),
     \notFreeIn( i#31, sv_excAtPost_107_A#20),
     \notFreeIn( i#30, sv_excAtPost_107_A#20),
     \notFreeIn( i#33, sv_resultAtPost_93_A#19),
     \notFreeIn( i#31, sv_resultAtPost_93_A#19),
     \notFreeIn( i#30, sv_resultAtPost_93_A#19),
     \notFreeIn( i#33, sv_selfAtPost_79_A#18),
     \notFreeIn( i#31, sv_selfAtPost_79_A#18),
     \notFreeIn( i#30, sv_selfAtPost_79_A#18),
     \notFreeIn( i#33, sv_voterId_9_A#15),
     \notFreeIn( i#31, sv_voterId_9_A#15),
     \notFreeIn( i#30, sv_voterId_9_A#15),
     \notFreeIn( i#33, sv_self_79_A#14),
     \notFreeIn( i#31, sv_self_79_A#14),
     \notFreeIn( i#30, sv_self_79_A#14),
     \notFreeIn( i#33, sv_heapAtPre_A#16),
     \notFreeIn( i#31, sv_heapAtPre_A#16),
     \notFreeIn( i#30, sv_heapAtPre_A#16)
  )
  \replacewith (
      {heap:=sv_heapAtPre_A#16}
        (  wellFormed(sv_heapAtPre_A#16)
         & sv_heapAtPre_A#16 = heap
         &   boolean::select(heap, sv_self_79_A#14, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_79_A#14)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#16,
                             sv_voterId_9_A#15,
                             java.lang.Object::<created>)
           = TRUE
         & geq(i_0_A_0, Z(0(#)))
         & lt(i_0_A_0, seqLen(strContent(sv_voterId_9_A#15)))
         & gt(int::seqGet(strContent(sv_voterId_9_A#15), i_0_A_0), Z(2(3(#))))
         & wellFormed(anon_heap_trim<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_trim<<anonHeapFunction>>)
           = heapAfter_trim_A_0
         & exc_108_A_0 = null
         & (    boolean::select(heap,
                                result_94_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_trim<<anonHeapFunction>>,
                                result_94_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & geq(seqLen(strContent(sv_voterId_9_A#15)),
               seqLen(strContent(result_94_A_0)))
         & (   \exists i#33;
                 (  gt(int::seqGet(strContent(sv_voterId_9_A#15), i#33),
                       Z(2(3(#))))
                  & lt(i#33, seqLen(strContent(sv_voterId_9_A#15)))
                  & geq(i#33, Z(0(#))))
            -> geq(seqLen(strContent(result_94_A_0)), Z(1(#))))
         & RELATED_BY_trim_1283894833(sv_voterId_9_A#15,
                                      heap,
                                      sv_voterId_9_A#15,
                                      result_94_A_0,
                                      exc_108_A_0,
                                      heapAfter_trim_A_0)
         & wellFormed(heap)
         & wellFormed(anon_heap_isEmpty<<anonHeapFunction>>)
         &   anon(heapAfter_trim_A_0,
                  empty,
                  anon_heap_isEmpty<<anonHeapFunction>>)
           = heapAfter_isEmpty_A_0
         & exc_109_A_0 = null
         & (result_95_A_0 = TRUE <-> seqLen(strContent(result_94_A_0)) = Z(0(#)))
         & RELATED_BY_isEmpty_1439568742(result_94_A_0,
                                         heapAfter_trim_A_0,
                                         result_94_A_0,
                                         result_95_A_0,
                                         exc_109_A_0,
                                         heapAfter_isEmpty_A_0)
         & wellFormed(heapAfter_trim_A_0)
         & !result_94_A_0 = null
         & !{exc_107_A:=null
             || heap:=heapAfter_isEmpty_A_0
             || result_93_A:=\if (result_95_A_0 = TRUE)
                                 \then (FALSE)
                                 \else (TRUE)}
              !(  sv_self_79_A#14 = sv_selfAtPost_79_A#18
                & result_93_A = sv_resultAtPost_93_A#19
                & exc_107_A = sv_excAtPost_107_A#20
                & sv_heapAtPost_A#21 = heap)
         & !sv_self_79_A#14 = null
         & !sv_voterId_9_A#15 = null)
    & {heap:=sv_heapAtPre_B#24}
        (  wellFormed(sv_heapAtPre_B#24)
         & sv_heapAtPre_B#24 = heap
         &   boolean::select(heap, sv_self_79_B#22, java.lang.Object::<created>)
           = TRUE
         &   de.polyas.core3.open.cred.CredTool::exactInstance(sv_self_79_B#22)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#24,
                             sv_voterId_9_B#23,
                             java.lang.Object::<created>)
           = TRUE
         & geq(i_0_B_0, Z(0(#)))
         & lt(i_0_B_0, seqLen(strContent(sv_voterId_9_B#23)))
         & gt(int::seqGet(strContent(sv_voterId_9_B#23), i_0_B_0), Z(2(3(#))))
         & wellFormed(anon_heap_trim<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_trim<<anonHeapFunction>>)
           = heapAfter_trim_B_0
         & exc_108_B_0 = null
         & (    boolean::select(heap,
                                result_94_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_trim<<anonHeapFunction>>,
                                result_94_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & geq(seqLen(strContent(sv_voterId_9_B#23)),
               seqLen(strContent(result_94_B_0)))
         & (   \exists i#33;
                 (  gt(int::seqGet(strContent(sv_voterId_9_B#23), i#33),
                       Z(2(3(#))))
                  & lt(i#33, seqLen(strContent(sv_voterId_9_B#23)))
                  & geq(i#33, Z(0(#))))
            -> geq(seqLen(strContent(result_94_B_0)), Z(1(#))))
         & RELATED_BY_trim_1283894833(sv_voterId_9_B#23,
                                      heap,
                                      sv_voterId_9_B#23,
                                      result_94_B_0,
                                      exc_108_B_0,
                                      heapAfter_trim_B_0)
         & wellFormed(heap)
         & wellFormed(anon_heap_isEmpty<<anonHeapFunction>>)
         &   anon(heapAfter_trim_B_0,
                  empty,
                  anon_heap_isEmpty<<anonHeapFunction>>)
           = heapAfter_isEmpty_B_0
         & exc_109_B_0 = null
         & (result_95_B_0 = TRUE <-> seqLen(strContent(result_94_B_0)) = Z(0(#)))
         & RELATED_BY_isEmpty_1439568742(result_94_B_0,
                                         heapAfter_trim_B_0,
                                         result_94_B_0,
                                         result_95_B_0,
                                         exc_109_B_0,
                                         heapAfter_isEmpty_B_0)
         & wellFormed(heapAfter_trim_B_0)
         & !result_94_B_0 = null
         & !{exc_107_B:=null
             || heap:=heapAfter_isEmpty_B_0
             || result_93_B:=\if (result_95_B_0 = TRUE)
                                 \then (FALSE)
                                 \else (TRUE)}
              !(  sv_self_79_B#22 = sv_selfAtPost_79_B#26
                & result_93_B = sv_resultAtPost_93_B#27
                & exc_107_B = sv_excAtPost_107_B#28
                & sv_heapAtPost_B#29 = heap)
         & !sv_self_79_B#22 = null
         & !sv_voterId_9_B#23 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_isEmpty_1439568742 {
  \schemaVar \term Heap find_heap#27;
  \schemaVar \term java.lang.String find_s#24;
  \schemaVar \term boolean find_result_95#25;
  \schemaVar \term java.lang.Throwable find_exc_109#26;
  \schemaVar \term Heap find_heapAfter_isEmpty#28;
  \schemaVar \term Heap assumes_heap#32;
  \schemaVar \term java.lang.String assumes_s#29;
  \schemaVar \term boolean assumes_result_95#30;
  \schemaVar \term java.lang.Throwable assumes_exc_109#31;
  \schemaVar \term Heap assumes_heapAfter_isEmpty#33;
  
  \assumes ( RELATED_BY_isEmpty_1439568742(assumes_s#29,
                                           assumes_heap#32,
                                           assumes_s#29,
                                           assumes_result_95#30,
                                           assumes_exc_109#31,
                                           assumes_heapAfter_isEmpty#33)
            ⟹
             
  )
  \find (
    RELATED_BY_isEmpty_1439568742(find_s#24,
                                  find_heap#27,
                                  find_s#24,
                                  find_result_95#25,
                                  find_exc_109#26,
                                  find_heapAfter_isEmpty#28)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_isEmpty_1439568742(find_s#24,
                                  find_heap#27,
                                  find_s#24,
                                  find_result_95#25,
                                  find_exc_109#26,
                                  find_heapAfter_isEmpty#28)
  )
  \add (true ⟹  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_trim_1283894833 {
  \schemaVar \term Heap find_heap#17;
  \schemaVar \term java.lang.String find__voterId_9#14;
  \schemaVar \term java.lang.String find_result_94#15;
  \schemaVar \term java.lang.Throwable find_exc_108#16;
  \schemaVar \term Heap find_heapAfter_trim#18;
  \schemaVar \term Heap assumes_heap#22;
  \schemaVar \term java.lang.String assumes__voterId_9#19;
  \schemaVar \term java.lang.String assumes_result_94#20;
  \schemaVar \term java.lang.Throwable assumes_exc_108#21;
  \schemaVar \term Heap assumes_heapAfter_trim#23;
  
  \assumes ( RELATED_BY_trim_1283894833(assumes__voterId_9#19,
                                        assumes_heap#22,
                                        assumes__voterId_9#19,
                                        assumes_result_94#20,
                                        assumes_exc_108#21,
                                        assumes_heapAfter_trim#23)
            ⟹
             
  )
  \find (
    RELATED_BY_trim_1283894833(find__voterId_9#14,
                               find_heap#17,
                               find__voterId_9#14,
                               find_result_94#15,
                               find_exc_108#16,
                               find_heapAfter_trim#18)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_trim_1283894833(find__voterId_9#14,
                               find_heap#17,
                               find__voterId_9#14,
                               find_result_94#15,
                               find_exc_108#16,
                               find_heapAfter_trim#18)
  )
  \add (true ⟹  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & !self_79_A = null
        &   boolean::select(heap,
                            self_79_A,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.cred.CredTool::exactInstance(self_79_A)
          = TRUE
        & ((  voterId_9_A = null
            |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                voterId_9_A,
                                java.lang.Object::<created>)
              = TRUE)<<SC>>)
        & ((  (\exists int i;
                 ((  (leq(Z(0(#)), i)<<origin("requires @ file CredTool.java @ line 251","[]")>>
                   & lt(i,
                        seqLen(strContent(voterId_9_A)))<<origin("requires @ file CredTool.java @ line 251","[]")>>)<<SC,
                                                                                                                      origin("requires @ file CredTool.java @ line 251","[]")>>
                   & gt((int)(any::seqGet(strContent(voterId_9_A),
                                          i)),
                        C(2(3(#))))<<origin("requires @ file CredTool.java @ line 251","[]")>>)<<SC,
                                                                                                 origin("requires @ file CredTool.java @ line 251","[]")>>))<<origin("requires @ file CredTool.java @ line 251","[]")>>
            & (!(voterId_9_A = null)<<origin("requires @ file CredTool.java @ line 256","[]")>>)<<impl,
                                                                                                  origin("requires @ file CredTool.java @ line 256","[]")>>)<<SC>>)
        & {_voterId_9_A:=voterId_9_A}
            \[{
                exc_107_A=null;try {
                  result_93_A=self_79_A.voterIdCheck(_voterId_9_A)@de.polyas.core3.open.cred.CredTool;
                }   catch (java.lang.Throwable e) {
                  exc_107_A=e;
                }
              }\] (  selfAtPost_79_A = self_79_A
                   & resultAtPost_93_A = result_93_A
                   & excAtPost_107_A = exc_107_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & !self_79_B = null
        &   boolean::select(heap,
                            self_79_B,
                            java.lang.Object::<created>)
          = TRUE
        &   de.polyas.core3.open.cred.CredTool::exactInstance(self_79_B)
          = TRUE
        & ((  voterId_9_B = null
            |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                voterId_9_B,
                                java.lang.Object::<created>)
              = TRUE)<<SC>>)
        & ((  \exists int i;
                ((  (leq(Z(0(#)), i)
                  & lt(i,
                       seqLen(strContent(voterId_9_B))))<<SC>>
                  & gt((int)(any::seqGet(strContent(voterId_9_B),
                                         i)),
                       C(2(3(#)))))<<SC>>)
            & (!voterId_9_B = null)<<impl>>)<<SC>>)
        & {_voterId_9_B:=voterId_9_B}
            \[{
                exc_107_B=null;try {
                  result_93_B=self_79_B.voterIdCheck(_voterId_9_B)@de.polyas.core3.open.cred.CredTool;
                }   catch (java.lang.Throwable e) {
                  exc_107_B=e;
                }
              }\] (  selfAtPost_79_B = self_79_B
                   & resultAtPost_93_B = result_93_B
                   & excAtPost_107_B = exc_107_B
                   & heapAtPost_B = heap))
-> (resultAtPost_93_A = resultAtPost_93_B)<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2729")

(branch "dummy ID"
(rule "unfold_computed_formula_0_of_voterIdCheck_1060056493" (formula "1") (term "0") (inst "i#33=i#33"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "3"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "22"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "1"))
(rule "Use_information_flow_contract_for_trim_1283894833" (formula "35") (ifseqformula "12"))
(rule "Use_information_flow_contract_for_isEmpty_1439568742" (formula "42") (ifseqformula "17"))
(rule "true_left" (formula "35"))
(rule "eqSymm" (formula "45"))
(rule "eqSymm" (formula "21"))
(rule "eqSymm" (formula "53"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "34") (term "0,0,0,0"))
(rule "mul_literals" (formula "34") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "34") (term "0,0,0,0,0,0"))
(rule "inEqSimp_gtToGeq" (formula "28"))
(rule "mul_literals" (formula "28") (term "1,0,0"))
(rule "add_literals" (formula "28") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "27"))
(rule "polySimp_mulComm0" (formula "27") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "27") (term "0"))
(rule "inEqSimp_gtToGeq" (formula "6"))
(rule "mul_literals" (formula "6") (term "1,0,0"))
(rule "add_literals" (formula "6") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "34") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "34") (term "1,0,0,1,0,0,0"))
(rule "applyEq" (formula "23") (term "1,0") (ifseqformula "43"))
(rule "applyEq" (formula "35") (term "4") (ifseqformula "31"))
(rule "applyEq" (formula "50") (term "0") (ifseqformula "43"))
(rule "applyEq" (formula "17") (term "4") (ifseqformula "15"))
(rule "applyEq" (formula "49") (term "0") (ifseqformula "19"))
(rule "applyEq" (formula "12") (term "4") (ifseqformula "8"))
(rule "applyEq" (formula "24") (term "0,0") (ifseqformula "43"))
(rule "applyEq" (formula "41") (term "4") (ifseqformula "39"))
(rule "applyEq" (formula "2") (term "0,0") (ifseqformula "19"))
(rule "applyEq" (formula "1") (term "1,0") (ifseqformula "19"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "11") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "34") (term "0,0,0,0"))
(rule "mul_literals" (formula "34") (term "1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "28"))
(rule "mul_literals" (formula "28") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "0,0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "27"))
(rule "polySimp_mulLiterals" (formula "27") (term "0"))
(rule "polySimp_elimOne" (formula "27") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "34") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "34") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "34") (term "1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "34") (term "1,1,1,0,0,0"))
(rule "mul_literals" (formula "34") (term "0,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "34") (term "1,1,1,0,0,0"))
(rule "commute_or" (formula "32"))
(rule "commute_or" (formula "9"))
(rule "commute_and_2" (formula "11") (term "0,0"))
(rule "commute_and_2" (formula "34") (term "0,0"))
(rule "commute_and" (formula "11") (term "0,0,0"))
(rule "commute_and_2" (formula "11") (term "0,0"))
(rule "commute_and" (formula "34") (term "0,0,0"))
(rule "commute_and_2" (formula "34") (term "0,0"))
(rule "ifthenelse_split" (formula "44") (term "0"))
(branch "result_95_B_0 = TRUE TRUE"
   (rule "eqSymm" (formula "45"))
    (builtin "One Step Simplification" (formula "45"))
   (rule "notLeft" (formula "45"))
   (rule "replace_known_left" (formula "40") (term "0") (ifseqformula "44"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "apply_eq_boolean" (formula "54") (term "0") (ifseqformula "47"))
   (rule "eqSymm" (formula "54"))
    (builtin "One Step Simplification" (formula "54"))
   (rule "notRight" (formula "54"))
   (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "41"))
   (rule "qeq_literals" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
   (rule "notLeft" (formula "35"))
   (rule "applyEq" (formula "41") (term "3") (ifseqformula "44"))
   (rule "applyEq" (formula "34") (term "1") (ifseqformula "40"))
   (rule "applyEq" (formula "21") (term "1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "notLeft" (formula "21"))
   (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "46"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "notLeft" (formula "17"))
   (rule "apply_eq_boolean" (formula "17") (term "3") (ifseqformula "46"))
   (rule "nnf_ex2all" (formula "47"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
   (rule "add_literals" (formula "1") (term "0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "1,1,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_trim<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_trim_A_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "17"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "17"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "1") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_trim<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_trim_A_0,
     empty,
     anon_heap_isEmpty<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "21"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "21"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_isEmpty_A_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "30"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "30"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "23"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "23"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPost_A"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "38"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "32"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
   (rule "applyEqRigid" (formula "3") (term "0,0,1,0,0,0,0,0") (ifseqformula "38"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "32"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0,0,0,0") (ifseqformula "25"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_trim<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_trim_B_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "48"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "48"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_isEmpty<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_trim_B_0,
     empty,
     anon_heap_isEmpty<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "50"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "50"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_isEmpty_B_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "59"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "59"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "52"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "52"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPost_B"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "71"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "63"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "56"))
   (rule "applyEq" (formula "3") (term "0,0,1,0,0,0,0,0") (ifseqformula "71"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "63"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0,0,0,0") (ifseqformula "56"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
   (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "shift_paren_or" (formula "16") (term "0,0,0,0"))
   (rule "commute_or" (formula "14") (term "1,0,0,0"))
   (rule "commute_or" (formula "13") (term "1,0,0,0"))
   (rule "shift_paren_or" (formula "15") (term "0,0,0,0"))
   (rule "commute_or" (formula "14") (term "0,0,0,0"))
   (rule "commute_or" (formula "13") (term "0,0,0,0"))
   (rule "lenNonNegative" (formula "36") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "36"))
   (rule "inEqSimp_strengthen1" (formula "36") (ifseqformula "70"))
   (rule "add_zero_right" (formula "36") (term "1"))
   (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "36"))
    (builtin "One Step Simplification" (formula "37"))
   (rule "true_left" (formula "37"))
   (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "36"))
   (rule "times_zero_1" (formula "69") (term "1,0,0"))
   (rule "add_zero_right" (formula "69") (term "0,0"))
   (rule "leq_literals" (formula "69") (term "0"))
    (builtin "One Step Simplification" (formula "69"))
   (rule "false_right" (formula "69"))
   (rule "lenNonNegative" (formula "56") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "56"))
   (rule "lenNonNegative" (formula "35") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "35"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "shift_paren_and" (formula "17") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "allLeft" (formula "24") (inst "t=i_0_B_0"))
   (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "53"))
   (rule "qeq_literals" (formula "24") (term "0,1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "52"))
   (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
   (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
   (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "24") (term "0,0,1"))
   (rule "leq_literals" (formula "24") (term "0,1"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "51"))
   (rule "qeq_literals" (formula "24") (term "0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "closeFalse" (formula "24"))
)
(branch "result_95_B_0 = TRUE FALSE"
   (rule "eqSymm" (formula "44"))
   (rule "replace_known_right" (formula "40") (term "0") (ifseqformula "47"))
    (builtin "One Step Simplification" (formula "40"))
   (rule "notLeft" (formula "40"))
   (rule "applyEq" (formula "54") (term "0") (ifseqformula "43"))
   (rule "eqSymm" (formula "54"))
   (rule "apply_eq_boolean" (formula "40") (term "3") (ifseqformula "47"))
   (rule "apply_eq_boolean" (formula "20") (term "1") (ifseqformula "54"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "20"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "applyEq" (formula "17") (term "3") (ifseqformula "20"))
   (rule "applyEq" (formula "11") (term "0,1") (ifseqformula "16"))
   (rule "qeq_literals" (formula "11") (term "1"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "notLeft" (formula "11"))
   (rule "applyEq" (formula "10") (term "1") (ifseqformula "15"))
   (rule "nnf_ex2all" (formula "45"))
   (rule "nnf_notAnd" (formula "1") (term "0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,1,0"))
   (rule "add_literals" (formula "1") (term "0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0"))
   (rule "mul_literals" (formula "1") (term "1,1,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0"))
   (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAtPre_A<<anonHeapFunction>>,
     empty,
     anon_heap_trim<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "commute_or" (formula "3") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "commute_or" (formula "2") (term "0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_trim_A_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "16"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "16"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "1") (term "1,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_trim<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_trim_A_0,
     empty,
     anon_heap_isEmpty<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "20"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "20"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_isEmpty_A_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "28"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "28"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "22"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "22"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPost_A"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "applyEqRigid" (formula "3") (term "0,0,1,0,0,0,0,0") (ifseqformula "38"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "30"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
   (rule "applyEqRigid" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "38"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "30"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "24"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAtPre_B<<anonHeapFunction>>,
     empty,
     anon_heap_trim<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_trim_B_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "48"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "48"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_isEmpty<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heapAfter_trim_B_0,
     empty,
     anon_heap_isEmpty<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "50"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "50"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_isEmpty_B_0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "60"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "60"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1") (ifseqformula "52"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0,0,0,0,1,0") (ifseqformula "52"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPost_B"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "applyEq" (formula "3") (term "0,0,1,0,0,0,0,0") (ifseqformula "71"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "64"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0,0,0,0") (ifseqformula "56"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,0,0") (ifseqformula "71"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "1,0,0,0,0,0") (ifseqformula "64"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "2") (term "0,1,0,0,0,0,0") (ifseqformula "56"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "commute_or" (formula "18") (term "0,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
   (rule "commute_or" (formula "17") (term "0,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
   (rule "nnf_notOr" (formula "4") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "14") (term "1,0,0,0"))
   (rule "commute_or" (formula "13") (term "1,0,0,0"))
   (rule "commute_or" (formula "14") (term "0,0,0,0"))
   (rule "commute_or" (formula "13") (term "0,0,0,0"))
   (rule "lenNonNegative" (formula "56") (term "1"))
   (rule "inEqSimp_commuteLeq" (formula "56"))
   (rule "inEqSimp_strengthen1" (formula "56") (ifseqformula "70"))
   (rule "add_literals" (formula "56") (term "1"))
   (rule "replace_known_left" (formula "58") (term "1") (ifseqformula "56"))
    (builtin "One Step Simplification" (formula "58"))
   (rule "true_left" (formula "58"))
   (rule "inEqSimp_contradEq7" (formula "69") (ifseqformula "56"))
   (rule "times_zero_1" (formula "69") (term "1,0,0"))
   (rule "add_literals" (formula "69") (term "0,0"))
   (rule "leq_literals" (formula "69") (term "0"))
    (builtin "One Step Simplification" (formula "69"))
   (rule "false_right" (formula "69"))
   (rule "lenNonNegative" (formula "57") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "57"))
   (rule "lenNonNegative" (formula "34") (term "0"))
   (rule "inEqSimp_commuteLeq" (formula "34"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "shift_paren_and" (formula "17") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "allLeft" (formula "24") (inst "t=i_0_A_0"))
   (rule "inEqSimp_commuteGeq" (formula "24") (term "1,0"))
   (rule "inEqSimp_contradInEq1" (formula "24") (term "0,0") (ifseqformula "29"))
   (rule "qeq_literals" (formula "24") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_contradInEq1" (formula "24") (term "0") (ifseqformula "30"))
   (rule "inEqSimp_homoInEq1" (formula "24") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,0"))
   (rule "add_literals" (formula "24") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "24") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "24") (term "0,0,0"))
   (rule "leq_literals" (formula "24") (term "0,0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "inEqSimp_contradInEq1" (formula "24") (ifseqformula "31"))
   (rule "qeq_literals" (formula "24") (term "0"))
    (builtin "One Step Simplification" (formula "24"))
   (rule "closeFalse" (formula "24"))
)
)
}
