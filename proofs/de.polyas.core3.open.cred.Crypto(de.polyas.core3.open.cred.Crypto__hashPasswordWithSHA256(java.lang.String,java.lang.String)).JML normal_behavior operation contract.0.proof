\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 16:29:02 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Thu Sep 26 16:29:02 CEST 2019
contract=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:hashPasswordWithSHA256(java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto\\:\\:hashPasswordWithSHA256(java.lang.String,java.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "1191")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "password_34,salt_6,result_330,exc_372,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "eqSymm" (formula "8") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "2"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "3"))
(rule "assignment" (formula "8") (term "1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "5"))
(rule "insert_constant_string_value" (formula "5") (term "0,0,0,0") (ifseqformula "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "castDel" (formula "5") (term "0,0,0,0,0"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_hashPasswordWithSHA256,savedHeapBefore_hashPasswordWithSHA256"))
 (builtin "One Step Simplification" (formula "10"))
(rule "returnUnfold" (formula "10") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "10") (term "1"))
(rule "variableDeclaration" (formula "10") (term "1") (newnames "s"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heap"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "commute_and" (formula "2") (term "0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_0"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "13") (term "1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "var"))
(rule "stringConcat" (formula "13") (term "1") (inst "sk=sk_0"))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "15"))
 (builtin "One Step Simplification" (formula "14"))
(rule "eqSeqConcat" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "lenOfSeqSubEQ" (formula "1") (term "0,1") (ifseqformula "3"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "polySimp_addComm0" (formula "1") (term "1,1,1"))
 (builtin "Use Operation Contract" (formula "17") (newnames "heapBefore_sha256,result_331,exc_373,heapAfter_sha256,anon_heap_sha256") (contract "de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto::sha256(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (sha256)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "12"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0") (ifseqformula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "notLeft" (formula "15"))
   (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "16"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "blockEmpty" (formula "23") (term "1"))
   (rule "pullOutSelect" (formula "13") (term "0,0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "13"))
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "23")))
   (rule "castDel" (formula "13") (term "1,0"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "15"))
   (rule "insert_constant_string_value" (formula "15") (term "0,0,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "castDel" (formula "15") (term "0,0,0,0,0"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "16"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
   (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
   (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallReturn" (formula "23") (term "1"))
   (rule "assignment" (formula "23") (term "1"))
    (builtin "One Step Simplification" (formula "23"))
   (rule "methodCallEmpty" (formula "23") (term "1"))
   (rule "tryEmpty" (formula "23") (term "1"))
   (rule "emptyModality" (formula "23") (term "1"))
   (rule "andRight" (formula "23"))
   (branch
      (rule "andRight" (formula "23"))
      (branch
         (rule "andRight" (formula "23"))
         (branch
             (builtin "One Step Simplification" (formula "23"))
            (rule "polySimp_homoEq" (formula "1"))
            (rule "polySimp_addComm1" (formula "1") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
            (rule "polySimp_sepPosMonomial" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "polySimp_homoEq" (formula "1") (term "1"))
            (rule "times_zero_2" (formula "1") (term "1,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,1"))
            (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
            (rule "polySimp_elimOne" (formula "1") (term "0,0"))
            (rule "nnf_imp2or" (formula "5") (term "0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
            (rule "nnf_notAnd" (formula "4") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "nnf_notAnd" (formula "6") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "23"))
            (rule "replaceKnownSelect_taclet0_1" (formula "23") (term "0,0,1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "23") (term "0,0,1"))
            (rule "replaceKnownSelect_taclet0_4" (formula "23") (term "0,0,1,0"))
            (rule "insert_constant_string_value" (formula "23") (term "0,0,0,0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "19")))
            (rule "replaceKnownAuxiliaryConstant_taclet0_6" (formula "23") (term "0,0,1"))
            (rule "castDel" (formula "23") (term "0,0,0,0"))
            (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "23"))
         )
         (branch
             (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "16")))
            (rule "closeTrue" (formula "23"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "23"))
         (rule "closeTrue" (formula "23"))
      )
   )
   (branch
       (builtin "One Step Simplification" (formula "23"))
      (rule "allRight" (formula "23") (inst "sk=f_0"))
      (rule "allRight" (formula "23") (inst "sk=o_0"))
      (rule "orRight" (formula "23"))
      (rule "eqSymm" (formula "24"))
      (rule "polySimp_homoEq" (formula "1"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "polySimp_homoEq" (formula "1") (term "1"))
      (rule "times_zero_2" (formula "1") (term "1,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
      (rule "polySimp_elimOne" (formula "1") (term "0,0"))
      (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "25"))
      (rule "pullOutSelect" (formula "1") (term "2,0") (inst "selectSK=f_0_1"))
      (rule "simplifySelectOfCreate" (formula "1"))
      (rule "castDel" (formula "1") (term "1,0"))
      (rule "eqSymm" (formula "1") (term "0,0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,1,0,0,0") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "2") (term "0,0,1,0,0") (inst "selectSK=java_lang_Object_created__1"))
      (rule "simplifySelectOfCreate" (formula "2"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")))
      (rule "castDel" (formula "2") (term "1,0"))
      (rule "eqSymm" (formula "2") (term "0,0"))
      (rule "nnf_imp2or" (formula "8") (term "0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
      (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "7") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "nnf_notAnd" (formula "9") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "commute_or" (formula "4"))
      (rule "inEqSimp_or_weaken1" (formula "4"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "commute_or_2" (formula "7") (term "0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0"))
      (rule "commute_and" (formula "3") (term "0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
      (rule "commute_and" (formula "7") (term "1,0,0,0"))
      (rule "commute_and" (formula "9") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "ifthenelse_split" (formula "14") (term "0"))
      (branch "sk_0 = result_331 TRUE"
         (rule "applyEqReverse" (formula "16") (term "0,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "hideAuxiliaryEq" (formula "15"))
         (rule "applyEq" (formula "6") (term "0,0,2,0") (ifseqformula "14"))
         (rule "applyEq" (formula "2") (term "1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "22") (term "0") (ifseqformula "14"))
         (rule "applyEq" (formula "4") (term "0,0,0") (ifseqformula "14"))
         (rule "inEqSimp_commuteGeq" (formula "4"))
         (rule "applyEq" (formula "6") (term "0,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "13") (term "1,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "14"))
         (rule "applyEq" (formula "1") (term "1,1,0,0") (ifseqformula "14"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256<<anonHeapFunction>>"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "true_left" (formula "1"))
         (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
         (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_or" (formula "1") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "1,0,0,0"))
         (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0"))
         (rule "distr_forallAnd" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "14"))
         (rule "andLeft" (formula "1"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
         (rule "true_left" (formula "1"))
         (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
         (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
         (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
         (rule "commute_or" (formula "1") (term "0,0,0,0"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "1,0,0,0"))
         (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0"))
         (rule "distr_forallAnd" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "shift_paren_or" (formula "2") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0,0"))
         (rule "distr_forallAnd" (formula "1") (term "0"))
         (rule "distr_forallAnd" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "commute_or_2" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "cut_direct" (formula "22") (term "0,0"))
         (branch "CUT: o_0 = null TRUE"
             (builtin "One Step Simplification" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "replace_known_left" (formula "4") (term "0,1,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
            (rule "eqSymm" (formula "2") (term "1,0,0"))
            (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
            (rule "closeFalse" (formula "2"))
         )
         (branch "CUT: o_0 = null FALSE"
             (builtin "One Step Simplification" (formula "23"))
            (rule "notRight" (formula "23"))
            (rule "replace_known_right" (formula "4") (term "0,1,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "ifthenelse_negated" (formula "4") (term "0"))
            (rule "applyEq" (formula "3") (term "2,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "applyEqReverse" (formula "4") (term "0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "lenNonNegative" (formula "4") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "4"))
            (rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "3"))
            (rule "mul_literals" (formula "4") (term "0,0"))
            (rule "add_zero_left" (formula "4") (term "0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heap, result_331),
     empty,
     anon_heap_sha256<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "ifthenelse_split" (formula "2") (term "0"))
            (branch "f_0 = java.lang.Object::<created> ∧ o_0 = result_331 TRUE"
               (rule "andLeft" (formula "2"))
               (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEq" (formula "25") (term "1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "25") (term "2,0") (ifseqformula "2"))
               (rule "narrowSelectType" (formula "25") (term "0") (ifseqformula "10"))
               (rule "applyEq" (formula "24") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
               (rule "close" (formula "24") (ifseqformula "1"))
            )
            (branch "f_0 = java.lang.Object::<created> ∧ o_0 = result_331 FALSE"
               (rule "close" (formula "25") (ifseqformula "2"))
            )
         )
      )
      (branch "sk_0 = result_331 FALSE"
         (rule "applyEqReverse" (formula "15") (term "0,0") (ifseqformula "14"))
         (rule "hideAuxiliaryEq" (formula "14"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch "o_0 = sk_0 TRUE"
            (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "applyEqReverse" (formula "26") (term "1") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_left" (formula "1") (term "1,0,0") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "23") (term "1,0,0,1") (ifseqformula "2"))
            (rule "applyEqRigid" (formula "24") (term "1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "2"))
            (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "23"))
            (rule "notRight" (formula "23"))
            (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "3"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heap, sk_0),
     empty,
     anon_heap_sha256<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "15"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "lenNonNegative" (formula "7") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "lenNonNegative" (formula "8") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "8"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
            (rule "andLeft" (formula "9"))
            (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "9") (term "0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "9") (term "1") (ifseqformula "11"))
            (rule "eqSymm" (formula "9"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0"))
            (rule "polySimp_addComm0" (formula "9") (term "1,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,1,0,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "6") (inst "iv=iv"))
            (rule "andLeft" (formula "6"))
            (rule "lenOfSeqSub" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "7") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "6") (term "0"))
            (rule "polySimp_elimSub" (formula "6") (term "1,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0"))
            (rule "add_zero_right" (formula "6") (term "1,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0"))
            (rule "add_zero_right" (formula "6") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0"))
            (rule "applyEq" (formula "7") (term "0,0,1,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0"))
            (rule "polySimp_mulLiterals" (formula "6") (term "0,0"))
            (rule "polySimp_elimOne" (formula "6") (term "0,0"))
            (rule "commute_or" (formula "6"))
            (rule "inEqSimp_or_weaken1" (formula "6"))
            (rule "add_literals" (formula "6") (term "1,0"))
             (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "8")))
            (rule "true_left" (formula "6"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "ifthenelse_split" (formula "3") (term "0"))
            (branch "f_0 = java.lang.Object::<created> TRUE"
               (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "applyEqRigid" (formula "27") (term "2,0") (ifseqformula "3"))
               (rule "castTrueImpliesOriginalTrue" (formula "27") (ifseqformula "2"))
               (rule "closeTrue" (formula "27"))
            )
            (branch "f_0 = java.lang.Object::<created> FALSE"
               (rule "close" (formula "28") (ifseqformula "3"))
            )
         )
         (branch "o_0 = sk_0 FALSE"
            (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "2") (term "2,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "commute_and" (formula "1") (term "0,0"))
            (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Exceptional Post (sha256)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "andLeft" (formula "12"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,0") (ifseqformula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "13"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (sha256)"
    (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
   (rule "wellFormedCreate" (formula "17") (term "0,1"))
   (rule "replace_known_left" (formula "17") (term "0,1") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "polySimp_homoEq" (formula "1"))
   (rule "polySimp_addComm1" (formula "1") (term "0"))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "0,1,0"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0,1,0"))
   (rule "polySimp_addComm1" (formula "1") (term "0,0,1,0"))
   (rule "polySimp_sepPosMonomial" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_homoEq" (formula "1") (term "1"))
   (rule "times_zero_2" (formula "1") (term "1,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,1"))
   (rule "polySimp_sepPosMonomial" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "1") (term "0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "0,0"))
   (rule "pullOutSelect" (formula "17") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
   (rule "castDel" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "18") (term "0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "nnf_imp2or" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "nnf_imp2or" (formula "4") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "6") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "4") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "nnf_notAnd" (formula "6") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "nnf_imp2or" (formula "4") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "6") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "4") (term "1,0,0,0,0"))
   (rule "nnf_notOr" (formula "6") (term "1,0,0,0,0"))
   (rule "nnf_notAnd" (formula "4") (term "0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "nnf_notAnd" (formula "6") (term "0,1,0,0,0"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "commute_or" (formula "1"))
   (rule "inEqSimp_or_weaken1" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "17"))
   (rule "insert_constant_string_value" (formula "17") (term "0,0,0,0") (ifseqformula "7"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "castDel" (formula "17") (term "0,0,0,0,0"))
   (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "pullOutSelect" (formula "17") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
   (rule "applyEqReverse" (formula "18") (term "0,0,1") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_right" (formula "17") (term "0,1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "notRight" (formula "17"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
   (rule "close" (formula "13") (ifseqformula "2"))
)
)
}
