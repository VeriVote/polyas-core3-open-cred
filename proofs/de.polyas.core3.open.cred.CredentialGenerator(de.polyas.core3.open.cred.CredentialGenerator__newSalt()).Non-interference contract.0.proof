\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Oct 26 16:05:45 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Heap;
Update;
int;
numbers;
Field;
boolean;
de.polyas.core3.open.crypto.groups.ECGroup\extends de.polyas.core3.open.crypto.groups.CyclicGroup;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec\extends org.bouncycastle.jce.spec.ECParameterSpec;
org.bouncycastle.math.ec.ECPoint\extends java.lang.Object;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve\extends org.bouncycastle.math.ec.ECCurve.AbstractFp;
java.security.SecureRandom\extends java.util.Random;
LocSet;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
Formula;
}

\predicates{
RELATED_BY_toLowerCase_2107268077(java.lang.String,Heap,java.lang.String,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_asHexString_1063021898(byte[],Heap,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_nextBytes_749673528(java.security.SecureRandom,byte[],Heap,java.security.SecureRandom,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
int length(java.lang.Object);
numbers #;
numbers 2(numbers);
numbers 1(numbers);
numbers 4(numbers);
numbers 7(numbers);
numbers 8(numbers);
numbers 3(numbers);
numbers 6(numbers);
int Z(numbers);
Formula leq(int,int);
numbers neglit(numbers);
Formula geq(int,int);
numbers 0(numbers);
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
boolean byte[]::exactInstance(any);
Null null;
Field de.polyas.core3.open.cred.CredentialGenerator::$GROUP;
de.polyas.core3.open.crypto.groups.ECGroup de.polyas.core3.open.crypto.groups.ECGroup::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$group;
org.bouncycastle.jce.spec.ECNamedCurveParameterSpec org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(Heap,java.lang.Object,Field);
Field org.bouncycastle.jce.spec.ECParameterSpec::$generator;
org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.crypto.groups.ECGroup::$curve;
org.bouncycastle.math.ec.custom.sec.SecP256K1Curve org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.cred.CredentialGenerator::$RANDOM;
java.security.SecureRandom java.security.SecureRandom::select(Heap,java.lang.Object,Field);
Heap anon_heap_nextBytes;
Heap create(Heap,java.lang.Object);
Field java.lang.Object::<transient>;
Heap store(Heap,java.lang.Object,Field,any);
Field java.lang.Object::<transactionConditionallyUpdated>;
boolean FALSE;
Field java.lang.Object::<initialized>;
int add(int,int);
LocSet arrayRange(java.lang.Object,int,int);
Heap memset(Heap,LocSet,any);
LocSet allFields(java.lang.Object);
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_nextBytes_A_0;
Heap anon_heap_asHexString;
LocSet empty;
Heap heapAfter_asHexString_A_0;
Heap anon_heap_toLowerCase;
Heap heapAfter_toLowerCase_A_0;
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAfter_nextBytes_B_0;
Heap heapAfter_asHexString_B_0;
Heap heapAfter_toLowerCase_B_0;
Heap heapAtPost_B;
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
Formula de.polyas.core3.open.cred.CredentialGenerator::<$inv>(Heap);
}

\programVariables{
Heap heap;
byte[] x_arr_2_A_0;
java.lang.Throwable exc_104_A_0;
java.lang.String result_90_A_0;
java.lang.Throwable exc_105_A_0;
java.lang.Throwable exc_106_A_0;
java.lang.String result_91_A_0;
java.lang.Throwable exc_103_A;
java.lang.String result_89_A;
java.lang.String resultAtPost_89_A;
java.lang.Throwable excAtPost_103_A;
byte[] x_arr_2_B_0;
java.lang.Throwable exc_104_B_0;
java.lang.String result_90_B_0;
java.lang.Throwable exc_105_B_0;
java.lang.Throwable exc_106_B_0;
java.lang.String result_91_B_0;
java.lang.Throwable exc_103_B;
java.lang.String result_89_B;
java.lang.String resultAtPost_89_B;
java.lang.Throwable excAtPost_103_B;
}

\rules{

unfold_computed_formula_0_of_newSalt_479840995 {
  \schemaVar \term Heap sv_heapAtPre_A#22;
  \schemaVar \term java.lang.String sv_resultAtPost_89_A#24;
  \schemaVar \term java.lang.Throwable sv_excAtPost_103_A#25;
  \schemaVar \term Heap sv_heapAtPost_A#26;
  \schemaVar \term Heap sv_heapAtPre_B#27;
  \schemaVar \term java.lang.String sv_resultAtPost_89_B#29;
  \schemaVar \term java.lang.Throwable sv_excAtPost_103_B#30;
  \schemaVar \term Heap sv_heapAtPost_B#31;
  
  \find (
      {heap:=sv_heapAtPre_A#22}
        (  wellFormed(sv_heapAtPre_A#22)
         & heap = sv_heapAtPre_A#22
         & de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_A#22)<<impl>>
         & \[{
               exc_103_A=null;try {
                 result_89_A=de.polyas.core3.open.cred.CredentialGenerator.newSalt()@de.polyas.core3.open.cred.CredentialGenerator;
               }   catch (java.lang.Throwable e) {
                 exc_103_A=e;
               }
             }\] (  sv_resultAtPost_89_A#24 = result_89_A
                  & sv_excAtPost_103_A#25 = exc_103_A
                  & sv_heapAtPost_A#26 = heap))
    & {heap:=sv_heapAtPre_B#27}
        (  wellFormed(sv_heapAtPre_B#27)
         & heap = sv_heapAtPre_B#27
         & de.polyas.core3.open.cred.CredentialGenerator::<$inv>(sv_heapAtPre_B#27)<<impl>>
         & \[{
               exc_103_B=null;try {
                 result_89_B=de.polyas.core3.open.cred.CredentialGenerator.newSalt()@de.polyas.core3.open.cred.CredentialGenerator;
               }   catch (java.lang.Throwable e) {
                 exc_103_B=e;
               }
             }\] (  sv_resultAtPost_89_B#29 = result_89_B
                  & sv_excAtPost_103_B#30 = exc_103_B
                  & sv_heapAtPost_B#31 = heap))
  )
  \antecedentPolarity
  \replacewith (
      {heap:=sv_heapAtPre_A#22}
        (  leq(length(x_arr_2_A_0), Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(length(x_arr_2_A_0), Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & geq(length(x_arr_2_A_0), Z(0(#)))
         & (   wellFormed(heap)
            ->   !  boolean::select(heap,
                                    x_arr_2_A_0,
                                    java.lang.Object::<created>)
                  = TRUE
               & length(x_arr_2_A_0) = Z(8(#)))
         & byte[]::exactInstance(x_arr_2_A_0) = TRUE
         &   boolean::select(sv_heapAtPre_A#22,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#22,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#22,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                                                                                     null,
                                                                                                                                                                                     de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#22,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#22,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                                            null,
                                                                                                                                            de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#22,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#22,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                                           null,
                                                                                                                                           de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#22,
                             java.security.SecureRandom::select(sv_heapAtPre_A#22,
                                                                null,
                                                                de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#22,
                             de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                null,
                                                                                de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(sv_heapAtPre_A#22)
         & sv_heapAtPre_A#22 = heap
         & wellFormed(anon_heap_nextBytes<<anonHeapFunction>>)
         &   anon(store(memset(store(store(store(create(heap, x_arr_2_A_0),
                                                 x_arr_2_A_0,
                                                 java.lang.Object::<transient>,
                                                 Z(0(#))),
                                           x_arr_2_A_0,
                                           java.lang.Object::<transactionConditionallyUpdated>,
                                           FALSE),
                                     x_arr_2_A_0,
                                     java.lang.Object::<initialized>,
                                     FALSE),
                               arrayRange(x_arr_2_A_0,
                                          Z(0(#)),
                                          add(Z(neglit(1(#))),
                                              length(x_arr_2_A_0))),
                               Z(0(#))),
                        x_arr_2_A_0,
                        java.lang.Object::<initialized>,
                        TRUE),
                  allFields(x_arr_2_A_0),
                  anon_heap_nextBytes<<anonHeapFunction>>)
           = heapAfter_nextBytes_A_0
         & exc_104_A_0 = null
         & RELATED_BY_nextBytes_749673528(java.security.SecureRandom::select(heap,
                                                                             null,
                                                                             de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                                          x_arr_2_A_0,
                                          store(memset(store(store(store(create(heap,
                                                                                x_arr_2_A_0),
                                                                         x_arr_2_A_0,
                                                                         java.lang.Object::<transient>,
                                                                         Z(0(#))),
                                                                   x_arr_2_A_0,
                                                                   java.lang.Object::<transactionConditionallyUpdated>,
                                                                   FALSE),
                                                             x_arr_2_A_0,
                                                             java.lang.Object::<initialized>,
                                                             FALSE),
                                                       arrayRange(x_arr_2_A_0,
                                                                  Z(0(#)),
                                                                  add(Z(neglit(1(#))),
                                                                      length(x_arr_2_A_0))),
                                                       Z(0(#))),
                                                x_arr_2_A_0,
                                                java.lang.Object::<initialized>,
                                                TRUE),
                                          java.security.SecureRandom::select(heap,
                                                                             null,
                                                                             de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                                          exc_104_A_0,
                                          heapAfter_nextBytes_A_0)
         & wellFormed(store(memset(store(store(store(create(heap, x_arr_2_A_0),
                                                     x_arr_2_A_0,
                                                     java.lang.Object::<transient>,
                                                     Z(0(#))),
                                               x_arr_2_A_0,
                                               java.lang.Object::<transactionConditionallyUpdated>,
                                               FALSE),
                                         x_arr_2_A_0,
                                         java.lang.Object::<initialized>,
                                         FALSE),
                                   arrayRange(x_arr_2_A_0,
                                              Z(0(#)),
                                              add(Z(neglit(1(#))),
                                                  length(x_arr_2_A_0))),
                                   Z(0(#))),
                            x_arr_2_A_0,
                            java.lang.Object::<initialized>,
                            TRUE))
         & wellFormed(anon_heap_asHexString<<anonHeapFunction>>)
         &   anon(heapAfter_nextBytes_A_0,
                  empty,
                  anon_heap_asHexString<<anonHeapFunction>>)
           = heapAfter_asHexString_A_0
         & (    boolean::select(heap,
                                result_90_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_asHexString<<anonHeapFunction>>,
                                result_90_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_nextBytes<<anonHeapFunction>>,
                                result_90_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & (exc_105_A_0 = null)<<impl>>
         & RELATED_BY_asHexString_1063021898(x_arr_2_A_0,
                                             heapAfter_nextBytes_A_0,
                                             result_90_A_0,
                                             exc_105_A_0,
                                             heapAfter_asHexString_A_0)
         & wellFormed(heapAfter_nextBytes_A_0)
         & wellFormed(anon_heap_toLowerCase<<anonHeapFunction>>)
         &   anon(heapAfter_asHexString_A_0,
                  empty,
                  anon_heap_toLowerCase<<anonHeapFunction>>)
           = heapAfter_toLowerCase_A_0
         & exc_106_A_0 = null
         & (    boolean::select(heap,
                                result_91_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_asHexString<<anonHeapFunction>>,
                                result_91_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_nextBytes<<anonHeapFunction>>,
                                result_91_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_toLowerCase<<anonHeapFunction>>,
                                result_91_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_toLowerCase_2107268077(result_90_A_0,
                                             heapAfter_asHexString_A_0,
                                             result_90_A_0,
                                             result_91_A_0,
                                             exc_106_A_0,
                                             heapAfter_toLowerCase_A_0)
         & wellFormed(heapAfter_asHexString_A_0)
         & !result_91_A_0 = null
         & !result_90_A_0 = null
         & !x_arr_2_A_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_A#22,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#22,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                                                                      null,
                                                                                                                                                                      de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_A#22,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                             null,
                                                                                                                             de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_A#22,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                                                                            null,
                                                                                                                            de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.security.SecureRandom::select(sv_heapAtPre_A#22,
                                                 null,
                                                 de.polyas.core3.open.cred.CredentialGenerator::$RANDOM)
            = null
         & !  de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_A#22,
                                                                 null,
                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP)
            = null
         & !{exc_103_A:=null
             || heap:=heapAfter_toLowerCase_A_0
             || result_89_A:=result_91_A_0}
              !(  result_89_A = sv_resultAtPost_89_A#24
                & exc_103_A = sv_excAtPost_103_A#25
                & sv_heapAtPost_A#26 = heap))
    & {heap:=sv_heapAtPre_B#27}
        (  leq(length(x_arr_2_B_0), Z(7(4(6(3(8(4(7(4(1(2(#))))))))))))
         & geq(length(x_arr_2_B_0), Z(neglit(8(4(6(3(8(4(7(4(1(2(#)))))))))))))
         & geq(length(x_arr_2_B_0), Z(0(#)))
         & (   wellFormed(heap)
            ->   !  boolean::select(heap,
                                    x_arr_2_B_0,
                                    java.lang.Object::<created>)
                  = TRUE
               & length(x_arr_2_B_0) = Z(8(#)))
         & byte[]::exactInstance(x_arr_2_B_0) = TRUE
         &   boolean::select(sv_heapAtPre_B#27,
                             org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#27,
                                                                      org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#27,
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                                                                                     null,
                                                                                                                                                                                     de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                                  de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                                      org.bouncycastle.jce.spec.ECParameterSpec::$generator),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#27,
                             org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#27,
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                                            null,
                                                                                                                                            de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$group),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#27,
                             org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#27,
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                                           null,
                                                                                                                                           de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                        de.polyas.core3.open.crypto.groups.ECGroup::$curve),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#27,
                             java.security.SecureRandom::select(sv_heapAtPre_B#27,
                                                                null,
                                                                de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#27,
                             de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                null,
                                                                                de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(sv_heapAtPre_B#27)
         & sv_heapAtPre_B#27 = heap
         & wellFormed(anon_heap_nextBytes<<anonHeapFunction>>)
         &   anon(store(memset(store(store(store(create(heap, x_arr_2_B_0),
                                                 x_arr_2_B_0,
                                                 java.lang.Object::<transient>,
                                                 Z(0(#))),
                                           x_arr_2_B_0,
                                           java.lang.Object::<transactionConditionallyUpdated>,
                                           FALSE),
                                     x_arr_2_B_0,
                                     java.lang.Object::<initialized>,
                                     FALSE),
                               arrayRange(x_arr_2_B_0,
                                          Z(0(#)),
                                          add(Z(neglit(1(#))),
                                              length(x_arr_2_B_0))),
                               Z(0(#))),
                        x_arr_2_B_0,
                        java.lang.Object::<initialized>,
                        TRUE),
                  allFields(x_arr_2_B_0),
                  anon_heap_nextBytes<<anonHeapFunction>>)
           = heapAfter_nextBytes_B_0
         & exc_104_B_0 = null
         & RELATED_BY_nextBytes_749673528(java.security.SecureRandom::select(heap,
                                                                             null,
                                                                             de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                                          x_arr_2_B_0,
                                          store(memset(store(store(store(create(heap,
                                                                                x_arr_2_B_0),
                                                                         x_arr_2_B_0,
                                                                         java.lang.Object::<transient>,
                                                                         Z(0(#))),
                                                                   x_arr_2_B_0,
                                                                   java.lang.Object::<transactionConditionallyUpdated>,
                                                                   FALSE),
                                                             x_arr_2_B_0,
                                                             java.lang.Object::<initialized>,
                                                             FALSE),
                                                       arrayRange(x_arr_2_B_0,
                                                                  Z(0(#)),
                                                                  add(Z(neglit(1(#))),
                                                                      length(x_arr_2_B_0))),
                                                       Z(0(#))),
                                                x_arr_2_B_0,
                                                java.lang.Object::<initialized>,
                                                TRUE),
                                          java.security.SecureRandom::select(heap,
                                                                             null,
                                                                             de.polyas.core3.open.cred.CredentialGenerator::$RANDOM),
                                          exc_104_B_0,
                                          heapAfter_nextBytes_B_0)
         & wellFormed(store(memset(store(store(store(create(heap, x_arr_2_B_0),
                                                     x_arr_2_B_0,
                                                     java.lang.Object::<transient>,
                                                     Z(0(#))),
                                               x_arr_2_B_0,
                                               java.lang.Object::<transactionConditionallyUpdated>,
                                               FALSE),
                                         x_arr_2_B_0,
                                         java.lang.Object::<initialized>,
                                         FALSE),
                                   arrayRange(x_arr_2_B_0,
                                              Z(0(#)),
                                              add(Z(neglit(1(#))),
                                                  length(x_arr_2_B_0))),
                                   Z(0(#))),
                            x_arr_2_B_0,
                            java.lang.Object::<initialized>,
                            TRUE))
         & wellFormed(anon_heap_asHexString<<anonHeapFunction>>)
         &   anon(heapAfter_nextBytes_B_0,
                  empty,
                  anon_heap_asHexString<<anonHeapFunction>>)
           = heapAfter_asHexString_B_0
         & (    boolean::select(heap,
                                result_90_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_asHexString<<anonHeapFunction>>,
                                result_90_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_nextBytes<<anonHeapFunction>>,
                                result_90_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & (exc_105_B_0 = null)<<impl>>
         & RELATED_BY_asHexString_1063021898(x_arr_2_B_0,
                                             heapAfter_nextBytes_B_0,
                                             result_90_B_0,
                                             exc_105_B_0,
                                             heapAfter_asHexString_B_0)
         & wellFormed(heapAfter_nextBytes_B_0)
         & wellFormed(anon_heap_toLowerCase<<anonHeapFunction>>)
         &   anon(heapAfter_asHexString_B_0,
                  empty,
                  anon_heap_toLowerCase<<anonHeapFunction>>)
           = heapAfter_toLowerCase_B_0
         & exc_106_B_0 = null
         & (    boolean::select(heap,
                                result_91_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_asHexString<<anonHeapFunction>>,
                                result_91_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_nextBytes<<anonHeapFunction>>,
                                result_91_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_toLowerCase<<anonHeapFunction>>,
                                result_91_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_toLowerCase_2107268077(result_90_B_0,
                                             heapAfter_asHexString_B_0,
                                             result_90_B_0,
                                             result_91_B_0,
                                             exc_106_B_0,
                                             heapAfter_toLowerCase_B_0)
         & wellFormed(heapAfter_asHexString_B_0)
         & !result_91_B_0 = null
         & !result_90_B_0 = null
         & !x_arr_2_B_0 = null
         & !  org.bouncycastle.math.ec.ECPoint::select(sv_heapAtPre_B#27,
                                                       org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#27,
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                                                                      null,
                                                                                                                                                                      de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                                                                   de.polyas.core3.open.crypto.groups.ECGroup::$group),
                                                       org.bouncycastle.jce.spec.ECParameterSpec::$generator)
            = null
         & !  org.bouncycastle.jce.spec.ECNamedCurveParameterSpec::select(sv_heapAtPre_B#27,
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                             null,
                                                                                                                             de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                          de.polyas.core3.open.crypto.groups.ECGroup::$group)
            = null
         & !  org.bouncycastle.math.ec.custom.sec.SecP256K1Curve::select(sv_heapAtPre_B#27,
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                                                                            null,
                                                                                                                            de.polyas.core3.open.cred.CredentialGenerator::$GROUP),
                                                                         de.polyas.core3.open.crypto.groups.ECGroup::$curve)
            = null
         & !  java.security.SecureRandom::select(sv_heapAtPre_B#27,
                                                 null,
                                                 de.polyas.core3.open.cred.CredentialGenerator::$RANDOM)
            = null
         & !  de.polyas.core3.open.crypto.groups.ECGroup::select(sv_heapAtPre_B#27,
                                                                 null,
                                                                 de.polyas.core3.open.cred.CredentialGenerator::$GROUP)
            = null
         & !{exc_103_B:=null
             || heap:=heapAfter_toLowerCase_B_0
             || result_89_B:=result_91_B_0}
              !(  result_89_B = sv_resultAtPost_89_B#29
                & exc_103_B = sv_excAtPost_103_B#30
                & sv_heapAtPost_B#31 = heap))
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_toLowerCase_2107268077 {
  \schemaVar \term Heap find_heap#48;
  \schemaVar \term java.lang.String find_s_2#45;
  \schemaVar \term java.lang.String find_result_91#46;
  \schemaVar \term java.lang.Throwable find_exc_106#47;
  \schemaVar \term Heap find_heapAfter_toLowerCase#49;
  \schemaVar \term Heap assumes_heap#53;
  \schemaVar \term java.lang.String assumes_s_2#50;
  \schemaVar \term java.lang.String assumes_result_91#51;
  \schemaVar \term java.lang.Throwable assumes_exc_106#52;
  \schemaVar \term Heap assumes_heapAfter_toLowerCase#54;
  
  \assumes ( RELATED_BY_toLowerCase_2107268077(assumes_s_2#50,
                                               assumes_heap#53,
                                               assumes_s_2#50,
                                               assumes_result_91#51,
                                               assumes_exc_106#52,
                                               assumes_heapAfter_toLowerCase#54)
            ⟹
             
  )
  \find (
    RELATED_BY_toLowerCase_2107268077(find_s_2#45,
                                      find_heap#48,
                                      find_s_2#45,
                                      find_result_91#46,
                                      find_exc_106#47,
                                      find_heapAfter_toLowerCase#49)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_toLowerCase_2107268077(find_s_2#45,
                                      find_heap#48,
                                      find_s_2#45,
                                      find_result_91#46,
                                      find_exc_106#47,
                                      find_heapAfter_toLowerCase#49)
  )
  \add (      java.lang.Object::<inv>(find_heap#48, find_s_2#45)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#53, assumes_s_2#50)<<impl>>
         -> find_s_2#45 = assumes_s_2#50
         -> (find_result_91#46 = assumes_result_91#51)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_asHexString_1063021898 {
  \schemaVar \term byte[] find_b_1#35;
  \schemaVar \term Heap find_heap#38;
  \schemaVar \term java.lang.String find_result_90#36;
  \schemaVar \term java.lang.Throwable find_exc_105#37;
  \schemaVar \term Heap find_heapAfter_asHexString#39;
  \schemaVar \term byte[] assumes_b_1#40;
  \schemaVar \term Heap assumes_heap#43;
  \schemaVar \term java.lang.String assumes_result_90#41;
  \schemaVar \term java.lang.Throwable assumes_exc_105#42;
  \schemaVar \term Heap assumes_heapAfter_asHexString#44;
  
  \assumes ( RELATED_BY_asHexString_1063021898(assumes_b_1#40,
                                               assumes_heap#43,
                                               assumes_result_90#41,
                                               assumes_exc_105#42,
                                               assumes_heapAfter_asHexString#44)
            ⟹
             
  )
  \find (
    RELATED_BY_asHexString_1063021898(find_b_1#35,
                                      find_heap#38,
                                      find_result_90#36,
                                      find_exc_105#37,
                                      find_heapAfter_asHexString#39)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_asHexString_1063021898(find_b_1#35,
                                      find_heap#38,
                                      find_result_90#36,
                                      find_exc_105#37,
                                      find_heapAfter_asHexString#39)
  )
  \add (      (!(find_b_1#35 = null)<<origin("requires @ file Utils.java @ line 84","[]")>>)<<impl,
                                                                                              origin("requires @ file Utils.java @ line 84","[]")>>
            & (!(assumes_b_1#40 = null)<<origin("requires @ file Utils.java @ line 84","[]")>>)<<impl,
                                                                                                 origin("requires @ file Utils.java @ line 84","[]")>>
         -> allFields(find_b_1#35) = allFields(assumes_b_1#40)
         -> (find_result_90#36 = assumes_result_90#41)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_nextBytes_749673528 {
  \schemaVar \term byte[] find_b_1#26;
  \schemaVar \term Heap find_heap#28;
  \schemaVar \term java.security.SecureRandom find_s#25;
  \schemaVar \term java.lang.Throwable find_exc_104#27;
  \schemaVar \term Heap find_heapAfter_nextBytes#29;
  \schemaVar \term byte[] assumes_b_1#31;
  \schemaVar \term Heap assumes_heap#33;
  \schemaVar \term java.security.SecureRandom assumes_s#30;
  \schemaVar \term java.lang.Throwable assumes_exc_104#32;
  \schemaVar \term Heap assumes_heapAfter_nextBytes#34;
  
  \assumes ( RELATED_BY_nextBytes_749673528(assumes_s#30,
                                            assumes_b_1#31,
                                            assumes_heap#33,
                                            assumes_s#30,
                                            assumes_exc_104#32,
                                            assumes_heapAfter_nextBytes#34)
            ⟹
             
  )
  \find (
    RELATED_BY_nextBytes_749673528(find_s#25,
                                   find_b_1#26,
                                   find_heap#28,
                                   find_s#25,
                                   find_exc_104#27,
                                   find_heapAfter_nextBytes#29)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_nextBytes_749673528(find_s#25,
                                   find_b_1#26,
                                   find_heap#28,
                                   find_s#25,
                                   find_exc_104#27,
                                   find_heapAfter_nextBytes#29)
  )
  \add (      (java.lang.Object::<inv>(find_heap#28, find_s#25)<<impl>>
            & (!(find_b_1#26 = null)<<origin("requires @ file SecureRandom.java @ line 10","[]")>>)<<impl,
                                                                                                     origin("requires @ file SecureRandom.java @ line 10","[]")>>)<<SC>>
            & ((  java.lang.Object::<inv>(assumes_heap#33, assumes_s#30)<<impl>>
                & (!(assumes_b_1#31 = null)<<origin("requires @ file SecureRandom.java @ line 10","[]")>>)<<impl,
                                                                                                            origin("requires @ file SecureRandom.java @ line 10","[]")>>)<<SC>>)
         -> (allFields(find_b_1#26) = allFields(assumes_b_1#31))<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_A<<anonHeapFunction>>)<<impl>>
        & \[{
              exc_103_A=null;try {
                result_89_A=de.polyas.core3.open.cred.CredentialGenerator.newSalt()@de.polyas.core3.open.cred.CredentialGenerator;
              }   catch (java.lang.Throwable e) {
                exc_103_A=e;
              }
            }\] (  resultAtPost_89_A = result_89_A
                 & excAtPost_103_A = exc_103_A
                 & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & de.polyas.core3.open.cred.CredentialGenerator::<$inv>(heapAtPre_B<<anonHeapFunction>>)<<impl>>
        & \[{
              exc_103_B=null;try {
                result_89_B=de.polyas.core3.open.cred.CredentialGenerator.newSalt()@de.polyas.core3.open.cred.CredentialGenerator;
              }   catch (java.lang.Throwable e) {
                exc_103_B=e;
              }
            }\] (  resultAtPost_89_B = result_89_B
                 & excAtPost_103_B = exc_103_B
                 & heapAtPost_B = heap))
-> (resultAtPost_89_A = resultAtPost_89_B)<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "649")

(branch "dummy ID"
(rule "unfold_computed_formula_0_of_newSalt_479840995" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
 (builtin "One Step Simplification" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "18"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "19"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "20"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "21"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "22"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "23"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "24"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "25"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "26"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "27"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "28"))
(rule "andLeft" (formula "1"))
(rule "Use_information_flow_contract_for_nextBytes_749673528" (formula "43") (ifseqformula "14"))
(rule "impLeft" (formula "43"))
(branch "pre nextBytes_749673528 (information flow)"
   (rule "andRight" (formula "60"))
   (branch
      (rule "andRight" (formula "60"))
      (branch
         (rule "eqSymm" (formula "27"))
         (rule "eqSymm" (formula "77"))
         (rule "eqSymm" (formula "58"))
         (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "notLeft" (formula "32"))
         (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "applyEq" (formula "55") (term "3") (ifseqformula "57"))
         (rule "applyEq" (formula "3") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "54") (term "4") (ifseqformula "52"))
         (rule "applyEq" (formula "29") (term "0") (ifseqformula "31"))
         (rule "qeq_literals" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "applyEq" (formula "61") (term "0") (ifseqformula "25"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEq" (formula "51") (term "1,0,1,0") (ifseqformula "54"))
         (rule "applyEq" (formula "46") (term "3") (ifseqformula "45"))
         (rule "applyEq" (formula "21") (term "1,0,1") (ifseqformula "24"))
         (rule "applyEq" (formula "22") (term "3") (ifseqformula "24"))
         (rule "applyEq" (formula "22") (term "4") (ifseqformula "20"))
         (rule "applyEq" (formula "21") (term "1,0,1,0,0") (ifseqformula "24"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,2") (ifseqformula "2"))
         (rule "add_literals" (formula "12") (term "2,1,0,2"))
         (rule "applyEq" (formula "51") (term "1,0,0,0,0") (ifseqformula "54"))
         (rule "applyEq" (formula "51") (term "1,0,1") (ifseqformula "54"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "27") (term "0") (ifseqformula "28"))
         (rule "qeq_literals" (formula "27"))
         (rule "true_left" (formula "27"))
         (rule "applyEq" (formula "59") (term "0") (ifseqformula "52"))
         (rule "applyEq" (formula "20") (term "1,0,0,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "38") (term "4") (ifseqformula "37"))
         (rule "applyEq" (formula "49") (term "1,0,1,0,0") (ifseqformula "52"))
         (rule "applyEq" (formula "16") (term "3") (ifseqformula "15"))
         (rule "applyEq" (formula "36") (term "1,2,1,0,0,0") (ifseqformula "27"))
         (rule "add_literals" (formula "36") (term "2,1,0,0,0"))
         (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "23"))
         (rule "applyEq" (formula "9") (term "1,2,1,0,0,0") (ifseqformula "1"))
         (rule "add_literals" (formula "9") (term "2,1,0,0,0"))
         (rule "applyEq" (formula "39") (term "1,2,1,0,0") (ifseqformula "27"))
         (rule "add_literals" (formula "39") (term "2,1,0,0"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,0") (ifseqformula "1"))
         (rule "add_literals" (formula "12") (term "2,1,0,0"))
         (rule "applyEq" (formula "11") (term "4") (ifseqformula "10"))
         (rule "applyEq" (formula "38") (term "1,2,1,0,2") (ifseqformula "27"))
         (rule "add_literals" (formula "38") (term "2,1,0,2"))
         (rule "applyEq" (formula "57") (term "1,2,1,0,0") (ifseqformula "27"))
         (rule "add_literals" (formula "57") (term "2,1,0,0"))
         (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
         (rule "leq_literals" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "commute_or" (formula "14") (term "0"))
         (rule "commute_or" (formula "41") (term "0"))
         (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "56"))
         (rule "closeTrue" (formula "56"))
      )
      (branch
         (rule "notRight" (formula "60"))
         (rule "close" (formula "66") (ifseqformula "1"))
      )
   )
   (branch
      (rule "andRight" (formula "60"))
      (branch
         (rule "eqSymm" (formula "27"))
         (rule "eqSymm" (formula "77"))
         (rule "eqSymm" (formula "58"))
         (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "39"))
          (builtin "One Step Simplification" (formula "32"))
         (rule "andLeft" (formula "32"))
         (rule "notLeft" (formula "32"))
         (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "andLeft" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,0,0") (ifseqformula "4"))
         (rule "add_literals" (formula "12") (term "2,1,0,0,0"))
         (rule "applyEq" (formula "44") (term "1,2,1,0,0") (ifseqformula "32"))
         (rule "add_literals" (formula "44") (term "2,1,0,0"))
         (rule "applyEq" (formula "23") (term "1,0,1,0") (ifseqformula "26"))
         (rule "applyEq" (formula "23") (term "1,0,0,0,0") (ifseqformula "26"))
         (rule "applyEq" (formula "55") (term "4") (ifseqformula "53"))
         (rule "applyEq" (formula "43") (term "4") (ifseqformula "42"))
         (rule "applyEq" (formula "14") (term "1,2,1,0,2") (ifseqformula "4"))
         (rule "add_literals" (formula "14") (term "2,1,0,2"))
         (rule "applyEq" (formula "54") (term "1,0,1") (ifseqformula "57"))
         (rule "applyEq" (formula "63") (term "0") (ifseqformula "26"))
         (rule "applyEq" (formula "24") (term "4") (ifseqformula "22"))
         (rule "applyEq" (formula "62") (term "1,2,1,0,0") (ifseqformula "4"))
         (rule "add_literals" (formula "62") (term "2,1,0,0"))
         (rule "applyEq" (formula "14") (term "4") (ifseqformula "13"))
         (rule "applyEq" (formula "43") (term "1,2,1,0,2") (ifseqformula "32"))
         (rule "add_literals" (formula "43") (term "2,1,0,2"))
         (rule "applyEq" (formula "23") (term "1,0,1") (ifseqformula "26"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEq" (formula "48") (term "3") (ifseqformula "47"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "31"))
         (rule "leq_literals" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "applyEq" (formula "39") (term "1,2,1,0,0,0") (ifseqformula "30"))
         (rule "add_literals" (formula "39") (term "2,1,0,0,0"))
         (rule "applyEq" (formula "28") (term "0") (ifseqformula "30"))
         (rule "qeq_literals" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "applyEq" (formula "51") (term "1,0,0,0,0") (ifseqformula "54"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "50") (term "1,0,1,0,0") (ifseqformula "53"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "49") (term "1,0,1,0") (ifseqformula "52"))
         (rule "applyEq" (formula "20") (term "1,0,1,0,0") (ifseqformula "23"))
         (rule "applyEq" (formula "50") (term "3") (ifseqformula "52"))
         (rule "applyEq" (formula "16") (term "3") (ifseqformula "15"))
         (rule "applyEq" (formula "59") (term "0") (ifseqformula "52"))
         (rule "applyEq" (formula "12") (term "1,2,1,0,0") (ifseqformula "1"))
         (rule "add_literals" (formula "12") (term "2,1,0,0"))
         (rule "applyEq" (formula "26") (term "0") (ifseqformula "27"))
         (rule "qeq_literals" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "applyEq" (formula "21") (term "3") (ifseqformula "23"))
         (rule "commute_or" (formula "41") (term "0"))
         (rule "commute_or" (formula "14") (term "0"))
         (rule "Class_invariant_axiom_for_java_security_SecureRandom" (formula "56"))
         (rule "closeTrue" (formula "56"))
      )
      (branch
         (rule "notRight" (formula "60"))
         (rule "close" (formula "65") (ifseqformula "1"))
      )
   )
)
(branch "post nextBytes_749673528 (information flow)"
   (rule "Use_information_flow_contract_for_asHexString_1063021898" (formula "50") (ifseqformula "19"))
   (rule "Use_information_flow_contract_for_toLowerCase_2107268077" (formula "57") (ifseqformula "24"))
   (rule "eqSymm" (formula "79"))
   (rule "eqSymm" (formula "27"))
   (rule "eqSymm" (formula "61"))
   (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "39"))
    (builtin "One Step Simplification" (formula "32"))
   (rule "andLeft" (formula "32"))
   (rule "notLeft" (formula "32"))
   (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "andLeft" (formula "4"))
   (rule "notLeft" (formula "4"))
   (rule "replace_known_left" (formula "50") (term "0,1") (ifseqformula "43"))
    (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "70")) (ifInst ""  (formula "69")))
   (rule "replace_known_left" (formula "57") (term "0,1") (ifseqformula "50"))
    (builtin "One Step Simplification" (formula "57"))
   (rule "allFieldsEq" (formula "43"))
   (rule "applyEq" (formula "57") (term "1,0,0") (ifseqformula "50"))
   (rule "applyEq" (formula "57") (term "0,1") (ifseqformula "60"))
   (rule "eqSymm" (formula "57") (term "1"))
   (rule "applyEq" (formula "41") (term "1,0,0") (ifseqformula "43"))
   (rule "applyEq" (formula "44") (term "1,2,1,0,2") (ifseqformula "32"))
   (rule "add_literals" (formula "44") (term "2,1,0,2"))
   (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "43"))
   (rule "applyEq" (formula "2") (term "0") (ifseqformula "4"))
   (rule "qeq_literals" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "applyEq" (formula "64") (term "0") (ifseqformula "25"))
   (rule "applyEq" (formula "44") (term "1,2,1,0,0") (ifseqformula "31"))
   (rule "add_literals" (formula "44") (term "2,1,0,0"))
   (rule "applyEq" (formula "40") (term "1,0,0,0,0,0") (ifseqformula "42"))
   (rule "applyEq" (formula "44") (term "0,1,0,0") (ifseqformula "42"))
   (rule "applyEq" (formula "43") (term "1,0,0,2") (ifseqformula "42"))
   (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "42"))
   (rule "applyEq" (formula "13") (term "4") (ifseqformula "12"))
   (rule "applyEq" (formula "39") (term "1,0,0,0,0,0,0,0") (ifseqformula "41"))
   (rule "applyEq" (formula "42") (term "1,0,0,0,2") (ifseqformula "41"))
   (rule "applyEq" (formula "42") (term "4") (ifseqformula "40"))
   (rule "applyEq" (formula "43") (term "1,0,0,0,0") (ifseqformula "41"))
   (rule "applyEq" (formula "49") (term "0") (ifseqformula "41"))
   (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "41"))
   (rule "applyEq" (formula "67") (term "0") (ifseqformula "40"))
   (rule "applyEq" (formula "38") (term "0,1,2,1,0,0,0") (ifseqformula "40"))
   (rule "applyEq" (formula "11") (term "1,2,1,0,0,0") (ifseqformula "3"))
   (rule "add_literals" (formula "11") (term "2,1,0,0,0"))
   (rule "applyEq" (formula "61") (term "1,0") (ifseqformula "40"))
   (rule "applyEq" (formula "38") (term "0,1,0") (ifseqformula "40"))
   (rule "applyEq" (formula "53") (term "1,0,1,0,0") (ifseqformula "57"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
   (rule "leq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "40") (term "1,0,0,0,0,2") (ifseqformula "39"))
   (rule "applyEq" (formula "41") (term "1,0,0,0") (ifseqformula "39"))
   (rule "applyEq" (formula "37") (term "1,0,0,0,0,0,0") (ifseqformula "39"))
   (rule "applyEq" (formula "41") (term "1,0,0,0,0,0") (ifseqformula "39"))
   (rule "applyEq" (formula "37") (term "0,1,0,0,0") (ifseqformula "39"))
   (rule "applyEq" (formula "62") (term "0") (ifseqformula "56"))
   (rule "applyEq" (formula "21") (term "1,0,0,0,0") (ifseqformula "24"))
   (rule "applyEq" (formula "40") (term "1,0,0,0,0,0,2") (ifseqformula "39"))
   (rule "applyEq" (formula "54") (term "0") (ifseqformula "46"))
   (rule "applyEq" (formula "21") (term "1,0,1,0,0") (ifseqformula "24"))
   (rule "applyEq" (formula "44") (term "1,0,1,0") (ifseqformula "46"))
   (rule "applyEq" (formula "44") (term "1,0,1") (ifseqformula "46"))
   (rule "applyEq" (formula "41") (term "1,0,0,0,0,0,0") (ifseqformula "39"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "39") (term "1") (ifseqformula "38"))
   (rule "applyEq" (formula "51") (term "1,0,1,0") (ifseqformula "55"))
   (rule "applyEq" (formula "12") (term "1,2,1,0,0") (ifseqformula "1"))
   (rule "add_literals" (formula "12") (term "2,1,0,0"))
   (rule "applyEq" (formula "39") (term "0,1,0,2") (ifseqformula "38"))
   (rule "applyEq" (formula "16") (term "3") (ifseqformula "15"))
   (rule "applyEq" (formula "46") (term "3") (ifseqformula "44"))
   (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "38"))
   (rule "applyEq" (formula "53") (term "3") (ifseqformula "55"))
   (rule "applyEq" (formula "20") (term "1,0,1,0") (ifseqformula "23"))
   (rule "applyEq" (formula "11") (term "1,2,1,0,2") (ifseqformula "1"))
   (rule "add_literals" (formula "11") (term "2,1,0,2"))
   (rule "applyEq" (formula "20") (term "1,0,1") (ifseqformula "23"))
   (rule "applyEq" (formula "53") (term "4") (ifseqformula "50"))
   (rule "applyEq" (formula "46") (term "2") (ifseqformula "45"))
   (rule "applyEq" (formula "39") (term "1,2") (ifseqformula "38"))
   (rule "applyEq" (formula "21") (term "3") (ifseqformula "23"))
   (rule "applyEq" (formula "21") (term "4") (ifseqformula "19"))
   (rule "applyEq" (formula "51") (term "1,0,0,0,0") (ifseqformula "55"))
   (rule "applyEq" (formula "36") (term "1,0,0,0,0") (ifseqformula "38"))
   (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "38"))
   (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "38"))
   (rule "applyEq" (formula "43") (term "1,0,0,0") (ifseqformula "45"))
   (rule "applyEq" (formula "63") (term "0") (ifseqformula "45"))
   (rule "applyEq" (formula "51") (term "1,0,1") (ifseqformula "55"))
   (rule "applyEq" (formula "53") (term "2") (ifseqformula "45"))
   (rule "applyEq" (formula "36") (term "1,2,1,0,0,0") (ifseqformula "1"))
   (rule "add_literals" (formula "36") (term "2,1,0,0,0"))
   (rule "applyEq" (formula "52") (term "0,1") (ifseqformula "23"))
   (rule "eqSymm" (formula "52") (term "1"))
   (rule "replace_known_right" (formula "52") (term "1") (ifseqformula "74"))
    (builtin "One Step Simplification" (formula "52"))
   (rule "notLeft" (formula "52"))
   (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "28"))
   (rule "leq_literals" (formula "27") (term "0"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "true_left" (formula "27"))
   (rule "commute_or" (formula "14") (term "0"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "56") (term "0"))
    (builtin "One Step Simplification" (formula "56"))
   (rule "commute_or" (formula "20") (term "0,0"))
   (rule "commute_or_2" (formula "14"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "56"))
   (rule "closeTrue" (formula "56"))
)
)
}
