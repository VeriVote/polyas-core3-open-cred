\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Oct 26 16:22:40 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Sat Oct 26 16:22:40 CEST 2019
contract=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:hexCharacters()].JML normal_behavior operation contract.0
name=de.polyas.core3.open.crypto.basic.Utils[de.polyas.core3.open.crypto.basic.Utils\\:\\:hexCharacters()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "2926")

(branch "dummy ID"
(rule "expand_inChar" (formula "1") (term "1,0,0,1,0,0,0,1,1") (newnames "result_44,exc_51,heapAtPre_0,o,f"))
(rule "replace_char_MIN" (formula "1") (term "0,1,1,0,0,1,0,0,0,1,1"))
(rule "replace_char_MAX" (formula "1") (term "1,0,1,0,0,1,0,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "3") (term "1,1,0,0,1,0,0,0,1"))
(rule "assignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0,1,0,0,0,1"))
(rule "nnf_imp2or" (formula "3") (term "0,0,1,0,0,0,1"))
(rule "nnf_notAnd" (formula "3") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0,0,1,0,0,0,1"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "3") (term "0,0,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "1,0,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0,0,1,0,0,0,1"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0,1,0,0,0,1"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_hexCharacters,savedHeapBefore_hexCharacters"))
 (builtin "One Step Simplification" (formula "3"))
(rule "returnUnfold" (formula "3") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_arr"))
(rule "methodCallWithAssignmentUnfoldTarget" (formula "3") (term "1") (inst "#v0=s"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "s"))
(rule "stringAssignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
 (builtin "One Step Simplification" (formula "1"))
 (builtin "One Step Simplification" (formula "2"))
(rule "notLeft" (formula "1"))
 (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_toCharArray,result_45,exc_52,heapAfter_toCharArray,anon_heap_toCharArray") (contract "java.lang.String[java.lang.String::toCharArray()].JML normal_behavior operation contract.0"))
(branch "Post (toCharArray)"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "11"))
   (rule "eqSymm" (formula "8"))
   (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "poolKeyIsContentOfValue" (formula "8") (term "0,0"))
   (rule "eqSymm" (formula "8"))
   (rule "lenOfSeqConcat" (formula "8") (term "1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "polySimp_addAssoc" (formula "8") (term "1"))
   (rule "add_literals" (formula "8") (term "0,1"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "1,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
   (rule "lenOfSeqConcat" (formula "8") (term "1,1"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "add_literals" (formula "8") (term "1,1"))
   (rule "add_literals" (formula "8") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "applyEq" (formula "9") (term "0,1,0,0,1,0,0") (ifseqformula "8"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "nnf_imp2or" (formula "9") (term "0"))
   (rule "nnf_notAnd" (formula "9") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
   (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,0,0,1,0,0"))
   (rule "add_literals" (formula "9") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
   (rule "mul_literals" (formula "9") (term "1,1,0,0"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "commute_and" (formula "9") (term "1,0"))
   (rule "cnf_rightDist" (formula "9") (term "0"))
   (rule "distr_forallAnd" (formula "9"))
   (rule "andLeft" (formula "9"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "methodCallReturn" (formula "13") (term "1"))
   (rule "assignment" (formula "13") (term "1"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAtPre_0"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "1") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "shift_paren_or" (formula "5") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "shift_paren_or" (formula "4") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "4"))
   (rule "true_left" (formula "4"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
   (rule "commute_and" (formula "2") (term "1,0,0,0"))
   (rule "commute_and" (formula "1") (term "1,0,0,0"))
   (rule "shift_paren_and" (formula "3") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "cnf_rightDist" (formula "5") (term "0,0"))
   (rule "distr_forallAnd" (formula "5") (term "0"))
   (rule "distr_forallAnd" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "commute_or" (formula "6") (term "0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0"))
   (rule "distr_forallAnd" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or_2" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "shift_paren_or" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "tryEmpty" (formula "17") (term "1"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_toCharArray<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_toCharArray<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_toCharArray"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "15"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "15"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "4") (term "1,0,0,0"))
   (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "4") (term "0,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_and" (formula "7") (term "1,0,0,0"))
   (rule "emptyModality" (formula "24") (term "1"))
    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")) (ifInst ""  (formula "22")))
   (rule "eqSymm" (formula "24") (term "1,0,0,1"))
   (rule "applyEq" (formula "24") (term "1,1,0,0,0") (ifseqformula "19"))
   (rule "commute_and" (formula "6") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "1") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "commute_or" (formula "1") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "1") (term "0,0,0"))
   (rule "arrayLengthNotNegative" (formula "19") (term "0"))
   (rule "applyEq" (formula "19") (term "0") (ifseqformula "20"))
   (rule "qeq_literals" (formula "19"))
   (rule "true_left" (formula "19"))
   (rule "andRight" (formula "24"))
   (branch
      (rule "allRight" (formula "24") (inst "sk=i_0"))
      (rule "orRight" (formula "24"))
      (rule "orRight" (formula "24"))
      (rule "inEqSimp_leqRight" (formula "24"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_geqRight" (formula "25"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "pullOutSelect" (formula "26") (term "0,1") (inst "selectSK=arr_0"))
      (rule "applyEq" (formula "27") (term "0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "commute_and" (formula "27"))
      (rule "arrayLengthIsAnInt" (formula "22") (term "0"))
      (rule "expand_inInt" (formula "22"))
      (rule "replace_int_MAX" (formula "22") (term "1,0"))
      (rule "replace_int_MIN" (formula "22") (term "0,1"))
      (rule "andLeft" (formula "22"))
      (rule "inEqSimp_commuteLeq" (formula "23"))
      (rule "applyEq" (formula "22") (term "0") (ifseqformula "24"))
      (rule "leq_literals" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "applyEq" (formula "22") (term "0") (ifseqformula "23"))
      (rule "qeq_literals" (formula "22"))
      (rule "true_left" (formula "22"))
      (rule "shift_paren_and" (formula "8") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "6") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
      (rule "cnf_rightDist" (formula "10") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "10") (term "0,0"))
      (rule "distr_forallAnd" (formula "10") (term "0"))
      (rule "distr_forallAnd" (formula "10"))
      (rule "andLeft" (formula "10"))
      (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
      (rule "cnf_rightDist" (formula "9") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "9") (term "0,0"))
      (rule "distr_forallAnd" (formula "9") (term "0"))
      (rule "distr_forallAnd" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "commute_and" (formula "7") (term "1,0,0,0"))
      (rule "commute_and" (formula "6") (term "1,0,0,0"))
      (rule "commute_and" (formula "5") (term "1,0,0,0"))
      (rule "commute_and" (formula "4") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "12") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "eqSymm" (formula "12") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "12") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "12") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "12") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "cnf_rightDist" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "9") (term "0,0"))
      (rule "shift_paren_or" (formula "11") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "eqSymm" (formula "11") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "cnf_rightDist" (formula "11") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "11") (term "0,0"))
      (rule "distr_forallAnd" (formula "11") (term "0"))
      (rule "distr_forallAnd" (formula "11"))
      (rule "andLeft" (formula "11"))
      (rule "commute_or_2" (formula "11") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "eqSymm" (formula "11") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "11") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "cnf_rightDist" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "cnf_rightDist" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "8") (term "0,0"))
      (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "shift_paren_or" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "eqSymm" (formula "10") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "6") (term "0,0"))
      (rule "distr_forallAnd" (formula "6") (term "0"))
      (rule "distr_forallAnd" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "5") (term "0,0"))
      (rule "distr_forallAnd" (formula "5") (term "0"))
      (rule "distr_forallAnd" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or_2" (formula "10") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "eqSymm" (formula "10") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "10") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "4") (term "0,0"))
      (rule "distr_forallAnd" (formula "4") (term "0"))
      (rule "distr_forallAnd" (formula "4"))
      (rule "andLeft" (formula "4"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "commute_or_2" (formula "6") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "shift_paren_or" (formula "6") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "5") (term "0,0"))
      (rule "distr_forallAnd" (formula "5") (term "0"))
      (rule "distr_forallAnd" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or_2" (formula "5") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "4") (term "0,0"))
      (rule "distr_forallAnd" (formula "4") (term "0"))
      (rule "distr_forallAnd" (formula "4"))
      (rule "andLeft" (formula "4"))
      (rule "commute_or_2" (formula "4") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "shift_paren_or" (formula "5") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "shift_paren_or" (formula "4") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "1,0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "true_left" (formula "4"))
      (rule "ifthenelse_split" (formula "1") (term "0"))
      (branch "result_45.<created> = TRUE TRUE"
         (rule "applyEqReverse" (formula "21") (term "0,1") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "21") (term "0,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "true_left" (formula "14"))
         (rule "allLeft" (formula "15") (inst "t=i_0"))
         (rule "replaceKnownSelect_taclet00_0" (formula "15") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "15") (term "0,1"))
         (rule "inEqSimp_contradInEq0" (formula "15") (term "1,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "15") (term "0,1,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "15") (term "0,0"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "20"))
         (rule "inEqSimp_leqRight" (formula "20"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "16") (ifseqformula "1"))
         (rule "leq_literals" (formula "16") (term "0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "true_left" (formula "16"))
         (rule "allLeft" (formula "17") (inst "t=i_0"))
         (rule "replaceKnownSelect_taclet00_0" (formula "17") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet000_1" (formula "17") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "17") (term "0,1"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "17") (term "0,0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "inEqSimp_subsumption1" (formula "4") (ifseqformula "17"))
         (rule "leq_literals" (formula "4") (term "0"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "true_left" (formula "4"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "16"))
         (rule "qeq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
      (branch "result_45.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "21") (term "0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "21") (term "0,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "allLeft" (formula "16") (inst "t=i_0"))
         (rule "replaceKnownSelect_taclet00_0" (formula "16") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_1" (formula "16") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "16") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq0" (formula "16") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "inEqSimp_geqRight" (formula "21"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "17") (ifseqformula "1"))
         (rule "leq_literals" (formula "17") (term "0"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "true_left" (formula "17"))
         (rule "allLeft" (formula "16") (inst "t=i_0"))
         (rule "replaceKnownSelect_taclet00_0" (formula "16") (term "0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet100_1" (formula "16") (term "0,1"))
         (rule "inEqSimp_contradInEq0" (formula "16") (term "1") (ifseqformula "1"))
         (rule "qeq_literals" (formula "16") (term "0,1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "0") (ifseqformula "3"))
         (rule "qeq_literals" (formula "16") (term "0,0"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "inEqSimp_subsumption1" (formula "3") (ifseqformula "16"))
         (rule "leq_literals" (formula "3") (term "0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "15"))
         (rule "qeq_literals" (formula "2") (term "0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch
      (rule "allRight" (formula "24") (inst "sk=f_0"))
      (rule "allRight" (formula "24") (inst "sk=o_0"))
      (rule "orRight" (formula "24"))
      (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "closeTrue" (formula "26"))
   )
)
(branch "Exceptional Post (toCharArray)"
    (builtin "One Step Simplification" (formula "5"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "expand_inChar" (formula "5") (term "1,0,0,1,0,1,1"))
   (rule "replace_char_MIN" (formula "5") (term "0,1,1,0,0,1,0,1,1"))
   (rule "replace_char_MAX" (formula "5") (term "1,0,1,0,0,1,0,1,1"))
   (rule "andLeft" (formula "5"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "6") (term "1,0") (ifseqformula "5"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (toCharArray)"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "2")))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "5"))
   (rule "closeTrue" (formula "5"))
)
(branch "Null reference (s = null)"
    (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "closeTrue" (formula "5"))
)
)
}
