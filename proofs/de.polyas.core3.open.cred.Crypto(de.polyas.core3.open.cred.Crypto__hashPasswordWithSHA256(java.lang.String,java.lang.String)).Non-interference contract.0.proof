\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 16:30:29 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Heap;
Update;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
Seq;
int;
numbers;
Field;
boolean;
LocSet;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
java.security.SecureRandom\extends java.util.Random;
java.security.MessageDigest\extends java.security.MessageDigestSpi;
Formula;
}

\predicates{
RELATED_BY_sha256_1919988561(java.lang.String,Heap,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_sha256_1919988561(java.lang.String,Heap,java.lang.String,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
java.lang.String sk_0_A_0;
Seq strContent(java.lang.String);
int seqLen(Seq);
Formula lt(int,int);
numbers #;
numbers 1(numbers);
numbers neglit(numbers);
int Z(numbers);
int mul(int,int);
int add(int,int);
numbers 0(numbers);
Seq seqSub(Seq,int,int);
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
Heap anon_heap_sha256;
Heap create(Heap,java.lang.Object);
LocSet empty;
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_sha256_A_0;
boolean java_lang_Object_created__1_A_0;
Null null;
Field de.polyas.core3.open.cred.Crypto::$SECURE_RANDOM;
java.security.SecureRandom java.security.SecureRandom::select(Heap,java.lang.Object,Field);
Field de.polyas.core3.open.cred.Crypto::$SHA_256_DIGEST;
java.security.MessageDigest java.security.MessageDigest::select(Heap,java.lang.Object,Field);
Heap heapAtPost_A;
Heap heapAtPre_B;
java.lang.String sk_0_B_0;
Heap heapAfter_sha256_B_0;
boolean java_lang_Object_created__1_B_0;
Heap heapAtPost_B;
Formula de.polyas.core3.open.cred.Crypto::<$inv>(Heap);
}

\programVariables{
Heap heap;
java.lang.String salt_9_A;
java.lang.String password_41_A;
java.lang.String result_379_A_0;
java.lang.Throwable exc_427_A_0;
java.lang.String de.polyas.core3.open.cred.Crypto::BASE_32_CHARACTERS_A_0;
java.lang.Throwable exc_426_A;
java.lang.String result_378_A;
java.lang.String resultAtPost_378_A;
java.lang.Throwable excAtPost_426_A;
java.lang.String salt_9_B;
java.lang.String password_41_B;
java.lang.String result_379_B_0;
java.lang.Throwable exc_427_B_0;
java.lang.String de.polyas.core3.open.cred.Crypto::BASE_32_CHARACTERS_B_0;
java.lang.Throwable exc_426_B;
java.lang.String result_378_B;
java.lang.String resultAtPost_378_B;
java.lang.Throwable excAtPost_426_B;
java.lang.String _password_41_A;
java.lang.String _salt_9_A;
java.lang.String _password_41_B;
java.lang.String _salt_9_B;
}

\rules{

unfold_computed_formula_3_of_hashPasswordWithSHA256_801028411 {
  \schemaVar \term Heap sv_heapAtPre_A#30;
  \schemaVar \term java.lang.String sv_password_41_A#28;
  \schemaVar \term java.lang.String sv_salt_9_A#29;
  \schemaVar \term java.lang.String sv_resultAtPost_378_A#32;
  \schemaVar \term java.lang.Throwable sv_excAtPost_426_A#33;
  \schemaVar \term Heap sv_heapAtPost_A#34;
  \schemaVar \term Heap sv_heapAtPre_B#37;
  \schemaVar \term java.lang.String sv_password_41_B#35;
  \schemaVar \term java.lang.String sv_salt_9_B#36;
  \schemaVar \term java.lang.String sv_resultAtPost_378_B#39;
  \schemaVar \term java.lang.Throwable sv_excAtPost_426_B#40;
  \schemaVar \term Heap sv_heapAtPost_B#41;
  
  \find (
      {heap:=sv_heapAtPre_A#30}
        (  wellFormed(sv_heapAtPre_A#30)
         & heap = sv_heapAtPre_A#30
         & (  ((  sv_password_41_A#28 = null
                |   boolean::select(sv_heapAtPre_A#30,
                                    sv_password_41_A#28,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_salt_9_A#29 = null
                |   boolean::select(sv_heapAtPre_A#30,
                                    sv_salt_9_A#29,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_A#30)<<impl>>
             & ((  (!sv_password_41_A#28 = null)<<impl>>
                 & (!sv_salt_9_A#29 = null)<<impl>>)<<SC>>))<<SC>>)
         & {_password_41_A:=sv_password_41_A#28 || _salt_9_A:=sv_salt_9_A#29}
             \[{
                 exc_426_A=null;try {
                   result_378_A=de.polyas.core3.open.cred.Crypto.hashPasswordWithSHA256(_password_41_A,_salt_9_A)@de.polyas.core3.open.cred.Crypto;
                 }   catch (java.lang.Throwable e) {
                   exc_426_A=e;
                 }
               }\] (  sv_resultAtPost_378_A#32 = result_378_A
                    & sv_excAtPost_426_A#33 = exc_426_A
                    & sv_heapAtPost_A#34 = heap))
    & {heap:=sv_heapAtPre_B#37}
        (  wellFormed(sv_heapAtPre_B#37)
         & heap = sv_heapAtPre_B#37
         & (  ((  sv_password_41_B#35 = null
                |   boolean::select(sv_heapAtPre_B#37,
                                    sv_password_41_B#35,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>)
            & ((  sv_salt_9_B#36 = null
                |   boolean::select(sv_heapAtPre_B#37,
                                    sv_salt_9_B#36,
                                    java.lang.Object::<created>)
                  = TRUE)<<SC>>))
         & ((  de.polyas.core3.open.cred.Crypto::<$inv>(sv_heapAtPre_B#37)<<impl>>
             & ((  (!sv_password_41_B#35 = null)<<impl>>
                 & (!sv_salt_9_B#36 = null)<<impl>>)<<SC>>))<<SC>>)
         & {_password_41_B:=sv_password_41_B#35 || _salt_9_B:=sv_salt_9_B#36}
             \[{
                 exc_426_B=null;try {
                   result_378_B=de.polyas.core3.open.cred.Crypto.hashPasswordWithSHA256(_password_41_B,_salt_9_B)@de.polyas.core3.open.cred.Crypto;
                 }   catch (java.lang.Throwable e) {
                   exc_426_B=e;
                 }
               }\] (  sv_resultAtPost_378_B#39 = result_378_B
                    & sv_excAtPost_426_B#40 = exc_426_B
                    & sv_heapAtPost_B#41 = heap))
  )
  \antecedentPolarity
  \replacewith (
      {heap:=sv_heapAtPre_A#30}
        (    seqLen(strContent(sk_0_A_0))
           = add(seqLen(strContent(sv_salt_9_A#29)),
                 \if (lt(seqLen(strContent(sv_salt_9_A#29)),
                         seqLen(strContent(sk_0_A_0))))
                     \then (add(mul(seqLen(strContent(sv_salt_9_A#29)),
                                    Z(neglit(1(#)))),
                                seqLen(strContent(sk_0_A_0))))
                     \else (Z(0(#))))
         &   seqSub(strContent(sk_0_A_0),
                    Z(0(#)),
                    seqLen(strContent(sv_salt_9_A#29)))
           = strContent(sv_salt_9_A#29)
         &   seqSub(strContent(sk_0_A_0),
                    seqLen(strContent(sv_salt_9_A#29)),
                    seqLen(strContent(sk_0_A_0)))
           = strContent(sv_password_41_A#28)
         & wellFormed(sv_heapAtPre_A#30)
         & sv_heapAtPre_A#30 = heap
         &   boolean::select(sv_heapAtPre_A#30,
                             sv_password_41_A#28,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_A#30,
                             sv_salt_9_A#29,
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_sha256<<anonHeapFunction>>)
         &   anon(create(heap, sk_0_A_0),
                  empty,
                  anon_heap_sha256<<anonHeapFunction>>)
           = heapAfter_sha256_A_0
         &   \if (sk_0_A_0 = result_379_A_0)
                 \then (TRUE)
                 \else (boolean::select(heap,
                                        result_379_A_0,
                                        java.lang.Object::<created>))
           = java_lang_Object_created__1_A_0<<selectSK>>
         & (  java_lang_Object_created__1_A_0<<selectSK>> = TRUE
            |   boolean::select(anon_heap_sha256<<anonHeapFunction>>,
                                result_379_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & (exc_427_A_0 = null)<<impl>>
         & RELATED_BY_sha256_1919988561(sk_0_A_0,
                                        create(heap, sk_0_A_0),
                                        result_379_A_0,
                                        exc_427_A_0,
                                        heapAfter_sha256_A_0)
         & wellFormed(create(heap, sk_0_A_0))
         & !  java.security.SecureRandom::select(heap,
                                                 null,
                                                 de.polyas.core3.open.cred.Crypto::$SECURE_RANDOM)
            = null
         & !  java.security.MessageDigest::select(heap,
                                                  null,
                                                  de.polyas.core3.open.cred.Crypto::$SHA_256_DIGEST)
            = null
         & !result_379_A_0 = null
         & !  java.security.SecureRandom::select(sv_heapAtPre_A#30,
                                                 null,
                                                 de.polyas.core3.open.cred.Crypto::$SECURE_RANDOM)
            = null
         & !de.polyas.core3.open.cred.Crypto.BASE_32_CHARACTERS_A_0 = null
         & !  java.security.MessageDigest::select(sv_heapAtPre_A#30,
                                                  null,
                                                  de.polyas.core3.open.cred.Crypto::$SHA_256_DIGEST)
            = null
         & !sk_0_A_0 = null
         & !{exc_426_A:=null
             || heap:=heapAfter_sha256_A_0
             || result_378_A:=result_379_A_0}
              !(  result_378_A = sv_resultAtPost_378_A#32
                & exc_426_A = sv_excAtPost_426_A#33
                & sv_heapAtPost_A#34 = heap)
         & !sv_salt_9_A#29 = null
         & !sv_password_41_A#28 = null)
    & {heap:=sv_heapAtPre_B#37}
        (    seqLen(strContent(sk_0_B_0))
           = add(seqLen(strContent(sv_salt_9_B#36)),
                 \if (lt(seqLen(strContent(sv_salt_9_B#36)),
                         seqLen(strContent(sk_0_B_0))))
                     \then (add(mul(seqLen(strContent(sv_salt_9_B#36)),
                                    Z(neglit(1(#)))),
                                seqLen(strContent(sk_0_B_0))))
                     \else (Z(0(#))))
         &   seqSub(strContent(sk_0_B_0),
                    Z(0(#)),
                    seqLen(strContent(sv_salt_9_B#36)))
           = strContent(sv_salt_9_B#36)
         &   seqSub(strContent(sk_0_B_0),
                    seqLen(strContent(sv_salt_9_B#36)),
                    seqLen(strContent(sk_0_B_0)))
           = strContent(sv_password_41_B#35)
         & wellFormed(sv_heapAtPre_B#37)
         & sv_heapAtPre_B#37 = heap
         &   boolean::select(sv_heapAtPre_B#37,
                             sv_password_41_B#35,
                             java.lang.Object::<created>)
           = TRUE
         &   boolean::select(sv_heapAtPre_B#37,
                             sv_salt_9_B#36,
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_sha256<<anonHeapFunction>>)
         &   anon(create(heap, sk_0_B_0),
                  empty,
                  anon_heap_sha256<<anonHeapFunction>>)
           = heapAfter_sha256_B_0
         &   \if (sk_0_B_0 = result_379_B_0)
                 \then (TRUE)
                 \else (boolean::select(heap,
                                        result_379_B_0,
                                        java.lang.Object::<created>))
           = java_lang_Object_created__1_B_0<<selectSK>>
         & (  java_lang_Object_created__1_B_0<<selectSK>> = TRUE
            |   boolean::select(anon_heap_sha256<<anonHeapFunction>>,
                                result_379_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & (exc_427_B_0 = null)<<impl>>
         & RELATED_BY_sha256_1919988561(sk_0_B_0,
                                        create(heap, sk_0_B_0),
                                        result_379_B_0,
                                        exc_427_B_0,
                                        heapAfter_sha256_B_0)
         & wellFormed(create(heap, sk_0_B_0))
         & !  java.security.SecureRandom::select(heap,
                                                 null,
                                                 de.polyas.core3.open.cred.Crypto::$SECURE_RANDOM)
            = null
         & !  java.security.MessageDigest::select(heap,
                                                  null,
                                                  de.polyas.core3.open.cred.Crypto::$SHA_256_DIGEST)
            = null
         & !result_379_B_0 = null
         & !  java.security.SecureRandom::select(sv_heapAtPre_B#37,
                                                 null,
                                                 de.polyas.core3.open.cred.Crypto::$SECURE_RANDOM)
            = null
         & !de.polyas.core3.open.cred.Crypto.BASE_32_CHARACTERS_B_0 = null
         & !  java.security.MessageDigest::select(sv_heapAtPre_B#37,
                                                  null,
                                                  de.polyas.core3.open.cred.Crypto::$SHA_256_DIGEST)
            = null
         & !sk_0_B_0 = null
         & !{exc_426_B:=null
             || heap:=heapAfter_sha256_B_0
             || result_378_B:=result_379_B_0}
              !(  result_378_B = sv_resultAtPost_378_B#39
                & exc_426_B = sv_excAtPost_426_B#40
                & sv_heapAtPost_B#41 = heap)
         & !sv_salt_9_B#36 = null
         & !sv_password_41_B#35 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_sha256_1919988561 {
  \schemaVar \term java.lang.String find_var#29;
  \schemaVar \term Heap find_heap#32;
  \schemaVar \term java.lang.String find_result_379#30;
  \schemaVar \term java.lang.Throwable find_exc_427#31;
  \schemaVar \term Heap find_heapAfter_sha256#33;
  \schemaVar \term java.lang.String assumes_var#34;
  \schemaVar \term Heap assumes_heap#37;
  \schemaVar \term java.lang.String assumes_result_379#35;
  \schemaVar \term java.lang.Throwable assumes_exc_427#36;
  \schemaVar \term Heap assumes_heapAfter_sha256#38;
  
  \assumes ( RELATED_BY_sha256_1919988561(assumes_var#34,
                                          assumes_heap#37,
                                          assumes_result_379#35,
                                          assumes_exc_427#36,
                                          assumes_heapAfter_sha256#38)
            ⟹
             
  )
  \find (
    RELATED_BY_sha256_1919988561(find_var#29,
                                 find_heap#32,
                                 find_result_379#30,
                                 find_exc_427#31,
                                 find_heapAfter_sha256#33)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_sha256_1919988561(find_var#29,
                                 find_heap#32,
                                 find_result_379#30,
                                 find_exc_427#31,
                                 find_heapAfter_sha256#33)
  )
  \add (      (de.polyas.core3.open.cred.Crypto::<$inv>(find_heap#32)<<impl>>
            & (!(find_var#29 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>
            & ((  de.polyas.core3.open.cred.Crypto::<$inv>(assumes_heap#37)<<impl>>
                & (!(assumes_var#34 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                       origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>)
         -> (find_result_379#30 = assumes_result_379#35)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_sha256_1919988561_0 {
  \schemaVar \term java.lang.String find_var#44;
  \schemaVar \term Heap find_heap#47;
  \schemaVar \term java.lang.String find_result_379#45;
  \schemaVar \term java.lang.Throwable find_exc_427#46;
  \schemaVar \term Heap find_heapAfter_sha256#48;
  \schemaVar \term java.lang.String assumes_var#49;
  \schemaVar \term Heap assumes_heap#52;
  \schemaVar \term java.lang.String assumes_result_379#50;
  \schemaVar \term java.lang.Throwable assumes_exc_427#51;
  \schemaVar \term Heap assumes_heapAfter_sha256#53;
  
  \assumes ( RELATED_BY_sha256_1919988561(assumes_var#49,
                                          assumes_heap#52,
                                          assumes_result_379#50,
                                          assumes_exc_427#51,
                                          assumes_heapAfter_sha256#53)
            ⟹
             
  )
  \find (
    RELATED_BY_sha256_1919988561(find_var#44,
                                 find_heap#47,
                                 find_result_379#45,
                                 find_exc_427#46,
                                 find_heapAfter_sha256#48)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_sha256_1919988561(find_var#44,
                                 find_heap#47,
                                 find_result_379#45,
                                 find_exc_427#46,
                                 find_heapAfter_sha256#48)
  )
  \add (      (de.polyas.core3.open.cred.Crypto::<$inv>(find_heap#47)<<impl>>
            & (!(find_var#44 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>
            & ((  de.polyas.core3.open.cred.Crypto::<$inv>(assumes_heap#52)<<impl>>
                & (!(assumes_var#49 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                       origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>)
         -> (find_result_379#45 = assumes_result_379#50)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_sha256_1919988561_1 {
  \schemaVar \term java.lang.String find_var_1#54;
  \schemaVar \term Heap find_heap#57;
  \schemaVar \term java.lang.String find_result_380#55;
  \schemaVar \term java.lang.Throwable find_exc_428#56;
  \schemaVar \term Heap find_heapAfter_sha256_0#58;
  \schemaVar \term java.lang.String assumes_var_1#59;
  \schemaVar \term Heap assumes_heap#62;
  \schemaVar \term java.lang.String assumes_result_380#60;
  \schemaVar \term java.lang.Throwable assumes_exc_428#61;
  \schemaVar \term Heap assumes_heapAfter_sha256_0#63;
  
  \assumes ( RELATED_BY_sha256_1919988561(assumes_var_1#59,
                                          assumes_heap#62,
                                          assumes_result_380#60,
                                          assumes_exc_428#61,
                                          assumes_heapAfter_sha256_0#63)
            ⟹
             
  )
  \find (
    RELATED_BY_sha256_1919988561(find_var_1#54,
                                 find_heap#57,
                                 find_result_380#55,
                                 find_exc_428#56,
                                 find_heapAfter_sha256_0#58)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_sha256_1919988561(find_var_1#54,
                                 find_heap#57,
                                 find_result_380#55,
                                 find_exc_428#56,
                                 find_heapAfter_sha256_0#58)
  )
  \add (      (de.polyas.core3.open.cred.Crypto::<$inv>(find_heap#57)<<impl>>
            & (!(find_var_1#54 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                  origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>
            & ((  de.polyas.core3.open.cred.Crypto::<$inv>(assumes_heap#62)<<impl>>
                & (!(assumes_var_1#59 = null)<<origin("requires @ file Crypto.java @ line 126","[]")>>)<<impl,
                                                                                                         origin("requires @ file Crypto.java @ line 126","[]")>>)<<SC>>)
         -> (find_result_380#55 = assumes_result_380#60)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & (  ((  password_41_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   password_41_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  salt_9_A = null
               |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                   salt_9_A,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_A<<anonHeapFunction>>)<<impl>>
            & ((  (!(password_41_A = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                      origin("requires @ file Crypto.java @ line 118","[]")>>
                & (!(salt_9_A = null)<<origin("requires @ file Crypto.java @ line 118","[]")>>)<<impl,
                                                                                                 origin("requires @ file Crypto.java @ line 118","[]")>>)<<SC>>))<<SC>>)
        & {_password_41_A:=password_41_A
           || _salt_9_A:=salt_9_A}
            \[{
                exc_426_A=null;try {
                  result_378_A=de.polyas.core3.open.cred.Crypto.hashPasswordWithSHA256(_password_41_A,_salt_9_A)@de.polyas.core3.open.cred.Crypto;
                }   catch (java.lang.Throwable e) {
                  exc_426_A=e;
                }
              }\] (  resultAtPost_378_A = result_378_A
                   & excAtPost_426_A = exc_426_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & (  ((  password_41_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   password_41_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>)
           & ((  salt_9_B = null
               |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                   salt_9_B,
                                   java.lang.Object::<created>)
                 = TRUE)<<SC>>))
        & ((  de.polyas.core3.open.cred.Crypto::<$inv>(heapAtPre_B<<anonHeapFunction>>)<<impl>>
            & ((  (!password_41_B = null)<<impl>>
                & (!salt_9_B = null)<<impl>>)<<SC>>))<<SC>>)
        & {_password_41_B:=password_41_B
           || _salt_9_B:=salt_9_B}
            \[{
                exc_426_B=null;try {
                  result_378_B=de.polyas.core3.open.cred.Crypto.hashPasswordWithSHA256(_password_41_B,_salt_9_B)@de.polyas.core3.open.cred.Crypto;
                }   catch (java.lang.Throwable e) {
                  exc_426_B=e;
                }
              }\] (  resultAtPost_378_B = result_378_B
                   & excAtPost_426_B = exc_426_B
                   & heapAtPost_B = heap))
-> (resultAtPost_378_A = resultAtPost_378_B)<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "28125")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "9"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "5"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "10"))
(rule "eqSymm" (formula "15"))
(rule "eqSymm" (formula "5") (term "1,0,0,1"))
(rule "eqSymm" (formula "5") (term "0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1"))
(rule "eqSymm" (formula "10") (term "0,0,0,1"))
(rule "replace_known_right" (formula "8") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "8"))
(rule "replace_known_right" (formula "7") (term "0") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "7"))
(rule "replace_known_right" (formula "3") (term "0") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "3"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "2"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "boxToDiamond" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "notLeft" (formula "5"))
(rule "boxToDiamond" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "notLeft" (formula "9"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "9"))
(rule "notLeft" (formula "8"))
(rule "notLeft" (formula "7"))
(rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_hashPasswordWithSHA256,savedHeapBefore_hashPasswordWithSHA256"))
 (builtin "One Step Simplification" (formula "13"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_hashPasswordWithSHA256_0,savedHeapBefore_hashPasswordWithSHA256_0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "returnUnfold" (formula "13") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "s"))
(rule "returnUnfold" (formula "12") (term "1") (inst "#v0=s"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "s_1"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_A<<anonHeapFunction>>"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,0,0,0"))
(rule "commute_and" (formula "2") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPre_B<<anonHeapFunction>>"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_B"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heap"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAtPost_A"))
(rule "andLeft" (formula "1"))
(rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
(rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
(rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
(rule "commute_and" (formula "1") (term "0,0,0,0"))
(rule "commute_and" (formula "1") (term "0,1,0,0,0"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "19") (term "1"))
(rule "variableDeclarationAssign" (formula "19") (term "1"))
(rule "variableDeclaration" (formula "19") (term "1") (newnames "var"))
(rule "stringConcat" (formula "19") (term "1") (inst "sk=sk_0"))
 (builtin "One Step Simplification" (formula "21"))
 (builtin "One Step Simplification" (formula "20"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSeqConcat" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "lenOfSeqSubEQ" (formula "1") (term "0,1") (ifseqformula "3"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "methodCallWithAssignmentUnfoldArguments" (formula "21") (term "1"))
(rule "variableDeclarationAssign" (formula "21") (term "1"))
(rule "variableDeclaration" (formula "21") (term "1") (newnames "var_1"))
(rule "stringConcat" (formula "21") (term "1") (inst "sk=sk_1"))
 (builtin "One Step Simplification" (formula "23"))
 (builtin "One Step Simplification" (formula "22"))
 (builtin "One Step Simplification" (formula "1"))
(rule "eqSeqConcat" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
(rule "lenOfSeqSubEQ" (formula "1") (term "0,1") (ifseqformula "3"))
(rule "polySimp_elimSub" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1,0,1"))
(rule "polySimp_addComm0" (formula "1") (term "1"))
 (builtin "Use Operation Contract" (formula "27") (newnames "heapBefore_sha256,result_379,exc_427,heapAfter_sha256,anon_heap_sha256") (contract "de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto::sha256(java.lang.String)].JML normal_behavior operation contract.0"))
(branch "Post (sha256)"
    (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
    (builtin "One Step Simplification" (formula "31"))
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "20"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,1,0") (ifseqformula "20"))
   (rule "andLeft" (formula "24"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "22"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "22"))
   (rule "notLeft" (formula "23"))
   (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "28"))
    (builtin "One Step Simplification" (formula "21"))
   (rule "assignment" (formula "37") (term "1"))
    (builtin "One Step Simplification" (formula "37"))
   (rule "blockEmpty" (formula "37") (term "1"))
   (rule "applyEq" (formula "24") (term "3") (ifseqformula "23"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "27"))
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "37")))
   (rule "castDel" (formula "27") (term "0"))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "27"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "true_left" (formula "28"))
   (rule "hideAuxiliaryEq" (formula "27"))
   (rule "pullOutSelect" (formula "21") (term "0,0") (inst "selectSK=java_lang_Object_created__1"))
   (rule "simplifySelectOfCreate" (formula "21"))
    (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "36")))
   (rule "castDel" (formula "21") (term "1,0"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "26"))
   (rule "andLeft" (formula "26"))
   (rule "andLeft" (formula "26"))
   (rule "notLeft" (formula "28"))
   (rule "notLeft" (formula "27"))
   (rule "notLeft" (formula "26"))
   (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "38")))
   (rule "applyEqReverse" (formula "29") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "37")) (ifInst ""  (formula "37")))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "andLeft" (formula "23"))
   (rule "notLeft" (formula "25"))
   (rule "notLeft" (formula "24"))
   (rule "notLeft" (formula "23"))
   (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replaceKnownSelect_taclet0_6" (formula "1") (term "0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "replaceKnownSelect_taclet0_8" (formula "1") (term "0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallReturn" (formula "35") (term "1"))
   (rule "assignment" (formula "35") (term "1"))
    (builtin "One Step Simplification" (formula "35"))
    (builtin "Use Operation Contract" (formula "33") (newnames "heapBefore_sha256_0,result_380,exc_428,heapAfter_sha256_0,anon_heap_sha256_0") (contract "de.polyas.core3.open.cred.Crypto[de.polyas.core3.open.cred.Crypto::sha256(java.lang.String)].JML normal_behavior operation contract.0"))
   (branch "Post (sha256)"
       (builtin "One Step Simplification" (formula "28"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "36")) (ifInst ""  (formula "36")))
       (builtin "One Step Simplification" (formula "27"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "27"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1,1,0") (ifseqformula "27"))
      (rule "andLeft" (formula "31"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "30"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "31"))
      (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "35"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "assignment" (formula "43") (term "1"))
       (builtin "One Step Simplification" (formula "43"))
      (rule "blockEmpty" (formula "43") (term "1"))
      (rule "applyEq" (formula "31") (term "3") (ifseqformula "28"))
      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "34"))
       (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "43")))
      (rule "castDel" (formula "34") (term "0"))
      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "34"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "true_left" (formula "35"))
      (rule "hideAuxiliaryEq" (formula "34"))
      (rule "pullOutSelect" (formula "29") (term "0,0") (inst "selectSK=java_lang_Object_created__3"))
      (rule "simplifySelectOfCreate" (formula "29"))
       (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "42")))
      (rule "castDel" (formula "29") (term "1,0"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "33"))
      (rule "andLeft" (formula "33"))
      (rule "notLeft" (formula "34"))
      (rule "andLeft" (formula "33"))
      (rule "notLeft" (formula "33"))
      (rule "notLeft" (formula "33"))
      (rule "pullOutSelect" (formula "35") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
      (rule "applyEqReverse" (formula "36") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "31"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "32"))
      (rule "andLeft" (formula "31"))
      (rule "notLeft" (formula "31"))
      (rule "notLeft" (formula "31"))
      (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet00_18" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "35") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_3"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replaceKnownSelect_taclet00_20" (formula "1") (term "0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "34") (term "0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "methodCallEmpty" (formula "43") (term "1"))
      (rule "methodCallReturn" (formula "41") (term "1"))
      (rule "assignment" (formula "41") (term "1"))
       (builtin "One Step Simplification" (formula "41"))
      (rule "tryEmpty" (formula "43") (term "1"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256<<anonHeapFunction>>"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,1,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_A<<anonHeapFunction>>, sk_0),
     empty,
     anon_heap_sha256<<anonHeapFunction>>)"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
      (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "23"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
      (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
      (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_A<<anonHeapFunction>>, sk_0)"))
      (rule "andLeft" (formula "1"))
      (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
      (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
      (rule "commute_and" (formula "1") (term "0,0,0,0"))
      (rule "methodCallEmpty" (formula "44") (term "1"))
      (rule "emptyModality" (formula "46") (term "1"))
       (builtin "One Step Simplification" (formula "46"))
      (rule "notRight" (formula "46"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "applyEq" (formula "28") (term "1,0,1") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "13") (term "0,0,1,1,0,0,0,0") (ifseqformula "3"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (term "1,1,0,0,0,0") (ifseqformula "26"))
      (rule "applyEq" (formula "27") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "30") (term "2") (ifseqformula "1"))
      (rule "applyEq" (formula "27") (term "1,2,0") (ifseqformula "1"))
      (rule "applyEq" (formula "40") (term "0") (ifseqformula "1"))
      (rule "commute_and" (formula "5") (term "0,1,0,0,0"))
      (rule "commute_or" (formula "13") (term "1,1,0,0,0,0"))
      (rule "shift_paren_or" (formula "13") (term "1,0,0,0,0"))
      (rule "commute_and" (formula "4") (term "0,1,0,0,0"))
      (rule "tryEmpty" (formula "46") (term "1"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
      (rule "andLeft" (formula "12"))
      (rule "lenOfSeqSub" (formula "12") (term "0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0"))
      (rule "lenOfSeqSubEQ" (formula "12") (term "1") (ifseqformula "14"))
      (rule "eqSymm" (formula "12"))
      (rule "polySimp_elimSub" (formula "12") (term "1,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "lenNonNegative" (formula "12") (term "2,0"))
      (rule "inEqSimp_commuteLeq" (formula "12"))
      (rule "lenNonNegative" (formula "13") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "13"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
      (rule "andLeft" (formula "11"))
      (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
      (rule "times_zero_2" (formula "12") (term "1,1,1,1,0,0"))
      (rule "add_zero_right" (formula "12") (term "1,1,1,0,0"))
      (rule "lenOfSeqSub" (formula "11") (term "0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
      (rule "mul_literals" (formula "11") (term "1,1,0"))
      (rule "add_zero_right" (formula "11") (term "1,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "eqSymm" (formula "11") (term "1"))
      (rule "inEqSimp_commuteLeq" (formula "12") (term "0,0,0"))
      (rule "applyEq" (formula "12") (term "0,0,1,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "lenNonNegative" (formula "9") (term "1,0"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "lenNonNegative" (formula "10") (term "2,0"))
      (rule "inEqSimp_commuteLeq" (formula "10"))
      (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
      (rule "andLeft" (formula "11"))
      (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
      (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
      (rule "polySimp_addComm0" (formula "12") (term "1,1,1,0,0"))
      (rule "lenOfSeqSub" (formula "11") (term "0"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0"))
      (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
      (rule "eqSymm" (formula "11"))
      (rule "polySimp_elimSub" (formula "11") (term "1,0"))
      (rule "polySimp_addComm0" (formula "11") (term "1,0"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
      (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "true_left" (formula "11"))
      (rule "emptyModality" (formula "51") (term "1"))
       (builtin "One Step Simplification" (formula "51"))
      (rule "notRight" (formula "51"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "eqSymm" (formula "2"))
      (rule "polySimp_homoEq" (formula "10"))
      (rule "polySimp_homoEq" (formula "15"))
      (rule "polySimp_addComm1" (formula "10") (term "0"))
      (rule "polySimp_addComm1" (formula "15") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "16") (term "0"))
      (rule "add_zero_right" (formula "16") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "15") (term "0,0,1,0"))
      (rule "applyEq" (formula "44") (term "2") (ifseqformula "1"))
      (rule "applyEq" (formula "46") (term "0") (ifseqformula "1"))
      (rule "applyEqRigid" (formula "22") (term "0,0,1,1,0,0,0,0") (ifseqformula "3"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,1,0,0,0,0") (ifseqformula "40"))
      (rule "applyEq" (formula "42") (term "1,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "43") (term "1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "42") (term "1,2,0") (ifseqformula "1"))
      (rule "polySimp_sepPosMonomial" (formula "10"))
      (rule "polySimp_mulComm0" (formula "10") (term "1"))
      (rule "polySimp_rightDist" (formula "10") (term "1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,1"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "polySimp_homoEq" (formula "10") (term "1"))
      (rule "times_zero_2" (formula "10") (term "1,0,1"))
      (rule "add_zero_right" (formula "10") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "15"))
      (rule "polySimp_mulComm0" (formula "15") (term "1"))
      (rule "polySimp_rightDist" (formula "15") (term "1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1"))
      (rule "polySimp_mulComm0" (formula "15") (term "0,1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "polySimp_homoEq" (formula "15") (term "1"))
      (rule "times_zero_2" (formula "15") (term "1,0,1"))
      (rule "add_zero_right" (formula "15") (term "0,1"))
      (rule "polySimp_sepPosMonomial" (formula "10") (term "1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1"))
      (rule "polySimp_sepPosMonomial" (formula "15") (term "1"))
      (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
      (rule "polySimp_elimOne" (formula "15") (term "1,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "0"))
      (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
      (rule "polySimp_elimOne" (formula "16") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "15") (term "0"))
      (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
      (rule "polySimp_elimOne" (formula "15") (term "0,0"))
      (rule "nnf_imp2or" (formula "24") (term "0,0"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "8") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "7") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "9") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "25") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
      (rule "nnf_imp2or" (formula "21") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "nnf_notAnd" (formula "7") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "nnf_notAnd" (formula "9") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "nnf_notAnd" (formula "23") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "nnf_imp2or" (formula "25") (term "1,0,0,0"))
      (rule "nnf_notAnd" (formula "25") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "nnf_imp2or" (formula "8") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "7") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "9") (term "1,0,0,0"))
      (rule "nnf_imp2or" (formula "23") (term "1,0,0,0"))
      (rule "nnf_notOr" (formula "21") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "21") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "nnf_notOr" (formula "8") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "7") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "9") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "23") (term "1,0,0,0,0"))
      (rule "nnf_notOr" (formula "25") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "25") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "nnf_notOr" (formula "22") (term "1,0,0,0,0"))
      (rule "nnf_notAnd" (formula "22") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "nnf_notAnd" (formula "8") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "nnf_notAnd" (formula "7") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "nnf_notAnd" (formula "9") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "nnf_notAnd" (formula "23") (term "0,1,0,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "nnf_notOr" (formula "22") (term "1,1,0,0,0,0"))
      (rule "nnf_notOr" (formula "8") (term "0,1,0,0,0,0"))
      (rule "commute_or" (formula "16"))
      (rule "inEqSimp_or_weaken1" (formula "16"))
      (rule "add_literals" (formula "16") (term "1,0"))
       (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")))
      (rule "true_left" (formula "16"))
      (rule "commute_or" (formula "10"))
      (rule "inEqSimp_or_weaken1" (formula "10"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "commute_or" (formula "15"))
      (rule "inEqSimp_or_weaken1" (formula "15"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "commute_or_2" (formula "20") (term "0,0,0"))
      (rule "commute_or_2" (formula "24") (term "0,0,0"))
      (rule "commute_or_2" (formula "7") (term "0,0,0"))
      (rule "commute_or_2" (formula "9") (term "0,0,0"))
      (rule "commute_or_2" (formula "22") (term "0,0,0"))
      (rule "commute_or_2" (formula "21") (term "0,0,0"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
      (rule "commute_or_2" (formula "20") (term "1,0,0,0,0"))
      (rule "commute_or_2" (formula "24") (term "1,0,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "22") (term "0,0,0,0"))
      (rule "commute_or_2" (formula "21") (term "1,0,0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "24") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "21") (term "0,0,0,0"))
      (rule "commute_and" (formula "20") (term "1,0,0,0"))
      (rule "commute_and" (formula "24") (term "1,0,0,0"))
      (rule "commute_and" (formula "7") (term "1,0,0,0"))
      (rule "commute_and" (formula "9") (term "1,0,0,0"))
      (rule "commute_and" (formula "22") (term "1,0,0,0"))
      (rule "commute_and" (formula "21") (term "1,0,0,0"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "commute_or_2" (formula "9") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "22") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "commute_or_2" (formula "22") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "8") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or_2" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "shift_paren_or" (formula "7") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "shift_paren_or" (formula "23") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "shift_paren_or" (formula "20") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0,0"))
      (rule "distr_forallAnd" (formula "8") (term "0"))
      (rule "distr_forallAnd" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or_2" (formula "8") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "cnf_rightDist" (formula "21") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "21") (term "0,0"))
      (rule "distr_forallAnd" (formula "21") (term "0"))
      (rule "distr_forallAnd" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "commute_or_2" (formula "21") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
      (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "true_left" (formula "21"))
      (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0,0"))
      (rule "distr_forallAnd" (formula "7") (term "0"))
      (rule "distr_forallAnd" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "shift_paren_or" (formula "9") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
      (rule "castedGetAny" (formula "9") (term "0,0,0,0,0,0"))
      (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
      (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
      (rule "distr_forallAnd" (formula "19") (term "0,0"))
      (rule "distr_forallAnd" (formula "19") (term "0"))
      (rule "distr_forallAnd" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "ifthenelse_split" (formula "32") (term "0"))
      (branch "sk_0 = resultAtPost_378_A TRUE"
         (rule "applyEqReverse" (formula "34") (term "0,0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "true_left" (formula "34"))
         (rule "hideAuxiliaryEq" (formula "33"))
         (rule "applyEq" (formula "14") (term "0,0,0") (ifseqformula "32"))
         (rule "inEqSimp_commuteGeq" (formula "14"))
         (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "32"))
         (rule "applyEq" (formula "18") (term "0,0,2,0") (ifseqformula "32"))
         (rule "applyEq" (formula "18") (term "0,0,0") (ifseqformula "32"))
         (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "32"))
         (rule "applyEq" (formula "51") (term "0") (ifseqformula "32"))
         (rule "applyEq" (formula "34") (term "0") (ifseqformula "32"))
         (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "32"))
         (rule "applyEq" (formula "16") (term "0,0,0") (ifseqformula "32"))
         (rule "applyEq" (formula "31") (term "1,0,0") (ifseqformula "32"))
         (rule "applyEq" (formula "8") (term "1,0,0,0,0,0,0,0") (ifseqformula "32"))
         (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "14"))
         (rule "times_zero_1" (formula "17") (term "0,0"))
         (rule "add_zero_left" (formula "17") (term "0"))
         (rule "commute_or_2" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "22") (term "0,0"))
         (rule "distr_forallAnd" (formula "22") (term "0"))
         (rule "distr_forallAnd" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "20") (term "0,0"))
         (rule "distr_forallAnd" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "ifthenelse_split" (formula "38") (term "0"))
         (branch "sk_1 = resultAtPost_378_B TRUE"
            (rule "applyEqReverse" (formula "40") (term "0,0") (ifseqformula "39"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "true_left" (formula "40"))
            (rule "hideAuxiliaryEq" (formula "39"))
            (rule "applyEq" (formula "48") (term "0") (ifseqformula "38"))
            (rule "applyEq" (formula "40") (term "1,0") (ifseqformula "38"))
            (rule "applyEq" (formula "39") (term "1,1") (ifseqformula "38"))
            (rule "applyEq" (formula "36") (term "1,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "39") (term "0") (ifseqformula "38"))
            (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "13") (term "0,0,2,0") (ifseqformula "38"))
            (rule "applyEq" (formula "20") (term "1,0,0,0,0,1,0,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "38"))
            (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "38"))
            (rule "inEqSimp_commuteGeq" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "9"))
            (rule "mul_literals" (formula "11") (term "0,0"))
            (rule "add_zero_left" (formula "11") (term "0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "commute_or_2" (formula "21") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "shift_paren_or" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256_0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "34"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256_0<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "9") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "19") (term "0,0"))
            (rule "distr_forallAnd" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_A<<anonHeapFunction>>,
       resultAtPost_378_A<<origin(\"requires @ file Crypto.java @ line 118\",\"[]\")>>)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_A<<anonHeapFunction>>,
            resultAtPost_378_A<<origin(\"requires @ file Crypto.java @ line 118\",\"[]\")>>),
     empty,
     anon_heap_sha256<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "3") (term "0,0"))
            (rule "distr_forallAnd" (formula "3") (term "0"))
            (rule "distr_forallAnd" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_B<<anonHeapFunction>>,
       resultAtPost_378_B)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_B<<anonHeapFunction>>,
            resultAtPost_378_B),
     empty,
     anon_heap_sha256_0<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "lenNonNegative" (formula "16") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "16"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "17") (inst "iv=iv"))
            (rule "andLeft" (formula "17"))
            (rule "lenOfSeqSub" (formula "17") (term "0"))
            (rule "polySimp_elimSub" (formula "17") (term "1,0"))
            (rule "mul_literals" (formula "17") (term "1,1,0"))
            (rule "add_zero_right" (formula "17") (term "1,0"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "eqSymm" (formula "17") (term "1"))
            (rule "lenOfSeqSub" (formula "18") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "18") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "18") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "18") (term "1,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "17") (term "0"))
            (rule "add_zero_right" (formula "17") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "18") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "18") (term "0,0,0"))
            (rule "applyEq" (formula "18") (term "0,0,1,0") (ifseqformula "19"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "inEqSimp_sepNegMonomial0" (formula "17") (term "0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "0,0"))
            (rule "commute_or" (formula "17"))
            (rule "inEqSimp_or_weaken1" (formula "17"))
            (rule "add_literals" (formula "17") (term "1,0"))
             (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "17"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "20") (inst "iv=iv"))
            (rule "andLeft" (formula "20"))
            (rule "lenOfSeqSub" (formula "21") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "21") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "20") (term "0"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "20") (term "1") (ifseqformula "22"))
            (rule "eqSymm" (formula "20"))
            (rule "polySimp_elimSub" (formula "20") (term "1,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "20") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,0"))
            (rule "applyEq" (formula "20") (term "0,0,1,0") (ifseqformula "21"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "commute_and" (formula "4") (term "1,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "3") (term "1,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "15") (inst "iv=iv"))
            (rule "andLeft" (formula "15"))
            (rule "lenOfSeqSub" (formula "16") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "16") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "15") (term "0"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "15") (term "1") (ifseqformula "17"))
            (rule "eqSymm" (formula "15"))
            (rule "polySimp_elimSub" (formula "15") (term "1,0"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0"))
            (rule "applyEq" (formula "15") (term "0,0,1,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "true_left" (formula "15"))
            (rule "lenNonNegative" (formula "15") (term "2,0"))
            (rule "inEqSimp_commuteLeq" (formula "15"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "12") (inst "iv=iv"))
            (rule "andLeft" (formula "12"))
            (rule "lenOfSeqSub" (formula "13") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "13") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "13") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "13") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "12") (term "0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,0"))
            (rule "mul_literals" (formula "12") (term "1,1,0"))
            (rule "add_zero_right" (formula "12") (term "1,0"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "eqSymm" (formula "12") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "13") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "12") (term "0"))
            (rule "add_zero_right" (formula "12") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0"))
            (rule "applyEq" (formula "13") (term "0,0,1,0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0"))
            (rule "polySimp_mulLiterals" (formula "12") (term "0,0"))
            (rule "polySimp_elimOne" (formula "12") (term "0,0"))
            (rule "commute_or" (formula "12"))
            (rule "inEqSimp_or_weaken1" (formula "12"))
            (rule "add_literals" (formula "12") (term "1,0"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
            (rule "true_left" (formula "12"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "26"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "27"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "49") (term "0") (ifseqformula "25"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "50"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
            (rule "commute_and" (formula "7") (term "0,1,0,0,0"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "8") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "commute_or_2" (formula "8") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "7") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "commute_or_2" (formula "7") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "6") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
            (rule "commute_and" (formula "5") (term "1,0,0,0"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "8") (term "0,0"))
            (rule "distr_forallAnd" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "shift_paren_or" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0"))
            (rule "distr_forallAnd" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "shift_paren_or" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0"))
            (rule "distr_forallAnd" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "commute_or_2" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0"))
            (rule "distr_forallAnd" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "commute_or_2" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0"))
            (rule "distr_forallAnd" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0"))
            (rule "distr_forallAnd" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "commute_or_2" (formula "5") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
            (rule "replace_known_right" (formula "38") (term "0,1,1,0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "41")) (ifInst ""  (formula "52")))
            (rule "notLeft" (formula "38"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
            (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "pullOutSelect" (formula "40") (term "0,0,1,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
            (rule "applyEqReverse" (formula "41") (term "0,0,1,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "40") (term "0,1,1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "pullOutSelect" (formula "40") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
            (rule "applyEqReverse" (formula "41") (term "0,0,1") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "40") (term "0,1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
            (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "pullOutSelect" (formula "40") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_5"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
            (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "1"))
            (rule "hideAuxiliaryEq" (formula "1"))
            (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "notRight" (formula "40"))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_5"))
            (rule "simplifySelectOfCreate" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")) (ifInst ""  (formula "42")))
            (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
            (rule "close" (formula "45") (ifseqformula "2"))
         )
         (branch "sk_1 = resultAtPost_378_B FALSE"
            (rule "applyEqReverse" (formula "39") (term "0,0") (ifseqformula "38"))
            (rule "hideAuxiliaryEq" (formula "38"))
            (rule "commute_or" (formula "38"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "commute_or_2" (formula "21") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "shift_paren_or" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
            (rule "andLeft" (formula "9"))
            (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "9") (term "0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0"))
            (rule "mul_literals" (formula "9") (term "1,1,0"))
            (rule "add_zero_right" (formula "9") (term "1,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "9"))
            (rule "inEqSimp_or_weaken1" (formula "9"))
            (rule "add_literals" (formula "9") (term "1,0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
            (rule "true_left" (formula "9"))
            (rule "shift_paren_or" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256_0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "33"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_B<<anonHeapFunction>>, sk_1)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256_0<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_B<<anonHeapFunction>>, sk_1),
     empty,
     anon_heap_sha256_0<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "20") (term "0,0"))
            (rule "distr_forallAnd" (formula "20") (term "0"))
            (rule "distr_forallAnd" (formula "20"))
            (rule "andLeft" (formula "20"))
            (rule "commute_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_A<<anonHeapFunction>>,
       resultAtPost_378_A<<origin(\"requires @ file Crypto.java @ line 118\",\"[]\")>>)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_A<<anonHeapFunction>>,
            resultAtPost_378_A<<origin(\"requires @ file Crypto.java @ line 118\",\"[]\")>>),
     empty,
     anon_heap_sha256<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "4") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_and" (formula "4") (term "1,0,0,0"))
            (rule "commute_and" (formula "5") (term "1,0,0,0"))
            (rule "commute_and" (formula "3") (term "1,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "4") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "4") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "commute_or_2" (formula "4") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
            (rule "commute_or" (formula "3") (term "1,0,0,0,0,0"))
            (rule "lenNonNegative" (formula "17") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "17"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "18") (inst "iv=iv"))
            (rule "andLeft" (formula "18"))
            (rule "lenOfSeqSub" (formula "19") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "19") (term "1,1,1,0,0"))
            (rule "times_zero_2" (formula "19") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "19") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "18") (term "0"))
            (rule "polySimp_elimSub" (formula "18") (term "1,0"))
            (rule "mul_literals" (formula "18") (term "1,1,0"))
            (rule "add_zero_right" (formula "18") (term "1,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "eqSymm" (formula "18") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "19") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "18") (term "0"))
            (rule "add_zero_right" (formula "18") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "19") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "19") (term "0,0,0"))
            (rule "applyEq" (formula "19") (term "0,0,1,0") (ifseqformula "20"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "inEqSimp_sepNegMonomial0" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0"))
            (rule "commute_or" (formula "18"))
            (rule "inEqSimp_or_weaken1" (formula "18"))
            (rule "add_literals" (formula "18") (term "1,0"))
             (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "18"))
            (rule "cnf_rightDist" (formula "4") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "4") (term "0,0"))
            (rule "distr_forallAnd" (formula "4") (term "0"))
            (rule "distr_forallAnd" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "commute_or_2" (formula "4") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "eqSymm" (formula "4") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "21") (inst "iv=iv"))
            (rule "andLeft" (formula "21"))
            (rule "lenOfSeqSub" (formula "22") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "22") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "21") (term "0"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "21") (term "1") (ifseqformula "23"))
            (rule "eqSymm" (formula "21"))
            (rule "polySimp_elimSub" (formula "21") (term "1,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0"))
            (rule "applyEq" (formula "21") (term "0,0,1,0") (ifseqformula "22"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0"))
            (rule "distr_forallAnd" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "4") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "eqSymm" (formula "4") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "4") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "commute_or_2" (formula "3") (term "0,0,0,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "47") (term "0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "48"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "26"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0") (ifseqformula "27"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "46"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "48") (term "0") (ifseqformula "25"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "49"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "cnf_rightDist" (formula "8") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "8") (term "0,0"))
            (rule "distr_forallAnd" (formula "8") (term "0"))
            (rule "distr_forallAnd" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "commute_or_2" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "shift_paren_or" (formula "8") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0"))
            (rule "distr_forallAnd" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "commute_or_2" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "commute_or_2" (formula "6") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "5") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "cnf_rightDist" (formula "6") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0,0"))
            (rule "distr_forallAnd" (formula "6") (term "0"))
            (rule "distr_forallAnd" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "commute_or_2" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0"))
            (rule "distr_forallAnd" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "shift_paren_or" (formula "6") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "eqSymm" (formula "6") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "6") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "cnf_rightDist" (formula "5") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0,0"))
            (rule "distr_forallAnd" (formula "5") (term "0"))
            (rule "distr_forallAnd" (formula "5"))
            (rule "andLeft" (formula "5"))
            (rule "commute_or_2" (formula "5") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "eqSymm" (formula "5") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "shift_paren_or" (formula "5") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "eqSymm" (formula "5") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "5") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "cut_direct" (formula "37") (term "0"))
            (branch "CUT: resultAtPost_378_B.<created>@anon_heap_sha256_0«anonHeapFunction» = TRUE TRUE"
                (builtin "One Step Simplification" (formula "38"))
               (rule "true_left" (formula "38"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "32") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
               (rule "true_left" (formula "32"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "32") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
               (rule "true_left" (formula "32"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "38") (ifseqformula "32"))
               (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "43")) (ifInst ""  (formula "54")))
               (rule "notLeft" (formula "38"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
               (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "applyEqReverse" (formula "41") (term "0,0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,0,1") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "applyEqReverse" (formula "41") (term "0,0,1") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,1") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
               (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
               (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
               (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "44")) (ifInst ""  (formula "45")))
               (rule "closeTrue" (formula "40"))
            )
            (branch "CUT: resultAtPost_378_B.<created>@anon_heap_sha256_0«anonHeapFunction» = TRUE FALSE"
                (builtin "One Step Simplification" (formula "37"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_0" (formula "32") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "true_left" (formula "32"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "32") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "true_left" (formula "32"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "32") (ifseqformula "38"))
               (rule "eqSymm" (formula "32") (term "1"))
               (rule "replace_known_right" (formula "32") (term "0,1,0,0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "50")) (ifInst ""  (formula "55")))
               (rule "notLeft" (formula "32"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "0"))
               (rule "replace_known_right" (formula "40") (term "0,0,0,0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "45")))
               (rule "applyEqReverse" (formula "41") (term "0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")) (ifInst ""  (formula "45")))
               (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "49"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
               (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
               (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
               (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "45")) (ifInst ""  (formula "46")))
               (rule "closeTrue" (formula "40"))
            )
         )
      )
      (branch "sk_0 = resultAtPost_378_A FALSE"
         (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "32"))
         (rule "hideAuxiliaryEq" (formula "32"))
         (rule "commute_or" (formula "32"))
         (rule "commute_or_2" (formula "19") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "true_left" (formula "19"))
         (rule "cnf_rightDist" (formula "22") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "22") (term "0,0"))
         (rule "distr_forallAnd" (formula "22") (term "0"))
         (rule "distr_forallAnd" (formula "22"))
         (rule "andLeft" (formula "22"))
         (rule "cnf_rightDist" (formula "20") (term "0,0,0"))
         (rule "distr_forallAnd" (formula "20") (term "0,0"))
         (rule "distr_forallAnd" (formula "20") (term "0"))
         (rule "distr_forallAnd" (formula "20"))
         (rule "andLeft" (formula "20"))
         (rule "shift_paren_or" (formula "8") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "eqSymm" (formula "8") (term "1,1,0,0,0"))
         (rule "castedGetAny" (formula "8") (term "0,0,1,0,0,0"))
         (rule "castedGetAny" (formula "8") (term "1,0,0,0,0,0,0"))
         (rule "castedGetAny" (formula "8") (term "0,1,1,0,0,0"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "true_left" (formula "8"))
         (rule "ifthenelse_split" (formula "37") (term "0"))
         (branch "sk_1 = resultAtPost_378_B TRUE"
            (rule "applyEqReverse" (formula "39") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "true_left" (formula "39"))
            (rule "hideAuxiliaryEq" (formula "38"))
            (rule "applyEq" (formula "38") (term "1,1") (ifseqformula "37"))
            (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "37"))
            (rule "inEqSimp_commuteGeq" (formula "8"))
            (rule "applyEq" (formula "48") (term "0") (ifseqformula "37"))
            (rule "applyEq" (formula "39") (term "1,0") (ifseqformula "37"))
            (rule "applyEq" (formula "12") (term "0,0,2,0") (ifseqformula "37"))
            (rule "applyEq" (formula "38") (term "0") (ifseqformula "37"))
            (rule "applyEq" (formula "35") (term "1,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "19") (term "1,0,0,0,0,1,0,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "37"))
            (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "37"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "8"))
            (rule "mul_literals" (formula "10") (term "0,0"))
            (rule "add_zero_left" (formula "10") (term "0"))
            (rule "commute_or_2" (formula "21") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256_0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "34"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256_0<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "shift_paren_or" (formula "9") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "9") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "cnf_rightDist" (formula "19") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "19") (term "0,0"))
            (rule "distr_forallAnd" (formula "19") (term "0"))
            (rule "distr_forallAnd" (formula "19"))
            (rule "andLeft" (formula "19"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "19") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "eqSymm" (formula "19") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "19") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "19"))
            (rule "true_left" (formula "19"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_B<<anonHeapFunction>>,
       resultAtPost_378_B)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_B<<anonHeapFunction>>,
            resultAtPost_378_B),
     empty,
     anon_heap_sha256_0<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "commute_or" (formula "2") (term "1,0,0,0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "lenNonNegative" (formula "7") (term "1"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "8") (inst "iv=iv"))
            (rule "andLeft" (formula "8"))
            (rule "lenOfSeqSub" (formula "8") (term "0"))
            (rule "polySimp_elimSub" (formula "8") (term "1,0"))
            (rule "mul_literals" (formula "8") (term "1,1,0"))
            (rule "add_zero_right" (formula "8") (term "1,0"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "eqSymm" (formula "8") (term "1"))
            (rule "lenOfSeqSub" (formula "9") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "9") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "1,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "0"))
            (rule "add_zero_right" (formula "8") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0"))
            (rule "applyEq" (formula "9") (term "0,0,1,0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_sepNegMonomial0" (formula "8") (term "0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "0,0"))
            (rule "commute_or" (formula "8"))
            (rule "inEqSimp_or_weaken1" (formula "8"))
            (rule "add_zero_right" (formula "8") (term "1,0"))
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")))
            (rule "true_left" (formula "8"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "11") (inst "iv=iv"))
            (rule "andLeft" (formula "11"))
            (rule "lenOfSeqSub" (formula "12") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "12") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "11") (term "0"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0"))
            (rule "lenOfSeqSubEQ" (formula "11") (term "1") (ifseqformula "13"))
            (rule "eqSymm" (formula "11"))
            (rule "polySimp_elimSub" (formula "11") (term "1,0"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "11") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,0"))
            (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "18"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "41") (term "0") (ifseqformula "23"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "42"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "21"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "cut_direct" (formula "30") (term "1"))
            (branch "CUT: resultAtPost_378_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
               (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "42"))
                (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "49")) (ifInst ""  (formula "54")))
               (rule "notLeft" (formula "38"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
               (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1,1"))
               (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0,1"))
               (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "48")))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
               (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "47"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
               (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "notRight" (formula "40"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")) (ifInst ""  (formula "43")))
               (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
               (rule "close" (formula "46") (ifseqformula "2"))
            )
            (branch "CUT: resultAtPost_378_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
                (builtin "One Step Simplification" (formula "30"))
               (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
               (rule "replace_known_right" (formula "38") (term "0,1,1,0") (ifseqformula "50"))
                (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "43")) (ifInst ""  (formula "55")))
               (rule "notLeft" (formula "38"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "0"))
               (rule "replace_known_right" (formula "40") (term "0,0,0,0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,1,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "applyEqReverse" (formula "41") (term "0,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,1,0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "40") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_4"))
               (rule "simplifySelectOfCreate" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")) (ifInst ""  (formula "44")))
               (rule "applyEqReverse" (formula "41") (term "0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
               (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1"))
               (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0"))
               (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "48"))
                (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "47")) (ifInst ""  (formula "49")))
               (rule "closeTrue" (formula "40"))
            )
         )
         (branch "sk_1 = resultAtPost_378_B FALSE"
            (rule "applyEqReverse" (formula "38") (term "0,0") (ifseqformula "37"))
            (rule "hideAuxiliaryEq" (formula "37"))
            (rule "commute_or" (formula "37"))
            (rule "commute_or_2" (formula "21") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "eqSymm" (formula "21") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "21") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "21"))
            (rule "true_left" (formula "21"))
            (rule "shift_paren_or" (formula "18") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "eqSymm" (formula "18") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "18") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "cnf_rightDist" (formula "7") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "7") (term "0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "equalityToSeqGetAndSeqLenLeft" (formula "9") (inst "iv=iv"))
            (rule "andLeft" (formula "9"))
            (rule "lenOfSeqSub" (formula "10") (term "1,1,0,0"))
            (rule "polySimp_elimSub" (formula "10") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "10") (term "1,1,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "1,1,1,0,0"))
            (rule "lenOfSeqSub" (formula "9") (term "0"))
            (rule "polySimp_elimSub" (formula "9") (term "1,0"))
            (rule "times_zero_2" (formula "9") (term "1,1,0"))
            (rule "add_zero_right" (formula "9") (term "1,0"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "eqSymm" (formula "9") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "0,1,1,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,1,1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "0"))
            (rule "add_zero_right" (formula "9") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0"))
            (rule "applyEq" (formula "10") (term "0,0,1,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "0,0"))
            (rule "commute_or" (formula "9"))
            (rule "inEqSimp_or_weaken1" (formula "9"))
            (rule "add_literals" (formula "9") (term "1,0"))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
            (rule "true_left" (formula "9"))
            (rule "cnf_rightDist" (formula "18") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "18") (term "0,0"))
            (rule "distr_forallAnd" (formula "18") (term "0"))
            (rule "distr_forallAnd" (formula "18"))
            (rule "andLeft" (formula "18"))
            (rule "shift_paren_or" (formula "7") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "eqSymm" (formula "7") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "7") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=heapAfter_sha256_0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "34"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=create(heapAtPre_B<<anonHeapFunction>>, sk_1)"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon_heap_sha256_0<<anonHeapFunction>>"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "sv_heap=anon(create(heapAtPre_B<<anonHeapFunction>>, sk_1),
     empty,
     anon_heap_sha256_0<<anonHeapFunction>>)"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
            (rule "true_left" (formula "1"))
            (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
            (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
            (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notAnd" (formula "1") (term "0,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
            (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
            (rule "commute_or_2" (formula "20") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "shift_paren_or" (formula "20") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "eqSymm" (formula "20") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "20") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "20"))
            (rule "true_left" (formula "20"))
            (rule "commute_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,0,0,0"))
            (rule "commute_or" (formula "3") (term "0,1,0,0,0"))
            (rule "commute_or" (formula "1") (term "0,0,0,0"))
            (rule "commute_or" (formula "2") (term "0,1,0,0,0"))
            (rule "commute_or_2" (formula "3") (term "0,0,0"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
            (rule "commute_or_2" (formula "3") (term "1,0,0,0,0"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
            (rule "commute_and" (formula "3") (term "1,0,0,0"))
            (rule "commute_and" (formula "1") (term "1,0,0,0"))
            (rule "commute_and" (formula "2") (term "1,0,0,0"))
            (rule "commute_or" (formula "1") (term "1,0,0,0,0,0"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "commute_or_2" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "shift_paren_or" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0,0"))
            (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0,0"))
            (rule "distr_forallAnd" (formula "2") (term "0"))
            (rule "distr_forallAnd" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "shift_paren_or" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0,0"))
            (rule "distr_forallAnd" (formula "1") (term "0"))
            (rule "distr_forallAnd" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "commute_or_2" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "shift_paren_or" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "eqSymm" (formula "1") (term "1,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "1,0,0,0,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,0,1,0,0,0"))
            (rule "castedGetAny" (formula "1") (term "0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "18"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "42") (term "0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "43"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "46") (term "0") (ifseqformula "20"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0") (ifseqformula "24"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "44"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "cut_direct" (formula "30") (term "1"))
            (branch "CUT: resultAtPost_378_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE TRUE"
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "cut_direct" (formula "37") (term "1"))
               (branch "CUT: resultAtPost_378_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "true_left" (formula "38"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
                  (rule "replace_known_right" (formula "38") (term "0,1,1,0") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "50")) (ifInst ""  (formula "56")))
                  (rule "notLeft" (formula "38"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0,1"))
                  (rule "replace_known_right" (formula "40") (term "0,1,0,1") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "48")) (ifInst ""  (formula "49")))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "48"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "45")) (ifInst ""  (formula "46")))
                  (rule "closeTrue" (formula "40"))
               )
               (branch "CUT: resultAtPost_378_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
                  (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "52")) (ifInst ""  (formula "57")))
                  (rule "notLeft" (formula "38"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0,1"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "48")) (ifInst ""  (formula "50")))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                  (rule "closeTrue" (formula "40"))
               )
            )
            (branch "CUT: resultAtPost_378_A.<created>@heapAtPre_A«anonHeapFunction» = TRUE FALSE"
                (builtin "One Step Simplification" (formula "30"))
               (rule "cut_direct" (formula "37") (term "1"))
               (branch "CUT: resultAtPost_378_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE TRUE"
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "true_left" (formula "38"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
                  (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "51"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "52")) (ifInst ""  (formula "57")))
                  (rule "notLeft" (formula "38"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0,1"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "48")) (ifInst ""  (formula "50")))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0") (ifseqformula "49"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")) (ifInst ""  (formula "47")))
                  (rule "closeTrue" (formula "40"))
               )
               (branch "CUT: resultAtPost_378_B.<created>@heapAtPre_B«anonHeapFunction» = TRUE FALSE"
                   (builtin "One Step Simplification" (formula "37"))
                  (rule "Use_information_flow_contract_for_sha256_1919988561_1" (formula "38") (ifseqformula "32"))
                  (rule "replace_known_right" (formula "38") (term "0,1,0,0") (ifseqformula "52"))
                   (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "53")) (ifInst ""  (formula "58")))
                  (rule "notLeft" (formula "38"))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40") (term "1"))
                  (rule "replaceKnownSelect_taclet0_6" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_7" (formula "40") (term "0,0,1,1"))
                  (rule "replaceKnownSelect_taclet0_8" (formula "40") (term "0,0,1,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet0_9" (formula "40") (term "0,0,1,0,1"))
                  (rule "replace_known_right" (formula "40") (term "0,0,0,1") (ifseqformula "50"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "49")) (ifInst ""  (formula "51")))
                  (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "40"))
                  (rule "replaceKnownSelect_taclet00_18" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_19" (formula "40") (term "0,0,1"))
                  (rule "replaceKnownSelect_taclet00_20" (formula "40") (term "0,0,1,0"))
                  (rule "replaceKnownAuxiliaryConstant_taclet00_21" (formula "40") (term "0,0,1,0"))
                  (rule "replace_known_right" (formula "40") (term "0,1,0") (ifseqformula "47"))
                   (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "50")) (ifInst ""  (formula "48")))
                  (rule "closeTrue" (formula "40"))
               )
            )
         )
      )
   )
   (branch "Exceptional Post (sha256)"
       (builtin "One Step Simplification" (formula "35"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "andLeft" (formula "27"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "28") (term "1,0") (ifseqformula "27"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "29"))
      (rule "andLeft" (formula "28"))
      (rule "andLeft" (formula "30"))
      (rule "notLeft" (formula "28"))
      (rule "close" (formula "32") (ifseqformula "31"))
   )
   (branch "Pre (sha256)"
       (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "32")) (ifInst ""  (formula "32")))
      (rule "wellFormedCreate" (formula "33") (term "0,1"))
      (rule "replace_known_left" (formula "33") (term "0,1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "pullOutSelect" (formula "33") (term "0,1") (inst "selectSK=java_lang_Object_created__2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
      (rule "castDel" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "34") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "33"))
      (rule "replace_known_right" (formula "33") (term "0,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "pullOutSelect" (formula "33") (term "0,0,1") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")) (ifInst ""  (formula "33")))
      (rule "applyEqReverse" (formula "34") (term "0,0,1") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "replace_known_right" (formula "33") (term "0,1") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "notRight" (formula "33"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_2"))
      (rule "simplifySelectOfCreate" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "34")) (ifInst ""  (formula "34")))
      (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
      (rule "close" (formula "29") (ifseqformula "2"))
   )
)
(branch "Exceptional Post (sha256)"
    (builtin "One Step Simplification" (formula "20"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "andLeft" (formula "20"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "1,0") (ifseqformula "20"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "21"))
   (rule "andLeft" (formula "23"))
   (rule "notLeft" (formula "21"))
   (rule "close" (formula "24") (ifseqformula "23"))
)
(branch "Pre (sha256)"
    (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "26")) (ifInst ""  (formula "26")))
   (rule "wellFormedCreate" (formula "27") (term "0,1"))
   (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "pullOutSelect" (formula "27") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
   (rule "castDel" (formula "1") (term "0"))
   (rule "applyEqReverse" (formula "28") (term "0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "Static_class_invariant_axiom_for_de_polyas_core3_open_cred_Crypto" (formula "27"))
   (rule "replace_known_right" (formula "27") (term "0,0,0") (ifseqformula "22"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "pullOutSelect" (formula "27") (term "0,0,0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SECURE_RANDOM_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")) (ifInst ""  (formula "27")))
   (rule "applyEqReverse" (formula "28") (term "0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_right" (formula "27") (term "0,0") (ifseqformula "21"))
    (builtin "One Step Simplification" (formula "27"))
   (rule "notRight" (formula "27"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=de_polyas_core3_open_cred_Crypto_SHA_256_DIGEST_0"))
   (rule "simplifySelectOfCreate" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
   (rule "close" (formula "25") (ifseqformula "2"))
)
)
}
