\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 26 14:18:57 CEST 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_TRUE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";



\sorts{
Heap;
Update;
Field;
boolean;
LocSet;
java.lang.Throwable\extends java.io.Serializable, java.lang.Object;
java.lang.String\extends java.lang.Comparable, java.io.Serializable, java.lang.Object;
Formula;
}

\predicates{
RELATED_BY_toLowerCase_2107268077(java.lang.String,Heap,java.lang.String,java.lang.String,java.lang.Throwable,Heap);
RELATED_BY_bytesToHexString_1724841292(byte[],Heap,java.lang.String,java.lang.Throwable,Heap);
}

\functions{
Heap heapAtPre_A;
Formula wellFormed(Heap);
Field java.lang.Object::<created>;
boolean boolean::select(Heap,java.lang.Object,Field);
boolean TRUE;
Heap anon_heap_bytesToHexString;
LocSet empty;
Heap anon(Heap,LocSet,Heap);
Heap heapAfter_bytesToHexString_A_0;
Null null;
Heap anon_heap_toLowerCase;
Heap heapAfter_toLowerCase_A_0;
Heap heapAtPost_A;
Heap heapAtPre_B;
Heap heapAfter_bytesToHexString_B_0;
Heap heapAfter_toLowerCase_B_0;
Heap heapAtPost_B;
Formula java.lang.Object::<inv>(Heap,java.lang.Object);
LocSet allFields(java.lang.Object);
}

\programVariables{
Heap heap;
byte[] b_15_A;
java.lang.Throwable exc_362_A_0;
java.lang.String result_320_A_0;
java.lang.Throwable exc_363_A_0;
java.lang.String result_321_A_0;
java.lang.Throwable exc_361_A;
java.lang.String result_319_A;
java.lang.String resultAtPost_319_A;
java.lang.Throwable excAtPost_361_A;
byte[] b_15_B;
java.lang.Throwable exc_362_B_0;
java.lang.String result_320_B_0;
java.lang.Throwable exc_363_B_0;
java.lang.String result_321_B_0;
java.lang.Throwable exc_361_B;
java.lang.String result_319_B;
java.lang.String resultAtPost_319_B;
java.lang.Throwable excAtPost_361_B;
byte[] _b_15_A;
byte[] _b_15_B;
}

\rules{

unfold_computed_formula_1_of_asHexString_1063021898 {
  \schemaVar \term Heap sv_heapAtPre_A#29;
  \schemaVar \term byte[] sv_b_15_A#28;
  \schemaVar \term java.lang.String sv_resultAtPost_319_A#31;
  \schemaVar \term java.lang.Throwable sv_excAtPost_361_A#32;
  \schemaVar \term Heap sv_heapAtPost_A#33;
  \schemaVar \term Heap sv_heapAtPre_B#35;
  \schemaVar \term byte[] sv_b_15_B#34;
  \schemaVar \term java.lang.String sv_resultAtPost_319_B#37;
  \schemaVar \term java.lang.Throwable sv_excAtPost_361_B#38;
  \schemaVar \term Heap sv_heapAtPost_B#39;
  
  \find (
      {heap:=sv_heapAtPre_A#29}
        (  wellFormed(sv_heapAtPre_A#29)
         & heap = sv_heapAtPre_A#29
         & ((  sv_b_15_A#28 = null
             |   boolean::select(sv_heapAtPre_A#29,
                                 sv_b_15_A#28,
                                 java.lang.Object::<created>)
               = TRUE)<<SC>>)
         & (!sv_b_15_A#28 = null)<<impl>>
         & {_b_15_A:=sv_b_15_A#28}
             \[{
                 exc_361_A=null;try {
                   result_319_A=de.polyas.core3.open.crypto.basic.Utils.asHexString(_b_15_A)@de.polyas.core3.open.crypto.basic.Utils;
                 }   catch (java.lang.Throwable e) {
                   exc_361_A=e;
                 }
               }\] (  sv_resultAtPost_319_A#31 = result_319_A
                    & sv_excAtPost_361_A#32 = exc_361_A
                    & sv_heapAtPost_A#33 = heap))
    & {heap:=sv_heapAtPre_B#35}
        (  wellFormed(sv_heapAtPre_B#35)
         & heap = sv_heapAtPre_B#35
         & ((  sv_b_15_B#34 = null
             |   boolean::select(sv_heapAtPre_B#35,
                                 sv_b_15_B#34,
                                 java.lang.Object::<created>)
               = TRUE)<<SC>>)
         & (!sv_b_15_B#34 = null)<<impl>>
         & {_b_15_B:=sv_b_15_B#34}
             \[{
                 exc_361_B=null;try {
                   result_319_B=de.polyas.core3.open.crypto.basic.Utils.asHexString(_b_15_B)@de.polyas.core3.open.crypto.basic.Utils;
                 }   catch (java.lang.Throwable e) {
                   exc_361_B=e;
                 }
               }\] (  sv_resultAtPost_319_B#37 = result_319_B
                    & sv_excAtPost_361_B#38 = exc_361_B
                    & sv_heapAtPost_B#39 = heap))
  )
  \antecedentPolarity
  \replacewith (
      {heap:=sv_heapAtPre_A#29}
        (  wellFormed(sv_heapAtPre_A#29)
         & sv_heapAtPre_A#29 = heap
         &   boolean::select(sv_heapAtPre_A#29,
                             sv_b_15_A#28,
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_bytesToHexString<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_bytesToHexString<<anonHeapFunction>>)
           = heapAfter_bytesToHexString_A_0
         & exc_362_A_0 = null
         & (    boolean::select(heap,
                                result_320_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_bytesToHexString<<anonHeapFunction>>,
                                result_320_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_bytesToHexString_1724841292(sv_b_15_A#28,
                                                  heap,
                                                  result_320_A_0,
                                                  exc_362_A_0,
                                                  heapAfter_bytesToHexString_A_0)
         & wellFormed(heap)
         &   boolean::select(heap, sv_b_15_A#28, java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_toLowerCase<<anonHeapFunction>>)
         &   anon(heapAfter_bytesToHexString_A_0,
                  empty,
                  anon_heap_toLowerCase<<anonHeapFunction>>)
           = heapAfter_toLowerCase_A_0
         & exc_363_A_0 = null
         & (    boolean::select(heap,
                                result_321_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_bytesToHexString<<anonHeapFunction>>,
                                result_321_A_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_toLowerCase<<anonHeapFunction>>,
                                result_321_A_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_toLowerCase_2107268077(result_320_A_0,
                                             heapAfter_bytesToHexString_A_0,
                                             result_320_A_0,
                                             result_321_A_0,
                                             exc_363_A_0,
                                             heapAfter_toLowerCase_A_0)
         & wellFormed(heapAfter_bytesToHexString_A_0)
         & !result_321_A_0 = null
         & !result_320_A_0 = null
         & !{exc_361_A:=null
             || heap:=heapAfter_toLowerCase_A_0
             || result_319_A:=result_321_A_0}
              !(  result_319_A = sv_resultAtPost_319_A#31
                & exc_361_A = sv_excAtPost_361_A#32
                & sv_heapAtPost_A#33 = heap)
         & !sv_b_15_A#28 = null)
    & {heap:=sv_heapAtPre_B#35}
        (  wellFormed(sv_heapAtPre_B#35)
         & sv_heapAtPre_B#35 = heap
         &   boolean::select(sv_heapAtPre_B#35,
                             sv_b_15_B#34,
                             java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_bytesToHexString<<anonHeapFunction>>)
         &   anon(heap, empty, anon_heap_bytesToHexString<<anonHeapFunction>>)
           = heapAfter_bytesToHexString_B_0
         & exc_362_B_0 = null
         & (    boolean::select(heap,
                                result_320_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_bytesToHexString<<anonHeapFunction>>,
                                result_320_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_bytesToHexString_1724841292(sv_b_15_B#34,
                                                  heap,
                                                  result_320_B_0,
                                                  exc_362_B_0,
                                                  heapAfter_bytesToHexString_B_0)
         & wellFormed(heap)
         &   boolean::select(heap, sv_b_15_B#34, java.lang.Object::<created>)
           = TRUE
         & wellFormed(anon_heap_toLowerCase<<anonHeapFunction>>)
         &   anon(heapAfter_bytesToHexString_B_0,
                  empty,
                  anon_heap_toLowerCase<<anonHeapFunction>>)
           = heapAfter_toLowerCase_B_0
         & exc_363_B_0 = null
         & (    boolean::select(heap,
                                result_321_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_bytesToHexString<<anonHeapFunction>>,
                                result_321_B_0,
                                java.lang.Object::<created>)
              = TRUE
            |   boolean::select(anon_heap_toLowerCase<<anonHeapFunction>>,
                                result_321_B_0,
                                java.lang.Object::<created>)
              = TRUE)
         & RELATED_BY_toLowerCase_2107268077(result_320_B_0,
                                             heapAfter_bytesToHexString_B_0,
                                             result_320_B_0,
                                             result_321_B_0,
                                             exc_363_B_0,
                                             heapAfter_toLowerCase_B_0)
         & wellFormed(heapAfter_bytesToHexString_B_0)
         & !result_321_B_0 = null
         & !result_320_B_0 = null
         & !{exc_361_B:=null
             || heap:=heapAfter_toLowerCase_B_0
             || result_319_B:=result_321_B_0}
              !(  result_319_B = sv_resultAtPost_319_B#37
                & exc_361_B = sv_excAtPost_361_B#38
                & sv_heapAtPost_B#39 = heap)
         & !sv_b_15_B#34 = null)
  )
  \heuristics ( concrete )
};

Use_information_flow_contract_for_toLowerCase_2107268077 {
  \schemaVar \term Heap find_heap#41;
  \schemaVar \term java.lang.String find_s_1#38;
  \schemaVar \term java.lang.String find_result_321#39;
  \schemaVar \term java.lang.Throwable find_exc_363#40;
  \schemaVar \term Heap find_heapAfter_toLowerCase#42;
  \schemaVar \term Heap assumes_heap#46;
  \schemaVar \term java.lang.String assumes_s_1#43;
  \schemaVar \term java.lang.String assumes_result_321#44;
  \schemaVar \term java.lang.Throwable assumes_exc_363#45;
  \schemaVar \term Heap assumes_heapAfter_toLowerCase#47;
  
  \assumes ( RELATED_BY_toLowerCase_2107268077(assumes_s_1#43,
                                               assumes_heap#46,
                                               assumes_s_1#43,
                                               assumes_result_321#44,
                                               assumes_exc_363#45,
                                               assumes_heapAfter_toLowerCase#47)
            ⟹
             
  )
  \find (
    RELATED_BY_toLowerCase_2107268077(find_s_1#38,
                                      find_heap#41,
                                      find_s_1#38,
                                      find_result_321#39,
                                      find_exc_363#40,
                                      find_heapAfter_toLowerCase#42)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_toLowerCase_2107268077(find_s_1#38,
                                      find_heap#41,
                                      find_s_1#38,
                                      find_result_321#39,
                                      find_exc_363#40,
                                      find_heapAfter_toLowerCase#42)
  )
  \add (      java.lang.Object::<inv>(find_heap#41, find_s_1#38)<<impl>>
            & java.lang.Object::<inv>(assumes_heap#46, assumes_s_1#43)<<impl>>
         -> find_s_1#38 = assumes_s_1#43
         -> (find_result_321#39 = assumes_result_321#44)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};

Use_information_flow_contract_for_bytesToHexString_1724841292 {
  \schemaVar \term byte[] find__b_15#28;
  \schemaVar \term Heap find_heap#31;
  \schemaVar \term java.lang.String find_result_320#29;
  \schemaVar \term java.lang.Throwable find_exc_362#30;
  \schemaVar \term Heap find_heapAfter_bytesToHexString#32;
  \schemaVar \term byte[] assumes__b_15#33;
  \schemaVar \term Heap assumes_heap#36;
  \schemaVar \term java.lang.String assumes_result_320#34;
  \schemaVar \term java.lang.Throwable assumes_exc_362#35;
  \schemaVar \term Heap assumes_heapAfter_bytesToHexString#37;
  
  \assumes ( RELATED_BY_bytesToHexString_1724841292(assumes__b_15#33,
                                                    assumes_heap#36,
                                                    assumes_result_320#34,
                                                    assumes_exc_362#35,
                                                    assumes_heapAfter_bytesToHexString#37)
            ⟹
             
  )
  \find (
    RELATED_BY_bytesToHexString_1724841292(find__b_15#28,
                                           find_heap#31,
                                           find_result_320#29,
                                           find_exc_362#30,
                                           find_heapAfter_bytesToHexString#32)
  )
  \antecedentPolarity
  \replacewith (
    RELATED_BY_bytesToHexString_1724841292(find__b_15#28,
                                           find_heap#31,
                                           find_result_320#29,
                                           find_exc_362#30,
                                           find_heapAfter_bytesToHexString#32)
  )
  \add (      (!(find__b_15#28 = null)<<origin("requires @ file Utils.java @ line 19","[]")>>)<<impl,
                                                                                                origin("requires @ file Utils.java @ line 19","[]")>>
            & (!(assumes__b_15#33 = null)<<origin("requires @ file Utils.java @ line 19","[]")>>)<<impl,
                                                                                                   origin("requires @ file Utils.java @ line 19","[]")>>
         -> allFields(find__b_15#28) = allFields(assumes__b_15#33)
         -> (find_result_320#29 = assumes_result_320#34)<<postCondition>>
        ⟹
         
  )
  \heuristics ( information_flow_contract_appl )
};
}

\problem {
     {heap:=heapAtPre_A<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_A<<anonHeapFunction>>)
        & heap = heapAtPre_A<<anonHeapFunction>>
        & ((  b_15_A = null
            |   boolean::select(heapAtPre_A<<anonHeapFunction>>,
                                b_15_A,
                                java.lang.Object::<created>)
              = TRUE)<<SC>>)
        & (!(b_15_A = null)<<origin("requires @ file Utils.java @ line 76","[]")>>)<<impl,
                                                                                     origin("requires @ file Utils.java @ line 76","[]")>>
        & {_b_15_A:=b_15_A}
            \[{
                exc_361_A=null;try {
                  result_319_A=de.polyas.core3.open.crypto.basic.Utils.asHexString(_b_15_A)@de.polyas.core3.open.crypto.basic.Utils;
                }   catch (java.lang.Throwable e) {
                  exc_361_A=e;
                }
              }\] (  resultAtPost_319_A = result_319_A
                   & excAtPost_361_A = exc_361_A
                   & heapAtPost_A = heap))
   & {heap:=heapAtPre_B<<anonHeapFunction>>}
       (  wellFormed(heapAtPre_B<<anonHeapFunction>>)
        & heap = heapAtPre_B<<anonHeapFunction>>
        & ((  b_15_B = null
            |   boolean::select(heapAtPre_B<<anonHeapFunction>>,
                                b_15_B,
                                java.lang.Object::<created>)
              = TRUE)<<SC>>)
        & (!b_15_B = null)<<impl>>
        & {_b_15_B:=b_15_B}
            \[{
                exc_361_B=null;try {
                  result_319_B=de.polyas.core3.open.crypto.basic.Utils.asHexString(_b_15_B)@de.polyas.core3.open.crypto.basic.Utils;
                }   catch (java.lang.Throwable e) {
                  exc_361_B=e;
                }
              }\] (  resultAtPost_319_B = result_319_B
                   & excAtPost_361_B = exc_361_B
                   & heapAtPost_B = heap))
-> allFields(b_15_A) = allFields(b_15_B)
-> (resultAtPost_319_A = resultAtPost_319_B)<<postCondition>>

}

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "97")

(branch "dummy ID"
(rule "unfold_computed_formula_1_of_asHexString_1063021898" (formula "1") (term "0"))
(rule "impRight" (formula "1"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "2"))
 (builtin "One Step Simplification" (formula "3"))
 (builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "11"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "12"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "14"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "15"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "16"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "17"))
(rule "andLeft" (formula "2"))
(rule "Use_information_flow_contract_for_bytesToHexString_1724841292" (formula "20") (ifseqformula "5"))
(rule "doubleImpLeft" (formula "20"))
(branch "pre_A & pre_B bytesToHexString_1724841292 (information flow)"
   (rule "andRight" (formula "32"))
   (branch
      (rule "notRight" (formula "32"))
      (rule "close" (formula "38") (ifseqformula "1"))
   )
   (branch
      (rule "notRight" (formula "32"))
      (rule "close" (formula "37") (ifseqformula "1"))
   )
)
(branch "pre bytesToHexString_1724841292 (information flow)"
   (rule "eqSymm" (formula "14"))
   (rule "eqSymm" (formula "1"))
   (rule "close" (formula "32") (ifseqformula "1"))
)
(branch "post bytesToHexString_1724841292 (information flow)"
   (rule "Use_information_flow_contract_for_toLowerCase_2107268077" (formula "28") (ifseqformula "11"))
   (rule "eqSymm" (formula "14"))
   (rule "eqSymm" (formula "1"))
   (rule "eqSymm" (formula "32"))
   (rule "eqSymm" (formula "40"))
   (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "20"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "allFieldsEq" (formula "1"))
   (rule "applyEq" (formula "23") (term "1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "39") (term "0") (ifseqformula "1"))
   (rule "applyEq" (formula "21") (term "0") (ifseqformula "1"))
   (rule "applyEq" (formula "21") (term "2") (ifseqformula "20"))
   (rule "applyEq" (formula "5") (term "3") (ifseqformula "3"))
   (rule "applyEq" (formula "29") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "10") (term "1,0,1") (ifseqformula "13"))
   (rule "applyEq" (formula "21") (term "3") (ifseqformula "18"))
   (rule "applyEq" (formula "34") (term "0") (ifseqformula "13"))
   (rule "applyEq" (formula "11") (term "4") (ifseqformula "9"))
   (rule "applyEq" (formula "19") (term "1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "27") (term "1,0,0,0") (ifseqformula "31"))
   (rule "applyEq" (formula "10") (term "1,0,1,0") (ifseqformula "13"))
   (rule "applyEq" (formula "10") (term "1,0,0,0") (ifseqformula "13"))
   (rule "applyEq" (formula "35") (term "0") (ifseqformula "31"))
   (rule "applyEq" (formula "11") (term "3") (ifseqformula "13"))
   (rule "applyEq" (formula "27") (term "1,0,1") (ifseqformula "31"))
   (rule "applyEq" (formula "29") (term "2") (ifseqformula "20"))
   (rule "applyEq" (formula "19") (term "1,0,1") (ifseqformula "20"))
   (rule "applyEq" (formula "29") (term "3") (ifseqformula "31"))
   (rule "applyEq" (formula "27") (term "1,0,1,0") (ifseqformula "31"))
   (rule "applyEq" (formula "37") (term "0") (ifseqformula "20"))
   (rule "applyEq" (formula "29") (term "4") (ifseqformula "26"))
   (rule "applyEq" (formula "28") (term "1,0,0") (ifseqformula "20"))
   (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "31"))
   (rule "eqSymm" (formula "28") (term "1"))
   (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "13"))
   (rule "eqSymm" (formula "28") (term "1"))
   (rule "replace_known_right" (formula "28") (term "1") (ifseqformula "38"))
    (builtin "One Step Simplification" (formula "28"))
   (rule "notLeft" (formula "28"))
   (rule "commute_or" (formula "4"))
   (rule "commute_or" (formula "19"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "33") (term "1"))
    (builtin "One Step Simplification" (formula "33"))
   (rule "commute_or" (formula "10") (term "0"))
   (rule "Class_invariant_axiom_for_java_lang_String" (formula "33"))
   (rule "closeTrue" (formula "33"))
)
)
}
