\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 06 16:34:36 CET 2019
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=methodExpansion-methodExpansion\\:modularOnly , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L , permissions-permissions\\:off , integerSimplificationRules-integerSimplificationRules\\:full , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , bigint-bigint\\:on , modelFields-modelFields\\:treatAsAxiom , Strings-Strings\\:on , JavaCard-JavaCard\\:off , runtimeExceptions-runtimeExceptions\\:allow , programRules-programRules\\:Java , intRules-intRules\\:javaSemantics , initialisation-initialisation\\:disableStaticInitialisation , assertions-assertions\\:on
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../src";

\proofObligation "#Proof Obligation Settings
#Wed Nov 06 16:34:36 CET 2019
contract=de.polyas.core3.open.crypto.groups.ECGroup[de.polyas.core3.open.crypto.groups.ECGroup\\:\\:asBytes(org.bouncycastle.math.ec.ECPoint)].JML normal_behavior operation contract.0
name=de.polyas.core3.open.crypto.groups.ECGroup[de.polyas.core3.open.crypto.groups.ECGroup\\:\\:asBytes(org.bouncycastle.math.ec.ECPoint)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "flo" ) (keyVersion "57d504cc0f"))

(autoModeTime "452")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "p_3,self_85,result_102,exc_116,heapAtPre_0,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "4"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "6"))
(rule "true_left" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "6"))
(rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "6"))
(rule "true_left" (formula "6"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_asBytes,savedHeapBefore_asBytes"))
 (builtin "One Step Simplification" (formula "11"))
(rule "returnUnfold" (formula "11") (term "1") (inst "#v0=x_arr"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "x_arr"))
 (builtin "Use Operation Contract" (formula "11") (newnames "heapBefore_getEncoded,result_103,exc_117,heapAfter_getEncoded,anon_heap_getEncoded") (contract "org.bouncycastle.math.ec.ECPoint[org.bouncycastle.math.ec.ECPoint::getEncoded(boolean)].JML normal_behavior operation contract.0"))
(branch "Post (getEncoded)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "10"))
   (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "11"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "methodCallReturn" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "emptyModality" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "10")))
   (rule "eqSymm" (formula "16") (term "1,0,0,1"))
   (rule "Class_invariant_axiom_for_de_polyas_core3_open_crypto_groups_ECGroup" (formula "16") (term "0"))
   (rule "pullOutSelect" (formula "16") (term "1,0,1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_curve_0"))
   (rule "applyEq" (formula "17") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "17") (term "1,0,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "17") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_right" (formula "16") (term "0,0,0,0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "pullOutSelect" (formula "16") (term "1,1,1,0") (inst "selectSK=de_polyas_core3_open_crypto_groups_ECGroup_group_0"))
   (rule "applyEq" (formula "17") (term "0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")))
   (rule "applyEqReverse" (formula "17") (term "1,1,1,0") (ifseqformula "1"))
   (rule "applyEqReverse" (formula "17") (term "0,0,0,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_jce_spec_ECNamedCurveParameterSpec" (formula "16") (term "1,0"))
   (rule "pullOutSelect" (formula "16") (term "1,1,1,0") (inst "selectSK=org_bouncycastle_jce_spec_ECParameterSpec_generator_0"))
   (rule "applyEq" (formula "17") (term "0,0,0,1,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "8"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_custom_sec_SecP256K1Curve" (formula "17") (term "0,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "17") (term "1,0"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heap"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_and" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "1") (term "0,0"))
   (rule "distr_forallAnd" (formula "1") (term "0"))
   (rule "distr_forallAnd" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "commute_or" (formula "2") (term "0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or" (formula "4") (term "0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon(heap,
     empty,
     anon_heap_getEncoded<<anonHeapFunction>>)"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "3") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "3") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "3") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "3") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "commute_or" (formula "2") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "commute_or" (formula "2") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0,0"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "commute_or" (formula "3") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "commute_or" (formula "2") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "3") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0,0"))
   (rule "distr_forallAnd" (formula "3") (term "0"))
   (rule "distr_forallAnd" (formula "3"))
   (rule "andLeft" (formula "3"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "1,0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "shift_paren_or" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "cnf_rightDist" (formula "2") (term "0,0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0,0"))
   (rule "distr_forallAnd" (formula "2") (term "0"))
   (rule "distr_forallAnd" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "commute_or_2" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "shift_paren_or" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "eqSymm" (formula "2") (term "1,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "1,0,0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,0,1,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "true_left" (formula "2"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=anon_heap_getEncoded<<anonHeapFunction>>"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "Class_axiom_0_in_de_polyas_core3_open_cred_CredTool" (inst "seq=seq") (inst "i=i") (inst "str=str") (inst "seq_0=seq_0") (inst "i_0=i_0") (inst "obj=obj") (inst "seq_1=seq_1") (inst "i_1=i_1") (inst "sv_heap=heapAfter_getEncoded"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1") (ifseqformula "16"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "1,0,0,0,0,0,1,0") (ifseqformula "16"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "castedGetAny" (formula "3") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,1,1,0,1,0,0"))
   (rule "castedGetAny" (formula "2") (term "0,1,1,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,1,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,0,0"))
   (rule "castedGetAny" (formula "1") (term "0,0,0,1,0,1,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
   (rule "true_left" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "0,0,0"))
   (rule "nnf_imp2or" (formula "1") (term "0,0,0"))
   (rule "nnf_notAnd" (formula "2") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "nnf_imp2or" (formula "1") (term "1,0,0,0"))
   (rule "nnf_notAnd" (formula "1") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "nnf_imp2or" (formula "2") (term "1,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "0,0,0,0,0"))
   (rule "nnf_notOr" (formula "2") (term "1,0,0,0,0,0"))
   (rule "nnf_notOr" (formula "1") (term "1,0,0,0,0,0"))
   (rule "commute_or" (formula "4") (term "1,0,0,0"))
   (rule "commute_or" (formula "3") (term "1,0,0,0"))
   (rule "shift_paren_and" (formula "5") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "commute_or" (formula "4") (term "0,0,0,0"))
   (rule "commute_or" (formula "3") (term "0,0,0,0"))
   (rule "commute_or_2" (formula "4") (term "0,0,0"))
   (rule "commute_or_2" (formula "3") (term "0,0,0"))
   (rule "ifthenelse_split" (formula "10") (term "0"))
   (branch "self_85.group.<created> = TRUE TRUE"
      (rule "applyEqReverse" (formula "27") (term "0,0,0") (ifseqformula "11"))
      (rule "hideAuxiliaryEq" (formula "11"))
      (rule "replace_known_right" (formula "26") (term "0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "allRight" (formula "26") (inst "sk=f_0"))
      (rule "allRight" (formula "26") (inst "sk=o_0"))
      (rule "orRight" (formula "26"))
      (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
      (rule "applyEqReverse" (formula "28") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "closeTrue" (formula "28"))
   )
   (branch "self_85.group.<created> = TRUE FALSE"
      (rule "referencedObjectIsCreatedRight" (formula "20") (ifseqformula "23"))
      (rule "close" (formula "20") (ifseqformula "11"))
   )
)
(branch "Exceptional Post (getEncoded)"
    (builtin "One Step Simplification" (formula "13"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "notLeft" (formula "8"))
   (rule "close" (formula "11") (ifseqformula "10"))
)
(branch "Pre (getEncoded)"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
   (rule "Class_invariant_axiom_for_org_bouncycastle_math_ec_ECPoint" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
(branch "Null reference (_p_3 = null)"
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")))
   (rule "closeTrue" (formula "11"))
)
)
}
